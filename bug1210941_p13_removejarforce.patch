# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  000b4958bc9947b7f62208da1cea6e55378cc5dd
Bug 1210941 P13 Remove ForceNoIntercept from jar channel. r=jduell

diff --git a/modules/libjar/nsIJARChannel.idl b/modules/libjar/nsIJARChannel.idl
--- a/modules/libjar/nsIJARChannel.idl
+++ b/modules/libjar/nsIJARChannel.idl
@@ -3,17 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsIChannel.idl"
 
 interface nsIFile;
 interface nsIZipEntry;
 
-[scriptable, builtinclass, uuid(1adea16e-aa6c-4201-8f71-e9ff0acfb52e)]
+[scriptable, builtinclass, uuid(e72b179b-d5df-4d87-b5de-fd73a65c60f6)]
 interface nsIJARChannel : nsIChannel
 {
     /**
      * Returns TRUE if the JAR file is not safe (if the content type reported
      * by the server for a remote JAR is not of an expected type).  Scripting,
      * redirects, and plugins should be disabled when loading from this
      * channel.
      */
@@ -29,15 +29,9 @@ interface nsIJARChannel : nsIChannel
      */
     readonly attribute nsIFile jarFile;
 
     /**
      * Returns the zip entry if the file is synchronously accessible.
      * This will work even without opening the channel.
      */
     readonly attribute nsIZipEntry zipEntry;
-
-    /**
-     * Force the channel to skip any chack for possible interception and
-     * proceed immediately to the network.
-     */
-    void forceNoIntercept();
 };
diff --git a/modules/libjar/nsJARChannel.cpp b/modules/libjar/nsJARChannel.cpp
--- a/modules/libjar/nsJARChannel.cpp
+++ b/modules/libjar/nsJARChannel.cpp
@@ -1121,23 +1121,16 @@ nsJARChannel::GetZipEntry(nsIZipEntry **
     nsCOMPtr<nsIZipReader> reader;
     rv = gJarHandler->JarCache()->GetZip(mJarFile, getter_AddRefs(reader));
     if (NS_FAILED(rv))
         return rv;
 
     return reader->GetEntry(mJarEntry, aZipEntry);
 }
 
-NS_IMETHODIMP
-nsJARChannel::ForceNoIntercept()
-{
-    mLoadFlags |= LOAD_BYPASS_SERVICE_WORKER;
-    return NS_OK;
-}
-
 //-----------------------------------------------------------------------------
 // mozilla::net::MemoryDownloader::IObserver
 //-----------------------------------------------------------------------------
 
 void
 nsJARChannel::OnDownloadComplete(MemoryDownloader* aDownloader,
                                  nsIRequest    *request,
                                  nsISupports   *context,
diff --git a/netwerk/protocol/app/AppProtocolHandler.cpp b/netwerk/protocol/app/AppProtocolHandler.cpp
--- a/netwerk/protocol/app/AppProtocolHandler.cpp
+++ b/netwerk/protocol/app/AppProtocolHandler.cpp
@@ -311,21 +311,16 @@ NS_IMETHODIMP DummyChannel::SetContentDi
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP DummyChannel::GetContentDispositionHeader(nsACString&)
 {
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
-NS_IMETHODIMP DummyChannel::ForceNoIntercept()
-{
-  return NS_OK;
-}
-
 /**
   * app:// protocol implementation.
   */
 
 AppProtocolHandler::AppProtocolHandler() {
 }
 
 AppProtocolHandler::~AppProtocolHandler() {
