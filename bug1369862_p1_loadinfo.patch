# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  87c745019518b1d6cd782534f2553721e5735657
Bug 1368962 P1 Expose a SynthesizeServiceWorkerTainting() on nsILoadInfo. r=ckerschb

diff --git a/netwerk/base/LoadInfo.cpp b/netwerk/base/LoadInfo.cpp
--- a/netwerk/base/LoadInfo.cpp
+++ b/netwerk/base/LoadInfo.cpp
@@ -948,16 +948,24 @@ LoadInfo::MaybeIncreaseTainting(uint32_t
   LoadTainting tainting = static_cast<LoadTainting>(aTainting);
   if (tainting > mTainting) {
     mTainting = tainting;
   }
   return NS_OK;
 }
 
 NS_IMETHODIMP
+LoadInfo::SynthesizeServiceWorkerTainting(uint32_t aTainting)
+{
+  NS_ENSURE_ARG(aTainting <= TAINTING_OPAQUE);
+  mTainting = static_cast<LoadTainting>(aTainting);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 LoadInfo::GetIsTopLevelLoad(bool *aResult)
 {
   *aResult = mFrameOuterWindowID ? mFrameOuterWindowID == mOuterWindowID
                                  : mParentOuterWindowID == mOuterWindowID;
   return NS_OK;
 }
 
 } // namespace net
diff --git a/netwerk/base/nsILoadInfo.idl b/netwerk/base/nsILoadInfo.idl
--- a/netwerk/base/nsILoadInfo.idl
+++ b/netwerk/base/nsILoadInfo.idl
@@ -706,16 +706,25 @@ interface nsILoadInfo : nsISupports
    * Note a new tainting level and possibly increase the current tainting
    * to match.  If the tainting level is already greater than the given
    * value, then there is no effect.  It is not possible to reduce the tainting
    * level on an existing channel/loadinfo.
    */
   void maybeIncreaseTainting(in unsigned long aTainting);
 
   /**
+   * The service worker and fetch specifications require returning the
+   * exact tainting level of the Response passed to FetchEvent.respondWith().
+   * This method allows us to override the tainting level in that case.  This
+   * should probably not be used anywhere else.  Use MaybeIncreaseTainting()
+   * instead.
+   */
+  void synthesizeServiceWorkerTainting(in unsigned long aTainting);
+
+  /**
    * Various helper code to provide more convenient C++ access to the tainting
    * attribute and maybeIncreaseTainting().
    */
 %{C++
   static_assert(TAINTING_BASIC == static_cast<uint32_t>(mozilla::LoadTainting::Basic),
                 "basic tainting enums should match");
   static_assert(TAINTING_CORS == static_cast<uint32_t>(mozilla::LoadTainting::CORS),
                 "cors tainting enums should match");
@@ -729,16 +738,22 @@ interface nsILoadInfo : nsISupports
     return static_cast<mozilla::LoadTainting>(tainting);
   }
 
   void MaybeIncreaseTainting(mozilla::LoadTainting aTainting)
   {
     uint32_t tainting = static_cast<uint32_t>(aTainting);
     MOZ_ALWAYS_SUCCEEDS(MaybeIncreaseTainting(tainting));
   }
+
+  void SynthesizeServiceWorkerTainting(mozilla::LoadTainting aTainting)
+  {
+    uint32_t tainting = static_cast<uint32_t>(aTainting);
+    MOZ_ALWAYS_SUCCEEDS(SynthesizeServiceWorkerTainting(tainting));
+  }
 %}
 
   /**
    * Returns true if this load is for top level document.
    * Note that the load for a sub-frame's document will return false here.
    */
   [infallible] readonly attribute boolean isTopLevelLoad;
 
