# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  8761e0da9113211b8fca76b99335acdd331c151e

diff --git a/devtools/client/projecteditor/lib/stores/local.js b/devtools/client/projecteditor/lib/stores/local.js
--- a/devtools/client/projecteditor/lib/stores/local.js
+++ b/devtools/client/projecteditor/lib/stores/local.js
@@ -164,16 +164,17 @@ var LocalStore = Class({
             childInfo = evt.data[childPath];
             newChildren.add(this._forPath(childPath, childInfo));
           }
           resource.setChildren(newChildren);
         }
         resource.info.children = null;
       }
 
+      //TODO worker.terminate();
       worker = null;
       this._refreshDeferred.resolve();
       this._refreshDeferred = null;
     };
     worker.onerror = ex => {
       console.error(ex);
       worker = null;
       this._refreshDeferred.reject(ex);
diff --git a/dom/clients/manager/ClientManager.cpp b/dom/clients/manager/ClientManager.cpp
--- a/dom/clients/manager/ClientManager.cpp
+++ b/dom/clients/manager/ClientManager.cpp
@@ -238,18 +238,22 @@ ClientManager::PBackgroundActorCreated(P
   MOZ_ASSERT(aActor);
 
   if (IsShutdown()) {
     return;
   }
 
   RefPtr<WorkerHolderToken> workerHolderToken;
   if (!NS_IsMainThread()) {
+    WorkerPrivate* workerPrivate = GetCurrentThreadWorkerPrivate();
+    MOZ_DIAGNOSTIC_ASSERT(workerPrivate);
+
     workerHolderToken =
-      WorkerHolderToken::Create(GetCurrentThreadWorkerPrivate(), Closing);
+      WorkerHolderToken::Create(workerPrivate, Closing,
+                                WorkerHolderToken::AllowIdleShutdownStart);
     if (NS_WARN_IF(!workerHolderToken)) {
       Shutdown();
       return;
     }
   }
 
   ClientManagerChild* actor = new ClientManagerChild(workerHolderToken);
   PClientManagerChild *sentActor = aActor->SendPClientManagerConstructor(actor);
diff --git a/dom/workers/WorkerHolderToken.cpp b/dom/workers/WorkerHolderToken.cpp
--- a/dom/workers/WorkerHolderToken.cpp
+++ b/dom/workers/WorkerHolderToken.cpp
@@ -7,22 +7,23 @@
 #include "WorkerHolderToken.h"
 
 #include "WorkerPrivate.h"
 
 BEGIN_WORKERS_NAMESPACE
 
 // static
 already_AddRefed<WorkerHolderToken>
-WorkerHolderToken::Create(WorkerPrivate* aWorkerPrivate, Status aShutdownStatus)
+WorkerHolderToken::Create(WorkerPrivate* aWorkerPrivate, Status aShutdownStatus,
+                          Behavior aBehavior)
 {
   MOZ_ASSERT(aWorkerPrivate);
 
   RefPtr<WorkerHolderToken> workerHolder =
-    new WorkerHolderToken(aShutdownStatus);
+    new WorkerHolderToken(aShutdownStatus, aBehavior);
 
   if (NS_WARN_IF(!workerHolder->HoldWorker(aWorkerPrivate, aShutdownStatus))) {
     return nullptr;
   }
 
   return workerHolder.forget();
 }
 
@@ -64,18 +65,20 @@ WorkerHolderToken::IsShuttingDown() cons
 
 WorkerPrivate*
 WorkerHolderToken::GetWorkerPrivate() const
 {
   NS_ASSERT_OWNINGTHREAD(WorkerHolderToken);
   return mWorkerPrivate;
 }
 
-WorkerHolderToken::WorkerHolderToken(Status aShutdownStatus)
-  : mShutdownStatus(aShutdownStatus)
+WorkerHolderToken::WorkerHolderToken(Status aShutdownStatus,
+                                     Behavior aBehavior)
+  : WorkerHolder(aBehavior)
+  , mShutdownStatus(aShutdownStatus)
   , mShuttingDown(false)
 {
 }
 
 WorkerHolderToken::~WorkerHolderToken()
 {
   NS_ASSERT_OWNINGTHREAD(WorkerHolderToken);
   MOZ_ASSERT(mListenerList.IsEmpty());
diff --git a/dom/workers/WorkerHolderToken.h b/dom/workers/WorkerHolderToken.h
--- a/dom/workers/WorkerHolderToken.h
+++ b/dom/workers/WorkerHolderToken.h
@@ -21,32 +21,33 @@ public:
   class Listener
   {
   public:
     virtual void
     WorkerShuttingDown() = 0;
   };
 
   static already_AddRefed<WorkerHolderToken>
-  Create(workers::WorkerPrivate* aWorkerPrivate, Status aShutdownStatus);
+  Create(workers::WorkerPrivate* aWorkerPrivate, Status aShutdownStatus,
+         Behavior aBehavior = PreventIdleShutdownStart);
 
   void
   AddListener(Listener* aListener);
 
   void
   RemoveListener(Listener* aListener);
 
   bool
   IsShuttingDown() const;
 
   WorkerPrivate*
   GetWorkerPrivate() const;
 
 private:
-  explicit WorkerHolderToken(Status aShutdownStatus);
+  WorkerHolderToken(Status aShutdownStatus, Behavior aBehavior);
 
   ~WorkerHolderToken();
 
   // WorkerHolder methods
   virtual bool
   Notify(workers::Status aStatus) override;
 
   nsTArray<Listener*> mListenerList;
