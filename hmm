# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  590831ab7911cc31827aa2eb6b8304e47ea25253

diff --git a/dom/clients/api/Clients.cpp b/dom/clients/api/Clients.cpp
--- a/dom/clients/api/Clients.cpp
+++ b/dom/clients/api/Clients.cpp
@@ -7,23 +7,26 @@
 #include "Clients.h"
 
 #include "mozilla/dom/ClientIPCTypes.h"
 #include "mozilla/dom/ClientManager.h"
 #include "mozilla/dom/ClientsBinding.h"
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/ServiceWorkerDescriptor.h"
 #include "mozilla/dom/WorkerPrivate.h"
+#include "mozilla/dom/workers/bindings/WorkerHolderToken.h"
 #include "nsIGlobalObject.h"
 #include "nsString.h"
 
 namespace mozilla {
 namespace dom {
 
+using mozilla::dom::workers::Closing;
 using mozilla::dom::workers::GetCurrentThreadWorkerPrivate;
+using mozilla::dom::workers::WorkerHolderToken;
 using mozilla::dom::workers::WorkerPrivate;
 using mozilla::ipc::PrincipalInfo;
 
 NS_IMPL_CYCLE_COLLECTING_ADDREF(Clients);
 NS_IMPL_CYCLE_COLLECTING_RELEASE(Clients);
 NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Clients, mGlobal);
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Clients)
@@ -173,34 +176,41 @@ Clients::MatchAll(const ClientQueryOptio
 
   ClientEndPoint endpoint;
   nsresult rv = GetEndPoint(endpoint);
   if (NS_FAILED(rv)) {
     aRv.Throw(rv);
     return outerPromise.forget();
   }
 
+  RefPtr<WorkerHolderToken> token = WorkerHolderToken::Create(GetCurrentThreadWorkerPrivate(),
+                                                              Closing);
+
   nsCOMPtr<nsIGlobalObject> global = mGlobal;
 
   // We don't expose this reserved clients yet
   const bool includeReserved = false;
   ClientMatchAllArgs args(endpoint, aOptions.mType,
                           aOptions.mIncludeUncontrolled,
                           includeReserved);
   RefPtr<ClientOpPromise> innerPromise = ClientManager::MatchAll(args);
   innerPromise->Then(AbstractThread::GetCurrent(), __func__,
-    [outerPromise, global] (const ClientOpResult& aResult) {
+    [outerPromise, global, token] (const ClientOpResult& aResult) {
       nsTArray<RefPtr<Client>> clientList;
       for (const ClientInfoAndState& value : aResult.get_ClientList().values()) {
         clientList.AppendElement(new Client(global, value));
       }
       clientList.Sort(MatchAllComparator());
-      outerPromise->MaybeResolve(clientList);
-    }, [outerPromise] (nsresult aResult) {
-      outerPromise->MaybeReject(aResult);
+      if (token && !token->IsShuttingDown()) {
+        outerPromise->MaybeResolve(clientList);
+      }
+    }, [outerPromise, token] (nsresult aResult) {
+      if (token && !token->IsShuttingDown()) {
+        outerPromise->MaybeReject(aResult);
+      }
     });
 
   return outerPromise.forget();
 }
 
 already_AddRefed<Promise>
 Clients::OpenWindow(const nsAString& aURL, ErrorResult& aRv)
 {
