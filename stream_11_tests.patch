# HG changeset patch
# User Andrea Marchesini <amarchesini@mozilla.com>
# Parent  edd46038f186eba2021b8d2c9b684bfc8ec86e5e

diff --git a/dom/tests/mochitest/fetch/common_readableStreams.js b/dom/tests/mochitest/fetch/common_readableStreams.js
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/fetch/common_readableStreams.js
@@ -0,0 +1,106 @@
+function test_nativeStream() {
+  info("test_nativeStream");
+
+  fetch('/').then(r => {
+    ok(r.body instanceof ReadableStream, "We have a ReadableStream");
+
+    let a = r.clone();
+    ok(a.body instanceof ReadableStream, "We have a ReadableStream");
+
+    let b = a.clone();
+    ok(b.body instanceof ReadableStream, "We have a ReadableStream");
+
+    r.blob().then(b => {
+      ok(b instanceof Blob, "We have a blob");
+      return a.body.getReader().read();
+    }).then(d => {
+      ok(!d.done, "We have read something!");
+      return b.blob();
+    }).then(b => {
+      ok(b instanceof Blob, "We have a blob");
+    }).then(next);
+  });
+}
+
+function test_nonNativeStream() {
+  info("test_nonNativeStream");
+
+  let r = new Response(new ReadableStream({start : controller => {
+    controller.enqueue(new Uint8Array([0x01, 0x00, 0x01]));
+    controller.close();
+  }}));
+
+  ok(r.body instanceof ReadableStream, "We have a ReadableStream");
+
+  let a = r.clone();
+  ok(a.body instanceof ReadableStream, "We have a ReadableStream");
+
+  let b = a.clone();
+  ok(b.body instanceof ReadableStream, "We have a ReadableStream");
+
+  r.blob().then(b => {
+    ok(b instanceof Blob, "We have a blob");
+    return a.body.getReader().read();
+  }).then(d => {
+    ok(!d.done, "We have read something!");
+    return b.blob();
+  }).then(b => {
+    ok(b instanceof Blob, "We have a blob");
+  }).then(next);
+}
+
+function test_noUint8Array() {
+  info("test_noUint8Array");
+
+  let r = new Response(new ReadableStream({start : controller => {
+    controller.enqueue('hello world!');
+    controller.close();
+  }}));
+
+  ok(r.body instanceof ReadableStream, "We have a ReadableStream");
+
+  r.blob().then(b => {
+    ok(false, "We cannot have a blob here!");
+  }, () => {
+    ok(true, "We cannot have a blob here!");
+  }).then(next);
+}
+
+function test_pendingStream() {
+  var r = new Response(new ReadableStream({start : controller => {
+    controller.enqueue(new Uint8Array([0x01, 0x00, 0x01]));
+    // Let's keep this controler open.
+    self.ccc = controller;
+  }}));
+
+  r.body.getReader().read().then(d => {
+    ok(!d.done, "We have read something!");
+    close();
+    next();
+  });
+}
+
+function workify(func) {
+  info("Workifing " + func);
+
+  let worker = new Worker('worker_readableStreams.js');
+  worker.postMessage(func);
+  worker.onmessage = function(e) {
+    if (e.data.type == 'done') {
+      next();
+      return;
+    }
+
+    if (e.data.type == 'test') {
+      ok(e.data.test, e.data.message);
+      return;
+    }
+
+    if (e.data.type == 'info') {
+      info(e.data.message);
+      return;
+    }
+  }
+
+  return worker;
+}
diff --git a/dom/tests/mochitest/fetch/mochitest.ini b/dom/tests/mochitest/fetch/mochitest.ini
--- a/dom/tests/mochitest/fetch/mochitest.ini
+++ b/dom/tests/mochitest/fetch/mochitest.ini
@@ -21,16 +21,18 @@ support-files =
   reroute.js^headers^
   slow.sjs
   sw_reroute.js
   empty.js
   empty.js^headers^
   worker_temporaryFileBlob.js
   common_temporaryFileBlob.js
   worker_fetch_controller.js
+  common_readableStreams.js
+  worker_readableStreams.js
   !/dom/xhr/tests/file_XHR_binary1.bin
   !/dom/xhr/tests/file_XHR_binary1.bin^headers^
   !/dom/xhr/tests/file_XHR_binary2.bin
   !/dom/xhr/tests/file_XHR_pass1.xml
   !/dom/xhr/tests/file_XHR_pass2.txt
   !/dom/xhr/tests/file_XHR_pass3.txt
   !/dom/xhr/tests/file_XHR_pass3.txt^headers^
   !/dom/xhr/tests/responseIdentical.sjs
@@ -65,8 +67,9 @@ skip-if = asan # Bug 1325942
 [test_formdataparsing_sw_reroute.html]
 skip-if = asan # Bug 1325942
 [test_request.html]
 [test_request_context.html]
 [test_request_sw_reroute.html]
 [test_response.html]
 [test_response_sw_reroute.html]
 [test_temporaryFileBlob.html]
+[test_readableStreams.html]
diff --git a/dom/tests/mochitest/fetch/test_readableStreams.html b/dom/tests/mochitest/fetch/test_readableStreams.html
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/fetch/test_readableStreams.html
@@ -0,0 +1,42 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>Test for ReadableStreams and Fetch</title>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript" src="common_readableStreams.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+  <script type="application/javascript">
+
+let tests = [
+  test_nativeStream,
+  function() { workify('test_nativeStream'); },
+
+  test_nonNativeStream,
+  function() { workify('test_nonNativeStream'); },
+
+  function() { workify('test_pendingStream'); },
+
+  test_noUint8Array,
+  function() { workify('test_noUint8Array'); },
+];
+
+function next() {
+  if (!tests.length) {
+    SimpleTest.finish();
+    return;
+  }
+
+  let test = tests.shift();
+  test();
+}
+
+SimpleTest.waitForExplicitFinish();
+next();
+
+  </script>
+</body>
+</html>
+
diff --git a/dom/tests/mochitest/fetch/worker_readableStreams.js b/dom/tests/mochitest/fetch/worker_readableStreams.js
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/fetch/worker_readableStreams.js
@@ -0,0 +1,17 @@
+importScripts('common_readableStreams.js');
+
+function info(message) {
+  postMessage({type: 'info', message });
+}
+
+function ok(a, message) {
+  postMessage({type: 'test', test: !!a, message });
+}
+
+function next() {
+  postMessage({type: 'done'});
+}
+
+onmessage = function(e) {
+  self[e.data]();
+}
