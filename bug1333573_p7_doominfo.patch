# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  a90cf72397ea7150abd9484c83f0297c78c29fc6
Bug 1333573 P7 Release WorkerLoadInfo data on main thread if we fail nested worker creation. r=baku

diff --git a/dom/workers/WorkerPrivate.cpp b/dom/workers/WorkerPrivate.cpp
--- a/dom/workers/WorkerPrivate.cpp
+++ b/dom/workers/WorkerPrivate.cpp
@@ -4504,27 +4504,40 @@ WorkerPrivate::GetLoadInfo(JSContext* aC
     if (parentStatus > Running) {
       return NS_ERROR_FAILURE;
     }
 
     // Passing a pointer to our stack loadInfo is safe here because this
     // method uses a sync runnable to get the channel from the main thread.
     rv = ChannelFromScriptURLWorkerThread(aCx, aParent, aScriptURL,
                                           &loadInfo);
-    NS_ENSURE_SUCCESS(rv, rv);
+    if (NS_FAILED(rv)) {
+      nsTArray<nsCOMPtr<nsISupports>> doomed;
+      loadInfo.ForgetMainThreadObjects(doomed);
+      nsCOMPtr<nsILoadGroup> loadGroupToCancel;
+      RefPtr<MainThreadReleaseRunnable> runnable =
+        new MainThreadReleaseRunnable(doomed, loadGroupToCancel);
+      MOZ_ALWAYS_SUCCEEDS(aParent->DispatchToMainThread(runnable.forget()));
+      return rv;
+    }
 
     // Now that we've spun the loop there's no guarantee that our parent is
     // still alive.  We may have received control messages initiating shutdown.
     {
       MutexAutoLock lock(aParent->mMutex);
       parentStatus = aParent->mStatus;
     }
 
     if (parentStatus > Running) {
-      NS_ReleaseOnMainThread(loadInfo.mChannel.forget());
+      nsTArray<nsCOMPtr<nsISupports>> doomed;
+      loadInfo.ForgetMainThreadObjects(doomed);
+      nsCOMPtr<nsILoadGroup> loadGroupToCancel;
+      RefPtr<MainThreadReleaseRunnable> runnable =
+        new MainThreadReleaseRunnable(doomed, loadGroupToCancel);
+      MOZ_ALWAYS_SUCCEEDS(aParent->DispatchToMainThread(runnable.forget()));
       return NS_ERROR_FAILURE;
     }
 
     loadInfo.mDomain = aParent->Domain();
     loadInfo.mFromWindow = aParent->IsFromWindow();
     loadInfo.mWindowID = aParent->WindowID();
     loadInfo.mStorageAllowed = aParent->IsStorageAllowed();
     loadInfo.mOriginAttributes = aParent->GetOriginAttributes();
