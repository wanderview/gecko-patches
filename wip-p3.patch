# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  54f4eb1ffe105fece3ca158ff86312f3a320d382
Make WorkerRunnable's destined for main thread use the MainThreadTaskQueue.

diff --git a/dom/workers/WorkerRunnable.cpp b/dom/workers/WorkerRunnable.cpp
--- a/dom/workers/WorkerRunnable.cpp
+++ b/dom/workers/WorkerRunnable.cpp
@@ -10,16 +10,17 @@
 #include "nsIEventTarget.h"
 #include "nsIGlobalObject.h"
 #include "nsIRunnable.h"
 #include "nsThreadUtils.h"
 
 #include "mozilla/DebugOnly.h"
 #include "mozilla/ErrorResult.h"
 #include "mozilla/dom/ScriptSettings.h"
+#include "mozilla/TaskQueue.h"
 #include "mozilla/Telemetry.h"
 
 #include "js/RootingAPI.h"
 #include "js/Value.h"
 
 #include "WorkerPrivate.h"
 #include "WorkerScope.h"
 
@@ -113,20 +114,21 @@ WorkerRunnable::DispatchInternal()
   }
 
   MOZ_ASSERT(mBehavior == ParentThreadUnchangedBusyCount);
 
   if (WorkerPrivate* parent = mWorkerPrivate->GetParent()) {
     return NS_SUCCEEDED(parent->Dispatch(runnable.forget()));
   }
 
-  nsCOMPtr<nsIThread> mainThread = do_GetMainThread();
+  RefPtr<TaskQueue> mainThread = mWorkerPrivate->MainThreadTaskQueue();
   MOZ_ASSERT(mainThread);
 
-  return NS_SUCCEEDED(mainThread->Dispatch(runnable.forget(), NS_DISPATCH_NORMAL));
+  mainThread->Dispatch(runnable.forget());
+  return true;
 }
 
 void
 WorkerRunnable::PostDispatch(WorkerPrivate* aWorkerPrivate,
                              bool aDispatchResult)
 {
   MOZ_ASSERT(aWorkerPrivate);
 
@@ -580,20 +582,18 @@ WorkerMainThreadRunnable::Dispatch(Error
 
   TimeStamp startTime = TimeStamp::NowLoRes();
 
   AutoSyncLoopHolder syncLoop(mWorkerPrivate);
 
   mSyncLoopTarget = syncLoop.EventTarget();
   RefPtr<WorkerMainThreadRunnable> runnable(this);
 
-  DebugOnly<nsresult> rv =
-    NS_DispatchToMainThread(runnable.forget(), NS_DISPATCH_NORMAL);
-  MOZ_ASSERT(NS_SUCCEEDED(rv),
-             "Should only fail after xpcom-shutdown-threads and we're gone by then");
+  nsCOMPtr<nsIRunnable> r = this;
+  mWorkerPrivate->MainThreadTaskQueue()->Dispatch(r.forget());
 
   if (!syncLoop.Run()) {
     aRv.ThrowUncatchableException();
   }
 
   // Telemetry is apparently not threadsafe
   // Telemetry::Accumulate(Telemetry::SYNC_WORKER_OPERATION, mTelemetryKey,
   //                       static_cast<uint32_t>((TimeStamp::NowLoRes() - startTime)
@@ -677,21 +677,18 @@ WorkerProxyToMainThreadRunnable::Dispatc
 {
   mWorkerPrivate->AssertIsOnWorkerThread();
 
   if (NS_WARN_IF(!HoldWorker())) {
     RunBackOnWorkerThread();
     return false;
   }
 
-  if (NS_WARN_IF(NS_FAILED(NS_DispatchToMainThread(this)))) {
-    ReleaseWorker();
-    RunBackOnWorkerThread();
-    return false;
-  }
+  nsCOMPtr<nsIRunnable> r = this;
+  mWorkerPrivate->MainThreadTaskQueue()->Dispatch(r.forget());
 
   return true;
 }
 
 NS_IMETHODIMP
 WorkerProxyToMainThreadRunnable::Run()
 {
   AssertIsOnMainThread();
