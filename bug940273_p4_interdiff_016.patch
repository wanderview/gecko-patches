# HG changeset patch
# Parent 837cd7507bf985d592175a4c7aef974ccafd5885
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 016 Use nsTArray::IsEmpty() where possible.


diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -50,17 +50,17 @@ CacheStorageParent::~CacheStorageParent(
   MOZ_COUNT_DTOR(cache::CacheStorageParent);
   MOZ_ASSERT(!mManager);
 }
 
 void
 CacheStorageParent::ActorDestroy(ActorDestroyReason aReason)
 {
   if (mManager) {
-    MOZ_ASSERT(mActiveRequests.Length() > 0);
+    MOZ_ASSERT(!mActiveRequests.IsEmpty());
     mManager->RemoveListener(this);
     mManager = nullptr;
   }
 }
 
 bool
 CacheStorageParent::RecvMatch(const RequestId& aRequestId,
                               const PCacheRequest& aRequest,
@@ -303,39 +303,39 @@ CacheStorageParent::FailPendingRequests(
   mPendingRequests.Clear();
 }
 
 cache::Manager*
 CacheStorageParent::RequestManager(RequestId aRequestId)
 {
   MOZ_ASSERT(!mActiveRequests.Contains(aRequestId));
   if (!mManager) {
-    MOZ_ASSERT(mActiveRequests.Length() < 1);
+    MOZ_ASSERT(mActiveRequests.IsEmpty());
     mManager = Manager::GetOrCreate(mManagerId);
     MOZ_ASSERT(mManager);
   }
   mActiveRequests.AppendElement(aRequestId);
   return mManager;
 }
 
 void
 CacheStorageParent::ReleaseManager(RequestId aRequestId)
 {
   // Note that if the child process dies we also clean up the mManager in
   // ActorDestroy().  There is no race with this method, however, because
   // ActorDestroy removes this object from the Manager's listener list.
   // Therefore ReleaseManager() should never be called after ActorDestroy()
   // runs.
   MOZ_ASSERT(mManager);
-  MOZ_ASSERT(mActiveRequests.Length() > 0);
+  MOZ_ASSERT(!mActiveRequests.IsEmpty());
 
   DebugOnly<bool> removed = mActiveRequests.RemoveElement(aRequestId);
   MOZ_ASSERT(removed);
 
-  if (mActiveRequests.Length() < 1) {
+  if (mActiveRequests.IsEmpty()) {
     mManager->RemoveListener(this);
     mManager = nullptr;
   }
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -251,17 +251,17 @@ DBSchema::CacheMatch(mozIStorageConnecti
   MOZ_ASSERT(aConn);
   MOZ_ASSERT(aFoundResponseOut);
   MOZ_ASSERT(aSavedResponseOut);
 
   nsAutoTArray<EntryId, 1> matches;
   nsresult rv = QueryCache(aConn, aCacheId, aRequest, aParams, matches, 1);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  if (matches.Length() < 1) {
+  if (matches.IsEmpty()) {
     *aFoundResponseOut = false;
     return rv;
   }
 
   rv = ReadResponse(aConn, matches[0], aSavedResponseOut);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   aSavedResponseOut->mCacheId = aCacheId;
@@ -336,17 +336,17 @@ DBSchema::CacheDelete(mozIStorageConnect
 {
   MOZ_ASSERT(aConn);
   MOZ_ASSERT(aSuccessOut);
 
   nsAutoTArray<EntryId, 256> matches;
   nsresult rv = QueryCache(aConn, aCacheId, aRequest, aParams, matches);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  if (matches.Length() < 1) {
+  if (matches.IsEmpty()) {
     *aSuccessOut = false;
     return rv;
   }
 
   rv = DeleteEntries(aConn, matches, aDeletedBodyIdListOut);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   *aSuccessOut = true;
@@ -709,17 +709,17 @@ DBSchema::MatchByVaryHeader(mozIStorageC
   while(NS_SUCCEEDED(state->ExecuteStep(&hasMoreData)) && hasMoreData) {
     nsCString* value = varyValues.AppendElement();
     rv = state->GetUTF8String(0, *value);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   // Should not have called this function if this was not the case
-  MOZ_ASSERT(varyValues.Length() > 0);
+  MOZ_ASSERT(!varyValues.IsEmpty());
 
   state->Reset();
   rv = aConn->CreateStatement(NS_LITERAL_CSTRING(
     "SELECT name, value FROM request_headers "
     "WHERE entry_id=?1;"
   ), getter_AddRefs(state));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
@@ -775,17 +775,17 @@ DBSchema::MatchByVaryHeader(mozIStorageC
 nsresult
 DBSchema::DeleteEntries(mozIStorageConnection* aConn,
                         const nsTArray<EntryId>& aEntryIdList,
                         nsTArray<nsID>& aDeletedBodyIdListOut,
                         uint32_t aPos, int32_t aLen)
 {
   MOZ_ASSERT(aConn);
 
-  if (aEntryIdList.Length() < 1) {
+  if (aEntryIdList.IsEmpty()) {
     return NS_OK;
   }
 
   MOZ_ASSERT(aPos < aEntryIdList.Length());
 
   if (aLen < 0) {
     aLen = aEntryIdList.Length() - aPos;
   }
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -121,17 +121,17 @@ public:
   {
     mozilla::ipc::AssertIsOnBackgroundThread();
     MOZ_ASSERT(aManager);
 
     for (uint32_t i = 0; i < mManagerList.Length(); ++i) {
       if (mManagerList[i] == aManager) {
         mManagerList.RemoveElementAt(i);
 
-        if (mManagerList.Length() < 1) {
+        if (mManagerList.IsEmpty()) {
           delete sFactory;
           sFactory = nullptr;
         }
         return;
       }
     }
   }
 };
