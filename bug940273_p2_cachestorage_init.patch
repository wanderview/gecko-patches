# HG changeset patch
# Parent 3f7823c33e90a436cbfea495fa58e5ea42bc2888
# User Ben Kelly <ben@wanderview.com>
Bug 940273 Part 2: CacheStorage webidl and stubs

diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -170,16 +170,22 @@ DOMInterfaces = {
 },
 
 'Cache': {
     'headerFile': 'mozilla/dom/Cache.h',
     'nativeType': 'mozilla::dom::Cache',
     'workers': True,
 },
 
+'CacheStorage': {
+    'headerFile': 'mozilla/dom/CacheStorage.h',
+    'nativeType': 'mozilla::dom::CacheStorage',
+    'workers': True,
+},
+
 'CameraCapabilities': {
     'nativeType': 'mozilla::dom::CameraCapabilities',
     'headerFile': 'DOMCameraCapabilities.h'
 },
 
 'CameraControl': {
     'nativeType': 'mozilla::nsDOMCameraControl',
     'headerFile': 'DOMCameraControl.h',
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/CacheStorage.cpp
@@ -0,0 +1,125 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "CacheStorage.h"
+
+namespace mozilla {
+namespace dom {
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(CacheStorage);
+NS_IMPL_CYCLE_COLLECTING_RELEASE(CacheStorage);
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(CacheStorage)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(CacheStorage)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+/* static */
+already_AddRefed<CacheStorage>
+CacheStorage::Constructor(const GlobalObject& aGlobal,
+                          const Sequence<JS::Value>& aIterable,
+                          ErrorResult& rv)
+{
+  nsRefPtr<CacheStorage> storage = new CacheStorage(aGlobal.GetAsSupports());
+  // FIXME - initialize with aIterable
+  return storage.forget();
+}
+
+already_AddRefed<Promise>
+CacheStorage::Match(const nsAString& aUrl,
+                    const Optional<nsAString>& aCacheName)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Get(const nsAString& aKey)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Has(const nsAString& aKey)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Set(const nsAString& aKey, Cache& aCache)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Clear()
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Delete(const nsAString& aKey)
+{
+  MOZ_CRASH("not implemented");
+}
+
+void
+CacheStorage::ForEach(JSContext* aContext,
+                      CacheStorageIterationCallback& aCallback,
+                      const Optional<JS::Handle<JSObject*>>& aThisArg)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Entries()
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Keys()
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Values()
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Size()
+{
+  MOZ_CRASH("not implemented");
+}
+
+nsISupports*
+CacheStorage::GetParentObject() const
+{
+  return mOwner;
+}
+
+JSObject*
+CacheStorage::WrapObject(JSContext* aContext)
+{
+  MOZ_CRASH("not implemented");
+}
+
+CacheStorage::CacheStorage(nsISupports* aOwner)
+: mOwner(aOwner)
+{
+  MOZ_ASSERT(mOwner);
+  SetIsDOMBinding();
+}
+
+CacheStorage::~CacheStorage()
+{
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/CacheStorage.h
@@ -0,0 +1,60 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_CacheStorage_h
+#define mozilla_dom_CacheStorage_h
+
+#include "mozilla/dom/CacheStorageBinding.h"
+#include "nsISupportsImpl.h"
+#include "nsWrapperCache.h"
+
+namespace mozilla {
+namespace dom {
+
+class Promise;
+
+class CacheStorage MOZ_FINAL : public nsISupports
+                             , public nsWrapperCache
+{
+public:
+  // webidl interface methods
+
+  static already_AddRefed<CacheStorage>
+  Constructor(const GlobalObject& aGlobal, const Sequence<JS::Value>& aIterable,
+              ErrorResult& rv);
+
+  already_AddRefed<Promise> Match(const nsAString& aUrl,
+                                  const Optional<nsAString>& aCacheName);
+  already_AddRefed<Promise> Get(const nsAString& aKey);
+  already_AddRefed<Promise> Has(const nsAString& aKey);
+  already_AddRefed<Promise> Set(const nsAString& aKey, Cache& aCache);
+  already_AddRefed<Promise> Clear();
+  already_AddRefed<Promise> Delete(const nsAString& aKey);
+  void ForEach(JSContext* aContext, CacheStorageIterationCallback& aCallback,
+               const Optional<JS::Handle<JSObject*>>& aThisArg);
+  already_AddRefed<Promise> Entries();
+  already_AddRefed<Promise> Keys();
+  already_AddRefed<Promise> Values();
+  already_AddRefed<Promise> Size();
+
+  // binding methods
+  virtual nsISupports* GetParentObject() const MOZ_OVERRIDE;
+  virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
+
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(CacheStorage)
+
+private:
+  CacheStorage(nsISupports* aOwner);
+  virtual ~CacheStorage();
+
+  nsISupports* mOwner;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_CacheStorage_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -1,17 +1,19 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXPORTS.mozilla.dom += [
     'Cache.h',
+    'CacheStorage.h',
 ]
 
 UNIFIED_SOURCES += [
     'Cache.cpp',
+    'CacheStorage.cpp',
 ]
 
 FAIL_ON_WARNINGS = True
 
 FINAL_LIBRARY = 'gklayout'
diff --git a/dom/webidl/CacheStorage.webidl b/dom/webidl/CacheStorage.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/CacheStorage.webidl
@@ -0,0 +1,33 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html
+ *
+ */
+
+[Constructor(sequence<any> iterable),
+ Pref="dom.serviceWorkers.enabled"]
+interface CacheStorage {
+   Promise match(DOMString url, optional DOMString cacheName);
+   // Promise<Cache>
+   Promise get(DOMString key);
+   // Promise<boolean>
+   Promise has(DOMString key);
+   Promise set(DOMString key, Cache val);
+   Promise clear();
+   Promise delete(DOMString key);
+   void forEach(CacheStorageIterationCallback callback, optional object thisArg);
+   // Promise<sequence<any>>
+   Promise entries();
+   // Promise<sequence<DOMString>>
+   Promise keys();
+   // Promise<sequence<Cache>>
+   Promise values();
+   // Promise<unsigned long>
+   Promise size();
+};
+
+callback CacheStorageIterationCallback = void (Cache value, DOMString key, CacheStorage map);
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -38,16 +38,17 @@ WEBIDL_FILES = [
     'AudioStreamTrack.webidl',
     'BarProp.webidl',
     'BatteryManager.webidl',
     'BeforeUnloadEvent.webidl',
     'BiquadFilterNode.webidl',
     'Blob.webidl',
     'BrowserElementDictionaries.webidl',
     'Cache.webidl',
+    'CacheStorage.webidl',
     'CallsList.webidl',
     'CameraCapabilities.webidl',
     'CameraControl.webidl',
     'CameraManager.webidl',
     'CanvasRenderingContext2D.webidl',
     'CaretPosition.webidl',
     'CDATASection.webidl',
     'ChannelMergerNode.webidl',
