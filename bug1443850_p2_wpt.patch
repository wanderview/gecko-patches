# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4f1014eb5039bdfdd7a39fb7785d102df1994a6f
Bug 1443850 P2 Add a WPT test verifying synthetic responses work when a request fragment is present. r=asuth

diff --git a/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html b/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html
@@ -54,16 +54,40 @@ async_test(function(t) {
             'The character set of the response created with a string should be UTF-8');
           frame.remove();
           return service_worker_unregister_and_done(t, scope);
         })
       .catch(unreached_rejection(t));
   }, 'Service Worker responds to fetch event with string');
 
 async_test(function(t) {
+    var scope = 'resources/simple.html?string';
+    var frame;
+    service_worker_unregister_and_register(t, worker, scope)
+      .then(function(reg) {
+          return wait_for_state(t, reg.installing, 'activated');
+        })
+      .then(function() { return with_iframe(scope) })
+      .then(function(f) {
+        frame = f;
+        return frame.contentWindow.fetch(scope + "#foo")
+      })
+      .then(function(response) { return response.text() })
+      .then(function(text) {
+          assert_equals(
+            text,
+            'Test string',
+            'Service Worker should respond to fetch with a test string');
+          frame.remove();
+          return service_worker_unregister_and_done(t, scope);
+        })
+      .catch(unreached_rejection(t));
+  }, 'Service Worker responds to fetch event using request fragment with string');
+
+async_test(function(t) {
     var scope = 'resources/simple.html?blob';
     service_worker_unregister_and_register(t, worker, scope)
       .then(function(reg) {
           return wait_for_state(t, reg.installing, 'activated');
         })
       .then(function() { return with_iframe(scope); })
       .then(function(frame) {
           assert_equals(
