# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d6e51041df0d4cf2beea2c5aeef0ca7c1689b0dd

diff --git a/netwerk/protocol/http/HttpChannelChild.cpp b/netwerk/protocol/http/HttpChannelChild.cpp
--- a/netwerk/protocol/http/HttpChannelChild.cpp
+++ b/netwerk/protocol/http/HttpChannelChild.cpp
@@ -18,16 +18,17 @@
 #include "mozilla/ipc/FileDescriptorSetChild.h"
 #include "mozilla/ipc/IPCStreamUtils.h"
 #include "mozilla/net/NeckoChild.h"
 #include "mozilla/net/HttpChannelChild.h"
 
 #include "AltDataOutputStreamChild.h"
 #include "CookieServiceChild.h"
 #include "HttpBackgroundChannelChild.h"
+#include "InterceptedHttpChannel.h"
 #include "nsCOMPtr.h"
 #include "nsISupportsPrimitives.h"
 #include "nsChannelClassifier.h"
 #include "nsContentPolicyUtils.h"
 #include "nsGlobalWindow.h"
 #include "nsStringStream.h"
 #include "nsHttpChannel.h"
 #include "nsHttpHandler.h"
@@ -1557,16 +1558,17 @@ mozilla::ipc::IPCResult
 HttpChannelChild::RecvRedirect1Begin(const uint32_t& registrarId,
                                      const URIParams& newUri,
                                      const uint32_t& redirectFlags,
                                      const nsHttpResponseHead& responseHead,
                                      const nsCString& securityInfoSerialization,
                                      const uint64_t& channelId,
                                      const NetAddr& oldPeerAddr)
 {
+  printf_stderr("### ### HttpChannelChild::RecvRedirect1Begin()\n");
   // TODO: handle security info
   LOG(("HttpChannelChild::RecvRedirect1Begin [this=%p]\n", this));
   // We set peer address of child to the old peer,
   // Then it will be updated to new peer in OnStartRequest
   mPeerAddr = oldPeerAddr;
 
   mEventQ->RunOrEnqueue(new Redirect1Event(this, registrarId, newUri,
                                            redirectFlags, responseHead,
@@ -1594,26 +1596,39 @@ HttpChannelChild::SetupRedirect(nsIURI* 
                              uri,
                              redirectLoadInfo,
                              nullptr, // aLoadGroup
                              nullptr, // aCallbacks
                              nsIRequest::LOAD_NORMAL,
                              ioService);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  rv = SetupRedirectInternal(uri, responseHead, redirectFlags, newChannel);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  newChannel.forget(outChannel);
+  return NS_OK;
+}
+
+nsresult
+HttpChannelChild::SetupRedirectInternal(nsIURI* uri,
+                                        const nsHttpResponseHead* responseHead,
+                                        const uint32_t& redirectFlags,
+                                        nsIChannel* aChannel) {
+
   // We won't get OnStartRequest, set cookies here.
   mResponseHead = new nsHttpResponseHead(*responseHead);
 
   bool rewriteToGET = HttpBaseChannel::ShouldRewriteRedirectToGET(mResponseHead->Status(),
                                                                   mRequestHead.ParsedMethod());
 
-  rv = SetupReplacementChannel(uri, newChannel, !rewriteToGET, redirectFlags);
+  nsresult rv = SetupReplacementChannel(uri, aChannel, !rewriteToGET, redirectFlags);
   NS_ENSURE_SUCCESS(rv, rv);
 
-  nsCOMPtr<nsIHttpChannelChild> httpChannelChild = do_QueryInterface(newChannel);
+  nsCOMPtr<nsIHttpChannelChild> httpChannelChild = do_QueryInterface(aChannel);
   if (httpChannelChild) {
     bool shouldUpgrade = false;
     auto channelChild = static_cast<HttpChannelChild*>(httpChannelChild.get());
     if (mShouldInterceptSubsequentRedirect) {
       // In the case where there was a synthesized response that caused a redirection,
       // we must force the new channel to intercept the request in the parent before a
       // network transaction is initiated.
       rv = httpChannelChild->ForceIntercepted(false, false);
@@ -1626,18 +1641,17 @@ HttpChannelChild::SetupRedirect(nsIURI* 
       // case, force the new channel to intercept the request in the parent
       // similar to the case above, but also remember that ShouldInterceptURI()
       // returned true to avoid calling it a second time.
       rv = httpChannelChild->ForceIntercepted(true, shouldUpgrade);
     }
     MOZ_ASSERT(NS_SUCCEEDED(rv));
   }
 
-  mRedirectChannelChild = do_QueryInterface(newChannel);
-  newChannel.forget(outChannel);
+  mRedirectChannelChild = do_QueryInterface(aChannel);
 
   return NS_OK;
 }
 
 void
 HttpChannelChild::Redirect1Begin(const uint32_t& registrarId,
                                  const URIParams& newOriginalURI,
                                  const uint32_t& redirectFlags,
@@ -1852,16 +1866,17 @@ HttpChannelChild::ProcessDivertMessages(
 // Returns true if has actually completed the redirect and cleaned up the
 // channel, or false the interception logic kicked in and we need to asyncly
 // call FinishInterceptedRedirect and CleanupRedirectingChannel.
 // The argument is an optional OverrideRunnable that we pass to the redirected
 // channel.
 bool
 HttpChannelChild::Redirect3Complete(OverrideRunnable* aRunnable)
 {
+  printf_stderr("### ### HttpChannelChild::Redirect3Complete()\n");
   LOG(("HttpChannelChild::Redirect3Complete [this=%p]\n", this));
   nsresult rv = NS_OK;
 
   nsCOMPtr<nsIHttpChannelChild> chan = do_QueryInterface(mRedirectChannelChild);
   RefPtr<HttpChannelChild> httpChannelChild = static_cast<HttpChannelChild*>(chan.get());
   // Chrome channel has been AsyncOpen'd.  Reflect this in child.
   if (mRedirectChannelChild) {
     if (httpChannelChild) {
@@ -2061,16 +2076,17 @@ HttpChannelChild::CompleteRedirectSetup(
 
 //-----------------------------------------------------------------------------
 // HttpChannelChild::nsIAsyncVerifyRedirectCallback
 //-----------------------------------------------------------------------------
 
 NS_IMETHODIMP
 HttpChannelChild::OnRedirectVerifyCallback(nsresult result)
 {
+  printf_stderr("### ### OnRedirectVerifyCallback()\n");
   LOG(("HttpChannelChild::OnRedirectVerifyCallback [this=%p]\n", this));
   nsresult rv;
   OptionalURIParams redirectURI;
 
   uint32_t referrerPolicy = REFERRER_POLICY_UNSET;
   OptionalURIParams referrerURI;
   SerializeURI(nullptr, referrerURI);
 
@@ -2080,16 +2096,17 @@ HttpChannelChild::OnRedirectVerifyCallba
   if (NS_SUCCEEDED(result) && !mRedirectChannelChild) {
     // mRedirectChannelChild doesn't exist means we're redirecting to a protocol
     // that doesn't implement nsIChildChannel. The redirect result should be set
     // as failed by veto listeners and shouldn't enter this condition. As the
     // last resort, we synthesize the error result as NS_ERROR_DOM_BAD_URI here
     // to let nsHttpChannel::ContinueProcessResponse2 know it's redirecting to
     // another protocol and throw an error.
     LOG(("  redirecting to a protocol that doesn't implement nsIChildChannel"));
+    printf_stderr("### ### no an nsIChildChannel!\n");
     result = NS_ERROR_DOM_BAD_URI;
   }
 
   bool forceHSTSPriming = false;
   bool mixedContentWouldBlock = false;
   if (newHttpChannel) {
     // Must not be called until after redirect observers called.
     newHttpChannel->SetOriginalURI(mOriginalURI);
@@ -2376,23 +2393,50 @@ HttpChannelChild::AsyncOpen(nsIStreamLis
   bool shouldUpgrade = mPostRedirectChannelShouldUpgrade;
   if (mPostRedirectChannelShouldIntercept ||
       ShouldInterceptURI(mURI, shouldUpgrade)) {
     mResponseCouldBeSynthesized = true;
 
     nsCOMPtr<nsINetworkInterceptController> controller;
     GetCallback(controller);
 
+    RefPtr<InterceptedHttpChannel> intercepted =
+      new InterceptedHttpChannel(mURI, controller);
+
+    nsCOMPtr<nsILoadInfo> redirectLoadInfo =
+      CloneLoadInfoForRedirect(mURI, nsIChannelEventSink::REDIRECT_INTERNAL);
+    intercepted->SetLoadInfo(redirectLoadInfo);
+
+    nsHttpResponseHead head;
+    rv = SetupRedirectInternal(mURI, &head,
+                               nsIChannelEventSink::REDIRECT_INTERNAL,
+                               intercepted);
+    if (NS_SUCCEEDED(rv)) {
+      nsCOMPtr<nsIEventTarget> target = GetNeckoTarget();
+      MOZ_ASSERT(target);
+
+      rv = gHttpHandler->AsyncOnChannelRedirect(this,
+                                                intercepted,
+                                                nsIChannelEventSink::REDIRECT_INTERNAL,
+                                                target);
+      if (NS_FAILED(rv)) {
+        OnRedirectVerifyCallback(rv);
+      }
+    }
+
+    /*
     mInterceptListener = new InterceptStreamListener(this, mListenerContext);
 
     RefPtr<InterceptedChannelContent> intercepted =
         new InterceptedChannelContent(this, controller,
                                       mInterceptListener, shouldUpgrade);
     intercepted->NotifyController();
-    return NS_OK;
+    */
+
+    return rv;
   }
 
   return ContinueAsyncOpen();
 }
 
 NS_IMETHODIMP
 HttpChannelChild::AsyncOpen2(nsIStreamListener *aListener)
 {
diff --git a/netwerk/protocol/http/HttpChannelChild.h b/netwerk/protocol/http/HttpChannelChild.h
--- a/netwerk/protocol/http/HttpChannelChild.h
+++ b/netwerk/protocol/http/HttpChannelChild.h
@@ -412,16 +412,21 @@ private:
 
   // Create a a new channel to be used in a redirection, based on the provided
   // response headers.
   MOZ_MUST_USE nsresult SetupRedirect(nsIURI* uri,
                                       const nsHttpResponseHead* responseHead,
                                       const uint32_t& redirectFlags,
                                       nsIChannel** outChannel);
 
+  MOZ_MUST_USE nsresult SetupRedirectInternal(nsIURI* uri,
+                                              const nsHttpResponseHead* responseHead,
+                                              const uint32_t& redirectFlags,
+                                              nsIChannel* aChannel);
+
   // Perform a redirection without communicating with the parent process at all.
   void BeginNonIPCRedirect(nsIURI* responseURI,
                            const nsHttpResponseHead* responseHead);
 
   // Override the default security info pointer during a non-IPC redirection.
   void OverrideSecurityInfoForNonIPCRedirect(nsISupports* securityInfo);
 
   // Collect telemetry for the successful rate of OMT.
diff --git a/netwerk/protocol/http/InterceptedHttpChannel.cpp b/netwerk/protocol/http/InterceptedHttpChannel.cpp
new file mode 100644
--- /dev/null
+++ b/netwerk/protocol/http/InterceptedHttpChannel.cpp
@@ -0,0 +1,1180 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=8 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ *  License, v. 2.0. If a copy of the MPL was not distributed with this
+ *  file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "InterceptedHttpChannel.h"
+
+namespace mozilla {
+namespace net {
+
+NS_IMPL_ISUPPORTS(InterceptedHttpChannel, nsIRequest,
+                                          nsIChannel,
+                                          nsIHttpChannel,
+                                          nsIHttpChannelInternal,
+                                          nsIChildChannel,
+                                          nsIInterceptedChannel)
+
+InterceptedHttpChannel::~InterceptedHttpChannel()
+{
+}
+
+InterceptedHttpChannel::InterceptedHttpChannel(nsIURI* aURI,
+                                               nsINetworkInterceptController* aController)
+  : mURI(aURI)
+  , mController(aController)
+{
+  MOZ_DIAGNOSTIC_ASSERT(mController);
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetName(nsACString& aName)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::IsPending(bool* _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetStatus(nsresult* aStatus)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::Cancel(nsresult aStatus)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::Suspend(void)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::Resume(void)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetLoadGroup(nsILoadGroup** aLoadGroup)
+{
+  nsCOMPtr<nsILoadGroup> ref(mLoadGroup);
+  ref.forget(aLoadGroup);
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetLoadGroup(nsILoadGroup* aLoadGroup)
+{
+  mLoadGroup = aLoadGroup;
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetLoadFlags(nsLoadFlags* aLoadFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetLoadFlags(nsLoadFlags aLoadFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetOriginalURI(nsIURI** aOriginalURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetOriginalURI(nsIURI* aOriginalURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetURI(nsIURI** aURI)
+{
+  nsCOMPtr<nsIURI> ref(mURI);
+  ref.forget(aURI);
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetOwner(nsISupports** aOwner)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetOwner(nsISupports* aOwner)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetNotificationCallbacks(nsIInterfaceRequestor** aNotificationCallbacks)
+{
+  nsCOMPtr<nsIInterfaceRequestor> ref(mCallbacks);
+  ref.forget(aNotificationCallbacks);
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetNotificationCallbacks(nsIInterfaceRequestor* aNotificationCallbacks)
+{
+  mCallbacks = aNotificationCallbacks;
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetSecurityInfo(nsISupports** aSecurityInfo)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetContentType(nsACString& aContentType)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetContentType(const nsACString& aContentType)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetContentCharset(nsACString& aContentCharset)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetContentCharset(const nsACString& aContentCharset)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetContentLength(int64_t* aContentLength)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetContentLength(int64_t aContentLength)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::Open(nsIInputStream** _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::Open2(nsIInputStream** _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::AsyncOpen(nsIStreamListener* aListener, nsISupports* aContext)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::AsyncOpen2(nsIStreamListener* aListener)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetContentDisposition(uint32_t* aContentDisposition)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetContentDisposition(uint32_t aContentDisposition)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetContentDispositionFilename(nsAString& aContentDispositionFilename)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetContentDispositionFilename(const nsAString& aContentDispositionFilename)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetContentDispositionHeader(nsACString& aContentDispositionHeader)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetLoadInfo(nsILoadInfo** aLoadInfo)
+{
+  nsCOMPtr<nsILoadInfo> ref(mLoadInfo);
+  ref.forget(aLoadInfo);
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetLoadInfo(nsILoadInfo* aLoadInfo)
+{
+  mLoadInfo = aLoadInfo;
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetIsDocument(bool* aIsDocument)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRequestMethod(nsACString& aRequestMethod)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetRequestMethod(const nsACString& aRequestMethod)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetReferrer(nsIURI** aReferrer)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetReferrer(nsIURI* aReferrer)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetReferrerPolicy(uint32_t* aReferrerPolicy)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetReferrerWithPolicy(nsIURI* referrer, uint32_t referrerPolicy)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetProtocolVersion(nsACString& aProtocolVersion)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetTransferSize(uint64_t* aTransferSize)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetDecodedBodySize(uint64_t* aDecodedBodySize)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetEncodedBodySize(uint64_t* aEncodedBodySize)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRequestHeader(const nsACString& aHeader, nsACString& _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetRequestHeader(const nsACString& aHeader, const nsACString& aValue, bool aMerge)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetEmptyRequestHeader(const nsACString& aHeader)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::VisitRequestHeaders(nsIHttpHeaderVisitor* aVisitor)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::VisitNonDefaultRequestHeaders(nsIHttpHeaderVisitor* aVisitor)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetAllowPipelining(bool* aAllowPipelining)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetAllowPipelining(bool aAllowPipelining)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetAllowSTS(bool* aAllowSTS)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetAllowSTS(bool aAllowSTS)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRedirectionLimit(uint32_t* aRedirectionLimit)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetRedirectionLimit(uint32_t aRedirectionLimit)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetResponseStatus(uint32_t* aResponseStatus)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetResponseStatusText(nsACString& aResponseStatusText)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRequestSucceeded(bool* aRequestSucceeded)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetIsMainDocumentChannel(bool* aIsMainDocumentChannel)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetIsMainDocumentChannel(bool aIsMainDocumentChannel)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetResponseHeader(const nsACString& header, nsACString& _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetResponseHeader(const nsACString& header, const nsACString& value, bool merge)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::VisitResponseHeaders(nsIHttpHeaderVisitor* aVisitor)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetOriginalResponseHeader(const nsACString& aHeader, nsIHttpHeaderVisitor* aVisitor)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::VisitOriginalResponseHeaders(nsIHttpHeaderVisitor* aVisitor)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::IsNoStoreResponse(bool* _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::IsNoCacheResponse(bool* _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::IsPrivateResponse(bool* _retval)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::RedirectTo(nsIURI* aTargetURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRequestContextID(uint64_t* aRequestContextID)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetRequestContextID(uint64_t aRequestContextID)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetChannelId(uint64_t* aChannelId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetChannelId(uint64_t aChannelId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetTopLevelContentWindowId(uint64_t* aTopLevelContentWindowId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetTopLevelContentWindowId(uint64_t aTopLevelContentWindowId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetIsTrackingResource(bool* aIsTrackingResource)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetTopLevelOuterContentWindowId(uint64_t* aTopLevelOuterContentWindowId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetTopLevelOuterContentWindowId(uint64_t aTopLevelOuterContentWindowId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::LogBlockedCORSRequest(const nsAString& aMessage)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetDocumentURI(nsIURI** aDocumentURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetDocumentURI(nsIURI* aDocumentURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRequestVersion(uint32_t* major, uint32_t* minor)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetResponseVersion(uint32_t* major, uint32_t* minor)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::TakeAllSecurityMessages(nsCOMArray<nsISecurityConsoleMessage>& aMessages)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetCookie(const char*  aCookieHeader)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetupFallbackChannel(const char*  aFallbackKey)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetThirdPartyFlags(uint32_t* aThirdPartyFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetThirdPartyFlags(uint32_t aThirdPartyFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetForceAllowThirdPartyCookie(bool* aForceAllowThirdPartyCookie)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetForceAllowThirdPartyCookie(bool aForceAllowThirdPartyCookie)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetCanceled(bool* aCanceled)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetChannelIsForDownload(bool* aChannelIsForDownload)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetChannelIsForDownload(bool aChannelIsForDownload)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetLocalAddress(nsACString& aLocalAddress)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetLocalPort(int32_t* aLocalPort)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRemoteAddress(nsACString& aRemoteAddress)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRemotePort(int32_t* aRemotePort)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetCacheKeysRedirectChain(nsTArray<nsCString>* cacheKeys)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::HTTPUpgrade(const nsACString& aProtocolName, nsIHttpUpgradeListener* aListener)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetAllowSpdy(bool* aAllowSpdy)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetAllowSpdy(bool aAllowSpdy)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetResponseTimeoutEnabled(bool* aResponseTimeoutEnabled)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetResponseTimeoutEnabled(bool aResponseTimeoutEnabled)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetInitialRwin(uint32_t* aInitialRwin)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetInitialRwin(uint32_t aInitialRwin)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetApiRedirectToURI(nsIURI** aApiRedirectToURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetAllowAltSvc(bool* aAllowAltSvc)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetAllowAltSvc(bool aAllowAltSvc)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetBeConservative(bool* aBeConservative)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetBeConservative(bool aBeConservative)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetTlsFlags(uint32_t* aTlsFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetTlsFlags(uint32_t aTlsFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetLastModifiedTime(PRTime* aLastModifiedTime)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::ForceIntercepted(uint64_t aInterceptionID)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetResponseSynthesized(bool* aResponseSynthesized)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetCorsIncludeCredentials(bool* aCorsIncludeCredentials)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetCorsIncludeCredentials(bool aCorsIncludeCredentials)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetCorsMode(uint32_t* aCorsMode)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetCorsMode(uint32_t aCorsMode)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetRedirectMode(uint32_t* aRedirectMode)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetRedirectMode(uint32_t aRedirectMode)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetFetchCacheMode(uint32_t* aFetchCacheMode)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetFetchCacheMode(uint32_t aFetchCacheMode)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetTopWindowURI(nsIURI** aTopWindowURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetTopWindowURIIfUnknown(nsIURI* topWindowURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetNetworkInterfaceId(nsACString& aNetworkInterfaceId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetNetworkInterfaceId(const nsACString& aNetworkInterfaceId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetProxyURI(nsIURI** aProxyURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+void
+InterceptedHttpChannel::SetCorsPreflightParameters(const nsTArray<nsCString>& unsafeHeaders)
+{
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetBlockAuthPrompt(bool* aBlockAuthPrompt)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetBlockAuthPrompt(bool aBlockAuthPrompt)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetIntegrityMetadata(nsAString& aIntegrityMetadata)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetIntegrityMetadata(const nsAString& aIntegrityMetadata)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetConnectionInfoHashKey(nsACString& aConnectionInfoHashKey)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetLastRedirectFlags(uint32_t* aLastRedirectFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetLastRedirectFlags(uint32_t aLastRedirectFlags)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+InterceptedHttpChannel::ConnectParent(uint32_t aRegistrarId)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::CompleteRedirectSetup(nsIStreamListener* aListener,
+                                              nsISupports* aContext)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+InterceptedHttpChannel::ResetInterception(void)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SynthesizeStatus(uint16_t status, const nsACString& reason)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SynthesizeHeader(const nsACString& name, const nsACString& value)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::FinishSynthesizedResponse(const nsACString& finalURLSpec)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::CancelInterception(nsresult status)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetResponseBody(nsIOutputStream** aResponseBody)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetChannel(nsIChannel** aChannel)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetSecureUpgradedChannelURI(nsIURI** aSecureUpgradedChannelURI)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetChannelInfo(mozilla::dom::ChannelInfo* channelInfo)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetInternalContentPolicyType(nsContentPolicyType* aInternalContentPolicyType)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::GetConsoleReportCollector(nsIConsoleReportCollector** aConsoleReportCollector)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetLaunchServiceWorkerStart(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetLaunchServiceWorkerEnd(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetDispatchFetchEventStart(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetDispatchFetchEventEnd(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetHandleFetchEventStart(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetHandleFetchEventEnd(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetFinishResponseStart(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetFinishSynthesizedResponseEnd(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetChannelResetEnd(mozilla::TimeStamp aTimeStamp)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SaveTimeStamps(void)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+InterceptedHttpChannel::SetReleaseHandle(nsISupports* aHandle)
+{
+  printf_stderr("### ### %s\n", __func__);
+  return NS_OK;
+}
+
+} // namespace net
+} // namespace mozilla
diff --git a/netwerk/protocol/http/InterceptedHttpChannel.h b/netwerk/protocol/http/InterceptedHttpChannel.h
new file mode 100644
--- /dev/null
+++ b/netwerk/protocol/http/InterceptedHttpChannel.h
@@ -0,0 +1,47 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=8 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_net_InterceptedHttpChannel_h
+#define mozilla_net_InterceptedHttpChannel_h
+
+#include "nsIHttpChannel.h"
+#include "nsIHttpChannelInternal.h"
+#include "nsIChildChannel.h"
+#include "nsINetworkInterceptController.h"
+
+namespace mozilla {
+namespace net {
+
+class InterceptedHttpChannel final : public nsIHttpChannel
+                                   , public nsIHttpChannelInternal
+                                   , public nsIChildChannel
+                                   , public nsIInterceptedChannel
+{
+  nsCOMPtr<nsIURI> mURI;
+  nsCOMPtr<nsINetworkInterceptController> mController;
+  nsCOMPtr<nsILoadInfo> mLoadInfo;
+  nsCOMPtr<nsILoadGroup> mLoadGroup;
+  nsCOMPtr<nsIInterfaceRequestor> mCallbacks;
+
+  ~InterceptedHttpChannel();
+
+public:
+  InterceptedHttpChannel(nsIURI* aURI,
+                         nsINetworkInterceptController* aController);
+
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSIREQUEST
+  NS_DECL_NSICHANNEL
+  NS_DECL_NSIHTTPCHANNEL
+  NS_DECL_NSIHTTPCHANNELINTERNAL
+  NS_DECL_NSICHILDCHANNEL
+  NS_DECL_NSIINTERCEPTEDCHANNEL
+};
+
+} // namespace net
+} // namespace mozilla
+
+#endif // mozilla_net_InterceptedHttpChannel_h
diff --git a/netwerk/protocol/http/SyntheticHttpChannel.cpp b/netwerk/protocol/http/SyntheticHttpChannel.cpp
new file mode 100644
--- /dev/null
+++ b/netwerk/protocol/http/SyntheticHttpChannel.cpp
@@ -0,0 +1,155 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=8 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "SyntheticHttpChannel.h"
+
+namespace mozilla {
+namespace net {
+
+NS_IMETHODIMP SyntheticHttpChannel::GetName(nsACString & aName) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::IsPending(bool *_retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetStatus(nsresult *aStatus) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::Cancel(nsresult aStatus) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::Suspend(void) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::Resume(void) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetLoadGroup(nsILoadGroup * *aLoadGroup) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetLoadGroup(nsILoadGroup *aLoadGroup) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetLoadFlags(nsLoadFlags *aLoadFlags) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetLoadFlags(nsLoadFlags aLoadFlags) { return NS_OK; }
+
+NS_IMETHODIMP SyntheticHttpChannel::GetOriginalURI(nsIURI * *aOriginalURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetOriginalURI(nsIURI *aOriginalURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetURI(nsIURI * *aURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetOwner(nsISupports * *aOwner) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetOwner(nsISupports *aOwner) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetNotificationCallbacks(nsIInterfaceRequestor * *aNotificationCallbacks) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetNotificationCallbacks(nsIInterfaceRequestor *aNotificationCallbacks) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetSecurityInfo(nsISupports * *aSecurityInfo) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetContentType(nsACString & aContentType) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetContentType(const nsACString & aContentType) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetContentCharset(nsACString & aContentCharset) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetContentCharset(const nsACString & aContentCharset) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetContentLength(int64_t *aContentLength) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetContentLength(int64_t aContentLength) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::Open(nsIInputStream * *_retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::Open2(nsIInputStream * *_retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::AsyncOpen(nsIStreamListener *aListener, nsISupports *aContext) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::AsyncOpen2(nsIStreamListener *aListener) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetContentDisposition(uint32_t *aContentDisposition) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetContentDisposition(uint32_t aContentDisposition) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetContentDispositionFilename(nsAString & aContentDispositionFilename) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetContentDispositionFilename(const nsAString & aContentDispositionFilename) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetContentDispositionHeader(nsACString & aContentDispositionHeader) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetLoadInfo(nsILoadInfo * *aLoadInfo) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetLoadInfo(nsILoadInfo *aLoadInfo) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetIsDocument(bool *aIsDocument) { return NS_OK; }
+
+NS_IMETHODIMP SyntheticHttpChannel::GetRequestMethod(nsACString & aRequestMethod) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetRequestMethod(const nsACString & aRequestMethod) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetReferrer(nsIURI * *aReferrer) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetReferrer(nsIURI *aReferrer) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetReferrerPolicy(uint32_t *aReferrerPolicy) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetReferrerWithPolicy(nsIURI *referrer, uint32_t referrerPolicy) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetProtocolVersion(nsACString & aProtocolVersion) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetTransferSize(uint64_t *aTransferSize) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetDecodedBodySize(uint64_t *aDecodedBodySize) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetEncodedBodySize(uint64_t *aEncodedBodySize) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRequestHeader(const nsACString & aHeader, nsACString & _retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetRequestHeader(const nsACString & aHeader, const nsACString & aValue, bool aMerge) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetEmptyRequestHeader(const nsACString & aHeader) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::VisitRequestHeaders(nsIHttpHeaderVisitor *aVisitor) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::VisitNonDefaultRequestHeaders(nsIHttpHeaderVisitor *aVisitor) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetAllowPipelining(bool *aAllowPipelining) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetAllowPipelining(bool aAllowPipelining) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetAllowSTS(bool *aAllowSTS) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetAllowSTS(bool aAllowSTS) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRedirectionLimit(uint32_t *aRedirectionLimit) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetRedirectionLimit(uint32_t aRedirectionLimit) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetResponseStatus(uint32_t *aResponseStatus) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetResponseStatusText(nsACString & aResponseStatusText) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRequestSucceeded(bool *aRequestSucceeded) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetIsMainDocumentChannel(bool *aIsMainDocumentChannel) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetIsMainDocumentChannel(bool aIsMainDocumentChannel) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetResponseHeader(const nsACString & header, nsACString & _retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetResponseHeader(const nsACString & header, const nsACString & value, bool merge) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::VisitResponseHeaders(nsIHttpHeaderVisitor *aVisitor) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetOriginalResponseHeader(const nsACString & aHeader, nsIHttpHeaderVisitor *aVisitor) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::VisitOriginalResponseHeaders(nsIHttpHeaderVisitor *aVisitor) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::IsNoStoreResponse(bool *_retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::IsNoCacheResponse(bool *_retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::IsPrivateResponse(bool *_retval) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::RedirectTo(nsIURI *aTargetURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRequestContextID(uint64_t *aRequestContextID) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetRequestContextID(uint64_t aRequestContextID) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetChannelId(uint64_t *aChannelId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetChannelId(uint64_t aChannelId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetTopLevelContentWindowId(uint64_t *aTopLevelContentWindowId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetTopLevelContentWindowId(uint64_t aTopLevelContentWindowId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetIsTrackingResource(bool *aIsTrackingResource) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetTopLevelOuterContentWindowId(uint64_t *aTopLevelOuterContentWindowId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetTopLevelOuterContentWindowId(uint64_t aTopLevelOuterContentWindowId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::LogBlockedCORSRequest(const nsAString & aMessage) { return NS_OK; }
+
+NS_IMETHODIMP SyntheticHttpChannel::GetDocumentURI(nsIURI * *aDocumentURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetDocumentURI(nsIURI *aDocumentURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRequestVersion(uint32_t *major, uint32_t *minor) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetResponseVersion(uint32_t *major, uint32_t *minor) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::TakeAllSecurityMessages(nsCOMArray<nsISecurityConsoleMessage> & aMessages) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetCookie(const char * aCookieHeader) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetupFallbackChannel(const char * aFallbackKey) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetThirdPartyFlags(uint32_t *aThirdPartyFlags) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetThirdPartyFlags(uint32_t aThirdPartyFlags) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetForceAllowThirdPartyCookie(bool *aForceAllowThirdPartyCookie) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetForceAllowThirdPartyCookie(bool aForceAllowThirdPartyCookie) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetCanceled(bool *aCanceled) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetChannelIsForDownload(bool *aChannelIsForDownload) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetChannelIsForDownload(bool aChannelIsForDownload) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetLocalAddress(nsACString & aLocalAddress) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetLocalPort(int32_t *aLocalPort) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRemoteAddress(nsACString & aRemoteAddress) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRemotePort(int32_t *aRemotePort) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetCacheKeysRedirectChain(nsTArray<nsCString> *cacheKeys) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::HTTPUpgrade(const nsACString & aProtocolName, nsIHttpUpgradeListener *aListener) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetAllowSpdy(bool *aAllowSpdy) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetAllowSpdy(bool aAllowSpdy) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetResponseTimeoutEnabled(bool *aResponseTimeoutEnabled) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetResponseTimeoutEnabled(bool aResponseTimeoutEnabled) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetInitialRwin(uint32_t *aInitialRwin) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetInitialRwin(uint32_t aInitialRwin) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetApiRedirectToURI(nsIURI * *aApiRedirectToURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetAllowAltSvc(bool *aAllowAltSvc) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetAllowAltSvc(bool aAllowAltSvc) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetBeConservative(bool *aBeConservative) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetBeConservative(bool aBeConservative) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetTlsFlags(uint32_t *aTlsFlags) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetTlsFlags(uint32_t aTlsFlags) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetLastModifiedTime(PRTime *aLastModifiedTime) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::ForceIntercepted(uint64_t aInterceptionID) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetResponseSynthesized(bool *aResponseSynthesized) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetCorsIncludeCredentials(bool *aCorsIncludeCredentials) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetCorsIncludeCredentials(bool aCorsIncludeCredentials) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetCorsMode(uint32_t *aCorsMode) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetCorsMode(uint32_t aCorsMode) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetRedirectMode(uint32_t *aRedirectMode) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetRedirectMode(uint32_t aRedirectMode) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetFetchCacheMode(uint32_t *aFetchCacheMode) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetFetchCacheMode(uint32_t aFetchCacheMode) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetTopWindowURI(nsIURI * *aTopWindowURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetTopWindowURIIfUnknown(nsIURI *topWindowURI) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetNetworkInterfaceId(nsACString & aNetworkInterfaceId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetNetworkInterfaceId(const nsACString & aNetworkInterfaceId) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetProxyURI(nsIURI * *aProxyURI) { return NS_OK; }
+void SyntheticHttpChannel::SetCorsPreflightParameters(const nsTArray<nsCString> & unsafeHeaders) { }
+NS_IMETHODIMP SyntheticHttpChannel::GetBlockAuthPrompt(bool *aBlockAuthPrompt) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetBlockAuthPrompt(bool aBlockAuthPrompt) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetIntegrityMetadata(nsAString & aIntegrityMetadata) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetIntegrityMetadata(const nsAString & aIntegrityMetadata) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetConnectionInfoHashKey(nsACString & aConnectionInfoHashKey) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::GetLastRedirectFlags(uint32_t *aLastRedirectFlags) { return NS_OK; }
+NS_IMETHODIMP SyntheticHttpChannel::SetLastRedirectFlags(uint32_t aLastRedirectFlags) { return NS_OK; }
+
+} // namespace net
+} // namespace mozilla
diff --git a/netwerk/protocol/http/SyntheticHttpChannel.h b/netwerk/protocol/http/SyntheticHttpChannel.h
new file mode 100644
--- /dev/null
+++ b/netwerk/protocol/http/SyntheticHttpChannel.h
@@ -0,0 +1,32 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=8 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_net_SyntheticHttpChannel_h
+#define mozilla_net_SyntheticHttpChannel_h
+
+#include "nsIHttpChannel.h"
+#include "nsIHttpChannelInternal.h"
+
+namespace mozilla {
+namespace net {
+
+class SyntheticHttpChannel final : public nsIHttpChannel
+                                 , public nsIHttpChannelInternal
+{
+  virtual ~SyntheticHttpChannel();
+
+public:
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSIREQUEST
+  NS_DECL_NSICHANNEL
+  NS_DECL_NSIHTTPCHANNEL
+  NS_DECL_NSIHTTPCHANNELINTERNAL
+};
+
+} // namespace net
+} // namespace mozilla
+
+#endif // mozilla_net_SyntheticHttpChannel_h
diff --git a/netwerk/protocol/http/moz.build b/netwerk/protocol/http/moz.build
--- a/netwerk/protocol/http/moz.build
+++ b/netwerk/protocol/http/moz.build
@@ -72,16 +72,17 @@ UNIFIED_SOURCES += [
     'HttpBackgroundChannelChild.cpp',
     'HttpBackgroundChannelParent.cpp',
     'HttpBaseChannel.cpp',
     'HttpChannelChild.cpp',
     'HttpChannelParent.cpp',
     'HttpChannelParentListener.cpp',
     'HttpInfo.cpp',
     'InterceptedChannel.cpp',
+    'InterceptedHttpChannel.cpp',
     'nsCORSListenerProxy.cpp',
     'nsHttp.cpp',
     'nsHttpActivityDistributor.cpp',
     'nsHttpAuthCache.cpp',
     'nsHttpAuthManager.cpp',
     'nsHttpBasicAuth.cpp',
     'nsHttpChannel.cpp',
     'nsHttpChunkedDecoder.cpp',
@@ -91,16 +92,17 @@ UNIFIED_SOURCES += [
     'nsHttpDigestAuth.cpp',
     'nsHttpHeaderArray.cpp',
     'nsHttpNTLMAuth.cpp',
     'nsHttpRequestHead.cpp',
     'nsHttpResponseHead.cpp',
     'nsHttpTransaction.cpp',
     'NullHttpChannel.cpp',
     'NullHttpTransaction.cpp',
+    'SyntheticHttpChannel.cpp',
     'TunnelUtils.cpp',
 ]
 
 # These files cannot be built in unified mode because of OS X headers.
 SOURCES += [
     'nsHttpHandler.cpp',
 ]
 
diff --git a/netwerk/protocol/http/nsHttpChannel.cpp b/netwerk/protocol/http/nsHttpChannel.cpp
--- a/netwerk/protocol/http/nsHttpChannel.cpp
+++ b/netwerk/protocol/http/nsHttpChannel.cpp
@@ -106,16 +106,17 @@
 #include "HSTSPrimerListener.h"
 #include "CacheStorageService.h"
 #include "HttpChannelParent.h"
 #include "nsIBufferedStreams.h"
 #include "nsIFileStreams.h"
 #include "nsIMIMEInputStream.h"
 #include "nsIMultiplexInputStream.h"
 #include "../../cache2/CacheFileUtils.h"
+#include "InterceptedHttpChannel.h"
 
 #ifdef MOZ_TASK_TRACER
 #include "GeckoTaskTracer.h"
 #endif
 
 namespace mozilla { namespace net {
 
 namespace {
@@ -6145,18 +6146,59 @@ nsHttpChannel::AsyncOpen(nsIStreamListen
 
     rv = NS_CheckPortSafety(mURI);
     if (NS_FAILED(rv)) {
         ReleaseListeners();
         return rv;
     }
 
     if (mInterceptCache != INTERCEPTED && ShouldIntercept()) {
+
+      nsCOMPtr<nsINetworkInterceptController> controller;
+      GetCallback(controller);
+
+      RefPtr<InterceptedHttpChannel> intercepted =
+        new InterceptedHttpChannel(mURI, controller);
+
+      nsCOMPtr<nsILoadInfo> redirectLoadInfo =
+        CloneLoadInfoForRedirect(mURI, nsIChannelEventSink::REDIRECT_INTERNAL);
+      intercepted->SetLoadInfo(redirectLoadInfo);
+
+      rv = SetupReplacementChannel(mURI, intercepted, true,
+                                   nsIChannelEventSink::REDIRECT_INTERNAL);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      // Inform consumers about this fake redirect
+      mRedirectChannel = intercepted;
+
+      PushRedirectAsyncFunc(
+          &nsHttpChannel::ContinueAsyncRedirectChannelToURI);
+      rv = gHttpHandler->AsyncOnChannelRedirect(this, intercepted,
+                                                nsIChannelEventSink::REDIRECT_INTERNAL);
+
+      if (NS_SUCCEEDED(rv)) {
+        rv = WaitForRedirectCallback();
+      }
+
+      if (NS_FAILED(rv)) {
+        AutoRedirectVetoNotifier notifier(this);
+
+        /* Remove the async call to ContinueAsyncRedirectChannelToURI().
+         * It is called directly by our callers upon return (to clean up
+         * the failed redirect). */
+        PopRedirectAsyncFunc(
+            &nsHttpChannel::ContinueAsyncRedirectChannelToURI);
+      }
+
+      return rv;
+
+        /*
         mInterceptCache = MAYBE_INTERCEPT;
         SetCouldBeSynthesized();
+        */
     }
 
     // Remember the cookie header that was set, if any
     nsAutoCString cookieHeader;
     if (NS_SUCCEEDED(mRequestHead.GetHeader(nsHttp::Cookie, cookieHeader))) {
         mUserSetCookieHeader = cookieHeader;
     }
 
