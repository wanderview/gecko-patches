# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  2ce3a06b9fd9f21f7a9dd5efa2040c3f54c65e8c

diff --git a/toolkit/components/extensions/ExtensionCommon.jsm b/toolkit/components/extensions/ExtensionCommon.jsm
--- a/toolkit/components/extensions/ExtensionCommon.jsm
+++ b/toolkit/components/extensions/ExtensionCommon.jsm
@@ -115,25 +115,27 @@ class BaseContext {
     if (this.incognito == null) {
       this.incognito = PrivateBrowsingUtils.isContentWindowPrivate(contentWindow);
     }
 
     MessageChannel.setupMessageManagers([this.messageManager]);
 
     let onPageShow = event => {
       if (!event || event.target === document) {
+        dump('### ### onPageShow setting contentWindow: ' + contentWindow + '\n');
         this.docShell = docShell;
         this.contentWindow = contentWindow;
         this.active = true;
       }
     };
     let onPageHide = event => {
       if (!event || event.target === document) {
         // Put this off until the next tick.
         Promise.resolve().then(() => {
+          dump('### ### onPageHide clearing contentWindow\n');
           this.docShell = null;
           this.contentWindow = null;
           this.active = false;
         });
       }
     };
 
     onPageShow();
diff --git a/toolkit/components/extensions/ExtensionContent.jsm b/toolkit/components/extensions/ExtensionContent.jsm
--- a/toolkit/components/extensions/ExtensionContent.jsm
+++ b/toolkit/components/extensions/ExtensionContent.jsm
@@ -250,16 +250,17 @@ class Script {
   }
 
   matchesWindow(window) {
     return this.matcher.matchesWindow(window);
   }
 
   async injectInto(window) {
     let context = this.extension.getContext(window);
+    dump('### ### injectInto() got context: ' + context + '\n');
 
     if (this.runAt === "document_end") {
       await promiseDocumentReady(window.document);
     } else if (this.runAt === "document_idle") {
       await promiseDocumentLoaded(window.document);
     }
 
     return this.inject(context);
