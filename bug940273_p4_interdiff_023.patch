# HG changeset patch
# Parent c74e11c75689535c3cefc3a06ca9c9a34a755d51
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 023 FileUtils.(h|cpp) issues


diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -694,16 +694,17 @@ DBSchema::QueryCache(mozIStorageConnecti
     urlToMatch.AppendLiteral("%");
   }
 
   rv = state->BindStringParameter(1, urlToMatch);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   bool hasMoreData = false;
   while (NS_SUCCEEDED(state->ExecuteStep(&hasMoreData)) && hasMoreData) {
+    // no invalid EntryId, init to least likely real value
     EntryId entryId = INT32_MAX;
     rv = state->GetInt32(0, &entryId);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
     int32_t varyCount;
     rv = state->GetInt32(1, &varyCount);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
diff --git a/dom/cache/FileUtils.cpp b/dom/cache/FileUtils.cpp
--- a/dom/cache/FileUtils.cpp
+++ b/dom/cache/FileUtils.cpp
@@ -33,110 +33,55 @@ FileUtils::BodyCreateDir(nsIFile* aBaseD
 
   nsCOMPtr<nsIFile> aBodyDir;
   nsresult rv = aBaseDir->Clone(getter_AddRefs(aBodyDir));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = aBodyDir->Append(NS_LITERAL_STRING("morgue"));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  bool exists;
-  rv = aBodyDir->Exists(&exists);
+  rv = aBodyDir->Create(nsIFile::DIRECTORY_TYPE, 0755);
+  if (rv == NS_ERROR_FILE_ALREADY_EXISTS) {
+    return NS_OK;
+  }
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  if (!exists) {
-    rv = aBodyDir->Create(nsIFile::DIRECTORY_TYPE, 0755);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  } else {
-    bool isDir;
-    rv = aBodyDir->IsDirectory(&isDir);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-    if (NS_WARN_IF(!isDir)) { return NS_ERROR_FILE_NOT_DIRECTORY; }
-  }
-
   return rv;
 }
 
 // static
 nsresult
 FileUtils::BodyGetCacheDir(nsIFile* aBaseDir, const nsID& aId,
                            nsIFile** aCacheDirOut)
 {
   MOZ_ASSERT(aBaseDir);
   MOZ_ASSERT(aCacheDirOut);
 
+  *aCacheDirOut = nullptr;
+
   nsresult rv = aBaseDir->Clone(aCacheDirOut);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+  if (NS_WARN_IF(!*aCacheDirOut)) { return NS_ERROR_UNEXPECTED; }
 
   rv = (*aCacheDirOut)->Append(NS_LITERAL_STRING("morgue"));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  bool exists;
-  rv = (*aCacheDirOut)->Exists(&exists);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  if (!exists) { return NS_ERROR_FILE_NOT_FOUND; }
-
-  bool isDir;
-  rv = (*aCacheDirOut)->IsDirectory(&isDir);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  if (NS_WARN_IF(!isDir)) { return NS_ERROR_FILE_NOT_DIRECTORY; }
-
+  // Some file systems have poor performance when there are too many files
+  // in a single directory.  Mitigate this issue by spreading the body
+  // files out into sub-directories.  We use the last byte of the ID for
+  // the name of the sub-directory.
   nsAutoString subDirName;
   subDirName.AppendInt(aId.m3[7]);
   rv = (*aCacheDirOut)->Append(subDirName);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  rv = (*aCacheDirOut)->Exists(&exists);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-  if (!exists) {
-    rv = (*aCacheDirOut)->Create(nsIFile::DIRECTORY_TYPE, 0755);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  } else {
-    rv = (*aCacheDirOut)->IsDirectory(&isDir);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-    if (NS_WARN_IF(!isDir)) { return NS_ERROR_FILE_NOT_DIRECTORY; }
+  rv = (*aCacheDirOut)->Create(nsIFile::DIRECTORY_TYPE, 0755);
+  if (rv == NS_ERROR_FILE_ALREADY_EXISTS) {
+    return NS_OK;
   }
-
-  return rv;
-}
-
-// static
-nsresult
-FileUtils::BodyIdToFile(nsIFile* aBaseDir, const nsID& aId,
-                        BodyFileType aType, nsIFile** aBodyFileOut)
-{
-  MOZ_ASSERT(aBaseDir);
-  MOZ_ASSERT(aBodyFileOut);
-
-  nsresult rv = BodyGetCacheDir(aBaseDir, aId, aBodyFileOut);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-  bool exists;
-  rv = (*aBodyFileOut)->Exists(&exists);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  if (!exists) { return NS_ERROR_FILE_NOT_FOUND; }
-
-  bool isDir;
-  rv = (*aBodyFileOut)->IsDirectory(&isDir);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  if (NS_WARN_IF(!isDir)) { return NS_ERROR_FILE_NOT_DIRECTORY; }
-
-  char idString[NSID_LENGTH];
-  aId.ToProvidedString(idString);
-
-  NS_ConvertUTF8toUTF16 fileName(idString);
-
-  if (aType == BODY_FILE_FINAL) {
-    fileName.Append(NS_LITERAL_STRING(".final"));
-  } else {
-    fileName.Append(NS_LITERAL_STRING(".tmp"));
-  }
-
-  rv = (*aBodyFileOut)->Append(fileName);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   return rv;
 }
 
 // static
 nsresult
 FileUtils::BodyStartWriteStream(const QuotaInfo& aQuotaInfo,
@@ -221,29 +166,20 @@ nsresult
 FileUtils::BodyFinalizeWrite(nsIFile* aBaseDir, const nsID& aId)
 {
   MOZ_ASSERT(aBaseDir);
 
   nsCOMPtr<nsIFile> tmpFile;
   nsresult rv = BodyIdToFile(aBaseDir, aId, BODY_FILE_TMP, getter_AddRefs(tmpFile));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  bool exists;
-  rv = tmpFile->Exists(&exists);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  if (NS_WARN_IF(!exists)) { return NS_ERROR_FILE_NOT_FOUND; }
-
   nsCOMPtr<nsIFile> finalFile;
   rv = BodyIdToFile(aBaseDir, aId, BODY_FILE_FINAL, getter_AddRefs(finalFile));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  rv = finalFile->Exists(&exists);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-  if (NS_WARN_IF(exists)) { return NS_ERROR_FILE_ALREADY_EXISTS; }
-
   nsCOMPtr<nsIFile> finalDir;
   rv = finalFile->GetParent(getter_AddRefs(finalDir));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   nsAutoString finalFileName;
   rv = finalFile->GetLeafName(finalFileName);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
@@ -288,26 +224,53 @@ FileUtils::BodyDeleteFiles(nsIFile* aBas
   nsresult rv = NS_OK;
 
   for (uint32_t i = 0; i < aIdList.Length(); ++i) {
     nsCOMPtr<nsIFile> finalFile;
     rv = BodyIdToFile(aBaseDir, aIdList[i], BODY_FILE_FINAL,
                       getter_AddRefs(finalFile));
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-    bool exists;
-    rv = finalFile->Exists(&exists);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-    if (NS_WARN_IF(!exists)) {
+    rv = finalFile->Remove(false /* recursive */);
+    if (rv == NS_ERROR_FILE_NOT_FOUND) {
+      NS_WARNING("Cache body file already deleted. Ignoring.");
       continue;
     }
-
-    rv = finalFile->Remove(false /* recursive */);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
 
   return rv;
 }
 
+// static
+nsresult
+FileUtils::BodyIdToFile(nsIFile* aBaseDir, const nsID& aId,
+                        BodyFileType aType, nsIFile** aBodyFileOut)
+{
+  MOZ_ASSERT(aBaseDir);
+  MOZ_ASSERT(aBodyFileOut);
+
+  *aBodyFileOut = nullptr;
+
+  nsresult rv = BodyGetCacheDir(aBaseDir, aId, aBodyFileOut);
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+  if (NS_WARN_IF(!(*aBodyFileOut))) { return NS_ERROR_UNEXPECTED; }
+
+  char idString[NSID_LENGTH];
+  aId.ToProvidedString(idString);
+
+  NS_ConvertUTF8toUTF16 fileName(idString);
+
+  if (aType == BODY_FILE_FINAL) {
+    fileName.AppendLiteral(".final");
+  } else {
+    fileName.AppendLiteral(".tmp");
+  }
+
+  rv = (*aBodyFileOut)->Append(fileName);
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  return rv;
+}
+
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/FileUtils.h b/dom/cache/FileUtils.h
--- a/dom/cache/FileUtils.h
+++ b/dom/cache/FileUtils.h
@@ -29,20 +29,16 @@ public:
     BODY_FILE_TMP
   };
 
   static nsresult BodyCreateDir(nsIFile* aBaseDir);
   static nsresult BodyGetCacheDir(nsIFile* aBaseDir, const nsID& aId,
                                   nsIFile** aCacheDirOut);
 
   static nsresult
-  BodyIdToFile(nsIFile* aBaseDir, const nsID& aId, BodyFileType aType,
-               nsIFile** aBodyFileOut);
-
-  static nsresult
   BodyStartWriteStream(const QuotaInfo& aQuotaInfo, nsIFile* aBaseDir,
                        nsIInputStream* aSource, void* aClosure,
                        nsAsyncCopyCallbackFun aCallback, nsID* aIdOut,
                        nsISupports** aCopyContextOut);
 
   static void
   BodyCancelWrite(nsIFile* aBaseDir, const nsID& aId,
                   nsISupports* aCopyContext);
@@ -53,16 +49,20 @@ public:
   static nsresult
   BodyOpen(const QuotaInfo& aQuotaInfo, nsIFile* aBaseDir, const nsID& aId,
            nsIInputStream** aStreamOut);
 
   static nsresult
   BodyDeleteFiles(nsIFile* aBaseDir, const nsTArray<nsID>& aIdList);
 
 private:
+  static nsresult
+  BodyIdToFile(nsIFile* aBaseDir, const nsID& aId, BodyFileType aType,
+               nsIFile** aBodyFileOut);
+
   FileUtils() MOZ_DELETE;
   ~FileUtils() MOZ_DELETE;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
