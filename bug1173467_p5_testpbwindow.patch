# HG changeset patch
# Parent 8dc30cdd76ba7ccafa6b1b1aab9219882e84a927
# User Ben Kelly <ben@wanderview.com>
Bug 1173467 P5 Add a test to validate Cache in private browsing window. r=ehsan

diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -95,8 +95,12 @@ FINAL_LIBRARY = 'xul'
 
 MOCHITEST_MANIFESTS += [
     'test/mochitest/mochitest.ini',
 ]
 
 MOCHITEST_CHROME_MANIFESTS += [
     'test/mochitest/chrome.ini',
 ]
+
+BROWSER_CHROME_MANIFESTS += [
+    'test/mochitest/browser.ini',
+]
diff --git a/dom/cache/test/mochitest/browser.ini b/dom/cache/test/mochitest/browser.ini
new file mode 100644
--- /dev/null
+++ b/dom/cache/test/mochitest/browser.ini
@@ -0,0 +1,1 @@
+[browser_cache_pb_window.js]
diff --git a/dom/cache/test/mochitest/browser_cache_pb_window.js b/dom/cache/test/mochitest/browser_cache_pb_window.js
new file mode 100644
--- /dev/null
+++ b/dom/cache/test/mochitest/browser_cache_pb_window.js
@@ -0,0 +1,82 @@
+var name = 'pb-window-cache';
+
+function testMatch(win) {
+  return new Promise(function(resolve, reject) {
+    win.caches.match('http://foo.com').then(function(response) {
+      ok(false, 'caches.match() should not return success');
+      reject();
+    }).catch(function(err) {
+      is('SecurityError', err.name, 'caches.match() should throw SecurityError');
+      resolve();
+    });
+  });
+}
+
+function testHas(win) {
+  return new Promise(function(resolve, reject) {
+    win.caches.has(name).then(function(result) {
+      ok(false, 'caches.has() should not return success');
+      reject();
+    }).catch(function(err) {
+      is('SecurityError', err.name, 'caches.has() should throw SecurityError');
+      resolve();
+    });
+  });
+}
+
+function testOpen(win) {
+  return new Promise(function(resolve, reject) {
+    win.caches.open(name).then(function(c) {
+      ok(false, 'caches.open() should not return success');
+      reject();
+    }).catch(function(err) {
+      is('SecurityError', err.name, 'caches.open() should throw SecurityError');
+      resolve();
+    });
+  });
+}
+
+function testDelete(win) {
+  return new Promise(function(resolve, reject) {
+    win.caches.delete(name).then(function(result) {
+      ok(false, 'caches.delete() should not return success');
+      reject();
+    }).catch(function(err) {
+      is('SecurityError', err.name, 'caches.delete() should throw SecurityError');
+      resolve();
+    });
+  });
+}
+
+function testKeys(win) {
+  return new Promise(function(resolve, reject) {
+    win.caches.keys().then(function(names) {
+      ok(false, 'caches.keys() should not return success');
+      reject();
+    }).catch(function(err) {
+      is('SecurityError', err.name, 'caches.keys() should throw SecurityError');
+      resolve();
+    });
+  });
+}
+
+function test() {
+  waitForExplicitFinish();
+  SpecialPowers.pushPrefEnv({'set': [['browser.privatebrowing.autostart', true],
+                                     ['dom.caches.enabled', true]]},
+                            function() {
+    var privateWin = OpenBrowserWindow({private: true});
+    privateWin.addEventListener('load', function() {
+      Promise.all([
+        testMatch(privateWin),
+        testHas(privateWin),
+        testOpen(privateWin),
+        testDelete(privateWin),
+        testKeys(privateWin)
+      ]).then(function() {
+        privateWin.close();
+        finish();
+      });
+    });
+  });
+}
