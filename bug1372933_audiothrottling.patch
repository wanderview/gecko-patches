# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  45fde181a497a187d01d5412f5b72897c7520517
Bug 1372933 Relax time checks in browser_timeout_throttling_with_audio_playback.js back to previous levels. r=ehsan

diff --git a/dom/base/test/browser_timeout_throttling_with_audio_playback.js b/dom/base/test/browser_timeout_throttling_with_audio_playback.js
--- a/dom/base/test/browser_timeout_throttling_with_audio_playback.js
+++ b/dom/base/test/browser_timeout_throttling_with_audio_playback.js
@@ -12,21 +12,16 @@ var testURLs = [
 // So we use a 100,000 second minimum timeout value for background tabs.  This
 // means that in case the test fails, it will time out in practice, but just for
 // sanity the test condition ensures that the observed timeout delay falls in
 // this range.
 const kMinTimeoutBackground = 100 * 1000 * 1000;
 
 const kDelay = 10;
 
-// Allow a very generous error range due to debug automation tests running
-// very slowly.  This is still far below the configured background throttle
-// amount.
-const kAllowedError = 1000;
-
 Services.scriptloader.loadSubScript(kPluginJS, this);
 
 function* runTest(url) {
   let currentTab = gBrowser.selectedTab;
   let newTab = yield BrowserTestUtils.openNewForegroundTab(gBrowser, kBaseURI);
   let newBrowser = gBrowser.getBrowserForTab(newTab);
 
   // Wait for the UI to indicate that audio is being played back.
@@ -41,17 +36,17 @@ function* runTest(url) {
     return new Promise(resolve => {
       let before = new Date();
       content.window.setTimeout(function() {
         let after = new Date();
         resolve(after - before);
       }, delay);
     });
   });
-  ok(timeout <= kDelay + kAllowedError, `Got the correct timeout (${timeout}`);
+  ok(timeout <= kMinTimeoutBackground, `Got the correct timeout (${timeout})`);
 
   // All done.
   yield BrowserTestUtils.removeTab(newTab);
 }
 
 add_task(function* setup() {
   yield SpecialPowers.pushPrefEnv({"set": [
     ["dom.min_background_timeout_value", kMinTimeoutBackground],
