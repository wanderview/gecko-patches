# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4af4ae0aee552a99a995ce4b32198b98294a95f7
Bug 1436812 P1 Make ServiceWorker MozPromise types exclusive so they can reject with ErrorResult values. r=baku

diff --git a/dom/serviceworkers/ServiceWorkerContainer.cpp b/dom/serviceworkers/ServiceWorkerContainer.cpp
--- a/dom/serviceworkers/ServiceWorkerContainer.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainer.cpp
@@ -76,24 +76,23 @@ ServiceWorkerContainer::ServiceWorkerCon
   Maybe<ServiceWorkerDescriptor> controller = aGlobal->GetController();
   if (controller.isSome()) {
     mControllerWorker = aGlobal->GetOrCreateServiceWorker(controller.ref());
   }
 }
 
 ServiceWorkerContainer::~ServiceWorkerContainer()
 {
-  mReadyPromiseHolder.DisconnectIfExists();
 }
 
 void
 ServiceWorkerContainer::DisconnectFromOwner()
 {
   mControllerWorker = nullptr;
-  mReadyPromiseHolder.DisconnectIfExists();
+  mReadyPromise = nullptr;
   DOMEventTargetHelper::DisconnectFromOwner();
 }
 
 void
 ServiceWorkerContainer::ControllerChanged(ErrorResult& aRv)
 {
   nsCOMPtr<nsIGlobalObject> go = GetParentObject();
   if (!go) {
@@ -262,17 +261,17 @@ ServiceWorkerContainer::GetRegistrations
       for (auto& desc : aDescList) {
         RefPtr<ServiceWorkerRegistration> reg =
           global->GetOrCreateServiceWorkerRegistration(desc);
         if (reg) {
           regList.AppendElement(Move(reg));
         }
       }
       outer->MaybeResolve(regList);
-    }, [self, outer] (nsresult aRv) {
+    }, [self, outer] (ErrorResult&& aRv) {
       outer->MaybeReject(aRv);
     });
 
   return outer.forget();
 }
 
 already_AddRefed<Promise>
 ServiceWorkerContainer::GetRegistration(const nsAString& aURL,
@@ -336,24 +335,19 @@ ServiceWorkerContainer::GetRegistration(
       nsIGlobalObject* global = self->GetGlobalIfValid(rv);
       if (rv.Failed()) {
         outer->MaybeReject(rv);
         return;
       }
       RefPtr<ServiceWorkerRegistration> reg =
         global->GetOrCreateServiceWorkerRegistration(aDescriptor);
       outer->MaybeResolve(reg);
-    }, [self, outer] (nsresult aRv) {
-      ErrorResult rv;
-      Unused << self->GetGlobalIfValid(rv);
-      if (rv.Failed()) {
-        outer->MaybeReject(rv);
-        return;
-      }
-      if (NS_SUCCEEDED(aRv)) {
+    }, [self, outer] (ErrorResult&& aRv) {
+      Unused << self->GetGlobalIfValid(aRv);
+      if (!aRv.Failed()) {
         outer->MaybeResolveWithUndefined();
         return;
       }
       outer->MaybeReject(aRv);
     });
 
   return outer.forget();
 }
@@ -383,31 +377,29 @@ ServiceWorkerContainer::GetReady(ErrorRe
   }
 
   RefPtr<ServiceWorkerContainer> self = this;
   RefPtr<Promise> outer = mReadyPromise;
 
   mInner->GetReady(clientInfo.ref())->Then(
     global->EventTargetFor(TaskCategory::Other), __func__,
     [self, outer] (const ServiceWorkerRegistrationDescriptor& aDescriptor) {
-      self->mReadyPromiseHolder.Complete();
       ErrorResult rv;
       nsIGlobalObject* global = self->GetGlobalIfValid(rv);
       if (rv.Failed()) {
         outer->MaybeReject(rv);
         return;
       }
       RefPtr<ServiceWorkerRegistration> reg =
         global->GetOrCreateServiceWorkerRegistration(aDescriptor);
       NS_ENSURE_TRUE_VOID(reg);
       outer->MaybeResolve(reg);
-    }, [self, outer] (nsresult aRv) {
-      self->mReadyPromiseHolder.Complete();
+    }, [self, outer] (ErrorResult&& aRv) {
       outer->MaybeReject(aRv);
-    })->Track(mReadyPromiseHolder);
+    });
 
   return mReadyPromise;
 }
 
 // Testing only.
 void
 ServiceWorkerContainer::GetScopeForUrl(const nsAString& aUrl,
                                        nsString& aScope,
diff --git a/dom/serviceworkers/ServiceWorkerUtils.h b/dom/serviceworkers/ServiceWorkerUtils.h
--- a/dom/serviceworkers/ServiceWorkerUtils.h
+++ b/dom/serviceworkers/ServiceWorkerUtils.h
@@ -6,25 +6,32 @@
 #ifndef _mozilla_dom_ServiceWorkerUtils_h
 #define _mozilla_dom_ServiceWorkerUtils_h
 
 #include "mozilla/MozPromise.h"
 #include "mozilla/dom/ServiceWorkerRegistrationDescriptor.h"
 #include "nsTArray.h"
 
 namespace mozilla {
+
+class ErrorResult;
+
 namespace dom {
 
 class ServiceWorkerRegistrationData;
 class ServiceWorkerRegistrationDescriptor;
 
-typedef MozPromise<ServiceWorkerRegistrationDescriptor, nsresult, false>
+// Note: These are exclusive promise types.  Only one Then() or ChainTo()
+//       call is allowed.  This is necessary since ErrorResult cannot
+//       be copied.
+
+typedef MozPromise<ServiceWorkerRegistrationDescriptor, ErrorResult, true>
         ServiceWorkerRegistrationPromise;
 
-typedef MozPromise<nsTArray<ServiceWorkerRegistrationDescriptor>, nsresult, false>
+typedef MozPromise<nsTArray<ServiceWorkerRegistrationDescriptor>, ErrorResult, true>
         ServiceWorkerRegistrationListPromise;
 
 bool
 ServiceWorkerParentInterceptEnabled();
 
 bool
 ServiceWorkerRegistrationDataIsValid(const ServiceWorkerRegistrationData& aData);
 
