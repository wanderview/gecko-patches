# HG changeset patch
# Parent c72d9e0b5832b569a07c59944a3a67b1d7e68d24
# User Ben Kelly <ben@wanderview.com>
Set a LoadContext on channels created for SW and Fetch.

diff --git a/docshell/base/LoadContext.h b/docshell/base/LoadContext.h
--- a/docshell/base/LoadContext.h
+++ b/docshell/base/LoadContext.h
@@ -100,16 +100,30 @@ public:
     , mUsePrivateBrowsing(false)
     , mUseRemoteTabs(false)
     , mIsInBrowserElement(false)
 #ifdef DEBUG
     , mIsNotNull(true)
 #endif
   {}
 
+  // Constructor taking appId/inBrowsingElement for use in fetch()
+  LoadContext(uint32_t aAppId, bool aIsInBrowserElement)
+    : mTopFrameElement(nullptr)
+    , mNestedFrameId(0)
+    , mAppId(aAppId)
+    , mIsContent(false)
+    , mUsePrivateBrowsing(false)
+    , mUseRemoteTabs(false)
+    , mIsInBrowserElement(aIsInBrowserElement)
+#ifdef DEBUG
+    , mIsNotNull(true)
+#endif
+  {}
+
 private:
   ~LoadContext() {}
 
   nsWeakPtr     mTopFrameElement;
   uint64_t      mNestedFrameId;
   uint32_t      mAppId;
   bool          mIsContent;
   bool          mUsePrivateBrowsing;
diff --git a/dom/workers/ScriptLoader.cpp b/dom/workers/ScriptLoader.cpp
--- a/dom/workers/ScriptLoader.cpp
+++ b/dom/workers/ScriptLoader.cpp
@@ -24,16 +24,17 @@
 #include "nsNetUtil.h"
 #include "nsScriptLoader.h"
 #include "nsString.h"
 #include "nsTArray.h"
 #include "nsThreadUtils.h"
 #include "nsXPCOM.h"
 #include "xpcpublic.h"
 
+#include "mozilla/LoadContext.h"
 #include "mozilla/dom/Exceptions.h"
 #include "Principal.h"
 #include "WorkerFeature.h"
 #include "WorkerPrivate.h"
 #include "WorkerRunnable.h"
 
 #define MAX_CONCURRENT_SCRIPTS 1000
 
@@ -112,29 +113,34 @@ ChannelFromScriptURL(nsIPrincipal* princ
                        parentDoc,
                        nsILoadInfo::SEC_NORMAL,
                        nsIContentPolicy::TYPE_SCRIPT,
                        loadGroup,
                        nullptr, // aCallbacks
                        flags,
                        ios);
   } else {
-    // we should use 'principal' here; needs to be fixed before
-    // we move security checks to AsyncOpen. We use nullPrincipal
-    // for now, because the loadGroup is null and hence causes
-    // GetChannelUriPrincipal to return the wrong principal.
-    nsCOMPtr<nsIPrincipal> nullPrincipal =
-      do_CreateInstance("@mozilla.org/nullprincipal;1", &rv);
+    uint32_t appId;
+    rv = principal->GetAppId(&appId);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    bool inBrowserElement;
+    rv = principal->GetIsInBrowserElement(&inBrowserElement);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    nsRefPtr<LoadContext> loadContext = new LoadContext(appId,
+                                                        inBrowserElement);
+
     rv = NS_NewChannel(getter_AddRefs(channel),
                        uri,
-                       nullPrincipal,
+                       principal,
                        nsILoadInfo::SEC_NORMAL,
                        nsIContentPolicy::TYPE_SCRIPT,
                        loadGroup,
-                       nullptr, // aCallbacks
+                       loadContext,
                        flags,
                        ios);
   }
 
   NS_ENSURE_SUCCESS(rv, rv);
 
   channel.forget(aChannel);
   return rv;
