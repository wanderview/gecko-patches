# HG changeset patch
# Parent c72d9e0b5832b569a07c59944a3a67b1d7e68d24
# User Ben Kelly <ben@wanderview.com>
Set a LoadContext on channels created for SW and Fetch.

diff --git a/docshell/base/LoadContext.h b/docshell/base/LoadContext.h
--- a/docshell/base/LoadContext.h
+++ b/docshell/base/LoadContext.h
@@ -100,16 +100,30 @@ public:
     , mUsePrivateBrowsing(false)
     , mUseRemoteTabs(false)
     , mIsInBrowserElement(false)
 #ifdef DEBUG
     , mIsNotNull(true)
 #endif
   {}
 
+  // Constructor taking appId/inBrowsingElement for use in fetch()
+  LoadContext(uint32_t aAppId, bool aIsInBrowserElement)
+    : mTopFrameElement(nullptr)
+    , mNestedFrameId(0)
+    , mAppId(aAppId)
+    , mIsContent(false)
+    , mUsePrivateBrowsing(false)
+    , mUseRemoteTabs(false)
+    , mIsInBrowserElement(aIsInBrowserElement)
+#ifdef DEBUG
+    , mIsNotNull(true)
+#endif
+  {}
+
 private:
   ~LoadContext() {}
 
   nsWeakPtr     mTopFrameElement;
   uint64_t      mNestedFrameId;
   uint32_t      mAppId;
   bool          mIsContent;
   bool          mUsePrivateBrowsing;
diff --git a/dom/fetch/FetchDriver.cpp b/dom/fetch/FetchDriver.cpp
--- a/dom/fetch/FetchDriver.cpp
+++ b/dom/fetch/FetchDriver.cpp
@@ -17,16 +17,17 @@
 #include "nsContentPolicyUtils.h"
 #include "nsCrossSiteListenerProxy.h"
 #include "nsDataHandler.h"
 #include "nsHostObjectProtocolHandler.h"
 #include "nsNetUtil.h"
 #include "nsStreamUtils.h"
 #include "nsStringStream.h"
 
+#include "mozilla/LoadContext.h"
 #include "mozilla/dom/File.h"
 #include "mozilla/dom/workers/Workers.h"
 
 #include "Fetch.h"
 #include "InternalRequest.h"
 #include "InternalResponse.h"
 
 namespace mozilla {
@@ -299,24 +300,34 @@ FetchDriver::HttpFetch(bool aCORSFlag, b
   nsCOMPtr<nsIURI> uri;
   rv = NS_NewURI(getter_AddRefs(uri),
                           url,
                           nullptr,
                           nullptr,
                           ios);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  uint32_t appId;
+  rv = mPrincipal->GetAppId(&appId);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  bool inBrowserElement;
+  rv = mPrincipal->GetIsInBrowserElement(&inBrowserElement);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  nsRefPtr<LoadContext> loadContext = new LoadContext(appId, inBrowserElement);
+
   nsCOMPtr<nsIChannel> chan;
   rv = NS_NewChannel(getter_AddRefs(chan),
                      uri,
                      mPrincipal,
                      nsILoadInfo::SEC_NORMAL,
                      mRequest->GetContext(),
                      nullptr, /* FIXME(nsm): loadgroup */
-                     nullptr, /* aCallbacks */
+                     loadContext,
                      nsIRequest::LOAD_BACKGROUND,
                      ios);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // NS_StartCORSPreflight() will automatically kick off the original request
   // if it succeeds, so we need to have everything setup for the original
   // request too.
   // Setup useCredentials as required by the "CORS check" algorithm in the
diff --git a/dom/workers/ServiceWorkerManager.cpp b/dom/workers/ServiceWorkerManager.cpp
--- a/dom/workers/ServiceWorkerManager.cpp
+++ b/dom/workers/ServiceWorkerManager.cpp
@@ -11,16 +11,17 @@
 #include "nsIScriptSecurityManager.h"
 #include "nsIStreamLoader.h"
 #include "nsPIDOMWindow.h"
 #include "nsDebug.h"
 
 #include "jsapi.h"
 
 #include "mozilla/DebugOnly.h"
+#include "mozilla/LoadContext.h"
 #include "mozilla/dom/BindingUtils.h"
 #include "mozilla/dom/DOMError.h"
 #include "mozilla/dom/ErrorEvent.h"
 #include "mozilla/dom/Headers.h"
 #include "mozilla/dom/InstallEventBinding.h"
 #include "mozilla/dom/Navigator.h"
 #include "mozilla/dom/PromiseNativeHandler.h"
 #include "mozilla/dom/Request.h"
@@ -37,16 +38,20 @@
 #include "ServiceWorkerContainer.h"
 #include "ServiceWorkerRegistration.h"
 #include "ServiceWorkerEvents.h"
 #include "WorkerInlines.h"
 #include "WorkerPrivate.h"
 #include "WorkerRunnable.h"
 #include "WorkerScope.h"
 
+#ifdef PostMessage
+#undef PostMessage
+#endif
+
 using namespace mozilla;
 using namespace mozilla::dom;
 
 BEGIN_WORKERS_NAMESPACE
 
 NS_IMPL_ISUPPORTS0(ServiceWorkerJob)
 NS_IMPL_ISUPPORTS0(ServiceWorkerRegistrationInfo)
 
@@ -616,22 +621,41 @@ private:
 
     // FIXME(nsm): Plug in FetchDriver when it is ready.
     nsCOMPtr<nsIURI> uri;
     nsresult rv = NS_NewURI(getter_AddRefs(uri), mRegistration->mScriptSpec, nullptr, nullptr);
     if (NS_WARN_IF(NS_FAILED(rv))) {
       return Fail(rv);
     }
 
+
+    uint32_t appId;
+    rv = mPrincipal->GetAppId(&appId);
+    if (NS_WARN_IF(NS_FAILED(rv))) {
+      return Fail(rv);
+    }
+
+    bool inBrowserElement;
+    rv = mPrincipal->GetIsInBrowserElement(&inBrowserElement);
+    if (NS_WARN_IF(NS_FAILED(rv))) {
+      return Fail(rv);
+    }
+
+    printf_stderr("### ### create LoadContext with appId:%u inBrowserElement:%s\n",
+                  appId, (inBrowserElement ? "true" : "false"));
+    nsRefPtr<LoadContext> loadContext = new LoadContext(appId, inBrowserElement);
+
     nsCOMPtr<nsIChannel> channel;
     rv = NS_NewChannel(getter_AddRefs(channel),
                        uri,
                        mRegistration->mPrincipal,
                        nsILoadInfo::SEC_NORMAL,
-                       nsIContentPolicy::TYPE_SCRIPT); // FIXME(nsm): TYPE_SERVICEWORKER
+                       nsIContentPolicy::TYPE_SCRIPT, // FIXME(nsm): TYPE_SERVICEWORKER
+                       nullptr,                       // loadgroup
+                       loadContext);
     if (NS_WARN_IF(NS_FAILED(rv))) {
       return Fail(rv);
     }
     // FIXME(nsm): Set redirect limit.
 
     // Don't let serviceworker intercept.
     nsCOMPtr<nsIHttpChannelInternal> internalChannel = do_QueryInterface(channel);
     if (internalChannel) {
