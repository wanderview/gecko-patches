# HG changeset patch
# Parent d3e54b3baf079ad941137911ec7eaba4148969bc
# User Ben Kelly <ben@wanderview.com>
Fix windows bustage.


diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -6,16 +6,17 @@
 
 #include "mozilla/dom/cache/CacheStorage.h"
 
 #include "mozilla/unused.h"
 #include "mozilla/dom/CacheStorageBinding.h"
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/Response.h"
 #include "mozilla/dom/cache/Cache.h"
+#include "mozilla/dom/cache/CacheInitData.h"
 #include "mozilla/dom/cache/CacheStorageChild.h"
 #include "mozilla/dom/cache/PCacheChild.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/TypeUtils.h"
 #include "mozilla/ipc/BackgroundChild.h"
 #include "mozilla/ipc/PBackgroundChild.h"
 #include "nsIGlobalObject.h"
 
@@ -42,27 +43,29 @@ NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(
 NS_INTERFACE_MAP_END
 
 CacheStorage::CacheStorage(Namespace aNamespace,
                            nsISupports* aOwner,
                            nsIGlobalObject* aGlobal,
                            const nsACString& aOrigin,
                            const nsACString& aQuotaGroup,
                            bool aIsApp, bool aHasUnlimStoragePerm)
-  : mInitData(aNamespace, nsCString(aOrigin), nsCString(aQuotaGroup),
-              aIsApp, aHasUnlimStoragePerm)
+  : mNamespace(aNamespace)
   , mOwner(aOwner)
   , mGlobal(aGlobal)
+  , mOrigin(aOrigin)
+  , mQuotaGroup(aQuotaGroup)
+  , mIsApp(aIsApp)
+  , mHasUnlimStoragePerm(aHasUnlimStoragePerm)
   , mActor(nullptr)
   , mFailedActor(false)
 {
   MOZ_ASSERT(mGlobal);
 
-  if (mInitData.origin().EqualsLiteral("null") ||
-      mInitData.quotaGroup().EqualsLiteral("")) {
+  if (mOrigin.EqualsLiteral("null") || mQuotaGroup.EqualsLiteral("")) {
     ActorFailed();
     return;
   }
 
   PBackgroundChild* actor = BackgroundChild::GetForCurrentThread();
   if (actor) {
     ActorCreated(actor);
   } else {
@@ -272,18 +275,20 @@ CacheStorage::ActorCreated(PBackgroundCh
   MOZ_ASSERT(aActor);
 
   CacheStorageChild* newActor = new CacheStorageChild(*this);
   if (NS_WARN_IF(!newActor)) {
     ActorFailed();
     return;
   }
 
+  CacheInitData initData(mNamespace, mOrigin, mQuotaGroup,
+                         mIsApp, mHasUnlimStoragePerm);
   PCacheStorageChild* constructedActor =
-    aActor->SendPCacheStorageConstructor(newActor, mInitData);
+    aActor->SendPCacheStorageConstructor(newActor, initData);
 
   if (NS_WARN_IF(!constructedActor)) {
     ActorFailed();
     return;
   }
 
   MOZ_ASSERT(constructedActor == newActor);
   mActor = newActor;
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -3,17 +3,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_cache_CacheStorage_h
 #define mozilla_dom_cache_CacheStorage_h
 
 #include "mozilla/dom/CacheBinding.h"
-#include "mozilla/dom/cache/CacheInitData.h"
 #include "mozilla/dom/cache/CacheStorageChildListener.h"
 #include "mozilla/dom/cache/Types.h"
 #include "mozilla/dom/cache/TypeUtils.h"
 #include "nsAutoPtr.h"
 #include "nsCOMPtr.h"
 #include "nsISupportsImpl.h"
 #include "nsTArray.h"
 #include "nsWrapperCache.h"
@@ -91,20 +90,26 @@ public:
 #endif
 
 private:
   virtual ~CacheStorage();
 
   RequestId AddRequestPromise(Promise* aPromise, ErrorResult& aRv);
   already_AddRefed<Promise> RemoveRequestPromise(RequestId aRequestId);
 
-  const CacheInitData mInitData;
+  // Would like to use CacheInitData here, but we cannot because
+  // its an IPC struct which breaks webidl by including windows.h.
+  const Namespace mNamespace;
   // TODO: remove separate mOwner
   nsCOMPtr<nsISupports> mOwner;
   nsCOMPtr<nsIGlobalObject> mGlobal;
+  const nsCString mOrigin;
+  const nsCString mQuotaGroup;
+  const bool mIsApp;
+  const bool mHasUnlimStoragePerm;
   CacheStorageChild* mActor;
   nsTArray<nsRefPtr<Promise>> mRequestPromises;
 
   enum Op
   {
     OP_MATCH,
     OP_HAS,
     OP_OPEN,
