# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4c0bd4a5a57b30c92b1716021fd436015b01e6fb

diff --git a/dom/workers/ServiceWorkerEvents.cpp b/dom/workers/ServiceWorkerEvents.cpp
--- a/dom/workers/ServiceWorkerEvents.cpp
+++ b/dom/workers/ServiceWorkerEvents.cpp
@@ -514,32 +514,32 @@ public:
       mOwner->CancelRequest(NS_ERROR_INTERCEPTION_FAILED);
     }
   }
 
   // This function steals the error message from a ErrorResult.
   void
   SetCancelErrorResult(JSContext* aCx, ErrorResult& aRv)
   {
-    MOZ_ASSERT(aRv.Failed());
+    MOZ_DIAGNOSTIC_ASSERT(aRv.Failed());
+    MOZ_DIAGNOSTIC_ASSERT(!JS_IsExceptionPending(aCx));
 
     // Storing the error as exception in the JSContext.
     if (!aRv.MaybeSetPendingException(aCx)) {
       return;
     }
 
     MOZ_ASSERT(!aRv.Failed());
 
     // Let's take the pending exception.
     JS::Rooted<JS::Value> exn(aCx);
     if (!JS_GetPendingException(aCx, &exn)) {
       return;
     }
 
-    // Cleaning the exception.
     JS_ClearPendingException(aCx);
 
     // Converting the exception in a js::ErrorReport.
     js::ErrorReport report(aCx);
     if (!report.init(aCx, exn, js::ErrorReport::WithSideEffects)) {
       JS_ClearPendingException(aCx);
       return;
     }
