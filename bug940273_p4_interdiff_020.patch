# HG changeset patch
# Parent 0fc75618b92497af800db95f5237279b03c70c5b
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 020 Context.(h|cpp) issues

diff --git a/dom/cache/Context.cpp b/dom/cache/Context.cpp
--- a/dom/cache/Context.cpp
+++ b/dom/cache/Context.cpp
@@ -21,61 +21,59 @@ namespace {
 
 using mozilla::dom::Nullable;
 using mozilla::dom::cache::QuotaInfo;
 using mozilla::dom::quota::OriginOrPatternString;
 using mozilla::dom::quota::QuotaManager;
 using mozilla::dom::quota::PERSISTENCE_TYPE_DEFAULT;
 using mozilla::dom::quota::PersistenceType;
 
-class QuotaReleaseRunnable MOZ_FINAL : public nsIRunnable
+// Executed when the context is destroyed to release our lock on the
+// QuotaManager.
+class QuotaReleaseRunnable MOZ_FINAL : public nsRunnable
 {
 public:
   QuotaReleaseRunnable(const QuotaInfo& aQuotaInfo, const nsACString& aQuotaId)
     : mQuotaInfo(aQuotaInfo)
     , mQuotaId(aQuotaId)
   { }
 
+  NS_IMETHOD Run() MOZ_OVERRIDE
+  {
+    MOZ_ASSERT(NS_IsMainThread());
+    QuotaManager* qm = QuotaManager::Get();
+    MOZ_ASSERT(qm);
+    qm->AllowNextSynchronizedOp(OriginOrPatternString::FromOrigin(mQuotaInfo.mOrigin),
+                                Nullable<PersistenceType>(PERSISTENCE_TYPE_DEFAULT),
+                                mQuotaId);
+    return NS_OK;
+  }
+
 private:
   ~QuotaReleaseRunnable() { }
 
   const QuotaInfo mQuotaInfo;
   const nsCString mQuotaId;
-
-public:
-  NS_DECL_THREADSAFE_ISUPPORTS
-  NS_DECL_NSIRUNNABLE
 };
 
-NS_IMPL_ISUPPORTS(QuotaReleaseRunnable, nsIRunnable);
-
-NS_IMETHODIMP
-QuotaReleaseRunnable::Run()
-{
-  MOZ_ASSERT(NS_IsMainThread());
-  QuotaManager* qm = QuotaManager::Get();
-  MOZ_ASSERT(qm);
-  qm->AllowNextSynchronizedOp(OriginOrPatternString::FromOrigin(mQuotaInfo.mOrigin),
-                              Nullable<PersistenceType>(PERSISTENCE_TYPE_DEFAULT),
-                              mQuotaId);
-  return NS_OK;
-}
-
 } // anonymous namespace
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::DebugOnly;
 using mozilla::dom::quota::OriginOrPatternString;
 using mozilla::dom::quota::QuotaManager;
 using mozilla::dom::quota::PERSISTENCE_TYPE_DEFAULT;
 using mozilla::dom::quota::PersistenceType;
 
+// Executed to perform the complicated dance of steps necessary to initialize
+// the QuotaManager.  This must be performed for each origin before any disk
+// IO is occurrs.
 class Context::QuotaInitRunnable MOZ_FINAL : public nsIRunnable
                                            , public Action::Resolver
 {
 public:
   QuotaInitRunnable(Context* aContext,
                     Manager* aManager,
                     const nsACString& aQuotaId,
                     Action* aQuotaIOThreadAction)
@@ -103,34 +101,41 @@ public:
       mState = STATE_COMPLETE;
       Clear();
     }
     return rv;
   }
 
   virtual void Resolve(nsresult aRv) MOZ_OVERRIDE
   {
+    // Depending on the error or success path, this can run on either the
+    // main thread or the QuotaManager IO thread.  The IO thread is an
+    // idle thread which may be destroyed and recreated, so its hard to
+    // assert on.
     MOZ_ASSERT(mState == STATE_RUNNING || NS_FAILED(aRv));
+
     mResult = aRv;
     mState = STATE_COMPLETING;
+
     nsresult rv = mInitiatingThread->Dispatch(this, nsIThread::DISPATCH_NORMAL);
     if (NS_FAILED(rv)) {
+      // Shutdown must be delayed until all Contexts are destroyed.  Crash for
+      // this invariant violation.
       MOZ_CRASH("Failed to dispatch QuotaInitRunnable to initiating thread.");
     }
   }
 
-protected:
-  virtual ~QuotaInitRunnable()
+private:
+  ~QuotaInitRunnable()
   {
     MOZ_ASSERT(mState == STATE_COMPLETE);
     MOZ_ASSERT(!mContext);
     MOZ_ASSERT(!mQuotaIOThreadAction);
   }
 
-private:
   enum State
   {
     STATE_INIT,
     STATE_CALL_WAIT_FOR_OPEN_ALLOWED,
     STATE_WAIT_FOR_OPEN_ALLOWED,
     STATE_ENSURE_ORIGIN_INITIALIZED,
     STATE_RUNNING,
     STATE_COMPLETING,
@@ -158,20 +163,58 @@ private:
 public:
   NS_DECL_ISUPPORTS_INHERITED
   NS_DECL_NSIRUNNABLE
 };
 
 NS_IMPL_ISUPPORTS_INHERITED(mozilla::dom::cache::Context::QuotaInitRunnable,
                             Action::Resolver, nsIRunnable);
 
+// The QuotaManager init state machine is represented in the following diagram:
+//
+//    +---------------+
+//    |     Start     |      Resolve(error)
+//    | (Orig Thread) +---------------------+
+//    +-------+-------+                     |
+//            |                             |
+// +----------v-----------+                 |
+// |CallWaitForOpenAllowed|  Resolve(error) |
+// |    (Main Thread)     +-----------------+
+// +----------+-----------+                 |
+//            |                             |
+//   +--------v---------+                   |
+//   |WaitForOpenAllowed|    Resolve(error) |
+//   |  (Main Thread)   +-------------------+
+//   +--------+---------+                   |
+//            |                             |
+// +----------v------------+                |
+// |EnsureOriginInitialized| Resolve(error) |
+// |   (Quota IO Thread)   +----------------+
+// +----------+------------+                |
+//            |                             |
+//  +---------v---------+            +------v------+
+//  |      Running      |  Resolve() |  Completing |
+//  | (Quota IO Thread) +------------>(Orig Thread)|
+//  +-------------------+            +------+------+
+//                                          |
+//                                    +-----v----+
+//                                    | Complete |
+//                                    +----------+
+//
+// The initialization process proceeds through the main states.  Cancelation is
+// not permitted.  If an error occurs, then we transition back to Completing
+// state back on the original thread.
 NS_IMETHODIMP
 Context::QuotaInitRunnable::Run()
 {
+  // May run on different threads depending on the state.  See individual
+  // state cases for thread assertions.
+
   switch(mState) {
+    // -----------------------------------
     case STATE_CALL_WAIT_FOR_OPEN_ALLOWED:
     {
       MOZ_ASSERT(NS_IsMainThread());
       QuotaManager* qm = QuotaManager::GetOrCreate();
       if (!qm) {
         Resolve(NS_ERROR_FAILURE);
         return NS_OK;
       }
@@ -183,43 +226,51 @@ Context::QuotaInitRunnable::Run()
                                              &mQuotaInfo.mOrigin,
                                              &mQuotaInfo.mIsApp,
                                              &mQuotaInfo.mHasUnlimStoragePerm);
       if (NS_WARN_IF(NS_FAILED(rv))) {
         Resolve(rv);
         return NS_OK;
       }
 
+      // QuotaManager::WaitForOpenAllowed() will hold a reference to us as
+      // a callback.  We will then get executed again on the main thread when
+      // it is safe to open the quota directory.
       mState = STATE_WAIT_FOR_OPEN_ALLOWED;
       rv = qm->WaitForOpenAllowed(OriginOrPatternString::FromOrigin(mQuotaInfo.mOrigin),
                                   Nullable<PersistenceType>(PERSISTENCE_TYPE_DEFAULT),
                                   mQuotaId, this);
       if (NS_FAILED(rv)) {
         Resolve(rv);
         return NS_OK;
       }
       break;
     }
+    // ------------------------------
     case STATE_WAIT_FOR_OPEN_ALLOWED:
     {
       MOZ_ASSERT(NS_IsMainThread());
       QuotaManager* qm = QuotaManager::Get();
       MOZ_ASSERT(qm);
       mState = STATE_ENSURE_ORIGIN_INITIALIZED;
       nsresult rv = qm->IOThread()->Dispatch(this, nsIThread::DISPATCH_NORMAL);
       if (NS_WARN_IF(NS_FAILED(rv))) {
         Resolve(rv);
         return NS_OK;
       }
       break;
     }
+    // ----------------------------------
     case STATE_ENSURE_ORIGIN_INITIALIZED:
     {
       // Can't assert quota IO thread because its an idle thread that can get
-      // recreated.
+      // recreated.  At least assert we're not on main thread or owning thread.
+      MOZ_ASSERT(!NS_IsMainThread());
+      MOZ_ASSERT(_mOwningThread.GetThread() != PR_GetCurrentThread());
+
       QuotaManager* qm = QuotaManager::Get();
       MOZ_ASSERT(qm);
       nsresult rv = qm->EnsureOriginIsInitialized(PERSISTENCE_TYPE_DEFAULT,
                                                   mQuotaInfo.mGroup,
                                                   mQuotaInfo.mOrigin,
                                                   mQuotaInfo.mIsApp,
                                                   mQuotaInfo.mHasUnlimStoragePerm,
                                                   getter_AddRefs(mQuotaInfo.mDir));
@@ -230,43 +281,51 @@ Context::QuotaInitRunnable::Run()
 
       mState = STATE_RUNNING;
 
       if (!mQuotaIOThreadAction) {
         Resolve(NS_OK);
         return NS_OK;
       }
 
+      // Execute the provided initialization Action.  We pass ourselves as the
+      // Resolver.  The Action must either call Resolve() immediately or hold
+      // a ref to us and call Resolve() later.
       mQuotaIOThreadAction->RunOnTarget(this, mQuotaInfo);
 
       break;
     }
+    // -------------------
     case STATE_COMPLETING:
     {
       NS_ASSERT_OWNINGTHREAD(Action::Resolver);
       if (mQuotaIOThreadAction) {
         mQuotaIOThreadAction->CompleteOnInitiatingThread(mResult);
       }
       mContext->OnQuotaInit(mResult, mQuotaInfo);
       mState = STATE_COMPLETE;
       // Explicitly cleanup here as the destructor could fire on any of
       // the threads we have bounced through.
       Clear();
       break;
     }
+    // -----
     default:
     {
       MOZ_CRASH("unexpected state in QuotaInitRunnable");
       break;
     }
   }
 
   return NS_OK;
 }
 
+// Runnable wrapper around Action objects dispatched on the Context.  This
+// runnable executes the Action on the appropriate threads while the Context
+// is initialized.
 class Context::ActionRunnable MOZ_FINAL : public nsIRunnable
                                         , public Action::Resolver
 {
 public:
   ActionRunnable(Context* aContext, nsIEventTarget* aTarget, Action* aAction,
                  const QuotaInfo& aQuotaInfo)
     : mContext(aContext)
     , mTarget(aTarget)
@@ -315,16 +374,18 @@ public:
     mCanceled = true;
     mResult = NS_ERROR_FAILURE;
     nsresult rv;
     switch(mState) {
       case STATE_RUNNING:
         // Re-dispatch if we are currently running
         rv = mTarget->Dispatch(this, nsIEventTarget::DISPATCH_NORMAL);
         if (NS_WARN_IF(NS_FAILED(rv))) {
+          // Shutdown must be delayed until all Contexts are destroyed.  Crash
+          // for this invariant violation.
           MOZ_CRASH("Failed to dispatch ActionRunnable to target thread.");
         }
         break;
       case STATE_INIT:
       case STATE_RUN_ON_TARGET:
       case STATE_COMPLETING:
       case STATE_COMPLETE:
         break;
@@ -336,22 +397,24 @@ public:
 
   virtual void Resolve(nsresult aRv) MOZ_OVERRIDE
   {
     MOZ_ASSERT(mState == STATE_RUNNING);
     mResult = aRv;
     mState = STATE_COMPLETING;
     nsresult rv = mInitiatingThread->Dispatch(this, nsIThread::DISPATCH_NORMAL);
     if (NS_FAILED(rv)) {
+      // Shutdown must be delayed until all Contexts are destroyed.  Crash
+      // for this invariant violation.
       MOZ_CRASH("Failed to dispatch ActionRunnable to initiating thread.");
     }
   }
 
 private:
-  virtual ~ActionRunnable()
+  ~ActionRunnable()
   {
     MOZ_ASSERT(mState == STATE_COMPLETE);
     MOZ_ASSERT(!mContext);
     MOZ_ASSERT(!mAction);
   }
 
   void Clear()
   {
@@ -384,79 +447,137 @@ private:
 public:
   NS_DECL_ISUPPORTS_INHERITED
   NS_DECL_NSIRUNNABLE
 };
 
 NS_IMPL_ISUPPORTS_INHERITED(mozilla::dom::cache::Context::ActionRunnable,
                             Action::Resolver, nsIRunnable);
 
+// The ActionRunnable has a simpler state machine.  It basically needs to run
+// the action on the target thread and then complete on the original thread.
+// The main complication here is that we also support Cancel().
+//
+//   +-------------+
+//   |    Start    |
+//   |(Orig Thread)|
+//   +-----+-------+
+//         |
+// +-------v---------+
+// |  RunOnTarget    |         Cancel()
+// |Target IO Thread)+-------------------------------+
+// +-------+---------+                               |
+//         |                                         |
+// +-------v----------+ Resolve() or Cancel()+-------v-----+
+// |     Running      |                      |  Completing |
+// |(Target IO Thread)+---------------------->(Orig Thread)|
+// +---+--------^-----+                      +-------+-----+
+//     |        |                                    |
+//     |        |                                    |
+//     +--------+                               +----v---+
+//      Cancel()                                |Complete|
+//                                              +--------+
+//
+// Its important to note that synchronous actions will effectively Resolve()
+// out of the Running state immediately.  Asynchronous Actions may remain
+// in the Running state for some time, but normally the ActionRunnable itself
+// does not see any execution there.  Its all handled internal to the Action.
+//
+// The main exception to this is when Cancel() is called.  To avoid races,
+// Cancel() simply sets a flag to be processed in the normal state machine.
+// In the case of an async Running state, however, it must reschedule the
+// ActionRunnable to execute again.  The flag then causes
+// Action::CancelOnTarget() to be executed which should halt any Action
+// processing.
 NS_IMETHODIMP
 Context::ActionRunnable::Run()
 {
   nsresult rv;
   switch(mState) {
+    // ----------------------
     case STATE_RUN_ON_TARGET:
+    {
       MOZ_ASSERT(NS_GetCurrentThread() == mTarget);
       if (mCanceled) {
         mState = STATE_COMPLETING;
         rv = mInitiatingThread->Dispatch(this, nsIThread::DISPATCH_NORMAL);
         if (NS_FAILED(rv)) {
+          // Shutdown must be delayed until all Contexts are destroyed.  Crash
+          // for this invariant violation.
           MOZ_CRASH("Failed to dispatch ActionRunnable to initiating thread.");
         }
         break;
       }
       mState = STATE_RUNNING;
       mAction->RunOnTarget(this, mQuotaInfo);
       break;
+    }
+    // ----------------
     case STATE_RUNNING:
+    {
       MOZ_ASSERT(NS_GetCurrentThread() == mTarget);
       // We only re-enter the RUNNING state if we are canceling.  Normally we
       // should transition out of RUNNING via Resolve() instead.
       MOZ_ASSERT(mCanceled);
       mState = STATE_COMPLETING;
       mAction->CancelOnTarget();
       mResult = NS_FAILED(mResult) ? mResult : NS_ERROR_FAILURE;
       rv = mInitiatingThread->Dispatch(this, nsIThread::DISPATCH_NORMAL);
       if (NS_FAILED(rv)) {
+        // Shutdown must be delayed until all Contexts are destroyed.  Crash
+        // for this invariant violation.
         MOZ_CRASH("Failed to dispatch ActionRunnable to initiating thread.");
       }
       break;
+    }
+    // -------------------
     case STATE_COMPLETING:
+    {
       NS_ASSERT_OWNINGTHREAD(Action::Resolver);
       mAction->CompleteOnInitiatingThread(mResult);
       mState = STATE_COMPLETE;
       // Explicitly cleanup here as the destructor could fire on any of
       // the threads we have bounced through.
       Clear();
       break;
+    }
+    // -----------------
     case STATE_COMPLETE:
-      // We can end up running in the complete state if we cancel on the origin
-      // thread while simultaneously starting to run the action on the target
-      // thread.
+    {
+      // We can end up running in the complete state if we cancel on the
+      // original thread while simultaneously starting to run the action on the
+      // target thread.
+      NS_ASSERT_OWNINGTHREAD(Action::Resolver);
       MOZ_ASSERT(mCanceled);
       break;
+    }
+    // -----
     default:
+    {
       MOZ_CRASH("unexpected state in ActionRunnable");
       break;
+    }
   }
   return NS_OK;
 }
 
 Context::Context(Manager* aManager, Action* aQuotaIOThreadAction)
   : mManager(aManager)
   , mState(STATE_CONTEXT_INIT)
 {
   MOZ_ASSERT(mManager);
 
   nsRefPtr<QuotaInitRunnable> runnable =
     new QuotaInitRunnable(this, mManager, NS_LITERAL_CSTRING("Cache"),
                           aQuotaIOThreadAction);
   nsresult rv = runnable->Dispatch();
   if (NS_FAILED(rv)) {
+    // Shutdown must be delayed until all Contexts are destroyed.  Shutdown
+    // must also prevent any new Contexts from being constructed.  Crash
+    // for this invariant violation.
     MOZ_CRASH("Failed to dispatch QuotaInitRunnable.");
   }
 }
 
 void
 Context::Dispatch(nsIEventTarget* aTarget, Action* aAction)
 {
   NS_ASSERT_OWNINGTHREAD(Context);
@@ -508,34 +629,38 @@ Context::~Context()
   NS_ASSERT_OWNINGTHREAD(Context);
   MOZ_ASSERT(mManager);
 
   // Unlock the quota dir as we go out of scope.
   nsCOMPtr<nsIRunnable> runnable =
     new QuotaReleaseRunnable(mQuotaInfo, NS_LITERAL_CSTRING("Cache"));
   nsresult rv = NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
   if (NS_FAILED(rv)) {
+    // Shutdown must be delayed until all Contexts are destroyed.  Crash
+    // for this invariant violation.
     MOZ_CRASH("Failed to dispatch QuotaReleaseRunnable to main thread.");
   }
 
   mManager->RemoveContext(this);
 }
 
 void
 Context::DispatchAction(nsIEventTarget* aTarget, Action* aAction)
 {
   NS_ASSERT_OWNINGTHREAD(Context);
 
   nsRefPtr<ActionRunnable> runnable =
     new ActionRunnable(this, aTarget, aAction, mQuotaInfo);
-  mActionRunnables.AppendElement(runnable);
   nsresult rv = runnable->Dispatch();
   if (NS_FAILED(rv)) {
+    // Shutdown must be delayed until all Contexts are destroyed.  Crash
+    // for this invariant violation.
     MOZ_CRASH("Failed to dispatch ActionRunnable to target thread.");
   }
+  mActionRunnables.AppendElement(runnable);
 }
 
 void
 Context::OnQuotaInit(nsresult aRv, const QuotaInfo& aQuotaInfo)
 {
   NS_ASSERT_OWNINGTHREAD(Context);
   MOZ_ASSERT(mState == STATE_CONTEXT_INIT);
 
diff --git a/dom/cache/Context.h b/dom/cache/Context.h
--- a/dom/cache/Context.h
+++ b/dom/cache/Context.h
@@ -19,16 +19,34 @@ class nsIFile;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class Action;
 class Manager;
 
+// The Context class is RAII-style class for managing IO operations within the
+// Cache.
+//
+// When a Context is created it performs the complicated steps necessary to
+// initialize the QuotaManager.  Action objects dispatched on the Context are
+// delayed until this initialization is complete.  They are then allow to
+// execute on any specified thread.  Once all references to the Context are
+// gone, then the steps necessary to release the QuotaManager are performed.
+// Since pending Action objects reference the Context, this allows overlapping
+// IO to opportunistically run without re-initializing the QuotaManager again.
+//
+// While the Context performs operations asynchronously on threads, all of
+// methods in its public interface must be called on the same thread
+// originally used to create the Context.
+//
+// As an invariant, all Context objects must be destroyed before permitting
+// the "profile-before-change" shutdown event to complete.  This is ensured
+// via the code in ShutdownObserver.cpp.
 class Context MOZ_FINAL
 {
 public:
   Context(Manager* aManager, Action* aQuotaIOThreadAction);
 
   // Execute given action on the target once the quota manager has been
   // initialized.
   //
@@ -74,16 +92,16 @@ private:
   State mState;
   QuotaInfo mQuotaInfo;
   nsTArray<PendingAction> mPendingActions;
 
   // weak refs since ~ActionRunnable() removes itself from this list
   nsTArray<ActionRunnable*> mActionRunnables;
 
 public:
-  NS_INLINE_DECL_REFCOUNTING(mozilla::dom::cache::Context)
+  NS_INLINE_DECL_REFCOUNTING(cache::Context)
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_Context_h
