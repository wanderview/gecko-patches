# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  77a622e733d9ed303167193e67d8e2dbf66611a6
Bug 1459209 P3 Scaffold RemoteServiceWorkerContainerImpl to connect the binding ServiceWorkerContainer to the PServiceWorkerContainerChild actor. r=baku

diff --git a/dom/serviceworkers/RemoteServiceWorkerContainerImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerContainerImpl.cpp
new file mode 100644
--- /dev/null
+++ b/dom/serviceworkers/RemoteServiceWorkerContainerImpl.cpp
@@ -0,0 +1,122 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "RemoteServiceWorkerContainerImpl.h"
+
+#include "mozilla/ipc/BackgroundChild.h"
+#include "mozilla/ipc/PBackgroundChild.h"
+#include "ServiceWorkerContainerChild.h"
+
+namespace mozilla {
+namespace dom {
+
+using mozilla::ipc::BackgroundChild;
+using mozilla::ipc::PBackgroundChild;
+
+RemoteServiceWorkerContainerImpl::~RemoteServiceWorkerContainerImpl()
+{
+  Shutdown();
+}
+
+void
+RemoteServiceWorkerContainerImpl::Shutdown()
+{
+  if (mShutdown) {
+    return;
+  }
+  mShutdown = true;
+
+  if (mActor) {
+    mActor->RevokeOwner(this);
+    mActor->MaybeStartTeardown();
+    mActor = nullptr;
+  }
+}
+
+RefPtr<ServiceWorkerRegistrationPromise>
+RemoteServiceWorkerContainerImpl::Register(const ClientInfo& aClientInfo,
+         const nsACString& aScopeURL,
+         const nsACString& aScriptURL,
+         ServiceWorkerUpdateViaCache aUpdateViaCache) const
+{
+  // TODO
+  return nullptr;
+}
+
+RefPtr<ServiceWorkerRegistrationPromise>
+RemoteServiceWorkerContainerImpl::GetRegistration(const ClientInfo& aClientInfo,
+                const nsACString& aURL) const
+{
+  // TODO
+  return nullptr;
+}
+
+RefPtr<ServiceWorkerRegistrationListPromise>
+RemoteServiceWorkerContainerImpl::GetRegistrations(const ClientInfo& aClientInfo) const
+{
+  // TODO
+  return nullptr;
+}
+
+RefPtr<ServiceWorkerRegistrationPromise>
+RemoteServiceWorkerContainerImpl::GetReady(const ClientInfo& aClientInfo) const
+{
+  // TODO
+  return nullptr;
+}
+
+RemoteServiceWorkerContainerImpl::RemoteServiceWorkerContainerImpl()
+  : mActor(nullptr)
+  , mShutdown(false)
+{
+  PBackgroundChild* parentActor = BackgroundChild::GetOrCreateForCurrentThread();
+  if (NS_WARN_IF(!parentActor)) {
+    Shutdown();
+    return;
+  }
+
+  RefPtr<WorkerHolderToken> workerHolderToken;
+  if (!NS_IsMainThread()) {
+    WorkerPrivate* workerPrivate = GetCurrentThreadWorkerPrivate();
+    MOZ_DIAGNOSTIC_ASSERT(workerPrivate);
+
+    workerHolderToken =
+      WorkerHolderToken::Create(workerPrivate, Terminating,
+                                WorkerHolderToken::AllowIdleShutdownStart);
+
+    if (NS_WARN_IF(!workerHolderToken)) {
+      Shutdown();
+      return;
+    }
+  }
+
+  ServiceWorkerContainerChild* actor =
+    new ServiceWorkerContainerChild(workerHolderToken);
+  PServiceWorkerContainerChild* sentActor =
+    parentActor->SendPServiceWorkerContainerConstructor(actor);
+  if (NS_WARN_IF(!sentActor)) {
+    Shutdown();
+    return;
+  }
+  MOZ_DIAGNOSTIC_ASSERT(sentActor == actor);
+
+  mActor = actor;
+  mActor->SetOwner(this);
+}
+
+void
+RemoteServiceWorkerContainerImpl::RevokeActor(ServiceWorkerContainerChild* aActor)
+{
+  MOZ_DIAGNOSTIC_ASSERT(mActor);
+  MOZ_DIAGNOSTIC_ASSERT(mActor == aActor);
+  mActor->RevokeOwner(this);
+  mActor = nullptr;
+
+  mShutdown = true;
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/serviceworkers/RemoteServiceWorkerContainerImpl.h b/dom/serviceworkers/RemoteServiceWorkerContainerImpl.h
new file mode 100644
--- /dev/null
+++ b/dom/serviceworkers/RemoteServiceWorkerContainerImpl.h
@@ -0,0 +1,56 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_remoteserviceworkercontainerimpl_h__
+#define mozilla_dom_remoteserviceworkercontainerimpl_h__
+
+#include "ServiceWorkerContainer.h"
+
+namespace mozilla {
+namespace dom {
+
+class ServiceWorkerContainerChild;
+
+class RemoteServiceWorkerContainerImpl final : public ServiceWorkerContainer::Inner
+{
+  ServiceWorkerContainerChild* mActor;
+  bool mShutdown;
+
+  ~RemoteServiceWorkerContainerImpl();
+
+  void
+  Shutdown();
+
+  // ServiceWorkerContainer::Inner implementation
+  RefPtr<ServiceWorkerRegistrationPromise>
+  Register(const ClientInfo& aClientInfo,
+           const nsACString& aScopeURL,
+           const nsACString& aScriptURL,
+           ServiceWorkerUpdateViaCache aUpdateViaCache) const override;
+
+  RefPtr<ServiceWorkerRegistrationPromise>
+  GetRegistration(const ClientInfo& aClientInfo,
+                  const nsACString& aURL) const override;
+
+  RefPtr<ServiceWorkerRegistrationListPromise>
+  GetRegistrations(const ClientInfo& aClientInfo) const override;
+
+  RefPtr<ServiceWorkerRegistrationPromise>
+  GetReady(const ClientInfo& aClientInfo) const override;
+
+public:
+  RemoteServiceWorkerContainerImpl();
+
+  void
+  RevokeActor(ServiceWorkerContainerChild* aActor);
+
+  NS_INLINE_DECL_REFCOUNTING(RemoteServiceWorkerContainerImpl, override)
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_remoteserviceworkercontainerimpl_h__
diff --git a/dom/serviceworkers/ServiceWorkerActors.cpp b/dom/serviceworkers/ServiceWorkerActors.cpp
--- a/dom/serviceworkers/ServiceWorkerActors.cpp
+++ b/dom/serviceworkers/ServiceWorkerActors.cpp
@@ -50,17 +50,17 @@ InitServiceWorkerParent(PServiceWorkerPa
 {
   auto actor = static_cast<ServiceWorkerParent*>(aActor);
   actor->Init(aDescriptor);
 }
 
 PServiceWorkerContainerChild*
 AllocServiceWorkerContainerChild()
 {
-  return new ServiceWorkerContainerChild();
+  MOZ_CRASH("should not be called");
 }
 
 bool
 DeallocServiceWorkerContainerChild(PServiceWorkerContainerChild* aActor)
 {
   auto actor = static_cast<ServiceWorkerContainerChild*>(aActor);
   delete actor;
   return true;
diff --git a/dom/serviceworkers/ServiceWorkerContainer.cpp b/dom/serviceworkers/ServiceWorkerContainer.cpp
--- a/dom/serviceworkers/ServiceWorkerContainer.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainer.cpp
@@ -23,18 +23,20 @@
 #include "mozilla/LoadInfo.h"
 #include "mozilla/dom/DOMMozPromiseRequestHolder.h"
 #include "mozilla/dom/DOMPrefs.h"
 #include "mozilla/dom/Navigator.h"
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/ServiceWorker.h"
 #include "mozilla/dom/ServiceWorkerContainerBinding.h"
 
+#include "RemoteServiceWorkerContainerImpl.h"
 #include "ServiceWorker.h"
 #include "ServiceWorkerContainerImpl.h"
+#include "ServiceWorkerUtils.h"
 
 namespace mozilla {
 namespace dom {
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(ServiceWorkerContainer)
 NS_INTERFACE_MAP_END_INHERITING(DOMEventTargetHelper)
 
 NS_IMPL_ADDREF_INHERITED(ServiceWorkerContainer, DOMEventTargetHelper)
@@ -61,17 +63,24 @@ ServiceWorkerContainer::IsEnabled(JSCont
 
   return DOMPrefs::ServiceWorkersEnabled();
 }
 
 // static
 already_AddRefed<ServiceWorkerContainer>
 ServiceWorkerContainer::Create(nsIGlobalObject* aGlobal)
 {
-  RefPtr<Inner> inner = new ServiceWorkerContainerImpl();
+  RefPtr<Inner> inner;
+  if (ServiceWorkerParentInterceptEnabled()) {
+    inner = new RemoteServiceWorkerContainerImpl();
+  } else {
+    inner = new ServiceWorkerContainerImpl();
+  }
+  NS_ENSURE_TRUE(inner, nullptr);
+
   RefPtr<ServiceWorkerContainer> ref =
     new ServiceWorkerContainer(aGlobal, inner.forget());
   return ref.forget();
 }
 
 ServiceWorkerContainer::ServiceWorkerContainer(nsIGlobalObject* aGlobal,
                                                already_AddRefed<ServiceWorkerContainer::Inner> aInner)
   : DOMEventTargetHelper(aGlobal)
diff --git a/dom/serviceworkers/ServiceWorkerContainerChild.cpp b/dom/serviceworkers/ServiceWorkerContainerChild.cpp
--- a/dom/serviceworkers/ServiceWorkerContainerChild.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainerChild.cpp
@@ -1,19 +1,70 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/PServiceWorkerContainerChild.h"
 
+#include "RemoteServiceWorkerContainerImpl.h"
+
 namespace mozilla {
 namespace dom {
 
 void
 ServiceWorkerContainerChild::ActorDestroy(ActorDestroyReason aReason)
 {
-  // TODO
+  if (mWorkerHolderToken) {
+    mWorkerHolderToken->RemoveListener(this);
+    mWorkerHolderToken = nullptr;
+  }
+
+  if (mOwner) {
+    mOwner->RevokeActor(this);
+    MOZ_DIAGNOSTIC_ASSERT(!mOwner);
+  }
+}
+
+void
+ServiceWorkerContainerChild::WorkerShuttingDown()
+{
+  MaybeStartTeardown();
+}
+
+ServiceWorkerContainerChild::ServiceWorkerContainerChild(WorkerHolderToken* aWorkerHolderToken)
+  : mWorkerHolderToken(aWorkerHolderToken)
+  , mOwner(nullptr)
+  , mTeardownStarted(false)
+{
+  if (mWorkerHolderToken) {
+    mWorkerHolderToken->AddListener(this);
+  }
+}
+
+void
+ServiceWorkerContainerChild::SetOwner(RemoteServiceWorkerContainerImpl* aOwner)
+{
+  MOZ_DIAGNOSTIC_ASSERT(!mOwner);
+  MOZ_DIAGNOSTIC_ASSERT(aOwner);
+  mOwner = aOwner;
+}
+
+void
+ServiceWorkerContainerChild::RevokeOwner(RemoteServiceWorkerContainerImpl* aOwner)
+{
+  MOZ_DIAGNOSTIC_ASSERT(mOwner);
+  MOZ_DIAGNOSTIC_ASSERT(aOwner == mOwner);
+  mOwner = nullptr;
+}
+
+void
+ServiceWorkerContainerChild::MaybeStartTeardown()
+{
+  if (mTeardownStarted) {
+    return;
+  }
+  mTeardownStarted = true;
 }
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/ServiceWorkerContainerChild.h b/dom/serviceworkers/ServiceWorkerContainerChild.h
--- a/dom/serviceworkers/ServiceWorkerContainerChild.h
+++ b/dom/serviceworkers/ServiceWorkerContainerChild.h
@@ -3,27 +3,46 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_serviceworkercontainerchild_h__
 #define mozilla_dom_serviceworkercontainerchild_h__
 
 #include "mozilla/dom/PServiceWorkerContainerChild.h"
+#include "mozilla/dom/WorkerHolderToken.h"
 
 namespace mozilla {
 namespace dom {
 
 class ServiceWorkerContainerChild final : public PServiceWorkerContainerChild
+                                        , public WorkerHolderToken::Listener
 {
+  RefPtr<WorkerHolderToken> mWorkerHolderToken;
+  RemoteServiceWorkerContainerImpl* mOwner;
+  bool mTeardownStarted;
+
   // PServiceWorkerContainerChild
   void
   ActorDestroy(ActorDestroyReason aReason) override;
 
+  // WorkerHolderToken::Listener
+  void
+  WorkerShuttingDown() override;
+
 public:
-  ServiceWorkerContainerChild() = default;
+  explicit ServiceWorkerContainerChild(WorkerHolderToken* aWorkerHolderToken);
   ~ServiceWorkerContainerChild() = default;
+
+  void
+  SetOwner(RemoteServiceWorkerContainerImpl* aOwner);
+
+  void
+  RevokeOwner(RemoteServiceWorkerContainerImpl* aOwner);
+
+  void
+  MaybeStartTeardown();
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_serviceworkercontainerchild_h__
diff --git a/dom/serviceworkers/ServiceWorkerContainerImpl.cpp b/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
--- a/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
@@ -1,16 +1,18 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorkerContainerImpl.h"
 
+#include "ServiceWorkerRegistration.h"
+
 namespace mozilla {
 namespace dom {
 
 RefPtr<ServiceWorkerRegistrationPromise>
 ServiceWorkerContainerImpl::Register(const ClientInfo& aClientInfo,
                                      const nsACString& aScopeURL,
                                      const nsACString& aScriptURL,
                                      ServiceWorkerUpdateViaCache aUpdateViaCache) const
diff --git a/dom/serviceworkers/ServiceWorkerUpdateJob.cpp b/dom/serviceworkers/ServiceWorkerUpdateJob.cpp
--- a/dom/serviceworkers/ServiceWorkerUpdateJob.cpp
+++ b/dom/serviceworkers/ServiceWorkerUpdateJob.cpp
@@ -3,16 +3,21 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorkerUpdateJob.h"
 
 #include "nsIScriptError.h"
 #include "nsIURL.h"
+#include "nsNetUtil.h"
+#include "nsProxyRelease.h"
+#include "ServiceWorkerManager.h"
+#include "ServiceWorkerPrivate.h"
+#include "ServiceWorkerRegistrationInfo.h"
 #include "ServiceWorkerScriptCache.h"
 #include "mozilla/dom/WorkerCommon.h"
 
 namespace mozilla {
 namespace dom {
 
 using serviceWorkerScriptCache::OnFailure;
 
diff --git a/dom/serviceworkers/moz.build b/dom/serviceworkers/moz.build
--- a/dom/serviceworkers/moz.build
+++ b/dom/serviceworkers/moz.build
@@ -23,16 +23,17 @@ EXPORTS.mozilla.dom += [
     'ServiceWorkerRegistrar.h',
     'ServiceWorkerRegistration.h',
     'ServiceWorkerRegistrationDescriptor.h',
     'ServiceWorkerRegistrationInfo.h',
     'ServiceWorkerUtils.h',
 ]
 
 UNIFIED_SOURCES += [
+    'RemoteServiceWorkerContainerImpl.cpp',
     'RemoteServiceWorkerImpl.cpp',
     'ServiceWorker.cpp',
     'ServiceWorkerActors.cpp',
     'ServiceWorkerChild.cpp',
     'ServiceWorkerContainer.cpp',
     'ServiceWorkerContainerChild.cpp',
     'ServiceWorkerContainerImpl.cpp',
     'ServiceWorkerContainerParent.cpp',
