# HG changeset patch
# Parent 5ef63bedbdfb4528ff9fa4711cba1e46b0b87f4b
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 043 address baku's other issues

diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -42,16 +42,18 @@ IsValidPutRequestMethod(const Request& a
   }
   return valid;
 }
 
 static bool
 IsValidPutRequestMethod(const RequestOrUSVString& aRequest,
                         ErrorResult& aRv)
 {
+  // If the provided request is a string URL, then it will default to
+  // a valid http method automatically.
   if (!aRequest.IsRequest()) {
     return true;
   }
   return IsValidPutRequestMethod(aRequest.GetAsRequest(), aRv);
 }
 
 static bool
 IsValidPutRequestMethod(const OwningRequestOrUSVString& aRequest,
@@ -81,16 +83,17 @@ NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Ca
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Cache)
   NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
 NS_INTERFACE_MAP_END
 
 Cache::Cache(nsIGlobalObject* aGlobal, PCacheChild* aActor)
   : mGlobal(aGlobal)
   , mActor(static_cast<CacheChild*>(aActor))
 {
+  MOZ_ASSERT(mGlobal);
   MOZ_ASSERT(mActor);
   mActor->SetListener(this);
 }
 
 already_AddRefed<Promise>
 Cache::Match(const RequestOrUSVString& aRequest,
              const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
diff --git a/dom/cache/ShutdownObserver.cpp b/dom/cache/ShutdownObserver.cpp
--- a/dom/cache/ShutdownObserver.cpp
+++ b/dom/cache/ShutdownObserver.cpp
@@ -145,17 +145,22 @@ CacheShutdownObserver::CacheShutdownObse
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
   MOZ_ASSERT(!gActive);
 }
 
 CacheShutdownObserver::~CacheShutdownObserver()
 {
   // This can happen on either main thread or background thread.
+
+  // While under normal circumstances these fields should only be touched
+  // on certain threads, once we hit the destructor they must be guaranteed
+  // to be in these states regardless of thread.
   MOZ_ASSERT(!gActive);
+  MOZ_ASSERT(mManagerIds.IsEmpty());
   MOZ_ASSERT(!mManagerCount);
 }
 
 void
 CacheShutdownObserver::AddManagerIdOnMainThread(ManagerId* aManagerId)
 {
   MOZ_ASSERT(NS_IsMainThread());
   MOZ_ASSERT(!mManagerIds.Contains(aManagerId, ManagerId::Comparator()));
diff --git a/dom/cache/StreamList.cpp b/dom/cache/StreamList.cpp
--- a/dom/cache/StreamList.cpp
+++ b/dom/cache/StreamList.cpp
@@ -44,16 +44,17 @@ StreamList::SetStreamControl(CacheStream
   mStreamControl->SetStreamList(this);
 }
 
 void
 StreamList::RemoveStreamControl(CacheStreamControlParent* aStreamControl)
 {
   NS_ASSERT_OWNINGTHREAD(StreamList);
   MOZ_ASSERT(mStreamControl);
+  MOZ_ASSERT(mStreamControl == aStreamControl);
   mStreamControl = nullptr;
 }
 
 void
 StreamList::Activate(CacheId aCacheId)
 {
   NS_ASSERT_OWNINGTHREAD(StreamList);
   MOZ_ASSERT(!mActivated);
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -42,42 +42,37 @@ ProcessURL(nsAString& aUrl, bool* aSchem
 
   // off the main thread URL parsing using nsStdURLParser.
   nsCOMPtr<nsIURLParser> urlParser = new nsStdURLParser();
 
   uint32_t pathPos;
   int32_t pathLen;
   uint32_t schemePos;
   int32_t schemeLen;
-  nsresult rv = urlParser->ParseURL(url, flatURL.Length(),
-                                    &schemePos, &schemeLen,
-                                    nullptr, nullptr,       // ignore authority
-                                    &pathPos, &pathLen);
-  if (NS_WARN_IF(NS_FAILED(rv))) {
-    aRv.Throw(rv);
-    return;
-  }
+  aRv = urlParser->ParseURL(url, flatURL.Length(), &schemePos, &schemeLen,
+                            nullptr, nullptr,       // ignore authority
+                            &pathPos, &pathLen);
+  if (NS_WARN_IF(aRv.Failed())) { return; }
 
   if (aSchemeValidOut) {
     nsAutoCString scheme(Substring(flatURL, schemePos, schemeLen));
     *aSchemeValidOut = scheme.LowerCaseEqualsLiteral("http") ||
                        scheme.LowerCaseEqualsLiteral("https");
   }
 
   uint32_t queryPos;
   int32_t queryLen;
   uint32_t refPos;
   int32_t refLen;
 
-  rv = urlParser->ParsePath(url + pathPos, flatURL.Length() - pathPos,
-                            nullptr, nullptr,               // ignore filepath
-                            &queryPos, &queryLen,
-                            &refPos, &refLen);
-  if (NS_WARN_IF(NS_FAILED(rv))) {
-    aRv.Throw(rv);
+  aRv = urlParser->ParsePath(url + pathPos, flatURL.Length() - pathPos,
+                             nullptr, nullptr,               // ignore filepath
+                             &queryPos, &queryLen,
+                             &refPos, &refLen);
+  if (NS_WARN_IF(aRv.Failed())) {
     return;
   }
 
   // TODO: Remove this once Request/Response properly strip the fragment (bug 1110476)
   if (refLen >= 0) {
     // ParsePath gives us ref position relative to the start of the path
     refPos += pathPos;
 
@@ -102,31 +97,28 @@ ProcessURL(nsAString& aUrl, bool* aSchem
 }
 
 } // anonymous namespace
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-using mozilla::unused;
-using mozilla::void_t;
 using mozilla::ipc::BackgroundChild;
 using mozilla::ipc::FileDescriptor;
 using mozilla::ipc::FileDescriptorSetChild;
 using mozilla::ipc::PFileDescriptorSetChild;
 using mozilla::ipc::PBackgroundChild;
 using mozilla::ipc::OptionalFileDescriptorSet;
 
 
 already_AddRefed<InternalRequest>
 TypeUtils::ToInternalRequest(const RequestOrUSVString& aIn,
                              BodyAction aBodyAction, ErrorResult& aRv)
 {
-
   if (aIn.IsRequest()) {
     Request& request = aIn.GetAsRequest();
 
     // Check and set bodyUsed flag immediately because its on Request
     // instead of InternalRequest.
     CheckAndSetBodyUsed(&request, aBodyAction, aRv);
     if (aRv.Failed()) { return nullptr; }
 
@@ -162,17 +154,17 @@ TypeUtils::ToPCacheRequest(PCacheRequest
                            SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   MOZ_ASSERT(aIn);
 
   aIn->GetMethod(aOut.method());
 
   nsAutoCString url;
   aIn->GetURL(url);
-  aOut.url() = NS_ConvertUTF8toUTF16(url);
+  CopyUTF8toUTF16(url, aOut.url());
 
   bool schemeValid;
   ProcessURL(aOut.url(), &schemeValid, &aOut.urlWithoutQuery(), aRv);
   if (aRv.Failed()) {
     return;
   }
 
   if (!schemeValid) {
@@ -219,17 +211,17 @@ TypeUtils::ToPCacheRequest(PCacheRequest
 void
 TypeUtils::ToPCacheResponseWithoutBody(PCacheResponse& aOut,
                                        InternalResponse& aIn, ErrorResult& aRv)
 {
   aOut.type() = aIn.Type();
 
   nsAutoCString url;
   aIn.GetUrl(url);
-  aOut.url() = NS_ConvertUTF8toUTF16(url);
+  CopyUTF8toUTF16(url, aOut.url());
 
   if (aOut.url() != EmptyString()) {
     // Pass all Response URL schemes through... The spec only requires we take
     // action on invalid schemes for Request objects.
     ProcessURL(aOut.url(), nullptr, nullptr, aRv);
     if (aRv.Failed()) {
       return;
     }
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -13,20 +13,20 @@
 #include "nsError.h"
 
 class nsIGlobalObject;
 class nsIInputStream;
 
 namespace mozilla {
 namespace dom {
 
-class OwningRequestOrUSVString;
 struct CacheQueryOptions;
 class InternalRequest;
 class InternalResponse;
+class OwningRequestOrUSVString;
 class Request;
 class RequestOrUSVString;
 class Response;
 template<typename T> class Optional;
 
 namespace cache {
 
 class PCacheQueryParams;
