# HG changeset patch
# Parent 6b3efff778a392fca1ef5cc6c42e769c8597efd2
# User Ben Kelly <ben@wanderview.com>
Bug 1100398 P0 interdiff 001 Add ConsumeAndValidateStream() to TestHelpers


diff --git a/xpcom/tests/gtest/TestHelpers.cpp b/xpcom/tests/gtest/TestHelpers.cpp
--- a/xpcom/tests/gtest/TestHelpers.cpp
+++ b/xpcom/tests/gtest/TestHelpers.cpp
@@ -4,16 +4,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "TestHelpers.h"
 
 #include <algorithm>
 #include "gtest/gtest.h"
 #include "nsIOutputStream.h"
+#include "nsStreamUtils.h"
 #include "nsTArray.h"
 
 namespace testing {
 
 void
 CreateData(uint32_t aNumBytes, nsTArray<char>& aDataOut)
 {
   static const char data[] =
@@ -58,9 +59,28 @@ Write(nsIOutputStream* aStream, const ns
 
 void
 WriteAllAndClose(nsIOutputStream* aStream, const nsTArray<char>& aData)
 {
   Write(aStream, aData, 0, aData.Length());
   aStream->Close();
 }
 
+void
+ConsumeAndValidateStream(nsIInputStream* aStream,
+                         const nsTArray<char>& aExpectedData)
+{
+  nsDependentCSubstring data(aExpectedData.Elements(), aExpectedData.Length());
+  ConsumeAndValidateStream(aStream, data);
+}
+
+void
+ConsumeAndValidateStream(nsIInputStream* aStream,
+                         const nsACString& aExpectedData)
+{
+  nsAutoCString outputData;
+  nsresult rv = NS_ConsumeStream(aStream, UINT32_MAX, outputData);
+  ASSERT_TRUE(NS_SUCCEEDED(rv));
+  ASSERT_EQ(aExpectedData.Length(), outputData.Length());
+  ASSERT_TRUE(aExpectedData.Equals(outputData));
+}
+
 } // namespace testing
diff --git a/xpcom/tests/gtest/TestHelpers.h b/xpcom/tests/gtest/TestHelpers.h
--- a/xpcom/tests/gtest/TestHelpers.h
+++ b/xpcom/tests/gtest/TestHelpers.h
@@ -4,26 +4,35 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef __TestHelpers_h
 #define __TestHelpers_h
 
 #include <stdint.h>
 
+class nsIInputStream;
 class nsIOutputStream;
 template <class T> class nsTArray;
 
 namespace testing {
 
 void
 CreateData(uint32_t aNumBytes, nsTArray<char>& aDataOut);
 
 void
 Write(nsIOutputStream* aStream, const nsTArray<char>& aData, uint32_t aOffset,
       uint32_t aNumBytes);
 
 void
 WriteAllAndClose(nsIOutputStream* aStream, const nsTArray<char>& aData);
 
+void
+ConsumeAndValidateStream(nsIInputStream* aStream,
+                         const nsTArray<char>& aExpectedData);
+
+void
+ConsumeAndValidateStream(nsIInputStream* aStream,
+                         const nsACString& aExpectedData);
+
 } // namespace testing
 
 #endif // __TestHelpers_h
