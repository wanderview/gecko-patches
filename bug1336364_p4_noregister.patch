# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4e5b19825c09dac7a2a3493715a6cd0485784a2d
Bug 1336364 P4 Disallow service worker register() is storage is forbidden for the window. r=asuth

diff --git a/dom/workers/ServiceWorkerManager.cpp b/dom/workers/ServiceWorkerManager.cpp
--- a/dom/workers/ServiceWorkerManager.cpp
+++ b/dom/workers/ServiceWorkerManager.cpp
@@ -823,20 +823,26 @@ ServiceWorkerManager::Register(mozIDOMWi
 {
   AssertIsOnMainThread();
 
   if (NS_WARN_IF(!aWindow)) {
     return NS_ERROR_DOM_INVALID_STATE_ERR;
   }
 
   auto* window = nsPIDOMWindowInner::From(aWindow);
+
+  // Don't allow a service worker to be registered if storage is restricted
+  // for the window.
+  auto storageAllowed = nsContentUtils::StorageAllowedForWindow(window);
+  if (storageAllowed != nsContentUtils::StorageAccess::eAllow) {
+    return NS_ERROR_DOM_SECURITY_ERR;
+  }
+
   nsCOMPtr<nsIDocument> doc = window->GetExtantDoc();
-  if (!doc) {
-    return NS_ERROR_FAILURE;
-  }
+  MOZ_ASSERT(doc);
 
   // Don't allow service workers to register when the *document* is chrome.
   if (NS_WARN_IF(nsContentUtils::IsSystemPrincipal(doc->NodePrincipal()))) {
     return NS_ERROR_DOM_SECURITY_ERR;
   }
 
   nsCOMPtr<nsPIDOMWindowOuter> outerWindow = window->GetOuterWindow();
   bool serviceWorkersTestingEnabled =
diff --git a/dom/workers/test/serviceworkers/test_third_party_iframes.html b/dom/workers/test/serviceworkers/test_third_party_iframes.html
--- a/dom/workers/test/serviceworkers/test_third_party_iframes.html
+++ b/dom/workers/test/serviceworkers/test_third_party_iframes.html
@@ -75,101 +75,138 @@ function runTest(aExpectedResponses) {
       }
     } else {
       ok(false, "Expected " + expected.status + " got " + status);
     }
     responsesIndex++;
   };
 }
 
-function testShouldIntercept(done) {
-  runTest([{
-    status: "ok"
-  }, {
-    status: "registrationdone",
-    next: function() {
-      iframe.addEventListener("load", testIframeLoaded);
-      iframe.src = origin + basePath + "iframe1.html";
-    }
-  }, {
-    status: "networkresponse",
-    next: loadThirdPartyIframe
-  }, {
-    status: "swresponse",
-    next: function() {
-      iframe.src = thirdPartyOrigin + basePath + "unregister.html";
-    }
-  }, {
-    status: "unregistrationdone",
-    next: function() {
-      window.onmessage = null;
-      ok(true, "Test finished successfully");
-      done();
-    }
-  }]);
+// Verify that we can register and intercept a 3rd party iframe with
+// the given cookie policy.
+function testShouldIntercept(policy, done) {
+  SpecialPowers.pushPrefEnv({"set": [
+      ["network.cookie.cookieBehavior", policy]
+  ]}, function() {
+    runTest([{
+      status: "ok"
+    }, {
+      status: "registrationdone",
+      next: function() {
+        iframe.addEventListener("load", testIframeLoaded);
+        iframe.src = origin + basePath + "iframe1.html";
+      }
+    }, {
+      status: "networkresponse",
+      next: loadThirdPartyIframe
+    }, {
+      status: "swresponse",
+      next: function() {
+        iframe.src = thirdPartyOrigin + basePath + "unregister.html";
+      }
+    }, {
+      status: "unregistrationdone",
+      next: function() {
+        window.onmessage = null;
+        ok(true, "Test finished successfully");
+        done();
+      }
+    }]);
+  });
 }
 
-function testShouldNotIntercept(done) {
-  runTest([{
-    status: "ok"
-  }, {
-    status: "registrationdone",
-    next: function() {
-      iframe.addEventListener("load", testIframeLoaded);
-      iframe.src = origin + basePath + "iframe1.html";
-    }
-  }, {
-    status: "networkresponse",
-    next: loadThirdPartyIframe
-  }, {
-    status: "networkresponse",
-    next: function() {
-      iframe.src = thirdPartyOrigin + basePath + "unregister.html";
-    }
-  }, {
-    status: "unregistrationdone",
-    next: function() {
-      window.onmessage = null;
-      ok(true, "Test finished successfully");
-      done();
-    }
-  }]);
+// Verify that we cannot register a service worker in a 3rd party
+// iframe with the given cookie policy.
+function testShouldNotRegister(policy, done) {
+  SpecialPowers.pushPrefEnv({"set": [
+      ["network.cookie.cookieBehavior", policy]
+  ]}, function() {
+    runTest([{
+      status: "registrationfailed",
+      next: function() {
+        iframe.addEventListener("load", testIframeLoaded);
+        iframe.src = origin + basePath + "iframe1.html";
+      }
+    }, {
+      status: "networkresponse",
+      next: loadThirdPartyIframe
+    }, {
+      status: "networkresponse",
+      next: function() {
+        window.onmessage = null;
+        ok(true, "Test finished successfully");
+        done();
+      }
+    }]);
+  });
+}
+
+// Verify that if a service worker is already registered a 3rd
+// party iframe will still not be intercepted with the given cookie
+// policy.
+function testShouldNotIntercept(policy, done) {
+  SpecialPowers.pushPrefEnv({"set": [
+      ["network.cookie.cookieBehavior", COOKIE_BEHAVIOR_ACCEPT]
+  ]}, function() {
+    runTest([{
+      status: "ok"
+    }, {
+      status: "registrationdone",
+      next: function() {
+        iframe.addEventListener("load", testIframeLoaded);
+        SpecialPowers.pushPrefEnv({"set": [
+            ["network.cookie.cookieBehavior", policy],
+          ]}, function() {
+            iframe.src = origin + basePath + "iframe1.html";
+          });
+      }
+    }, {
+      status: "networkresponse",
+      next: loadThirdPartyIframe
+    }, {
+      status: "networkresponse",
+      next: function() {
+        iframe.src = thirdPartyOrigin + basePath + "unregister.html";
+      }
+    }, {
+      status: "unregistrationdone",
+      next: function() {
+        window.onmessage = null;
+        ok(true, "Test finished successfully");
+        done();
+      }
+    }]);
+  });
 }
 
 const COOKIE_BEHAVIOR_ACCEPT        = 0;
 const COOKIE_BEHAVIOR_REJECTFOREIGN = 1;
 const COOKIE_BEHAVIOR_REJECT        = 2;
 const COOKIE_BEHAVIOR_LIMITFOREIGN  = 3;
 
 let steps = [() => {
   SpecialPowers.pushPrefEnv({"set": [
     ["dom.serviceWorkers.exemptFromPerDomainMax", true],
     ["dom.serviceWorkers.enabled", true],
     ["dom.serviceWorkers.testing.enabled", true],
     ["browser.dom.window.dump.enabled", true],
     ["network.cookie.cookieBehavior", COOKIE_BEHAVIOR_ACCEPT]
   ]}, next);
 }, () => {
-  testShouldIntercept(next);
+  testShouldIntercept(COOKIE_BEHAVIOR_ACCEPT, next);
 }, () => {
-  SpecialPowers.pushPrefEnv({"set": [
-    ["network.cookie.cookieBehavior", COOKIE_BEHAVIOR_REJECTFOREIGN]
-  ]}, next);
+  testShouldNotRegister(COOKIE_BEHAVIOR_REJECTFOREIGN, next);
 }, () => {
-  testShouldNotIntercept(next);
+  testShouldNotIntercept(COOKIE_BEHAVIOR_REJECTFOREIGN, next);
 }, () => {
-  SpecialPowers.pushPrefEnv({"set": [
-    ["network.cookie.cookieBehavior", COOKIE_BEHAVIOR_REJECT]
-  ]}, next);
+  testShouldNotRegister(COOKIE_BEHAVIOR_REJECT, next);
 }, () => {
-  testShouldNotIntercept(next);
+  testShouldNotIntercept(COOKIE_BEHAVIOR_REJECT, next);
 }, () => {
-  SpecialPowers.pushPrefEnv({"set": [
-    ["network.cookie.cookieBehavior", COOKIE_BEHAVIOR_LIMITFOREIGN]
-  ]}, next);
+  testShouldNotRegister(COOKIE_BEHAVIOR_LIMITFOREIGN, next);
 }, () => {
-  testShouldNotIntercept(next);
+  testShouldNotIntercept(COOKIE_BEHAVIOR_LIMITFOREIGN, next);
 }];
 
 </script>
 </pre>
 </body>
 </html>
diff --git a/dom/workers/test/serviceworkers/thirdparty/register.html b/dom/workers/test/serviceworkers/thirdparty/register.html
--- a/dom/workers/test/serviceworkers/thirdparty/register.html
+++ b/dom/workers/test/serviceworkers/thirdparty/register.html
@@ -18,10 +18,12 @@
     .then(function(registration) {
       if (registration.installing) {
         registration.installing.onstatechange = function(e) {
           done(registration);
         };
       } else {
         done(registration);
       }
+    }).catch(function(e) {
+      window.parent.postMessage({status: "registrationfailed"}, "*");
     });
 </script>
