# HG changeset patch
# Parent 8771c7526d2f23da6bf4f0c1f1fada47e0d31db4
# User Ben Kelly <ben@wanderview.com>
Bug 1110814 P2 Use CrossProcessPipe in Cache for non-serializable async streams.

diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -9,16 +9,17 @@
 #include "mozilla/unused.h"
 #include "mozilla/dom/CacheBinding.h"
 #include "mozilla/dom/InternalRequest.h"
 #include "mozilla/dom/Request.h"
 #include "mozilla/dom/Response.h"
 #include "mozilla/dom/cache/PCacheTypes.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/ipc/BackgroundChild.h"
+#include "mozilla/ipc/CrossProcessPipe.h"
 #include "mozilla/ipc/FileDescriptorSetChild.h"
 #include "mozilla/ipc/PBackgroundChild.h"
 #include "mozilla/ipc/PFileDescriptorSetChild.h"
 #include "mozilla/ipc/InputStreamUtils.h"
 #include "nsCOMPtr.h"
 #include "nsIAsyncInputStream.h"
 #include "nsIAsyncOutputStream.h"
 #include "nsIIPCSerializableInputStream.h"
@@ -98,22 +99,23 @@ ProcessURL(nsAString& aUrl, bool* aSchem
 
 } // anonymous namespace
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::ipc::BackgroundChild;
+using mozilla::ipc::CreateCrossProcessPipe;
 using mozilla::ipc::FileDescriptor;
 using mozilla::ipc::FileDescriptorSetChild;
 using mozilla::ipc::PFileDescriptorSetChild;
 using mozilla::ipc::PBackgroundChild;
 using mozilla::ipc::OptionalFileDescriptorSet;
-
+using mozilla::ipc::Sending;
 
 already_AddRefed<InternalRequest>
 TypeUtils::ToInternalRequest(const RequestOrUSVString& aIn,
                              BodyAction aBodyAction, ErrorResult& aRv)
 {
   if (aIn.IsRequest()) {
     Request& request = aIn.GetAsRequest();
 
@@ -417,29 +419,73 @@ TypeUtils::SerializeCacheStream(nsIInput
   }
 
   nsRefPtr<ReadStream> controlled = do_QueryObject(aStream);
   if (controlled) {
     controlled->Serialize(aStreamOut);
     return;
   }
 
-  // TODO: implement CrossProcessPipe if we cannot directly serialize (bug 1110814)
+  nsCOMPtr<nsIInputStream> stream;
+
   nsCOMPtr<nsIIPCSerializableInputStream> serial = do_QueryInterface(aStream);
-  if (!serial) {
+  nsCOMPtr<nsIAsyncInputStream> asyncInput = do_QueryInterface(aStream);
+
+  // If we can serialize the stream, then just do so
+  if (serial) {
+    stream = aStream;
+
+  // If we can't serialize directly, then we need to copy it across a
+  // CrossProcessPipe.  We only support this for async inputs, though,
+  // because we are going to do the copy on the current thread.
+  } else if (asyncInput) {
+    nsCOMPtr<nsICrossProcessPipe> pipe = CreateCrossProcessPipe(Sending);
+
+    aRv = pipe->Init(nullptr, true /* sending */);
+    if (NS_WARN_IF(aRv.Failed())) { return; }
+
+    nsCOMPtr<nsIAsyncInputStream> asyncStream;
+    aRv = pipe->GetInputStream(getter_AddRefs(asyncStream));
+    if (NS_WARN_IF(aRv.Failed())) { return; }
+
+    stream = asyncStream.forget();
+
+    nsCOMPtr<nsIAsyncOutputStream> pipeStream;
+    aRv = pipe->GetOutputStream(getter_AddRefs(pipeStream));
+    if (NS_WARN_IF(aRv.Failed())) { return; }
+
+    // Copy data through the pipe on the current thread.  This can be
+    // the main thread or a web worker thread.  We use the current
+    // thread for a few reasons:
+    //  1) We cannot use STS here because we need a stable thread with
+    //     a PBackground actor attached.
+    //  2) Writing to the CrossProcessPipe simply sends async IPC messages
+    //     which are safe to do on this thread.
+    //  3) The copying here is no more than would be done if we had a fully
+    //     serializable stream.  Its just done block by block.
+    //  4) We verified above that we have an asynchronous input.  So
+    //     NS_AsyncCopy will not block the current thread reading.
+    aRv = NS_AsyncCopy(aStream, pipeStream, NS_GetCurrentThread(),
+                       NS_ASYNCCOPY_VIA_WRITESEGMENTS);
+    if (NS_WARN_IF(aRv.Failed())) { return; }
+
+  // We cannot handle a non-async, non-serializable stream right now.  Return
+  // failure.
+  } else {
+    NS_WARNING("Cache got an unsupported body stream.");
     aRv.Throw(NS_ERROR_FAILURE);
     return;
   }
 
   PCacheReadStream readStream;
   readStream.controlChild() = nullptr;
   readStream.controlParent() = nullptr;
 
   nsAutoTArray<FileDescriptor, 4> fds;
-  SerializeInputStream(aStream, readStream.params(), fds);
+  SerializeInputStream(stream, readStream.params(), fds);
 
   PFileDescriptorSetChild* fdSet = nullptr;
   if (!fds.IsEmpty()) {
     // We should not be serializing until we have an actor ready
     PBackgroundChild* manager = BackgroundChild::GetForCurrentThread();
     MOZ_ASSERT(manager);
 
     fdSet = manager->SendPFileDescriptorSetConstructor(fds[0]);
