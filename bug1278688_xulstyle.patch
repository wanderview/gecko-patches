# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  88f8654ee973c8b78265f0e1c48336c1cce033fd
Bug 1278688 Update stylesheets in nsXULPrototypeCache so that unused CSSStyleSheet objects can be freed. r=bholley

diff --git a/layout/style/Loader.cpp b/layout/style/Loader.cpp
--- a/layout/style/Loader.cpp
+++ b/layout/style/Loader.cpp
@@ -1107,21 +1107,19 @@ Loader::CreateSheet(nsIURI* aURI,
   if (aURI && GetStyleBackendType() == StyleBackendType::Gecko) {
     aSheetState = eSheetComplete;
     StyleSheetHandle::RefPtr sheet;
 
     // First, the XUL cache
 #ifdef MOZ_XUL
     if (IsChromeURI(aURI)) {
       nsXULPrototypeCache* cache = nsXULPrototypeCache::GetInstance();
-      if (cache) {
-        if (cache->IsEnabled()) {
-          sheet = cache->GetStyleSheet(aURI);
-          LOG(("  From XUL cache: %p", sheet->AsVoidPtr()));
-        }
+      if (cache && cache->IsEnabled()) {
+        sheet = cache->GetStyleSheet(aURI);
+        LOG(("  From XUL cache: %p", sheet->AsVoidPtr()));
       }
     }
 #endif
 
     bool fromCompleteSheets = false;
     if (!sheet) {
       // Then our per-document complete sheets.
       URIPrincipalReferrerPolicyAndCORSModeHashKey key(aURI, aLoaderPrincipal, aCORSMode, aReferrerPolicy);
@@ -1209,24 +1207,41 @@ Loader::CreateSheet(nsIURI* aURI,
                    "Sheet thinks it's not complete while we think it is");
 
       RefPtr<CSSStyleSheet> clonedSheet =
         sheet->AsGecko()->Clone(nullptr, nullptr, nullptr, nullptr);
       *aSheet = Move(clonedSheet);
       if (*aSheet && fromCompleteSheets &&
           !sheet->AsGecko()->GetOwnerNode() &&
           !sheet->AsGecko()->GetParentSheet()) {
-        // The sheet we're cloning isn't actually referenced by
-        // anyone.  Replace it in the cache, so that if our CSSOM is
-        // later modified we don't end up with two copies of our inner
-        // hanging around.
-        URIPrincipalReferrerPolicyAndCORSModeHashKey key(aURI, aLoaderPrincipal, aCORSMode, aReferrerPolicy);
-        NS_ASSERTION((*aSheet)->AsGecko()->IsComplete(),
-                     "Should only be caching complete sheets");
-        mSheets->mCompleteSheets.Put(&key, *aSheet);
+
+#ifdef MOZ_XUL
+        if (IsChromeURI(aURI)) {
+          nsXULPrototypeCache* cache = nsXULPrototypeCache::GetInstance();
+          if (cache && cache->IsEnabled()) {
+            // Always store our latest sheet in the cache so that old,
+            // unreferenced sheet objects can be freed.
+            LOG(("  Updating sheet in XUL prototype cache"));
+            NS_ASSERTION(clonedSheet->IsComplete(),
+                         "Should only be caching complete sheets");
+            cache->PutStyleSheet(clonedSheet);
+          }
+        } else {
+#endif
+          // The sheet we're cloning isn't actually referenced by
+          // anyone.  Replace it in the cache, so that if our CSSOM is
+          // later modified we don't end up with two copies of our inner
+          // hanging around.
+          URIPrincipalReferrerPolicyAndCORSModeHashKey key(aURI, aLoaderPrincipal, aCORSMode, aReferrerPolicy);
+          NS_ASSERTION((*aSheet)->AsGecko()->IsComplete(),
+                       "Should only be caching complete sheets");
+          mSheets->mCompleteSheets.Put(&key, *aSheet);
+#ifdef MOZ_XUL
+        }
+#endif
       }
     }
   }
 
   if (!*aSheet) {
     aSheetState = eSheetNeedsParser;
     nsIURI *sheetURI;
     nsCOMPtr<nsIURI> baseURI;
@@ -1940,22 +1955,22 @@ Loader::DoSheetComplete(SheetLoadData* a
           break;
         }
         data = data->mNext;
       }
 #ifdef MOZ_XUL
       if (IsChromeURI(aLoadData->mURI)) {
         nsXULPrototypeCache* cache = nsXULPrototypeCache::GetInstance();
         if (cache && cache->IsEnabled()) {
-          if (!cache->GetStyleSheet(aLoadData->mURI)) {
-            LOG(("  Putting sheet in XUL prototype cache"));
-            NS_ASSERTION(sheet->IsComplete(),
-                         "Should only be caching complete sheets");
-            cache->PutStyleSheet(sheet);
-          }
+          // Always store our latest sheet in the cache so that old,
+          // unreferenced sheet objects can be freed.
+          LOG(("  Putting sheet in XUL prototype cache"));
+          NS_ASSERTION(sheet->IsComplete(),
+                       "Should only be caching complete sheets");
+          cache->PutStyleSheet(sheet);
         }
       }
       else {
 #endif
         URIPrincipalReferrerPolicyAndCORSModeHashKey key(aLoadData->mURI,
                                            aLoadData->mLoaderPrincipal,
                                            aLoadData->mSheet->GetCORSMode(),
                                            aLoadData->mSheet->GetReferrerPolicy());
