# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  e79a74339b5a0bb2a1510b6a548c146e7df761d8
Bug 1363828 P8 Fire TimeoutExecutor immediately when deadline is only slightly in the future. r=ehsan

diff --git a/dom/base/TimeoutExecutor.cpp b/dom/base/TimeoutExecutor.cpp
--- a/dom/base/TimeoutExecutor.cpp
+++ b/dom/base/TimeoutExecutor.cpp
@@ -21,17 +21,17 @@ TimeoutExecutor::~TimeoutExecutor()
 }
 
 nsresult
 TimeoutExecutor::ScheduleImmediate(const TimeStamp& aDeadline,
                                    const TimeStamp& aNow)
 {
   MOZ_DIAGNOSTIC_ASSERT(mDeadline.IsNull());
   MOZ_DIAGNOSTIC_ASSERT(mMode == Mode::None);
-  MOZ_DIAGNOSTIC_ASSERT(aDeadline <= aNow);
+  MOZ_DIAGNOSTIC_ASSERT(aDeadline <= aNow + mFlexTime);
 
   nsresult rv =
     mOwner->EventTarget()->Dispatch(this, nsIEventTarget::DISPATCH_NORMAL);
   NS_ENSURE_SUCCESS(rv, rv);
 
   mMode = Mode::Immediate;
   mDeadline = aDeadline;
 
@@ -39,17 +39,17 @@ TimeoutExecutor::ScheduleImmediate(const
 }
 
 nsresult
 TimeoutExecutor::ScheduleDelayed(const TimeStamp& aDeadline,
                                  const TimeStamp& aNow)
 {
   MOZ_DIAGNOSTIC_ASSERT(mDeadline.IsNull());
   MOZ_DIAGNOSTIC_ASSERT(mMode == Mode::None);
-  MOZ_DIAGNOSTIC_ASSERT(aDeadline > aNow);
+  MOZ_DIAGNOSTIC_ASSERT(aDeadline > aNow + mFlexTime);
 
   nsresult rv = NS_OK;
 
   if (!mTimer) {
     mTimer = do_CreateInstance("@mozilla.org/timer;1", &rv);
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
@@ -72,17 +72,17 @@ TimeoutExecutor::ScheduleDelayed(const T
   return NS_OK;
 }
 
 nsresult
 TimeoutExecutor::Schedule(const TimeStamp& aDeadline)
 {
   TimeStamp now(TimeStamp::Now());
 
-  if (aDeadline <= now) {
+  if (aDeadline <= (now + mFlexTime)) {
     return ScheduleImmediate(aDeadline, now);
   }
 
   return ScheduleDelayed(aDeadline, now);
 }
 
 nsresult
 TimeoutExecutor::MaybeReschedule(const TimeStamp& aDeadline)
@@ -124,16 +124,17 @@ TimeoutExecutor::MaybeExecute()
 
   Cancel();
 
   mOwner->RunTimeout(deadline);
 }
 
 TimeoutExecutor::TimeoutExecutor(TimeoutManager* aOwner)
   : mOwner(aOwner)
+  , mFlexTime(TimeDuration::FromMicroseconds(PR_IntervalToMicroseconds(1) / 2))
   , mMode(Mode::None)
 {
   MOZ_DIAGNOSTIC_ASSERT(mOwner);
 }
 
 void
 TimeoutExecutor::Shutdown()
 {
diff --git a/dom/base/TimeoutExecutor.h b/dom/base/TimeoutExecutor.h
--- a/dom/base/TimeoutExecutor.h
+++ b/dom/base/TimeoutExecutor.h
@@ -14,16 +14,17 @@ namespace mozilla {
 namespace dom {
 
 class TimeoutExecutor final : public nsIRunnable
                             , public nsITimerCallback
 {
   TimeoutManager* mOwner;
   nsCOMPtr<nsITimer> mTimer;
   TimeStamp mDeadline;
+  const TimeDuration mFlexTime;
 
   enum class Mode
   {
     None,
     Immediate,
     Delayed,
     Shutdown
   };
