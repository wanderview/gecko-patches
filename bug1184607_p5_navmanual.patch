# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  8d70dcdccaf240fe0b19b336f6b989b0c8553f47
Bug 1184607 P5 Set RequestRedirect to "manual" for navigations. r=nsm

diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -10621,16 +10621,18 @@ nsDocShell::DoURILoad(nsIURI* aURI,
       httpChannelInternal->SetThirdPartyFlags(
         nsIHttpChannelInternal::THIRD_PARTY_FORCE_ALLOW);
     }
     if (aFirstParty) {
       httpChannelInternal->SetDocumentURI(aURI);
     } else {
       httpChannelInternal->SetDocumentURI(aReferrerURI);
     }
+    httpChannelInternal->SetRedirectMode(
+      nsIHttpChannelInternal::REDIRECT_MODE_MANUAL);
   }
 
   nsCOMPtr<nsIWritablePropertyBag2> props(do_QueryInterface(channel));
   if (props) {
     // save true referrer for those who need it (e.g. xpinstall whitelisting)
     // Currently only http and ftp channels support this.
     props->SetPropertyAsInterface(NS_LITERAL_STRING("docshell.internalReferrer"),
                                   aReferrerURI);
diff --git a/dom/base/ImportManager.cpp b/dom/base/ImportManager.cpp
--- a/dom/base/ImportManager.cpp
+++ b/dom/base/ImportManager.cpp
@@ -12,16 +12,17 @@
 #include "nsContentUtils.h"
 #include "nsCORSListenerProxy.h"
 #include "nsIChannel.h"
 #include "nsIContentPolicy.h"
 #include "nsIContentSecurityPolicy.h"
 #include "nsIDocument.h"
 #include "nsIDOMDocument.h"
 #include "nsIDOMEvent.h"
+#include "nsIHttpChannelInternal.h"
 #include "nsIPrincipal.h"
 #include "nsIScriptObjectPrincipal.h"
 #include "nsScriptLoader.h"
 #include "nsNetUtil.h"
 
 //-----------------------------------------------------------------------------
 // AutoError
 //-----------------------------------------------------------------------------
@@ -472,16 +473,21 @@ ImportLoader::Open()
                               mURI,
                               mImportParent,
                               nsILoadInfo::SEC_REQUIRE_CORS_DATA_INHERITS,
                               nsIContentPolicy::TYPE_SUBDOCUMENT,
                               loadGroup,
                               nullptr,  // aCallbacks
                               nsIRequest::LOAD_BACKGROUND);
 
+  nsCOMPtr<nsIHttpChannelInternal> httpChannel = do_QueryInterface(channel);
+  if (httpChannel) {
+    httpChannel->SetRedirectMode(nsIHttpChannelInternal::REDIRECT_MODE_MANUAL);
+  }
+
   NS_ENSURE_SUCCESS_VOID(rv);
   rv = channel->AsyncOpen2(this);
   NS_ENSURE_SUCCESS_VOID(rv);
 
   BlockScripts();
   ae.Pass();
 }
 
