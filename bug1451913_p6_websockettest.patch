# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  3ec9222f002355851c0c557b9110bf30f4a0708b
Bug 1451913 P6 Test that WebSocket does not leak through its event listeners. r=smaug

diff --git a/dom/websocket/tests/mochitest.ini b/dom/websocket/tests/mochitest.ini
--- a/dom/websocket/tests/mochitest.ini
+++ b/dom/websocket/tests/mochitest.ini
@@ -1,26 +1,29 @@
 [DEFAULT]
 skip-if = toolkit == 'android' # bug 982828
 support-files =
+  !/dom/events/test/event_leak_utils.js
   file_websocket_basic_wsh.py
   file_websocket_hello_wsh.py
   file_websocket_http_resource.txt
   file_websocket_permessage_deflate_wsh.py
   file_websocket_permessage_deflate_disabled_wsh.py
   file_websocket_permessage_deflate_rejected_wsh.py
   file_websocket_permessage_deflate_params_wsh.py
   file_websocket_wsh.py
   websocket_helpers.js
   websocket_tests.js
   websocket_worker_helpers.js
 
 [test_bug1081686.html]
 [test_bug1384658.html]
 support-files = window_bug1384658.html frame_bug1384658.html file_bug1384658.html
+[test_event_listener_leaks.html]
+support-files = file_websocket_bigBlob_wsh.py
 [test_websocket1.html]
 [test_websocket2.html]
 [test_websocket3.html]
 [test_websocket4.html]
 [test_websocket5.html]
 [test_websocket_basic.html]
 [test_websocket_hello.html]
 [test_websocket_permessage_deflate.html]
diff --git a/dom/websocket/tests/test_event_listener_leaks.html b/dom/websocket/tests/test_event_listener_leaks.html
new file mode 100644
--- /dev/null
+++ b/dom/websocket/tests/test_event_listener_leaks.html
@@ -0,0 +1,58 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug 1450358 - Test WebSocket event listener leak conditions</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="/tests/dom/events/test/event_leak_utils.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<script class="testbody" type="text/javascript">
+// Manipulate WebSocket objects in the frame's context.
+// Its important here that we create a listener callback from
+// the DOM objects back to the frame's global in order to
+// exercise the leak condition.
+async function useWebSocket(contentWindow) {
+  const url = "ws://mochi.test:8888/tests/dom/websocket/tests/file_websocket_bigBlob";
+  let ws = new contentWindow.WebSocket(url);
+
+  ws.onmessage = _ => {
+    contentWindow.messageCount += 1;
+  };
+
+  contentWindow.openCount = 0;
+  await new Promise((resolve, reject) => {
+    ws.onopen = _ => {
+      contentWindow.openCount += 1;
+      resolve();
+    };
+    ws.onerror = e => {
+      contentWindow.errorCount += 1;
+      reject("websocket error");
+    };
+  });
+
+  is(contentWindow.openCount, 1, "open should be received");
+}
+
+async function runTest() {
+  try {
+    await checkForEventListenerLeaks("WebSocket", useWebSocket);
+  } catch (e) {
+    ok(false, e);
+  } finally {
+    SimpleTest.finish();
+  }
+}
+
+SimpleTest.waitForExplicitFinish();
+addEventListener("load", runTest, { once: true });
+</script>
+</pre>
+</body>
+</html>
+
