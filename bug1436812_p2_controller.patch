# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  3fc82fb21eb436e9b52240239a06c6d67021f903
Bug 1436812 P2 Eagerly create the ServiceWorkerContainer.controller. r=asuth

diff --git a/dom/serviceworkers/ServiceWorkerContainer.cpp b/dom/serviceworkers/ServiceWorkerContainer.cpp
--- a/dom/serviceworkers/ServiceWorkerContainer.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainer.cpp
@@ -62,16 +62,20 @@ ServiceWorkerContainer::Create(nsIGlobal
 {
   RefPtr<ServiceWorkerContainer> ref = new ServiceWorkerContainer(aGlobal);
   return ref.forget();
 }
 
 ServiceWorkerContainer::ServiceWorkerContainer(nsIGlobalObject* aGlobal)
   : DOMEventTargetHelper(aGlobal)
 {
+  Maybe<ServiceWorkerDescriptor> controller = aGlobal->GetController();
+  if (controller.isSome()) {
+    mControllerWorker = aGlobal->GetOrCreateServiceWorker(controller.ref());
+  }
 }
 
 ServiceWorkerContainer::~ServiceWorkerContainer()
 {
   RemoveReadyPromise();
 }
 
 void
@@ -80,17 +84,21 @@ ServiceWorkerContainer::DisconnectFromOw
   mControllerWorker = nullptr;
   RemoveReadyPromise();
   DOMEventTargetHelper::DisconnectFromOwner();
 }
 
 void
 ServiceWorkerContainer::ControllerChanged(ErrorResult& aRv)
 {
-  mControllerWorker = nullptr;
+  nsCOMPtr<nsIGlobalObject> go = GetParentObject();
+  if (!go) {
+    return;
+  }
+  mControllerWorker = go->GetOrCreateServiceWorker(go->GetController().ref());
   aRv = DispatchTrustedEvent(NS_LITERAL_STRING("controllerchange"));
 }
 
 void
 ServiceWorkerContainer::RemoveReadyPromise()
 {
   if (nsCOMPtr<nsPIDOMWindowInner> window = GetOwner()) {
     nsCOMPtr<nsIServiceWorkerManager> swm =
@@ -219,54 +227,16 @@ ServiceWorkerContainer::Register(const n
   RefPtr<Promise> ret = static_cast<Promise*>(promise.get());
   MOZ_ASSERT(ret);
   return ret.forget();
 }
 
 already_AddRefed<ServiceWorker>
 ServiceWorkerContainer::GetController()
 {
-  if (!mControllerWorker) {
-    // If we don't have a controller reference cached, then we need to
-    // check if we should create one.  We try to do this in a thread-agnostic
-    // way here to help support workers in the future.  There are still
-    // some main thread calls for now, though.
-
-    nsIGlobalObject* owner = GetOwnerGlobal();
-    NS_ENSURE_TRUE(owner, nullptr);
-
-    Maybe<ServiceWorkerDescriptor> controller(owner->GetController());
-    if (controller.isNothing()) {
-      return nullptr;
-    }
-
-    RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
-    if (!swm) {
-      return nullptr;
-    }
-
-    // This is a main thread only call.  We will need to replace it with
-    // something for worker threads.
-    RefPtr<ServiceWorkerRegistrationInfo> reg =
-      swm->GetRegistration(controller.ref().PrincipalInfo(),
-                           controller.ref().Scope());
-    NS_ENSURE_TRUE(reg, nullptr);
-
-    ServiceWorkerInfo* info = reg->GetActive();
-    NS_ENSURE_TRUE(info, nullptr);
-
-    nsCOMPtr<nsPIDOMWindowInner> inner = do_QueryInterface(owner);
-    NS_ENSURE_TRUE(inner, nullptr);
-
-    // Right now we only know how to create ServiceWorker DOM objects on
-    // the main thread with a window.  In the future this should operate
-    // on only nsIGlobalObject somehow.
-    mControllerWorker = inner->GetOrCreateServiceWorker(info->Descriptor());
-  }
-
   RefPtr<ServiceWorker> ref = mControllerWorker;
   return ref.forget();
 }
 
 already_AddRefed<Promise>
 ServiceWorkerContainer::GetRegistrations(ErrorResult& aRv)
 {
   nsresult rv;
