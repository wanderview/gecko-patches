# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  2a8fe3a44f81967b732e94b28bdde35e621da9c3

diff --git a/dom/serviceworkers/RemoteServiceWorkerContainerImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerContainerImpl.cpp
--- a/dom/serviceworkers/RemoteServiceWorkerContainerImpl.cpp
+++ b/dom/serviceworkers/RemoteServiceWorkerContainerImpl.cpp
@@ -65,29 +65,31 @@ RemoteServiceWorkerContainerImpl::Regist
   if (!mActor) {
     aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     return;
   }
 
   mActor->SendRegister(
     aClientInfo.ToIPC(), nsCString(aScopeURL), nsCString(aScriptURL),
     aUpdateViaCache,
-    [successCB = std::move(aSuccessCB), failureCB = aFailureCB]
+    [successCB = std::move(aSuccessCB), aFailureCB]
     (const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aResult) {
+      MOZ_DIAGNOSTIC_ASSERT(aFailureCB);
       if (aResult.type() == IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult::TCopyableErrorResult) {
         // application layer error
         auto& rv = aResult.get_CopyableErrorResult();
         MOZ_DIAGNOSTIC_ASSERT(rv.Failed());
-        failureCB(CopyableErrorResult(rv));
+        aFailureCB(CopyableErrorResult(rv));
         return;
       }
       // success
       auto& ipcDesc = aResult.get_IPCServiceWorkerRegistrationDescriptor();
       successCB(ServiceWorkerRegistrationDescriptor(ipcDesc));
     }, [failureCB = std::move(aFailureCB)] (ResponseRejectReason aReason) {
+      MOZ_DIAGNOSTIC_ASSERT(failureCB);
       // IPC layer error
       failureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     });
 }
 
 void
 RemoteServiceWorkerContainerImpl::GetRegistration(const ClientInfo& aClientInfo,
                                                   const nsACString& aURL,
@@ -95,92 +97,98 @@ RemoteServiceWorkerContainerImpl::GetReg
                                                   ServiceWorkerFailureCallback&& aFailureCB) const
 {
   if (!mActor) {
     aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     return;
   }
 
   mActor->SendGetRegistration(aClientInfo.ToIPC(), nsCString(aURL),
-    [successCB = std::move(aSuccessCB), failureCB = aFailureCB]
+    [successCB = std::move(aSuccessCB), aFailureCB]
     (const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aResult) {
+      MOZ_DIAGNOSTIC_ASSERT(aFailureCB);
       if (aResult.type() == IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult::TCopyableErrorResult) {
         auto& rv = aResult.get_CopyableErrorResult();
         // If rv is a failure then this is an application layer error.  Note,
         // though, we also reject with NS_OK to indicate that we just didn't
         // find a registration.
-        failureCB(CopyableErrorResult(rv));
+        aFailureCB(CopyableErrorResult(rv));
         return;
       }
       // success
       auto& ipcDesc = aResult.get_IPCServiceWorkerRegistrationDescriptor();
       successCB(ServiceWorkerRegistrationDescriptor(ipcDesc));
     }, [failureCB = std::move(aFailureCB)] (ResponseRejectReason aReason) {
+      MOZ_DIAGNOSTIC_ASSERT(failureCB);
       // IPC layer error
       failureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     });
 }
 
 void
 RemoteServiceWorkerContainerImpl::GetRegistrations(const ClientInfo& aClientInfo,
                                                    ServiceWorkerRegistrationListCallback&& aSuccessCB,
                                                    ServiceWorkerFailureCallback&& aFailureCB) const
 {
   if (!mActor) {
     aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     return;
   }
 
   mActor->SendGetRegistrations(aClientInfo.ToIPC(),
-   [successCB = std::move(aSuccessCB), failureCB = aFailureCB]
+   [successCB = std::move(aSuccessCB), aFailureCB]
    (const IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult& aResult) {
+      MOZ_DIAGNOSTIC_ASSERT(aFailureCB);
       if (aResult.type() == IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult::TCopyableErrorResult) {
         // application layer error
         auto& rv = aResult.get_CopyableErrorResult();
         MOZ_DIAGNOSTIC_ASSERT(rv.Failed());
-        failureCB(CopyableErrorResult(rv));
+        aFailureCB(CopyableErrorResult(rv));
         return;
       }
       // success
       auto& ipcList = aResult.get_IPCServiceWorkerRegistrationDescriptorList();
       nsTArray<ServiceWorkerRegistrationDescriptor> list(ipcList.values().Length());
       for (auto& ipcDesc : ipcList.values()) {
         list.AppendElement(ServiceWorkerRegistrationDescriptor(ipcDesc));
       }
       successCB(std::move(list));
     }, [failureCB = std::move(aFailureCB)] (ResponseRejectReason aReason) {
+      MOZ_DIAGNOSTIC_ASSERT(failureCB);
       // IPC layer error
       failureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     });
 }
 
 void
 RemoteServiceWorkerContainerImpl::GetReady(const ClientInfo& aClientInfo,
                                            ServiceWorkerRegistrationCallback&& aSuccessCB,
                                            ServiceWorkerFailureCallback&& aFailureCB) const
 {
   if (!mActor) {
     aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     return;
   }
 
   mActor->SendGetReady(aClientInfo.ToIPC(),
-    [successCB = std::move(aSuccessCB), failureCB = aFailureCB]
+    [successCB = std::move(aSuccessCB), aFailureCB]
     (const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aResult) {
+      MOZ_DIAGNOSTIC_ASSERT(aFailureCB);
       if (aResult.type() == IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult::TCopyableErrorResult) {
         // application layer error
         auto& rv = aResult.get_CopyableErrorResult();
         MOZ_DIAGNOSTIC_ASSERT(rv.Failed());
-        failureCB(CopyableErrorResult(rv));
+        aFailureCB(CopyableErrorResult(rv));
         return;
       }
       // success
       auto& ipcDesc = aResult.get_IPCServiceWorkerRegistrationDescriptor();
       successCB(ServiceWorkerRegistrationDescriptor(ipcDesc));
     }, [failureCB = std::move(aFailureCB)] (ResponseRejectReason aReason) {
+      MOZ_DIAGNOSTIC_ASSERT(failureCB);
       // IPC layer error
       failureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     });
 }
 
 RemoteServiceWorkerContainerImpl::RemoteServiceWorkerContainerImpl()
   : mActor(nullptr)
   , mOuter(nullptr)
diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
--- a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
@@ -58,54 +58,58 @@ RemoteServiceWorkerRegistrationImpl::Upd
                                             ServiceWorkerFailureCallback&& aFailureCB)
 {
   if (!mActor) {
     aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     return;
   }
 
   mActor->SendUpdate(
-    [successCB = std::move(aSuccessCB), failureCB = aFailureCB]
+    [successCB = std::move(aSuccessCB), aFailureCB]
     (const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aResult) {
+      MOZ_DIAGNOSTIC_ASSERT(aFailureCB);
       if (aResult.type() == IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult::TCopyableErrorResult) {
         // application layer error
         auto& rv = aResult.get_CopyableErrorResult();
         MOZ_DIAGNOSTIC_ASSERT(rv.Failed());
-        failureCB(CopyableErrorResult(rv));
+        aFailureCB(CopyableErrorResult(rv));
         return;
       }
       // success
       auto& ipcDesc = aResult.get_IPCServiceWorkerRegistrationDescriptor();
       successCB(ServiceWorkerRegistrationDescriptor(ipcDesc));
     }, [failureCB = std::move(aFailureCB)] (ResponseRejectReason aReason) {
+      MOZ_DIAGNOSTIC_ASSERT(failureCB);
       // IPC layer error
       failureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     });
 }
 
 void
 RemoteServiceWorkerRegistrationImpl::Unregister(ServiceWorkerBoolCallback&& aSuccessCB,
                                                 ServiceWorkerFailureCallback&& aFailureCB)
 {
   if (!mActor) {
     aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
     return;
   }
 
   mActor->SendUnregister(
-    [successCB = std::move(aSuccessCB), failureCB = aFailureCB]
+    [successCB = std::move(aSuccessCB), aFailureCB]
     (Tuple<bool, CopyableErrorResult>&& aResult) {
+    MOZ_DIAGNOSTIC_ASSERT(aFailureCB);
     if (Get<1>(aResult).Failed()) {
       // application layer error
-      failureCB(Get<1>(aResult));
+      aFailureCB(Get<1>(aResult));
       return;
     }
     // success
     successCB(Get<0>(aResult));
   }, [failureCB = std::move(aFailureCB)] (ResponseRejectReason aReason) {
+    MOZ_DIAGNOSTIC_ASSERT(failureCB);
     // IPC layer error
     failureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
   });
 }
 
 RemoteServiceWorkerRegistrationImpl::RemoteServiceWorkerRegistrationImpl(const ServiceWorkerRegistrationDescriptor& aDescriptor)
   : mActor(nullptr)
   , mOuter(nullptr)
