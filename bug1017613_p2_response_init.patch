# HG changeset patch
# Parent 2aa5d7b6ccf450279efb8d60459a8e87ca8e798d
# User Nikhil Marathe <nsm.nikhil@gmail.com>
Bug 1017613 - Part 2 - Response IDL and stubs. r=ehsan

diff --git a/dom/base/Response.cpp b/dom/base/Response.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/Response.cpp
@@ -0,0 +1,109 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Response.h"
+
+#include "mozilla/dom/Promise.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(AbstractResponse)
+NS_IMPL_CYCLE_COLLECTING_ADDREF(AbstractResponse)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(AbstractResponse)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(AbstractResponse)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+NS_IMPL_CYCLE_COLLECTION_INHERITED(Response, AbstractResponse, mDummy)
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Response)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Response)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(Response)
+NS_INTERFACE_MAP_END_INHERITING(AbstractResponse)
+
+NS_IMPL_CYCLE_COLLECTION_INHERITED(OpaqueResponse, AbstractResponse, mDummy)
+NS_IMPL_CYCLE_COLLECTING_ADDREF(OpaqueResponse)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(OpaqueResponse)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(OpaqueResponse)
+NS_INTERFACE_MAP_END_INHERITING(AbstractResponse)
+
+NS_IMPL_CYCLE_COLLECTION_INHERITED(CORSResponse, Response, mDummy)
+NS_IMPL_CYCLE_COLLECTING_ADDREF(CORSResponse)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(CORSResponse)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(CORSResponse)
+NS_INTERFACE_MAP_END_INHERITING(Response)
+
+/* static */ already_AddRefed<AbstractResponse>
+AbstractResponse::Constructor(const GlobalObject& aGlobal, ErrorResult& aRv)
+{
+  nsCOMPtr<nsISupports> supports = aGlobal.GetAsSupports();
+  nsresult rv;
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(supports, &rv);
+  if (NS_FAILED(rv)) {
+    aRv.Throw(rv);
+    return nullptr;
+  }
+
+  nsRefPtr<AbstractResponse> response = new AbstractResponse(global);
+  return response.forget();
+}
+
+/* static */ already_AddRefed<Response>
+Response::Constructor(const GlobalObject& aGlobal,
+                      const ResponseInit& aResponseInit,
+                      ErrorResult& aRv)
+{
+  nsCOMPtr<nsISupports> supports = aGlobal.GetAsSupports();
+  nsresult rv;
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(supports, &rv);
+  if (NS_FAILED(rv)) {
+    aRv.Throw(rv);
+    return nullptr;
+  }
+
+  nsRefPtr<Response> response = new Response(global);
+  response->SetStatus(aResponseInit.mStatus);
+  response->SetStatusText(aResponseInit.mStatusText);
+  // FIXME(nsm): Copy over headers.
+  return response.forget();
+}
+
+void
+Response::NamedGetter(const nsAString& aName, bool& aFound, nsString& aResult)
+{
+  aFound = false;
+  // FIXME(nsm)
+}
+
+void
+Response::NamedSetter(const nsAString& aName, const nsAString& aValue)
+{
+  // FIXME(nsm)
+}
+
+void
+Response::GetSupportedNames(unsigned, nsTArray<nsString>& aNames)
+{
+  // FIXME(nsm)
+}
+
+already_AddRefed<Promise>
+Response::ToBlob()
+{
+  nsRefPtr<Promise> promise = new Promise(GetParentObject());
+  promise->MaybeReject(NS_ERROR_DOM_NOT_SUPPORTED_ERR);
+  return promise.forget();
+}
+
+void
+OpaqueResponse::GetSupportedNames(unsigned, nsTArray<nsString>& aNames)
+{
+  // FIXME(nsm)
+}
+
diff --git a/dom/base/Response.h b/dom/base/Response.h
new file mode 100644
--- /dev/null
+++ b/dom/base/Response.h
@@ -0,0 +1,245 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Response_h
+#define mozilla_dom_Response_h
+
+#include "mozilla/dom/ResponseBinding.h"
+#include "nsWrapperCache.h"
+#include "nsISupportsImpl.h"
+
+class nsIGlobalObject;
+
+namespace mozilla {
+namespace dom {
+
+class AbstractResponse : public nsISupports
+                       , public nsWrapperCache
+{
+public:
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(AbstractResponse)
+
+  explicit AbstractResponse(nsIGlobalObject* aOwner)
+  {
+    SetIsDOMBinding();
+  }
+
+  virtual ~AbstractResponse()
+  { }
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx) MOZ_OVERRIDE
+  {
+    return mozilla::dom::AbstractResponseBinding_workers::Wrap(aCx, this);
+  }
+
+  nsIGlobalObject* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+  static already_AddRefed<AbstractResponse>
+  Constructor(const GlobalObject& aGlobal, ErrorResult& aRv);
+
+private:
+  nsIGlobalObject* mOwner;
+};
+
+class OpaqueResponse MOZ_FINAL : public AbstractResponse
+{
+public:
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(OpaqueResponse, AbstractResponse)
+
+  explicit OpaqueResponse(nsIGlobalObject* aOwner)
+    : AbstractResponse(aOwner)
+  {
+    SetIsDOMBinding();
+  }
+
+  virtual ~OpaqueResponse()
+  { }
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx) MOZ_OVERRIDE
+  {
+    return mozilla::dom::OpaqueResponseBinding_workers::Wrap(aCx, this);
+  }
+
+  void
+  GetHeader(const nsAString& aName, nsString& aResult)
+  {
+    bool unused;
+    return NamedGetter(aName, unused, aResult);
+  }
+
+  void
+  GetSupportedNames(unsigned, nsTArray<nsString>& aNames);
+
+  void
+  NamedGetter(const nsAString& aName, bool& aFound, nsString& aResult)
+  {
+    aFound = false;
+    // FIXME(nsm)
+  }
+
+  bool
+  NameIsEnumerable(const nsAString& aName)
+  {
+    return true;
+  }
+
+  uint16_t
+  Status()
+  {
+    return mStatus;
+  }
+
+  void
+  GetStatusText(DOMString& aStatusText)
+  {
+    aStatusText.AsAString() = mStatusText;
+  }
+
+  void
+  GetUrl(DOMString& aUrl)
+  {
+    aUrl.AsAString() = mUrl;
+  }
+private:
+  nsCOMPtr<nsISupports> mDummy;
+  uint16_t mStatus;
+  nsString mStatusText;
+  nsString mUrl;
+};
+
+class Response : public AbstractResponse
+{
+public:
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(Response, AbstractResponse)
+
+  explicit Response(nsIGlobalObject* aOwner)
+    : AbstractResponse(aOwner)
+  {
+    SetIsDOMBinding();
+  }
+
+  virtual ~Response()
+  { }
+
+  static already_AddRefed<Response>
+  Constructor(const GlobalObject& aGlobal, const ResponseInit& aResponseInit,
+              ErrorResult& aRv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx) MOZ_OVERRIDE
+  {
+    return mozilla::dom::ResponseBinding_workers::Wrap(aCx, this);
+  }
+
+  void
+  GetHeader(const nsAString& aName, nsString& aResult)
+  {
+    bool unused;
+    return NamedGetter(aName, unused, aResult);
+  }
+
+  void
+  SetHeader(const nsAString& aName, const nsAString& aValue)
+  {
+    NamedSetter(aName, aValue);
+  }
+
+  void
+  NamedGetter(const nsAString& aName, bool& aFound, nsString& aResult);
+
+  bool
+  NameIsEnumerable(const nsAString& aName)
+  {
+    return true;
+  }
+
+  void
+  NamedSetter(const nsAString& aName, const nsAString& aValue);
+
+  void
+  GetSupportedNames(unsigned, nsTArray<nsString>& aNames);
+
+  uint16_t
+  Status()
+  {
+    return mStatus;
+  }
+
+  void
+  GetStatusText(DOMString& aStatusText)
+  {
+    aStatusText.AsAString() = mStatusText;
+  }
+
+  void
+  GetUrl(DOMString& aUrl)
+  {
+    aUrl.AsAString() = mUrl;
+  }
+
+  void
+  SetUrl(const nsAString& aUrl)
+  {
+    mUrl.Assign(aUrl);
+  }
+
+  void
+  SetStatus(uint16_t aStatus)
+  {
+    mStatus = aStatus;
+  }
+
+  void
+  SetStatusText(const nsAString& aStatusText)
+  {
+    mStatusText.Assign(aStatusText);
+  }
+
+  already_AddRefed<Promise>
+  ToBlob();
+private:
+  nsCOMPtr<nsISupports> mDummy;
+  uint16_t mStatus;
+  nsString mStatusText;
+  nsString mUrl;
+};
+
+class CORSResponse MOZ_FINAL : public Response
+{
+public:
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(CORSResponse, Response)
+
+  explicit CORSResponse(nsIGlobalObject* aOwner)
+    : Response(aOwner)
+  {
+    SetIsDOMBinding();
+  }
+
+  virtual ~CORSResponse()
+  { }
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx) MOZ_OVERRIDE
+  {
+    return mozilla::dom::CORSResponseBinding_workers::Wrap(aCx, this);
+  }
+
+private:
+  nsCOMPtr<nsISupports> mDummy;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Response_h
diff --git a/dom/base/moz.build b/dom/base/moz.build
--- a/dom/base/moz.build
+++ b/dom/base/moz.build
@@ -59,16 +59,17 @@ EXPORTS.mozilla.dom += [
     'HeaderMap.h',
     'MessageChannel.h',
     'MessagePort.h',
     'MessagePortList.h',
     'Navigator.h',
     'PerformanceEntry.h',
     'PerformanceResourceTiming.h',
     'Request.h',
+    'Response.h',
     'ScreenOrientation.h',
     'ScriptSettings.h',
     'StructuredCloneTags.h',
     'SubtleCrypto.h',
     'URL.h',
     'URLSearchParams.h',
 ]
 
@@ -103,16 +104,17 @@ UNIFIED_SOURCES += [
     'nsScriptNameSpaceManager.cpp',
     'nsStructuredCloneContainer.cpp',
     'nsWindowMemoryReporter.cpp',
     'nsWindowRoot.cpp',
     'nsWrapperCache.cpp',
     'PerformanceEntry.cpp',
     'PerformanceResourceTiming.cpp',
     'Request.cpp',
+    'Response.cpp',
     'ScriptSettings.cpp',
     'SubtleCrypto.cpp',
     'URL.cpp',
     'URLSearchParams.cpp',
     'WindowNamedPropertiesHandler.cpp',
 ]
 
 # these files couldn't be in UNIFIED_SOURCES for now for reasons given below:
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -88,16 +88,22 @@
 # entry, just make it not a list.
 
 DOMInterfaces = {
 
 'MozActivity': {
     'nativeType': 'mozilla::dom::Activity',
 },
 
+'AbstractResponse': {
+    'headerFile': 'mozilla/dom/Response.h',
+    'nativeType': 'mozilla::dom::AbstractResponse',
+    'workers': True,
+},
+
 'AbstractWorker': {
     'concrete': False
 },
 
 'ArchiveReader': {
     'nativeType': 'mozilla::dom::archivereader::ArchiveReader',
 },
 
@@ -216,16 +222,22 @@ DOMInterfaces = {
     'concrete': False,
 },
 
 'ChromeWorker': {
     'headerFile': 'mozilla/dom/WorkerPrivate.h',
     'nativeType': 'mozilla::dom::workers::ChromeWorkerPrivate',
 },
 
+'CORSResponse': {
+    'headerFile': 'mozilla/dom/Response.h',
+    'nativeType': 'mozilla::dom::CORSResponse',
+    'workers': True,
+},
+
 'Console': {
     'implicitJSContext': [ 'trace', 'time', 'timeEnd' ],
 },
 
 'ConvolverNode': {
     'implicitJSContext': [ 'buffer' ],
     'resultNotAddRefed': [ 'buffer' ],
 },
@@ -427,16 +439,24 @@ DOMInterfaces = {
 
 'Exception': {
     'headerFile': 'mozilla/dom/DOMException.h',
     'binaryNames': {
         'message': 'messageMoz',
     },
 },
 
+'FetchEvent': [{
+    'binaryNames': {'request': 'request_'}
+},
+{
+    'workers': True,
+    'skipGen': True,
+}],
+
 'FileHandle': {
     'nativeType': 'mozilla::dom::FileHandle'
 },
 
 'FileList': {
     'nativeType': 'nsDOMFileList',
     'headerFile': 'nsDOMFile.h',
     'resultNotAddRefed': [ 'item' ]
@@ -925,16 +945,22 @@ DOMInterfaces = {
     'nativeType': 'mozilla::dom::AudioContext',
     'resultNotAddRefed': [ 'destination', 'listener' ],
 },
 
 'OfflineResourceList': {
     'nativeType': 'nsDOMOfflineResourceList',
 },
 
+'OpaqueResponse': {
+    'headerFile': 'mozilla/dom/Response.h',
+    'nativeType': 'mozilla::dom::OpaqueResponse',
+    'workers': True,
+},
+
 'OscillatorNode': {
     'resultNotAddRefed': [ 'frequency', 'detune' ],
 },
 
 'PaintRequestList': {
     'headerFile': 'mozilla/dom/PaintRequest.h',
     'resultNotAddRefed': [ 'item' ]
 },
@@ -1017,16 +1043,22 @@ DOMInterfaces = {
     'workers': True,
 },
 
 'RGBColor': {
     'nativeType': 'nsDOMCSSRGBColor',
     'resultNotAddRefed': [ 'alpha', 'blue', 'green', 'red' ]
 },
 
+'Response': {
+    'workers': True,
+    'headerFile': 'mozilla/dom/Response.h',
+    'nativeType': 'mozilla::dom::Response',
+},
+
 'RsaHashedKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
 
 'Screen': {
     'nativeType': 'nsScreen',
 },
 
diff --git a/dom/bindings/Configuration.py b/dom/bindings/Configuration.py
--- a/dom/bindings/Configuration.py
+++ b/dom/bindings/Configuration.py
@@ -176,16 +176,18 @@ class Configuration:
         for d in self.descriptorsByName[interfaceName]:
             if d.workers == workers:
                 return d
 
         if workers:
             for d in self.descriptorsByName[interfaceName]:
                 return d
 
+        print interfaceName, workers
+        print self.descriptorsByName[interfaceName]
         raise NoSuchDescriptorError("For " + interfaceName + " found no matches");
     def getDescriptorProvider(self, workers):
         """
         Gets a descriptor provider that can provide descriptors as needed,
         for the given workers boolean
         """
         return DescriptorProvider(self, workers)
 
diff --git a/dom/webidl/Response.webidl b/dom/webidl/Response.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Response.webidl
@@ -0,0 +1,53 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://www.w3.org/TR/2014/WD-service-workers-20140508/
+ */
+
+// Not used yet.
+// interface ResponsePromise : Promise {
+//   // Promise<Blob>
+//   Promise toBlob();
+// };
+
+[Constructor]
+interface AbstractResponse {
+};
+
+interface OpaqueResponse : AbstractResponse {
+  readonly attribute unsigned short status;
+  // https://github.com/slightlyoff/ServiceWorker/issues/269
+  readonly attribute DOMString statusText;
+  // Returns a filtered list of headers. See prose for details.
+  getter DOMString getHeader(DOMString name);
+  // No setter for headers
+  readonly attribute DOMString url;
+};
+
+interface CORSResponse : Response {
+  getter DOMString getHeader(DOMString name);
+};
+
+[Constructor(optional ResponseInit responseInitDict)]
+interface Response : AbstractResponse {
+  attribute unsigned short status;
+  // https://github.com/slightlyoff/ServiceWorker/issues/269
+  attribute DOMString statusText;
+  // Spec says, getter HeaderMap headers(), but that isn't what getter/setter is used for.
+  getter DOMString getHeader(DOMString name);
+  setter creator void setHeader(DOMString name, DOMString value);
+  attribute DOMString url;
+  // Promise<Blob>
+  Promise toBlob();
+};
+
+dictionary ResponseInit {
+  unsigned short status = 200;
+  // https://github.com/slightlyoff/ServiceWorker/issues/269
+  DOMString statusText = "OK";
+  // HeaderMap headers;
+};
+
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -289,16 +289,17 @@ WEBIDL_FILES = [
     'Position.webidl',
     'PositionError.webidl',
     'ProcessingInstruction.webidl',
     'Promise.webidl',
     'PushManager.webidl',
     'Range.webidl',
     'Rect.webidl',
     'Request.webidl',
+    'Response.webidl',
     'RGBColor.webidl',
     'RTCConfiguration.webidl',
     'RTCIceCandidate.webidl',
     'RTCIdentityAssertion.webidl',
     'RTCPeerConnection.webidl',
     'RTCSessionDescription.webidl',
     'RTCStatsReport.webidl',
     'Screen.webidl',
diff --git a/dom/workers/RegisterBindings.cpp b/dom/workers/RegisterBindings.cpp
--- a/dom/workers/RegisterBindings.cpp
+++ b/dom/workers/RegisterBindings.cpp
@@ -18,16 +18,17 @@
 #include "mozilla/dom/EventTargetBinding.h"
 #include "mozilla/dom/FileReaderSyncBinding.h"
 #include "mozilla/dom/ImageData.h"
 #include "mozilla/dom/ImageDataBinding.h"
 #include "mozilla/dom/MessageEventBinding.h"
 #include "mozilla/dom/MessagePortBinding.h"
 #include "mozilla/dom/PromiseBinding.h"
 #include "mozilla/dom/RequestBinding.h"
+#include "mozilla/dom/ResponseBinding.h"
 #include "mozilla/dom/TextDecoderBinding.h"
 #include "mozilla/dom/TextEncoderBinding.h"
 #include "mozilla/dom/XMLHttpRequestBinding.h"
 #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
 #include "mozilla/dom/URLBinding.h"
 #include "mozilla/dom/URLSearchParamsBinding.h"
 #include "mozilla/dom/WorkerBinding.h"
 #include "mozilla/dom/WorkerLocationBinding.h"
@@ -78,17 +79,21 @@ WorkerPrivate::RegisterBindings(JSContex
       !WorkerLocationBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !WorkerNavigatorBinding_workers::GetConstructorObject(aCx, aGlobal)) {
     return false;
   }
 
   // FIXME(nsm): When landing flip this.
   // Init ServiceWorker specific APIs.
   if (true) {
-    if (!RequestBinding_workers::GetConstructorObject(aCx, aGlobal)) {
+    if (!RequestBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !AbstractResponseBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !CORSResponseBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !OpaqueResponseBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !ResponseBinding_workers::GetConstructorObject(aCx, aGlobal)) {
       return nullptr;
     }
   }
 
   if (!JS_DefineProfilingFunctions(aCx, aGlobal)) {
     return false;
   }
 
diff --git a/dom/workers/test/fetch/worker_interfaces.js b/dom/workers/test/fetch/worker_interfaces.js
--- a/dom/workers/test/fetch/worker_interfaces.js
+++ b/dom/workers/test/fetch/worker_interfaces.js
@@ -10,10 +10,14 @@ function is(a, b, msg) {
 
 function isnot(a, b, msg) {
   dump("ISNOT: " + (a!==b) + "  =>  " + a + " | " + b + " " + msg + "\n");
   postMessage({type: 'status', status: a !== b, msg: a + " !== " + b + ": " + msg });
 }
 
 onmessage = function() {
   ok(typeof Request === "function", "Request should be defined");
+  ok(typeof AbstractResponse === "function", "AbstractResponse should be defined");
+  ok(typeof Response === "function", "Response should be defined");
+  ok(typeof CORSResponse === "function", "CORSResponse should be defined");
+  ok(typeof OpaqueResponse === "function", "OpaqueResponse should be defined");
   postMessage({ type: 'finish' });
 }
