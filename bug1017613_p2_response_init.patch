# HG changeset patch
# Parent 1e2ac5bfd374ab913324806a623502ee2bf50b47
# User Nikhil Marathe <nsm.nikhil@gmail.com>
Bug XXXXXX - Part 2 - Response IDL and stubs. r=ehsan

diff --git a/dom/base/Response.cpp b/dom/base/Response.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/Response.cpp
@@ -0,0 +1,62 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Response.h"
+#include "nsDOMString.h"
+#include "nsPIDOMWindow.h"
+#include "nsIURI.h"
+#include "nsISupportsImpl.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Response)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Response)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(Response)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Response)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+Response::Response(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+  SetIsDOMBinding();
+}
+
+Response::~Response()
+{
+}
+
+already_AddRefed<HeaderMap>
+Response::Headers() const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+/* static */ already_AddRefed<Response>
+Response::Redirect(const GlobalObject& aGlobal, const nsAString& aUrl,
+                   uint16_t aStatus)
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+already_AddRefed<Promise>
+Response::BodyAs(FetchBodyType aType) const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+/*static*/ already_AddRefed<Response>
+Response::Constructor(const GlobalObject& global,
+                      const ArrayBufferOrArrayBufferViewOrBlobOrString& aBody,
+                      const ResponseInit& aInit, ErrorResult& rv)
+{
+  nsRefPtr<Response> response = new Response(global.GetAsSupports());
+  response->mStatus = aInit.mStatus;
+  response->mStatusText = aInit.mStatusText.WasPassed() ? aInit.mStatusText.Value() : NS_LITERAL_CSTRING("OK");
+  // FIXME(nsm): Headers and body.
+  return response.forget();
+}
diff --git a/dom/base/Response.h b/dom/base/Response.h
new file mode 100644
--- /dev/null
+++ b/dom/base/Response.h
@@ -0,0 +1,94 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Response_h
+#define mozilla_dom_Response_h
+
+#include "mozilla/dom/ResponseBinding.h"
+#include "mozilla/dom/UnionTypes.h"
+
+#include "nsWrapperCache.h"
+#include "nsISupportsImpl.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class HeaderMap;
+
+class Response : public nsISupports
+               , public nsWrapperCache
+{
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Response)
+
+public:
+  Response(nsISupports* aOwner);
+  virtual ~Response();
+
+  ResponseType
+  Type() const
+  {
+    return mType;
+  }
+
+  void
+  GetUrl(DOMString& aUrl) const
+  {
+    aUrl.AsAString() = mUrl;
+  }
+
+  uint16_t
+  Status() const
+  {
+    return mStatus;
+  }
+
+  void
+  GetStatusText(nsCString& aStatusText) const
+  {
+    aStatusText = mStatusText;
+  }
+
+  already_AddRefed<HeaderMap>
+  Headers() const;
+
+  static already_AddRefed<Response>
+  Redirect(const GlobalObject& aGlobal, const nsAString& aUrl, uint16_t aStatus);
+
+  already_AddRefed<Promise>
+  BodyAs(FetchBodyType aType) const;
+
+  static already_AddRefed<Response>
+  Constructor(const GlobalObject& aGlobal,
+              const ArrayBufferOrArrayBufferViewOrBlobOrString& aBody,
+              const ResponseInit& aInit, ErrorResult& rv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::ResponseBinding_workers::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  nsISupports* mOwner;
+
+  ResponseType mType;
+  nsString mUrl;
+  uint16_t mStatus;
+  nsCString mStatusText;
+  nsRefPtr<HeaderMap> mHeaderMap;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Response_h
diff --git a/dom/base/moz.build b/dom/base/moz.build
--- a/dom/base/moz.build
+++ b/dom/base/moz.build
@@ -58,16 +58,17 @@ EXPORTS.mozilla.dom += [
     'HeaderMap.h',
     'MessageChannel.h',
     'MessagePort.h',
     'MessagePortList.h',
     'Navigator.h',
     'PerformanceEntry.h',
     'PerformanceResourceTiming.h',
     'Request.h',
+    'Response.h',
     'ScreenOrientation.h',
     'ScriptSettings.h',
     'StructuredCloneTags.h',
     'SubtleCrypto.h',
     'URL.h',
     'URLSearchParams.h',
 ]
 
@@ -103,16 +104,17 @@ UNIFIED_SOURCES += [
     'nsScriptNameSpaceManager.cpp',
     'nsStructuredCloneContainer.cpp',
     'nsWindowMemoryReporter.cpp',
     'nsWindowRoot.cpp',
     'nsWrapperCache.cpp',
     'PerformanceEntry.cpp',
     'PerformanceResourceTiming.cpp',
     'Request.cpp',
+    'Response.cpp',
     'ScriptSettings.cpp',
     'SubtleCrypto.cpp',
     'URL.cpp',
     'URLSearchParams.cpp',
     'WindowNamedPropertiesHandler.cpp',
 ]
 
 # these files couldn't be in UNIFIED_SOURCES for now for reasons given below:
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -1025,16 +1025,26 @@ DOMInterfaces = {
     'nativeType': 'mozilla::dom::Request',
 },
 {
     'headerFile': 'mozilla/dom/Request.h',
     'nativeType': 'mozilla::dom::Request',
     'workers': True,
 }],
 
+'Response': [{
+    'headerFile': 'mozilla/dom/Response.h',
+    'nativeType': 'mozilla::dom::Response',
+},
+{
+    'headerFile': 'mozilla/dom/Response.h',
+    'nativeType': 'mozilla::dom::Response',
+    'workers': True,
+}],
+
 'RGBColor': {
     'nativeType': 'nsDOMCSSRGBColor',
     'resultNotAddRefed': [ 'alpha', 'blue', 'green', 'red' ]
 },
 
 'RsaHashedKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
diff --git a/dom/webidl/Response.webidl b/dom/webidl/Response.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Response.webidl
@@ -0,0 +1,37 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/
+ */
+
+[Constructor(FetchBody body, optional ResponseInit init),
+ // Exposed=Window,Worker,
+ Pref="dom.fetch.enabled"]
+interface Response {
+  // FIXME(nsm): ScalarValueString url.
+  static Response redirect(DOMString url, optional unsigned short status = 302);
+
+  readonly attribute ResponseType type;
+
+  // FIXME(nsm): readonly attribute ScalarValueString url;
+  readonly attribute DOMString url;
+  readonly attribute unsigned short status;
+  readonly attribute ByteString statusText;
+  readonly attribute HeaderMap headers;
+  // Promise<FetchBody>
+  Promise bodyAs(FetchBodyType type);
+};
+
+dictionary ResponseInit {
+  ResponseType type = "default";
+  unsigned short status = 200;
+  // Becase we don't seem to support default values for ByteString.
+  ByteString statusText; // = "OK";
+  HeaderMap headers;
+  FetchBody? body = null;
+};
+
+enum ResponseType { "default", "error" };
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -296,16 +296,17 @@ WEBIDL_FILES = [
     'Position.webidl',
     'PositionError.webidl',
     'ProcessingInstruction.webidl',
     'Promise.webidl',
     'PushManager.webidl',
     'Range.webidl',
     'Rect.webidl',
     'Request.webidl',
+    'Response.webidl',
     'RGBColor.webidl',
     'RTCConfiguration.webidl',
     'RTCIceCandidate.webidl',
     'RTCIdentityAssertion.webidl',
     'RTCPeerConnection.webidl',
     'RTCPeerConnectionStatic.webidl',
     'RTCSessionDescription.webidl',
     'RTCStatsReport.webidl',
diff --git a/dom/workers/RegisterBindings.cpp b/dom/workers/RegisterBindings.cpp
--- a/dom/workers/RegisterBindings.cpp
+++ b/dom/workers/RegisterBindings.cpp
@@ -18,16 +18,17 @@
 #include "mozilla/dom/EventTargetBinding.h"
 #include "mozilla/dom/FileReaderSyncBinding.h"
 #include "mozilla/dom/ImageData.h"
 #include "mozilla/dom/ImageDataBinding.h"
 #include "mozilla/dom/MessageEventBinding.h"
 #include "mozilla/dom/MessagePortBinding.h"
 #include "mozilla/dom/PromiseBinding.h"
 #include "mozilla/dom/RequestBinding.h"
+#include "mozilla/dom/ResponseBinding.h"
 #include "mozilla/dom/TextDecoderBinding.h"
 #include "mozilla/dom/TextEncoderBinding.h"
 #include "mozilla/dom/XMLHttpRequestBinding.h"
 #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
 #include "mozilla/dom/URLBinding.h"
 #include "mozilla/dom/URLSearchParamsBinding.h"
 #include "mozilla/dom/WorkerBinding.h"
 #include "mozilla/dom/WorkerLocationBinding.h"
@@ -79,17 +80,18 @@ WorkerPrivate::RegisterBindings(JSContex
       !WorkerNavigatorBinding_workers::GetConstructorObject(aCx, aGlobal)) {
     return false;
   }
 
   // FIXME(nsm): When landing flip this.
   // Init ServiceWorker specific APIs.
   if (true) {
     if (!HeaderMapBinding_workers::GetConstructorObject(aCx, aGlobal) ||
-        !RequestBinding_workers::GetConstructorObject(aCx, aGlobal)) {
+        !RequestBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !ResponseBinding_workers::GetConstructorObject(aCx, aGlobal)) {
       return nullptr;
     }
   }
 
   if (!JS_DefineProfilingFunctions(aCx, aGlobal)) {
     return false;
   }
 
diff --git a/dom/workers/test/fetch/worker_interfaces.js b/dom/workers/test/fetch/worker_interfaces.js
--- a/dom/workers/test/fetch/worker_interfaces.js
+++ b/dom/workers/test/fetch/worker_interfaces.js
@@ -11,10 +11,11 @@ function is(a, b, msg) {
 function isnot(a, b, msg) {
   dump("ISNOT: " + (a!==b) + "  =>  " + a + " | " + b + " " + msg + "\n");
   postMessage({type: 'status', status: a !== b, msg: a + " !== " + b + ": " + msg });
 }
 
 onmessage = function() {
   ok(typeof HeaderMap === "function", "HeaderMap should be defined");
   ok(typeof Request === "function", "Request should be defined");
+  ok(typeof Response === "function", "Response should be defined");
   postMessage({ type: 'finish' });
 }
