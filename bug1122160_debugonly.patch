# HG changeset patch
# Parent 960744193bc4b165135ef5b02c415ac0668258cb
# User Ben Kelly <ben@wanderview.com>
Bug 1122160 Add operator+=() and operator-=() to DebugOnly r=froydnj

diff --git a/mfbt/DebugOnly.h b/mfbt/DebugOnly.h
--- a/mfbt/DebugOnly.h
+++ b/mfbt/DebugOnly.h
@@ -46,31 +46,37 @@ public:
   DebugOnly& operator=(const T& aRhs) {
     value = aRhs;
     return *this;
   }
 
   void operator++(int) { value++; }
   void operator--(int) { value--; }
 
+  // Do not define operator+=() or operator-=() here.  These will coerce via
+  // the implicit cast and built-in ooperators.  Defining explicit methods here
+  // will create ambiguity the compiler can't deal with.
+
   T* operator&() { return &value; }
 
   operator T&() { return value; }
   operator const T&() const { return value; }
 
   T& operator->() { return value; }
   const T& operator->() const { return value; }
 
 #else
   DebugOnly() { }
   MOZ_IMPLICIT DebugOnly(const T&) { }
   DebugOnly(const DebugOnly&) { }
   DebugOnly& operator=(const T&) { return *this; }
   void operator++(int) { }
   void operator--(int) { }
+  DebugOnly& operator+=(const T&) { return *this; }
+  DebugOnly& operator-=(const T&) { return *this; }
 #endif
 
   /*
    * DebugOnly must always have a destructor or else it will
    * generate "unused variable" warnings, exactly what it's intended
    * to avoid!
    */
   ~DebugOnly() {}
