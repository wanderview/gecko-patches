# HG changeset patch
# Parent 1e77084da6b5de088e1e9bf93d56e03a265af3ad
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P1 v0 to v1 interdiff.

diff --git a/dom/fetch/FetchIPCUtils.h b/dom/fetch/FetchIPCUtils.h
--- a/dom/fetch/FetchIPCUtils.h
+++ b/dom/fetch/FetchIPCUtils.h
@@ -2,25 +2,30 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_FetchIPCUtils_h
 #define mozilla_dom_FetchIPCUtils_h
 
 #include "ipc/IPCMessageUtils.h"
+
+#ifdef None
+#undef None
+#endif
+
 #include "mozilla/dom/HeadersBinding.h"
 #include "mozilla/dom/Request.h"
 #include "mozilla/dom/Response.h"
 
 namespace IPC {
   template<>
   struct ParamTraits<mozilla::dom::HeadersGuardEnum> :
     public ContiguousTypedEnumSerializer<mozilla::dom::HeadersGuardEnum,
-                                         mozilla::dom::HeadersGuardEnum::MozNone,
+                                         mozilla::dom::HeadersGuardEnum::None,
                                          mozilla::dom::HeadersGuardEnum::EndGuard_> {};
   template<>
   struct ParamTraits<mozilla::dom::RequestMode> :
     public ContiguousTypedEnumSerializer<mozilla::dom::RequestMode,
                                          mozilla::dom::RequestMode::Same_origin,
                                          mozilla::dom::RequestMode::EndGuard_> {};
   template<>
   struct ParamTraits<mozilla::dom::RequestCredentials> :
diff --git a/dom/fetch/InternalHeaders.h b/dom/fetch/InternalHeaders.h
--- a/dom/fetch/InternalHeaders.h
+++ b/dom/fetch/InternalHeaders.h
@@ -43,31 +43,31 @@ private:
     nsCString mName;
     nsCString mValue;
   };
 
   HeadersGuardEnum mGuard;
   nsTArray<Entry> mList;
 
 public:
-  explicit InternalHeaders(HeadersGuardEnum aGuard = HeadersGuardEnum::MozNone)
+  explicit InternalHeaders(HeadersGuardEnum aGuard = HeadersGuardEnum::None)
     : mGuard(aGuard)
   {
   }
 
   explicit InternalHeaders(const InternalHeaders& aOther)
     : mGuard(aOther.mGuard)
   {
     ErrorResult result;
     Fill(aOther, result);
     MOZ_ASSERT(!result.Failed());
   }
 
-  InternalHeaders(const nsTArray<PHeadersEntry>& aHeaders,
-                  HeadersGuardEnum aGuard = HeadersGuardEnum::MozNone);
+  explicit InternalHeaders(const nsTArray<PHeadersEntry>& aHeaders,
+                           HeadersGuardEnum aGuard = HeadersGuardEnum::None);
 
   void Append(const nsACString& aName, const nsACString& aValue,
               ErrorResult& aRv);
   void Delete(const nsACString& aName, ErrorResult& aRv);
   void Get(const nsACString& aName, nsCString& aValue, ErrorResult& aRv) const;
   void GetAll(const nsACString& aName, nsTArray<nsCString>& aResults,
               ErrorResult& aRv) const;
   bool Has(const nsACString& aName, ErrorResult& aRv) const;
diff --git a/dom/fetch/InternalRequest.h b/dom/fetch/InternalRequest.h
--- a/dom/fetch/InternalRequest.h
+++ b/dom/fetch/InternalRequest.h
@@ -50,17 +50,17 @@ public:
   {
     RESPONSETAINT_BASIC,
     RESPONSETAINT_CORS,
     RESPONSETAINT_OPAQUE,
   };
 
   explicit InternalRequest()
     : mMethod("GET")
-    , mHeaders(new InternalHeaders(HeadersGuardEnum::MozNone))
+    , mHeaders(new InternalHeaders(HeadersGuardEnum::None))
     , mContextFrameType(FRAMETYPE_NONE)
     , mReferrerType(REFERRER_CLIENT)
     , mMode(RequestMode::No_cors)
     , mCredentialsMode(RequestCredentials::Omit)
     , mResponseTainting(RESPONSETAINT_BASIC)
     , mRedirectCount(0)
     , mAuthenticationFlag(false)
     , mForceOriginHeader(false)
diff --git a/dom/fetch/Response.cpp b/dom/fetch/Response.cpp
--- a/dom/fetch/Response.cpp
+++ b/dom/fetch/Response.cpp
@@ -147,17 +147,17 @@ Response::Clone()
 void
 Response::SetBody(nsIInputStream* aBody)
 {
   // FIXME(nsm): Do we flip bodyUsed here?
   mInternalResponse->SetBody(aBody);
 }
 
 already_AddRefed<InternalResponse>
-Response::GetInternalResponse()
+Response::GetInternalResponse() const
 {
   nsRefPtr<InternalResponse> ref = mInternalResponse;
   return ref.forget();
 }
 
 Headers*
 Response::Headers_()
 {
diff --git a/dom/fetch/Response.h b/dom/fetch/Response.h
--- a/dom/fetch/Response.h
+++ b/dom/fetch/Response.h
@@ -97,17 +97,18 @@ public:
 
   already_AddRefed<Response>
   Clone();
 
   void
   SetBody(nsIInputStream* aBody);
 
   already_AddRefed<InternalResponse>
-  GetInternalResponse();
+  GetInternalResponse() const;
+
 private:
   ~Response();
 
   nsCOMPtr<nsIGlobalObject> mOwner;
   nsRefPtr<InternalResponse> mInternalResponse;
   // Lazily created
   nsRefPtr<Headers> mHeaders;
 };
diff --git a/dom/webidl/Headers.webidl b/dom/webidl/Headers.webidl
--- a/dom/webidl/Headers.webidl
+++ b/dom/webidl/Headers.webidl
@@ -6,17 +6,17 @@
  *
  * The origin of this IDL file is
  * http://fetch.spec.whatwg.org/#headers-class
  */
 
 typedef (Headers or sequence<sequence<ByteString>> or MozMap<ByteString>) HeadersInit;
 
 enum HeadersGuardEnum {
-  "mozNone",
+  "none",
   "request",
   "request-no-cors",
   "response",
   "immutable"
 };
 
 [Constructor(optional HeadersInit init),
  Exposed=(Window,Worker),
