# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  b024ac9ae027b40ed9a93c068a914abff742f104
Bug 1447871 P7 Add a mochitest to test leaks due to service worker binding object usage. r=smaug

diff --git a/dom/serviceworkers/test/mochitest.ini b/dom/serviceworkers/test/mochitest.ini
--- a/dom/serviceworkers/test/mochitest.ini
+++ b/dom/serviceworkers/test/mochitest.ini
@@ -268,16 +268,17 @@ skip-if = (debug && e10s) # Bug 1262224
 [test_imagecache.html]
 [test_imagecache_max_age.html]
 [test_importscript.html]
 [test_importscript_mixedcontent.html]
 tags = mcb
 [test_install_event.html]
 [test_install_event_gc.html]
 [test_installation_simple.html]
+[test_leak_checks.html]
 [test_match_all.html]
 [test_match_all_advanced.html]
 [test_match_all_client_id.html]
 [test_match_all_client_properties.html]
 [test_navigator.html]
 [test_not_intercept_plugin.html]
 [test_notification_constructor_error.html]
 [test_notification_get.html]
diff --git a/dom/serviceworkers/test/test_leak_checks.html b/dom/serviceworkers/test/test_leak_checks.html
new file mode 100644
--- /dev/null
+++ b/dom/serviceworkers/test/test_leak_checks.html
@@ -0,0 +1,58 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug 1447871 - Test some service worker leak conditions</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="utils.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none"></div>
+<pre id="test"></pre>
+<script class="testbody" type="text/javascript">
+async function withFrame(doc, url) {
+  let frame = doc.createElement('iframe');
+  frame.src = url;
+  doc.body.appendChild(frame);
+  await new Promise(resolve => frame.onload = resolve);
+  return frame;
+}
+
+async function leakTest(name, callback) {
+  let frame = await withFrame(document, "empty.html?d=1");
+  let frame2 = await withFrame(frame.contentWindow.document, "empty.html?d=2");
+
+  let weakRef = SpecialPowers.Cu.getWeakReference(frame2.contentWindow);
+  ok(weakRef.get(), `should be able to create a weak reference - ${name}`);
+  frame2 = null;
+
+  frame.remove();
+  frame = null;
+
+  return weakRef;
+}
+
+async function runTest() {
+  try {
+    let weakRef = await leakTest("default", _ => {});
+    await new Promise(resolve => SpecialPowers.exactGC(resolve));
+    ok(!weakRef.get(), `iframe content window should be garbage collected - ${name}`);
+  } catch (e) {
+    ok(false, e);
+  } finally {
+    SimpleTest.finish();
+  }
+}
+
+SimpleTest.waitForExplicitFinish();
+addEventListener("load", runTest, { once: true });
+</script>
+</pre>
+</body>
+</html>
+
