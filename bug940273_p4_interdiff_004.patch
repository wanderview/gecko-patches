# HG changeset patch
# Parent 52e934298317ee63fe310daaabe9d9a99709e905
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 Interdiff 004 Action.h and Action.cpp action items


diff --git a/dom/cache/Action.cpp b/dom/cache/Action.cpp
--- a/dom/cache/Action.cpp
+++ b/dom/cache/Action.cpp
@@ -5,14 +5,13 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/Action.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-NS_IMPL_ISUPPORTS0(mozilla::dom::cache::Action);
 NS_IMPL_ISUPPORTS0(mozilla::dom::cache::Action::Resolver);
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/Action.h b/dom/cache/Action.h
--- a/dom/cache/Action.h
+++ b/dom/cache/Action.h
@@ -5,60 +5,65 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_cache_Action_h
 #define mozilla_dom_cache_Action_h
 
 #include "mozilla/dom/cache/Types.h"
 #include "nsISupportsImpl.h"
 
-class nsIFile;
-
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-class Action : public nsISupports
+class Action
 {
 protected:
+  // virtual because deleted through base class pointer
   virtual ~Action() { }
 
 public:
   class Resolver : public nsISupports
   {
   protected:
+    // virtual because deleted through base class pointer
     virtual ~Resolver() { }
 
   public:
+    // Note: Action must drop Resolver ref after calling Resolve()!
+    // Note: Must be called on the same thread used to execute
+    //       Action::RunOnTarget().
+    virtual void Resolve(nsresult aRv) = 0;
 
-    // Note: Action must drop Resolver ref after calling Resolve()!
-    // Note: Must be called on Action's target thread.
-    virtual void Resolve(nsresult aRv)=0;
-
+    // We must use ISUPPORTS for our refcounting here because sub-classes also
+    // want to inherit interfaces like nsIRunnable.
     NS_DECL_THREADSAFE_ISUPPORTS
   };
 
-  // Execute operations on target thread. Once complete call
+  // Execute operations on the target thread.  Once complete call
   // Resolver::Resolve().  This can be done sync or async.
   // Note: Action should hold Resolver ref until its ready to call Resolve().
-  virtual void RunOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo)=0;
+  // Note: The "target" thread is determined when the Action is scheduled on
+  //       Context.  The Action should not assume any particular thread is used.
+  virtual void RunOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo) = 0;
 
   // Called on target thread if the Action is being canceled.  Simply
   // clean up and do not call Resolver::Resolve() in this case.
   // Note: Action must drop Resolver ref if CancelOnTarget() is called!
-  virtual void CancelOnTarget() { }
+  virtual void CancelOnTarget() = 0;
 
   // Executed on the initiating thread and is passed the nsresult given to
   // Resolver::Resolve().
   virtual void CompleteOnInitiatingThread(nsresult aRv) { }
 
   // Executed on the initiating thread.  If this Action will operate on the
   // given cache ID then override this to return true.
-  virtual bool MatchesCacheId(CacheId aCacheId) { return false; }
+  virtual bool MatchesCacheId(CacheId aCacheId) const { return false; }
 
-  NS_DECL_THREADSAFE_ISUPPORTS
+  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(cache::Action)
+  NS_DECL_OWNINGTHREAD
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_Action_h
diff --git a/dom/cache/DBAction.cpp b/dom/cache/DBAction.cpp
--- a/dom/cache/DBAction.cpp
+++ b/dom/cache/DBAction.cpp
@@ -140,11 +140,16 @@ SyncDBAction::RunWithDBOnTarget(Resolver
   MOZ_ASSERT(aResolver);
   MOZ_ASSERT(aDBDir);
   MOZ_ASSERT(aConn);
 
   nsresult rv = RunSyncWithDBOnTarget(aQuotaInfo, aDBDir, aConn);
   aResolver->Resolve(rv);
 }
 
+void
+SyncDBAction::CancelOnTarget()
+{
+}
+
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/DBAction.h b/dom/cache/DBAction.h
--- a/dom/cache/DBAction.h
+++ b/dom/cache/DBAction.h
@@ -56,15 +56,17 @@ protected:
 
   virtual nsresult
   RunSyncWithDBOnTarget(const QuotaInfo& aQuotaInfo, nsIFile* aDBDir,
                         mozIStorageConnection* aConn)=0;
 
   virtual void
   RunWithDBOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo,
                     nsIFile* aDBDir, mozIStorageConnection* aConn) MOZ_OVERRIDE;
+
+  virtual void CancelOnTarget() MOZ_OVERRIDE;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_DBAction_h
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -202,16 +202,18 @@ public:
     if (NS_WARN_IF(NS_FAILED(rv))) {
       aResolver->Resolve(rv);
       return;
     }
 
     aResolver->Resolve(rv);
   }
 
+  virtual void CancelOnTarget() { }
+
 private:
   virtual ~DeleteOrphanedBodyAction() { }
   nsTArray<nsID> mDeletedBodyIdList;
 };
 
 class Manager::DeleteOrphanedCacheAction MOZ_FINAL : public SyncDBAction
 {
 public:
@@ -297,17 +299,17 @@ public:
       aListener->OnCacheMatch(mRequestId, aRv, nullptr, nullptr);
     } else {
       mStreamList->Activate(mCacheId);
       aListener->OnCacheMatch(mRequestId, aRv, &mResponse, mStreamList);
     }
     mStreamList = nullptr;
   }
 
-  virtual bool MatchesCacheId(CacheId aCacheId) MOZ_OVERRIDE
+  virtual bool MatchesCacheId(CacheId aCacheId) const MOZ_OVERRIDE
   {
     return aCacheId == mCacheId;
   }
 
 protected:
   virtual ~CacheMatchAction() { }
   const CacheId mCacheId;
   const PCacheRequest mRequest;
@@ -361,17 +363,17 @@ public:
   virtual void
   Complete(Listener* aListener, nsresult aRv) MOZ_OVERRIDE
   {
     mStreamList->Activate(mCacheId);
     aListener->OnCacheMatchAll(mRequestId, aRv, mSavedResponses, mStreamList);
     mStreamList = nullptr;
   }
 
-  virtual bool MatchesCacheId(CacheId aCacheId) MOZ_OVERRIDE
+  virtual bool MatchesCacheId(CacheId aCacheId) const MOZ_OVERRIDE
   {
     return aCacheId == mCacheId;
   }
 
 protected:
   virtual ~CacheMatchAllAction() { }
   const CacheId mCacheId;
   const PCacheRequestOrVoid mRequestOrVoid;
@@ -542,17 +544,17 @@ public:
   virtual void
   CancelOnTarget() MOZ_OVERRIDE
   {
     CancelAllStreamCopying();
     mConn = nullptr;
     mResolver = nullptr;
   }
 
-  virtual bool MatchesCacheId(CacheId aCacheId) MOZ_OVERRIDE
+  virtual bool MatchesCacheId(CacheId aCacheId) const MOZ_OVERRIDE
   {
     return aCacheId == mCacheId;
   }
 
 private:
   virtual ~CachePutAllAction() { }
 
   nsresult
@@ -691,17 +693,17 @@ public:
 
   virtual void
   Complete(Listener* aListener, nsresult aRv) MOZ_OVERRIDE
   {
     mManager->NoteOrphanedBodyIdList(mDeletedBodyIdList);
     aListener->OnCacheDelete(mRequestId, aRv, mSuccess);
   }
 
-  virtual bool MatchesCacheId(CacheId aCacheId) MOZ_OVERRIDE
+  virtual bool MatchesCacheId(CacheId aCacheId) const MOZ_OVERRIDE
   {
     return aCacheId == mCacheId;
   }
 
 protected:
   virtual ~CacheDeleteAction() { }
   const CacheId mCacheId;
   const PCacheRequest mRequest;
@@ -754,17 +756,17 @@ public:
   virtual void
   Complete(Listener* aListener, nsresult aRv) MOZ_OVERRIDE
   {
     mStreamList->Activate(mCacheId);
     aListener->OnCacheKeys(mRequestId, aRv, mSavedRequests, mStreamList);
     mStreamList = nullptr;
   }
 
-  virtual bool MatchesCacheId(CacheId aCacheId) MOZ_OVERRIDE
+  virtual bool MatchesCacheId(CacheId aCacheId) const MOZ_OVERRIDE
   {
     return aCacheId == mCacheId;
   }
 
 protected:
   virtual ~CacheKeysAction() { }
   const CacheId mCacheId;
   const PCacheRequestOrVoid mRequestOrVoid;
