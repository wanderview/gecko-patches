# HG changeset patch
# Parent 107c0bb0cbd9aa588c092e562a01f38d31e7ee27
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 v0 to v1 interdiff.

diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -89,61 +89,61 @@ Cache::Cache(nsIGlobalObject* aGlobal, c
   , mActor(static_cast<CacheChild*>(aActor))
 {
   MOZ_ASSERT(mActor);
   mActor->SetListener(*this);
 }
 
 already_AddRefed<Promise>
 Cache::Match(const RequestOrUSVString& aRequest,
-             const QueryParams& aParams, ErrorResult& aRv)
+             const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequest request;
   ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
-  ToPCacheQueryParams(params, aParams);
+  ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendMatch(requestId, request, params);
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::MatchAll(const Optional<RequestOrUSVString>& aRequest,
-                const QueryParams& aParams, ErrorResult& aRv)
+                const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequestOrVoid request;
   ToPCacheRequestOrVoid(request, aRequest, IgnoreBody, PassThroughReferrer,
                         aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
-  ToPCacheQueryParams(params, aParams);
+  ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendMatchAll(requestId, request, params);
 
   return promise.forget();
 }
 
@@ -261,61 +261,61 @@ Cache::Put(const RequestOrUSVString& aRe
     return nullptr;
   }
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::Delete(const RequestOrUSVString& aRequest,
-              const QueryParams& aParams, ErrorResult& aRv)
+              const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequest request;
   ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
-  ToPCacheQueryParams(params, aParams);
+  ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendDelete(requestId, request, params);
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::Keys(const Optional<RequestOrUSVString>& aRequest,
-            const QueryParams& aParams, ErrorResult& aRv)
+            const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequestOrVoid request;
   ToPCacheRequestOrVoid(request, aRequest, IgnoreBody, PassThroughReferrer,
                         aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
-  ToPCacheQueryParams(params, aParams);
+  ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendKeys(requestId, request, params);
 
   return promise.forget();
 }
 
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -19,17 +19,17 @@ class nsIGlobalObject;
 namespace mozilla {
 
 class ErrorResult;
 
 namespace dom {
 
 class OwningRequestOrUSVString;
 class Promise;
-struct QueryParams;
+struct CacheQueryOptions;
 class RequestOrUSVString;
 class Response;
 template<typename T> class Optional;
 template<typename T> class Sequence;
 
 namespace cache {
 
 class CacheChild;
@@ -43,35 +43,35 @@ class Cache MOZ_FINAL : public nsISuppor
                       , public TypeUtils
 {
 public:
   Cache(nsIGlobalObject* aGlobal, const nsACString& aOrigin,
         PCacheChild* aActor);
 
   // webidl interface methods
   already_AddRefed<Promise>
-  Match(const RequestOrUSVString& aRequest, const QueryParams& aParams,
+  Match(const RequestOrUSVString& aRequest, const CacheQueryOptions& aOptions,
         ErrorResult& aRv);
   already_AddRefed<Promise>
   MatchAll(const Optional<RequestOrUSVString>& aRequest,
-           const QueryParams& aParams, ErrorResult& aRv);
+           const CacheQueryOptions& aOptions, ErrorResult& aRv);
   already_AddRefed<Promise>
   Add(const RequestOrUSVString& aRequest, ErrorResult& aRv);
   already_AddRefed<Promise>
   AddAll(const Sequence<OwningRequestOrUSVString>& aRequests,
          ErrorResult& aRv);
   already_AddRefed<Promise>
   Put(const RequestOrUSVString& aRequest, Response& aResponse,
       ErrorResult& aRv);
   already_AddRefed<Promise>
-  Delete(const RequestOrUSVString& aRequest, const QueryParams& aParams,
+  Delete(const RequestOrUSVString& aRequest, const CacheQueryOptions& aOptions,
          ErrorResult& aRv);
   already_AddRefed<Promise>
   Keys(const Optional<RequestOrUSVString>& aRequest,
-       const QueryParams& aParams, ErrorResult& aRv);
+       const CacheQueryOptions& aParams, ErrorResult& aRv);
 
   // binding methods
   static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
 
   virtual nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
 
   // CacheChildListener methods
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -157,17 +157,17 @@ CacheStorage::CacheStorage(Namespace aNa
     if (!ok) {
       ActorFailed();
     }
   }
 }
 
 already_AddRefed<Promise>
 CacheStorage::Match(const RequestOrUSVString& aRequest,
-                    const QueryParams& aParams, ErrorResult& aRv)
+                    const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
@@ -177,17 +177,17 @@ CacheStorage::Match(const RequestOrUSVSt
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   if (!mActor) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mRequestId = requestId;
     entry->mOp = OP_MATCH;
-    entry->mParams = aParams;
+    entry->mOptions = aOptions;
 
     if (aRequest.IsUSVString()) {
       *entry->mRequest.SetAsUSVString().ToAStringPtr() =
         aRequest.GetAsUSVString();
     } else {
       entry->mRequest.SetAsRequest() =
         &aRequest.GetAsRequest();
     }
@@ -198,17 +198,17 @@ CacheStorage::Match(const RequestOrUSVSt
   PCacheRequest request;
   ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     nsRefPtr<Promise> unused = RemoveRequestPromise(requestId);
     return nullptr;
   }
 
   PCacheQueryParams params;
-  ToPCacheQueryParams(params, aParams);
+  ToPCacheQueryParams(params, aOptions);
 
   unused << mActor->SendMatch(requestId, request, params);
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 CacheStorage::Has(const nsAString& aKey, ErrorResult& aRv)
@@ -389,17 +389,17 @@ CacheStorage::ActorCreated(PBackgroundCh
           nsRefPtr<Promise> promise = RemoveRequestPromise(requestId);
           if (promise) {
             promise->MaybeReject(rv);
           }
           return;
         }
 
         PCacheQueryParams params;
-        ToPCacheQueryParams(params, entry.mParams);
+        ToPCacheQueryParams(params, entry.mOptions);
 
         unused << mActor->SendMatch(requestId, request, params);
         break;
       }
       case OP_HAS:
         unused << mActor->SendHas(requestId, entry.mKey);
         break;
       case OP_OPEN:
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -55,17 +55,18 @@ public:
                      nsIPrincipal* aPrincipal, ErrorResult& aRv);
 
   static already_AddRefed<CacheStorage>
   CreateOnWorker(Namespace aNamespace, nsIGlobalObject* aGlobal,
                  workers::WorkerPrivate* aWorkerPrivate, ErrorResult& aRv);
 
   // webidl interface methods
   already_AddRefed<Promise> Match(const RequestOrUSVString& aRequest,
-                                  const QueryParams& aParams, ErrorResult& aRv);
+                                  const CacheQueryOptions& aOptions,
+                                  ErrorResult& aRv);
   already_AddRefed<Promise> Has(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Open(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Delete(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Keys(ErrorResult& aRv);
 
   // binding methods
   static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
 
@@ -124,21 +125,21 @@ private:
   };
 
   struct Entry
   {
     Entry() { }
     ~Entry() { }
     RequestId mRequestId;
     Op mOp;
-    // Would prefer to use PCacheRequest/PCacheQueryParams, but can't
+    // Would prefer to use PCacheRequest/PCacheCacheQueryOptions, but can't
     // because they introduce a header dependency on windows.h which
     // breaks the bindings build.
     RequestOrUSVString mRequest;
-    QueryParams mParams;
+    CacheQueryOptions mOptions;
     // It would also be nice to union the key with the match args above,
     // but VS2013 doesn't like these types in unions because of copy
     // constructors.
     nsString mKey;
   };
 
   nsTArray<Entry> mPendingRequests;
   bool mFailedActor;
diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -718,17 +718,17 @@ DBSchema::MatchByVaryHeader(mozIStorageC
     "SELECT name, value FROM request_headers "
     "WHERE entry_id=?1;"
   ), getter_AddRefs(state));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->BindInt32Parameter(0, entryId);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  nsRefPtr<InternalHeaders> cachedHeaders = new InternalHeaders(HeadersGuardEnum::MozNone);
+  nsRefPtr<InternalHeaders> cachedHeaders = new InternalHeaders(HeadersGuardEnum::None);
 
   ErrorResult errorResult;
 
   while(NS_SUCCEEDED(state->ExecuteStep(&hasMoreData)) && hasMoreData) {
     nsAutoCString name;
     nsAutoCString value;
     rv = state->GetUTF8String(0, name);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -348,17 +348,18 @@ TypeUtils::ToPCacheResponse(PCacheRespon
   SerializeCacheStream(stream, &aOut.body(), aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return;
   }
 }
 
 // static
 void
-TypeUtils::ToPCacheQueryParams(PCacheQueryParams& aOut, const QueryParams& aIn)
+TypeUtils::ToPCacheQueryParams(PCacheQueryParams& aOut,
+                               const CacheQueryOptions& aIn)
 {
   aOut.ignoreSearch() = aIn.mIgnoreSearch.WasPassed() &&
                         aIn.mIgnoreSearch.Value();
   aOut.ignoreMethod() = aIn.mIgnoreMethod.WasPassed() &&
                         aIn.mIgnoreMethod.Value();
   aOut.ignoreVary() = aIn.mIgnoreVary.WasPassed() &&
                       aIn.mIgnoreVary.Value();
   aOut.prefixMatch() = aIn.mPrefixMatch.WasPassed() &&
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -14,17 +14,17 @@
 
 class nsIGlobalObject;
 class nsIInputStream;
 
 namespace mozilla {
 namespace dom {
 
 class OwningRequestOrUSVString;
-struct QueryParams;
+struct CacheQueryOptions;
 class InternalRequest;
 class InternalResponse;
 class Request;
 class RequestOrUSVString;
 class Response;
 template<typename T> class Optional;
 
 namespace cache {
@@ -86,17 +86,17 @@ protected:
   void
   ToPCacheResponseWithoutBody(PCacheResponse& aOut, InternalResponse& aIn,
                               ErrorResult& aRv);
 
   void
   ToPCacheResponse(PCacheResponse& aOut, Response& aIn, ErrorResult& aRv);
 
   void
-  ToPCacheQueryParams(PCacheQueryParams& aOut, const QueryParams& aIn);
+  ToPCacheQueryParams(PCacheQueryParams& aOut, const CacheQueryOptions& aIn);
 
   already_AddRefed<Response>
   ToResponse(const PCacheResponse& aIn);
 
   already_AddRefed<InternalRequest>
   ToInternalRequest(const PCacheRequest& aIn);
 
   already_AddRefed<Request>
