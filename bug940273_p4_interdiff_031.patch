# HG changeset patch
# Parent d12a38729c0d9c1fb83ff15cdee3ce0b2f6e1402
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 031 simplify conversion to PCacheRequest and improve AutoJSAPI usage

diff --git a/dom/cache/AutoUtils.cpp b/dom/cache/AutoUtils.cpp
--- a/dom/cache/AutoUtils.cpp
+++ b/dom/cache/AutoUtils.cpp
@@ -131,39 +131,27 @@ AutoChildRequest::~AutoChildRequest()
     return;
   }
 
   CleanupAction action = mSent ? ForgetFds : DeleteFds;
   CleanupChildFds(mRequestOrVoid.get_PCacheRequest().body(), action);
 }
 
 void
-AutoChildRequest::Add(const RequestOrUSVString& aRequest,
-                      BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                      SchemeAction aSchemeAction, ErrorResult& aRv)
+AutoChildRequest::Add(InternalRequest* aRequest, BodyAction aBodyAction,
+                      ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+                      ErrorResult& aRv)
 {
   MOZ_ASSERT(!mSent);
   MOZ_ASSERT(mRequestOrVoid.type() == PCacheRequestOrVoid::Tvoid_t);
   mRequestOrVoid = PCacheRequest();
   mTypeUtils->ToPCacheRequest(mRequestOrVoid.get_PCacheRequest(), aRequest,
                               aBodyAction, aReferrerAction, aSchemeAction, aRv);
 }
 
-void
-AutoChildRequest::Add(const Optional<RequestOrUSVString>& aRequest,
-                      BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                      SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  MOZ_ASSERT(!mSent);
-  MOZ_ASSERT(mRequestOrVoid.type() == PCacheRequestOrVoid::Tvoid_t);
-  mTypeUtils->ToPCacheRequestOrVoid(mRequestOrVoid, aRequest,
-                                    aBodyAction, aReferrerAction, aSchemeAction,
-                                    aRv);
-}
-
 const PCacheRequest&
 AutoChildRequest::SendAsRequest()
 {
   MOZ_ASSERT(mRequestOrVoid.type() == PCacheRequestOrVoid::TPCacheRequest);
   return mRequestOrVoid.get_PCacheRequest();
 }
 
 const PCacheRequestOrVoid&
@@ -185,18 +173,17 @@ AutoChildRequestList::~AutoChildRequestL
 {
   CleanupAction action = mSent ? ForgetFds : DeleteFds;
   for (uint32_t i = 0; i < mRequestList.Length(); ++i) {
     CleanupChildFds(mRequestList[i].body(), action);
   }
 }
 
 void
-AutoChildRequestList::Add(const RequestOrUSVString& aRequest,
-                          BodyAction aBodyAction,
+AutoChildRequestList::Add(InternalRequest* aRequest, BodyAction aBodyAction,
                           ReferrerAction aReferrerAction,
                           SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   MOZ_ASSERT(!mSent);
 
   // The FileDescriptorSetChild asserts in its destructor that all fds have
   // been removed.  The copy constructor, however, simply duplicates the
   // fds without removing any.  This means each temporary and copy must be
@@ -208,35 +195,16 @@ AutoChildRequestList::Add(const RequestO
   PCacheRequest* request = mRequestList.AppendElement();
   mTypeUtils->ToPCacheRequest(*request, aRequest, aBodyAction, aReferrerAction,
                               aSchemeAction, aRv);
   if (aRv.Failed()) {
     mRequestList.RemoveElementAt(mRequestList.Length() - 1);
   }
 }
 
-void
-AutoChildRequestList::Add(const OwningRequestOrUSVString& aRequest,
-                          BodyAction aBodyAction,
-                          ReferrerAction aReferrerAction,
-                          SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  MOZ_ASSERT(!mSent);
-
-  // Same issue as above.  Make sure only one object is created and remove it
-  // on error.
-
-  PCacheRequest* request = mRequestList.AppendElement();
-  mTypeUtils->ToPCacheRequest(*request, aRequest, aBodyAction, aReferrerAction,
-                              aSchemeAction, aRv);
-  if (aRv.Failed()) {
-    mRequestList.RemoveElementAt(mRequestList.Length() - 1);
-  }
-}
-
 const nsTArray<PCacheRequest>&
 AutoChildRequestList::SendAsRequestList()
 {
   MOZ_ASSERT(!mSent);
   mSent = true;
   return mRequestList;
 }
 
@@ -254,18 +222,17 @@ AutoChildRequestResponse::AutoChildReque
 AutoChildRequestResponse::~AutoChildRequestResponse()
 {
   CleanupAction action = mSent ? ForgetFds : DeleteFds;
   CleanupChildFds(mRequestResponse.request().body(), action);
   CleanupChildFds(mRequestResponse.response().body(), action);
 }
 
 void
-AutoChildRequestResponse::Add(const RequestOrUSVString& aRequest,
-                              BodyAction aBodyAction,
+AutoChildRequestResponse::Add(InternalRequest* aRequest, BodyAction aBodyAction,
                               ReferrerAction aReferrerAction,
                               SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   MOZ_ASSERT(!mSent);
   mTypeUtils->ToPCacheRequest(mRequestResponse.request(), aRequest, aBodyAction,
                               aReferrerAction, aSchemeAction, aRv);
 }
 
diff --git a/dom/cache/AutoUtils.h b/dom/cache/AutoUtils.h
--- a/dom/cache/AutoUtils.h
+++ b/dom/cache/AutoUtils.h
@@ -19,16 +19,17 @@ namespace mozilla {
 class ErrorResult;
 
 namespace ipc {
 class PBackgroundParent;
 }
 
 namespace dom {
 
+class InternalRequest;
 class OwningRequestOrUSVString;
 class RequestOrUSVString;
 template<typename T> class Optional;
 
 namespace cache {
 
 class CacheStreamControlParent;
 class SavedRequest;
@@ -58,57 +59,51 @@ protected:
 };
 
 class AutoChildRequest MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
 {
 public:
   explicit AutoChildRequest(TypeUtils* aTypeUtils);
   ~AutoChildRequest();
 
-  void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
-           ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
-           ErrorResult& aRv);
-  void Add(const Optional<RequestOrUSVString>& aRequest, BodyAction aBodyAction,
+  void Add(InternalRequest* aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
 
   const PCacheRequest& SendAsRequest();
   const PCacheRequestOrVoid& SendAsRequestOrVoid();
 
 private:
   PCacheRequestOrVoid mRequestOrVoid;
 };
 
 class AutoChildRequestList MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
 {
 public:
   AutoChildRequestList(TypeUtils* aTypeUtils, uint32_t aCapacity);
   ~AutoChildRequestList();
 
-  void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
-           ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
-           ErrorResult& aRv);
-  void Add(const OwningRequestOrUSVString& aRequest, BodyAction aBodyAction,
+  void Add(InternalRequest* aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
 
   const nsTArray<PCacheRequest>& SendAsRequestList();
 
 private:
   // Allocates ~5k inline in the stack-only class
   nsAutoTArray<PCacheRequest, 32> mRequestList;
 };
 
 class AutoChildRequestResponse MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
 {
 public:
   explicit AutoChildRequestResponse(TypeUtils* aTypeUtils);
   ~AutoChildRequestResponse();
 
-  void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
+  void Add(InternalRequest* aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
   void Add(Response& aResponse, ErrorResult& aRv);
 
   const CacheRequestResponse& SendAsRequestResponse();
 
 private:
   CacheRequestResponse mRequestResponse;
diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -96,19 +96,24 @@ Cache::Match(const RequestOrUSVString& a
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
+  nsRefPtr<InternalRequest> ir = ToInternalRequest(aRequest, IgnoreBody, aRv);
+  if (aRv.Failed()) {
+    return nullptr;
+  }
+
   AutoChildRequest request(this);
-  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
-              aRv);
+
+  request.Add(ir, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
@@ -125,20 +130,28 @@ Cache::MatchAll(const Optional<RequestOr
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   AutoChildRequest request(this);
-  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
-              aRv);
-  if (aRv.Failed()) {
-    return nullptr;
+
+  if (aRequest.WasPassed()) {
+    nsRefPtr<InternalRequest> ir = ToInternalRequest(aRequest.Value(),
+                                                     IgnoreBody, aRv);
+    if (aRv.Failed()) {
+      return nullptr;
+    }
+
+    request.Add(ir, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme, aRv);
+    if (aRv.Failed()) {
+      return nullptr;
+    }
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendMatchAll(requestId, request.SendAsRequestOrVoid(),
@@ -156,19 +169,23 @@ Cache::Add(const RequestOrUSVString& aRe
     return nullptr;
   }
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
+  nsRefPtr<InternalRequest> ir = ToInternalRequest(aRequest, ReadBody, aRv);
+  if (aRv.Failed()) {
+    return nullptr;
+  }
+
   AutoChildRequestList requests(this, 1);
-  requests.Add(aRequest, ReadBody, ExpandReferrer, NetworkErrorOnInvalidScheme,
-               aRv);
+  requests.Add(ir, ReadBody, ExpandReferrer, NetworkErrorOnInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendAddAll(requestId, requests.SendAsRequestList());
 
@@ -194,18 +211,24 @@ Cache::AddAll(const Sequence<OwningReque
 
   AutoChildRequestList requests(this, aRequests.Length());
 
   for (uint32_t i = 0; i < aRequests.Length(); ++i) {
     if (!IsValidPutRequestMethod(aRequests[i], aRv)) {
       return nullptr;
     }
 
-    requests.Add(aRequests[i], ReadBody, ExpandReferrer,
-                 NetworkErrorOnInvalidScheme, aRv);
+    nsRefPtr<InternalRequest> ir = ToInternalRequest(aRequests[i], ReadBody,
+                                                     aRv);
+    if (aRv.Failed()) {
+      return nullptr;
+    }
+
+    requests.Add(ir, ReadBody, ExpandReferrer, NetworkErrorOnInvalidScheme,
+                 aRv);
     if (aRv.Failed()) {
       return nullptr;
     }
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendAddAll(requestId, requests.SendAsRequestList());
@@ -223,20 +246,23 @@ Cache::Put(const RequestOrUSVString& aRe
     return nullptr;
   }
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
+  nsRefPtr<InternalRequest> ir = ToInternalRequest(aRequest, ReadBody, aRv);
+  if (aRv.Failed()) {
+    return nullptr;
+  }
+
   AutoChildRequestResponse put(this);
-
-  put.Add(aRequest, ReadBody, PassThroughReferrer, TypeErrorOnInvalidScheme,
-          aRv);
+  put.Add(ir, ReadBody, PassThroughReferrer, TypeErrorOnInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   put.Add(aResponse, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
@@ -254,19 +280,23 @@ Cache::Delete(const RequestOrUSVString& 
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
+  nsRefPtr<InternalRequest> ir = ToInternalRequest(aRequest, IgnoreBody, aRv);
+  if (aRv.Failed()) {
+    return nullptr;
+  }
+
   AutoChildRequest request(this);
-  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
-              aRv);
+  request.Add(ir, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
@@ -283,20 +313,28 @@ Cache::Keys(const Optional<RequestOrUSVS
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   AutoChildRequest request(this);
-  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
-              aRv);
-  if (aRv.Failed()) {
-    return nullptr;
+
+  if (aRequest.WasPassed()) {
+    nsRefPtr<InternalRequest> ir = ToInternalRequest(aRequest.Value(),
+                                                     IgnoreBody, aRv);
+    if (aRv.Failed()) {
+      return nullptr;
+    }
+
+    request.Add(ir, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme, aRv);
+    if (aRv.Failed()) {
+      return nullptr;
+    }
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendKeys(requestId, request.SendAsRequestOrVoid(), params);
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -44,20 +44,18 @@ NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Ca
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(CacheStorage)
   NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
   NS_INTERFACE_MAP_ENTRY(nsIIPCBackgroundChildCreateCallback)
 NS_INTERFACE_MAP_END
 
 // static
 already_AddRefed<CacheStorage>
-CacheStorage::CreateOnMainThread(Namespace aNamespace,
-                                 nsIGlobalObject* aGlobal,
-                                 nsIPrincipal* aPrincipal,
-                                 ErrorResult& aRv)
+CacheStorage::CreateOnMainThread(Namespace aNamespace, nsIGlobalObject* aGlobal,
+                                 nsIPrincipal* aPrincipal, ErrorResult& aRv)
 {
   MOZ_ASSERT(aGlobal);
   MOZ_ASSERT(aPrincipal);
   MOZ_ASSERT(NS_IsMainThread());
 
   bool nullPrincipal;
   nsresult rv = aPrincipal->GetIsNullPrincipal(&nullPrincipal);
   if (NS_WARN_IF(NS_FAILED(rv))) {
@@ -92,20 +90,18 @@ CacheStorage::CreateOnMainThread(Namespa
 
   nsRefPtr<CacheStorage> ref = new CacheStorage(aNamespace, aGlobal,
                                                 principalInfo);
   return ref.forget();
 }
 
 // static
 already_AddRefed<CacheStorage>
-CacheStorage::CreateOnWorker(Namespace aNamespace,
-                             nsIGlobalObject* aGlobal,
-                             WorkerPrivate* aWorkerPrivate,
-                             ErrorResult& aRv)
+CacheStorage::CreateOnWorker(Namespace aNamespace, nsIGlobalObject* aGlobal,
+                             WorkerPrivate* aWorkerPrivate, ErrorResult& aRv)
 {
   MOZ_ASSERT(aGlobal);
   MOZ_ASSERT(aWorkerPrivate);
   aWorkerPrivate->AssertIsOnWorkerThread();
 
   const PrincipalInfo& principalInfo = aWorkerPrivate->GetPrincipalInfo();
   if (principalInfo.type() == PrincipalInfo::TNullPrincipalInfo) {
     NS_WARNING("CacheStorage not supported on null principal.");
@@ -121,18 +117,17 @@ CacheStorage::CreateOnWorker(Namespace a
     return nullptr;
   }
 
   nsRefPtr<CacheStorage> ref = new CacheStorage(aNamespace, aGlobal,
                                                 principalInfo);
   return ref.forget();
 }
 
-CacheStorage::CacheStorage(Namespace aNamespace,
-                           nsIGlobalObject* aGlobal,
+CacheStorage::CacheStorage(Namespace aNamespace, nsIGlobalObject* aGlobal,
                            const PrincipalInfo& aPrincipalInfo)
   : mNamespace(aNamespace)
   , mGlobal(aGlobal)
   , mPrincipalInfo(MakeUnique<PrincipalInfo>(aPrincipalInfo))
   , mActor(nullptr)
   , mFailedActor(false)
 {
   MOZ_ASSERT(mGlobal);
@@ -166,28 +161,26 @@ CacheStorage::Match(const RequestOrUSVSt
 
   if (mFailedActor) {
     promise->MaybeReject(NS_ERROR_UNEXPECTED);
     return promise.forget();
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
-  Entry* entry = mPendingRequests.AppendElement();
-  entry->mRequestId = requestId;
-  entry->mOp = OP_MATCH;
-  entry->mOptions = aOptions;
+  Entry entry;
+  entry.mRequestId = requestId;
+  entry.mOp = OP_MATCH;
+  entry.mOptions = aOptions;
+  entry.mRequest = ToInternalRequest(aRequest, IgnoreBody, aRv);
+  if (aRv.Failed()) {
+    return nullptr;
+  }
 
-  if (aRequest.IsUSVString()) {
-    *entry->mRequest.SetAsUSVString().ToAStringPtr() =
-      aRequest.GetAsUSVString();
-  } else {
-    entry->mRequest.SetAsRequest() =
-      &aRequest.GetAsRequest();
-  }
+  mPendingRequests.AppendElement(entry);
 
   MaybeRunPendingRequests();
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 CacheStorage::Has(const nsAString& aKey, ErrorResult& aRv)
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -123,17 +123,17 @@ private:
 
   struct Entry
   {
     RequestId mRequestId;
     Op mOp;
     // Would prefer to use PCacheRequest/PCacheCacheQueryOptions, but can't
     // because they introduce a header dependency on windows.h which
     // breaks the bindings build.
-    RequestOrUSVString mRequest;
+    nsRefPtr<InternalRequest> mRequest;
     CacheQueryOptions mOptions;
     // It would also be nice to union the key with the match args above,
     // but VS2013 doesn't like these types in unions because of copy
     // constructors.
     nsString mKey;
   };
 
   nsTArray<Entry> mPendingRequests;
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -110,80 +110,68 @@ using mozilla::unused;
 using mozilla::void_t;
 using mozilla::ipc::BackgroundChild;
 using mozilla::ipc::FileDescriptor;
 using mozilla::ipc::FileDescriptorSetChild;
 using mozilla::ipc::PFileDescriptorSetChild;
 using mozilla::ipc::PBackgroundChild;
 using mozilla::ipc::OptionalFileDescriptorSet;
 
+
+already_AddRefed<InternalRequest>
+TypeUtils::ToInternalRequest(const RequestOrUSVString& aIn,
+                             BodyAction aBodyAction, ErrorResult& aRv)
+{
+
+  if (aIn.IsRequest()) {
+    Request& request = aIn.GetAsRequest();
+
+    // Check and set bodyUsed flag immediately because its on Request
+    // instead of InternalRequest.
+    CheckAndSetBodyUsed(&request, aBodyAction, aRv);
+    if (aRv.Failed()) { return nullptr; }
+
+    return request.GetInternalRequest();
+  }
+
+  return ToInternalRequest(aIn.GetAsUSVString(), aRv);
+}
+
+already_AddRefed<InternalRequest>
+TypeUtils::ToInternalRequest(const OwningRequestOrUSVString& aIn,
+                             BodyAction aBodyAction, ErrorResult& aRv)
+{
+
+  if (aIn.IsRequest()) {
+    nsRefPtr<Request> request = aIn.GetAsRequest().get();
+
+    // Check and set bodyUsed flag immediately because its on Request
+    // instead of InternalRequest.
+    CheckAndSetBodyUsed(request, aBodyAction, aRv);
+    if (aRv.Failed()) { return nullptr; }
+
+    return request->GetInternalRequest();
+  }
+
+  return ToInternalRequest(aIn.GetAsUSVString(), aRv);
+}
+
 void
-TypeUtils::ToPCacheRequest(PCacheRequest& aOut, const RequestOrUSVString& aIn,
+TypeUtils::ToPCacheRequest(PCacheRequest& aOut, InternalRequest* aIn,
                            BodyAction aBodyAction,
                            ReferrerAction aReferrerAction,
                            SchemeAction aSchemeAction, ErrorResult& aRv)
 {
-  AutoJSAPI jsapi;
-  jsapi.Init(GetGlobalObject());
-  JSContext* cx = jsapi.cx();
-  JS::Rooted<JSObject*> jsGlobal(cx, GetGlobalObject()->GetGlobalJSObject());
-  JSAutoCompartment ac(cx, jsGlobal);
+  MOZ_ASSERT(aIn);
 
-  GlobalObject global(cx, jsGlobal);
+  aIn->GetMethod(aOut.method());
 
-  ToPCacheRequest(global, aOut, aIn, aBodyAction, aReferrerAction,
-                  aSchemeAction, aRv);
-}
-
-void
-TypeUtils::ToPCacheRequest(PCacheRequest& aOut,
-                           const OwningRequestOrUSVString& aIn,
-                           BodyAction aBodyAction,
-                           ReferrerAction aReferrerAction,
-                           SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  AutoJSAPI jsapi;
-  jsapi.Init(GetGlobalObject());
-  JSContext* cx = jsapi.cx();
-  JS::Rooted<JSObject*> jsGlobal(cx, GetGlobalObject()->GetGlobalJSObject());
-  JSAutoCompartment ac(cx, jsGlobal);
-
-  GlobalObject global(cx, jsGlobal);
-
-  return ToPCacheRequest(global, aOut, aIn, aBodyAction, aReferrerAction,
-                         aSchemeAction, aRv);
-}
-
-void
-TypeUtils::ToPCacheRequestOrVoid(PCacheRequestOrVoid& aOut,
-                                 const Optional<RequestOrUSVString>& aIn,
-                                 BodyAction aBodyAction,
-                                 ReferrerAction aReferrerAction,
-                                 SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  AutoJSAPI jsapi;
-  jsapi.Init(GetGlobalObject());
-  JSContext* cx = jsapi.cx();
-  JS::Rooted<JSObject*> jsGlobal(cx, GetGlobalObject()->GetGlobalJSObject());
-  JSAutoCompartment ac(cx, jsGlobal);
-
-  GlobalObject global(cx, jsGlobal);
-
-  return ToPCacheRequestOrVoid(global, aOut, aIn, aBodyAction, aReferrerAction,
-                               aSchemeAction, aRv);
-}
-
-void
-TypeUtils::ToPCacheRequest(PCacheRequest& aOut, Request& aIn,
-                           BodyAction aBodyAction,
-                           ReferrerAction aReferrerAction,
-                           SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  aIn.GetMethod(aOut.method());
-  aIn.GetUrl(aOut.url());
+  nsAutoCString url;
+  aIn->GetURL(url);
+  aOut.url() = NS_ConvertUTF8toUTF16(url);
 
   bool schemeValid;
   ProcessURL(aOut.url(), &schemeValid, &aOut.urlWithoutQuery(), aRv);
   if (aRv.Failed()) {
     return;
   }
 
   if (!schemeValid) {
@@ -194,124 +182,44 @@ TypeUtils::ToPCacheRequest(PCacheRequest
     }
 
     if (aSchemeAction == NetworkErrorOnInvalidScheme) {
       aRv.Throw(NS_ERROR_DOM_NETWORK_ERR);
       return;
     }
   }
 
-  nsRefPtr<InternalRequest> internalRequest = aIn.GetInternalRequest();
+  if (aReferrerAction == ExpandReferrer) {
+    UpdateRequestReferrer(GetGlobalObject(), aIn);
+  }
+  aIn->GetReferrer(aOut.referrer());
 
-  if (aReferrerAction == ExpandReferrer) {
-    UpdateRequestReferrer(GetGlobalObject(), internalRequest);
-  }
-  aIn.GetReferrer(aOut.referrer());
-
-  nsRefPtr<InternalHeaders> headers = aIn.GetInternalHeaders();
+  nsRefPtr<InternalHeaders> headers = aIn->Headers();
   MOZ_ASSERT(headers);
   headers->GetPHeaders(aOut.headers());
   aOut.headersGuard() = headers->Guard();
-  aOut.mode() = aIn.Mode();
-  aOut.credentials() = aIn.Credentials();
-  aOut.context() = internalRequest->GetContext();
+  aOut.mode() = aIn->Mode();
+  aOut.credentials() = aIn->GetCredentialsMode();
+  aOut.context() = aIn->GetContext();
 
   if (aBodyAction == IgnoreBody) {
     aOut.body() = void_t();
     return;
   }
 
-  if (aIn.BodyUsed()) {
-    aRv.ThrowTypeError(MSG_REQUEST_BODY_CONSUMED_ERROR);
-    return;
-  }
+  // BodyUsed flag is checked and set previously in ToInternalRequest()
 
   nsCOMPtr<nsIInputStream> stream;
-  internalRequest->GetBody(getter_AddRefs(stream));
-  if (stream) {
-    aIn.SetBodyUsed();
-  }
-
+  aIn->GetBody(getter_AddRefs(stream));
   SerializeCacheStream(stream, &aOut.body(), aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return;
   }
 }
 
-// static
-void
-TypeUtils::ToPCacheRequest(const GlobalObject& aGlobal,
-                           PCacheRequest& aOut,
-                           const RequestOrUSVString& aIn,
-                           BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                           SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  if (aIn.IsRequest()) {
-    ToPCacheRequest(aOut, aIn.GetAsRequest(), aBodyAction, aReferrerAction,
-                    aSchemeAction, aRv);
-    return;
-  }
-
-  RequestInit init;
-  nsRefPtr<Request> request = Request::Constructor(aGlobal, aIn, init, aRv);
-  if (NS_WARN_IF(aRv.Failed())) {
-    return;
-  }
-  ToPCacheRequest(aOut, *request, aBodyAction, aReferrerAction,
-                  aSchemeAction, aRv);
-}
-
-void
-TypeUtils::ToPCacheRequestOrVoid(const GlobalObject& aGlobal,
-                                 PCacheRequestOrVoid& aOut,
-                                 const Optional<RequestOrUSVString>& aIn,
-                                 BodyAction aBodyAction,
-                                 ReferrerAction aReferrerAction,
-                                 SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  if (!aIn.WasPassed()) {
-    aOut = void_t();
-    return;
-  }
-  PCacheRequest request;
-  ToPCacheRequest(aGlobal, request, aIn.Value(), aBodyAction, aReferrerAction,
-                  aSchemeAction, aRv);
-  if (aRv.Failed()) {
-    return;
-  }
-  aOut = request;
-}
-
-void
-TypeUtils::ToPCacheRequest(const GlobalObject& aGlobal, PCacheRequest& aOut,
-                           const OwningRequestOrUSVString& aIn,
-                           BodyAction aBodyAction,
-                           ReferrerAction aReferrerAction,
-                           SchemeAction aSchemeAction, ErrorResult& aRv)
-{
-  if (aIn.IsRequest()) {
-    ToPCacheRequest(aOut, aIn.GetAsRequest(), aBodyAction, aReferrerAction,
-                    aSchemeAction, aRv);
-    return;
-  }
-
-  RequestOrUSVString input;
-  RequestInit init;
-  nsAutoString str;
-  str.Assign(aIn.GetAsUSVString());
-  input.SetAsUSVString().Rebind(str.Data(), str.Length());
-
-  nsRefPtr<Request> request = Request::Constructor(aGlobal, input, init, aRv);
-  if (NS_WARN_IF(aRv.Failed())) {
-    return;
-  }
-  ToPCacheRequest(aOut, *request, aBodyAction, aReferrerAction, aSchemeAction,
-                  aRv);
-}
-
 void
 TypeUtils::ToPCacheResponseWithoutBody(PCacheResponse& aOut,
                                        InternalResponse& aIn, ErrorResult& aRv)
 {
   aOut.type() = aIn.Type();
 
   nsAutoCString url;
   aIn.GetUrl(url);
@@ -456,16 +364,67 @@ already_AddRefed<Request>
 TypeUtils::ToRequest(const PCacheRequest& aIn)
 {
   nsRefPtr<InternalRequest> internalRequest = ToInternalRequest(aIn);
   nsRefPtr<Request> request = new Request(GetGlobalObject(), internalRequest);
   return request.forget();
 }
 
 void
+TypeUtils::CheckAndSetBodyUsed(Request* aRequest, BodyAction aBodyAction,
+                               ErrorResult& aRv)
+{
+  MOZ_ASSERT(aRequest);
+
+  if (aBodyAction == IgnoreBody) {
+    return;
+  }
+
+  if (aRequest->BodyUsed()) {
+    aRv.ThrowTypeError(MSG_REQUEST_BODY_CONSUMED_ERROR);
+    return;
+  }
+
+  nsCOMPtr<nsIInputStream> stream;
+  aRequest->GetBody(getter_AddRefs(stream));
+  if (stream) {
+    aRequest->SetBodyUsed();
+  }
+}
+
+already_AddRefed<InternalRequest>
+TypeUtils::ToInternalRequest(const nsAString& aIn, ErrorResult& aRv)
+{
+  RequestOrUSVString requestOrString;
+  requestOrString.SetAsUSVString().Rebind(aIn.Data(), aIn.Length());
+
+  // Re-create a GlobalObject stack object so we can use webidl Constructors.
+  AutoJSAPI jsapi;
+  if (NS_WARN_IF(!jsapi.Init(GetGlobalObject()))) {
+    aRv.Throw(NS_ERROR_UNEXPECTED);
+    return nullptr;
+  }
+  JSContext* cx = jsapi.cx();
+  GlobalObject global(cx, GetGlobalObject()->GetGlobalJSObject());
+  if (NS_WARN_IF(global.Failed())) {
+    JS::Rooted<JS::Value> exn(cx);
+    JS_GetPendingException(cx, &exn);
+    aRv.ThrowJSException(cx, exn);
+    JS_ClearPendingException(cx);
+    return nullptr;
+  }
+
+  nsRefPtr<Request> request = Request::Constructor(global, requestOrString,
+                                                   RequestInit(), aRv);
+  if (NS_WARN_IF(aRv.Failed())) { return nullptr; }
+
+  return request->GetInternalRequest();
+}
+
+void
 TypeUtils::SerializeCacheStream(nsIInputStream* aStream,
                                 PCacheReadStreamOrVoid* aStreamOut,
                                 ErrorResult& aRv)
 {
   *aStreamOut = void_t();
   if (!aStream) {
     return;
   }
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -62,40 +62,30 @@ public:
   ~TypeUtils() { }
   virtual nsIGlobalObject* GetGlobalObject() const = 0;
 #ifdef DEBUG
   virtual void AssertOwningThread() const = 0;
 #else
   inline void AssertOwningThread() const { }
 #endif
 
-  void
-  ToPCacheRequest(PCacheRequest& aOut,
-                  const RequestOrUSVString& aIn, BodyAction aBodyAction,
-                  ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
-                  ErrorResult& aRv);
+  already_AddRefed<InternalRequest>
+  ToInternalRequest(const RequestOrUSVString& aIn, BodyAction aBodyAction,
+                    ErrorResult& aRv);
+
+  already_AddRefed<InternalRequest>
+  ToInternalRequest(const OwningRequestOrUSVString& aIn, BodyAction aBodyAction,
+                    ErrorResult& aRv);
 
   void
-  ToPCacheRequest(PCacheRequest& aOut,
-                  const OwningRequestOrUSVString& aIn,
+  ToPCacheRequest(PCacheRequest& aOut, InternalRequest* aIn,
                   BodyAction aBodyAction, ReferrerAction aReferrerAction,
                   SchemeAction aSchemeAction, ErrorResult& aRv);
 
   void
-  ToPCacheRequestOrVoid(PCacheRequestOrVoid& aOut,
-                        const Optional<RequestOrUSVString>& aIn,
-                        BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                        SchemeAction aSchemeAction, ErrorResult& aRv);
-
-  void
-  ToPCacheRequest(PCacheRequest& aOut, Request& aIn, BodyAction aBodyAction,
-                  ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
-                  ErrorResult& aRv);
-
-  void
   ToPCacheResponseWithoutBody(PCacheResponse& aOut, InternalResponse& aIn,
                               ErrorResult& aRv);
 
   void
   ToPCacheResponse(PCacheResponse& aOut, Response& aIn, ErrorResult& aRv);
 
   void
   ToPCacheQueryParams(PCacheQueryParams& aOut, const CacheQueryOptions& aIn);
@@ -106,33 +96,21 @@ public:
   already_AddRefed<InternalRequest>
   ToInternalRequest(const PCacheRequest& aIn);
 
   already_AddRefed<Request>
   ToRequest(const PCacheRequest& aIn);
 
 private:
   void
-  ToPCacheRequest(const GlobalObject& aGlobal, PCacheRequest& aOut,
-                  const RequestOrUSVString& aIn, BodyAction aBodyAction,
-                  ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
-                  ErrorResult& aRv);
+  CheckAndSetBodyUsed(Request* aRequest, BodyAction aBodyAction,
+                      ErrorResult& aRv);
 
-  void
-  ToPCacheRequestOrVoid(const GlobalObject& aGlobal,
-                        PCacheRequestOrVoid& aOut,
-                        const Optional<RequestOrUSVString>& aIn,
-                        BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                        SchemeAction aSchemeAction, ErrorResult& aRv);
-
-  void
-  ToPCacheRequest(const GlobalObject& aGlobal, PCacheRequest& aOut,
-                  const OwningRequestOrUSVString& aIn,
-                  BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                  SchemeAction aSchemeAction, ErrorResult& aRv);
+  already_AddRefed<InternalRequest>
+  ToInternalRequest(const nsAString& aIn, ErrorResult& aRv);
 
   void
   SerializeCacheStream(nsIInputStream* aStream, PCacheReadStreamOrVoid* aStreamOut,
                        ErrorResult& aRv);
 
   nsIThread* GetStreamThread();
 
   nsCOMPtr<nsIThread> mStreamThread;
