# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  71ef4f6c27bf4b88cf8ae9a8deb7cf22bf1c3233
Bug 1184607 P7.8 Test Cache API schema verison migrations. r=ehsan

diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -97,8 +97,12 @@ MOCHITEST_MANIFESTS += [
 
 MOCHITEST_CHROME_MANIFESTS += [
     'test/mochitest/chrome.ini',
 ]
 
 BROWSER_CHROME_MANIFESTS += [
     'test/mochitest/browser.ini',
 ]
+
+XPCSHELL_TESTS_MANIFESTS += [
+    'test/xpcshell/xpcshell.ini',
+]
diff --git a/dom/cache/test/xpcshell/head.js b/dom/cache/test/xpcshell/head.js
new file mode 100644
--- /dev/null
+++ b/dom/cache/test/xpcshell/head.js
@@ -0,0 +1,77 @@
+/**
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ *
+ * All images in schema_15_profile.zip are from https://github.com/mdn/sw-test/
+ * and are CC licensed by https://www.flickr.com/photos/legofenris/.
+ */
+
+var Cc = Components.classes;
+var Ci = Components.interfaces;
+var Cu = Components.utils;
+
+// services required be initialized in order to run CacheStorage
+var ss = Cc['@mozilla.org/storage/service;1']
+         .createInstance(Ci.mozIStorageService);
+var sts = Cc['@mozilla.org/network/stream-transport-service;1']
+          .getService(Ci.nsIStreamTransportService);
+var hash = Cc['@mozilla.org/security/hash;1']
+           .createInstance(Ci.nsICryptoHash);
+
+// Expose Cache and Fetch symbols on the global
+Cu.importGlobalProperties(['caches', 'fetch']);
+
+// Extract a zip file into the profile
+function create_test_profile(zipFileName) {
+  do_get_profile();
+
+  var directoryService = Cc['@mozilla.org/file/directory_service;1']
+                         .getService(Ci.nsIProperties);
+  var profileDir = directoryService.get('ProfD', Ci.nsIFile);
+  var currentDir = directoryService.get('CurWorkD', Ci.nsIFile);
+
+  var packageFile = currentDir.clone();
+  packageFile.append(zipFileName);
+
+  var zipReader = Cc['@mozilla.org/libjar/zip-reader;1']
+                  .createInstance(Ci.nsIZipReader);
+  zipReader.open(packageFile);
+
+  var entryNames = [];
+  var entries = zipReader.findEntries(null);
+  while (entries.hasMore()) {
+    var entry = entries.getNext();
+    entryNames.push(entry);
+  }
+  entryNames.sort();
+
+  for (var entryName of entryNames) {
+    var zipentry = zipReader.getEntry(entryName);
+
+    var file = profileDir.clone();
+    entryName.split('/').forEach(function(part) {
+      file.append(part);
+    });
+
+    if (zipentry.isDirectory) {
+      file.create(Ci.nsIFile.DIRECTORY_TYPE, parseInt('0755', 8));
+    } else {
+      var istream = zipReader.getInputStream(entryName);
+
+      var ostream = Cc['@mozilla.org/network/file-output-stream;1']
+                    .createInstance(Ci.nsIFileOutputStream);
+      ostream.init(file, -1, parseInt('0644', 8), 0);
+
+      var bostream = Cc['@mozilla.org/network/buffered-output-stream;1']
+                     .createInstance(Ci.nsIBufferedOutputStream);
+      bostream.init(ostream, 32 * 1024);
+
+      bostream.writeFrom(istream, istream.available());
+
+      istream.close();
+      bostream.close();
+    }
+  }
+
+  zipReader.close();
+}
diff --git a/dom/cache/test/xpcshell/make_profile.js b/dom/cache/test/xpcshell/make_profile.js
new file mode 100644
--- /dev/null
+++ b/dom/cache/test/xpcshell/make_profile.js
@@ -0,0 +1,142 @@
+/**
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ *
+ * All images in schema_15_profile.zip are from https://github.com/mdn/sw-test/
+ * and are CC licensed by https://www.flickr.com/photos/legofenris/.
+ */
+
+var Cc = Components.classes;
+var Ci = Components.interfaces;
+var Cu = Components.utils;
+
+// Enumerate the directory tree and store results in entryList as
+//
+//  { path: 'a/b/c', file: <nsIFile> }
+//
+// The algorithm starts with the first entry already in entryList.
+function enumerate_tree(entryList) {
+  for (var index = 0; index < entryList.length; ++index) {
+    var path = entryList[index].path;
+    var file = entryList[index].file;
+
+    if (file.isDirectory()) {
+      var dirList = file.directoryEntries;
+      while (dirList.hasMoreElements()) {
+        var dirFile = dirList.getNext().QueryInterface(Ci.nsIFile);
+        entryList.push({ path: path + '/' + dirFile.leafName, file: dirFile });
+      }
+    }
+  }
+}
+
+function zip_profile(zipFile, profileDir) {
+  var zipWriter = Cc['@mozilla.org/zipwriter;1']
+                  .createInstance(Ci.nsIZipWriter);
+  zipWriter.open(zipFile, 0x04 | 0x08 | 0x20);
+
+  var root = profileDir.clone();
+  root.append('storage');
+  root.append('default');
+  root.append('chrome');
+
+  var entryList = [{path: 'storage/default/chrome', file: root}];
+  enumerate_tree(entryList);
+
+  entryList.forEach(function(entry) {
+    if (entry.file.isDirectory()) {
+      zipWriter.addEntryDirectory(entry.path, entry.file.lastModifiedTime,
+                                  false);
+    } else {
+      var istream = Cc['@mozilla.org/network/file-input-stream;1']
+                    .createInstance(Ci.nsIFileInputStream);
+      istream.init(entry.file, -1, -1, 0);
+      zipWriter.addEntryStream(entry.path, entry.file.lastModifiedTime,
+                               Ci.nsIZipWriter.COMPRESSION_DEFAULT, istream,
+                               false);
+      istream.close();
+    }
+  });
+
+  zipWriter.close();
+}
+
+function exactGC() {
+  return new Promise(function(resolve) {
+    var count = 0;
+    function doPreciseGCandCC() {
+      function scheduleGCCallback() {
+        Cu.forceCC();
+
+        if (++count < 2) {
+          doPreciseGCandCC();
+        } else {
+          resolve();
+        }
+      }
+      Cu.schedulePreciseGC(scheduleGCCallback);
+    }
+    doPreciseGCandCC();
+  });
+}
+
+function resetQuotaManager() {
+  return new Promise(function(resolve) {
+    var qm = Cc['@mozilla.org/dom/quota/manager;1']
+             .getService(Ci.nsIQuotaManager);
+
+    var prefService = Cc['@mozilla.org/preferences-service;1']
+                      .getService(Ci.nsIPrefService);
+
+    // enable quota manager testing mode
+    var pref = 'dom.quotaManager.testing';
+    prefService.getBranch(null).setBoolPref(pref, true);
+
+    qm.reset();
+
+    // disable quota manager testing mode
+    //prefService.getBranch(null).setBoolPref(pref, false);
+
+    var uri = Cc['@mozilla.org/network/io-service;1']
+              .getService(Ci.nsIIOService)
+              .newURI('http://example.com', null, null);
+    var principal = Cc['@mozilla.org/scriptsecuritymanager;1']
+                    .getService(Ci.nsIScriptSecurityManager)
+                    .getSystemPrincipal();
+
+    // use getUsageForPrincipal() to get a callback when the reset() is done
+    qm.getUsageForPrincipal(principal, function(principal, usage, fileUsage) {
+      resolve(usage);
+    });
+  });
+}
+
+function run_test() {
+  do_test_pending();
+  do_get_profile();
+
+  var directoryService = Cc['@mozilla.org/file/directory_service;1']
+                         .getService(Ci.nsIProperties);
+  var profileDir = directoryService.get('ProfD', Ci.nsIFile);
+  var currentDir = directoryService.get('CurWorkD', Ci.nsIFile);
+
+  var zipFile = currentDir.clone();
+  zipFile.append('new_profile.zip');
+  if (zipFile.exists()) {
+    zipFile.remove(false);
+  }
+  ok(!zipFile.exists());
+
+  caches.open('xpcshell-test').then(function(c) {
+    var request = new Request('http://example.com/index.html');
+    var response = new Response('hello world');
+    return c.put(request, response);
+  }).then(exactGC).then(resetQuotaManager).then(function() {
+    zip_profile(zipFile, profileDir);
+    dump('### ### created zip at: ' + zipFile.path + '\n');
+    do_test_finished();
+  }).catch(function(e) {
+    do_test_finished();
+    ok(false, e);
+  });
+}
diff --git a/dom/cache/test/xpcshell/schema_15_profile.zip b/dom/cache/test/xpcshell/schema_15_profile.zip
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..6d742275b30921a721dddbcbbd12439d3081bdce
GIT binary patch
literal 2577
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
HPo#eV>zUe=

diff --git a/dom/cache/test/xpcshell/test_migration.js b/dom/cache/test/xpcshell/test_migration.js
new file mode 100644
--- /dev/null
+++ b/dom/cache/test/xpcshell/test_migration.js
@@ -0,0 +1,38 @@
+/**
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ *
+ * All images in schema_15_profile.zip are from https://github.com/mdn/sw-test/
+ * and are CC licensed by https://www.flickr.com/photos/legofenris/.
+ */
+
+function run_test() {
+  do_test_pending();
+  create_test_profile('schema_15_profile.zip');
+
+  var cache;
+  caches.open('xpcshell-test').then(function(c) {
+    cache = c;
+    ok(cache, 'cache exists');
+    return cache.keys();
+  }).then(function(requestList) {
+    ok(requestList.length > 0, 'should have at least one request in cache');
+    requestList.forEach(function(request) {
+      ok(request, 'each request in list should be non-null');
+      ok(request.redirect === 'follow', 'request.redirect should default to "follow"');
+    });
+    return Promise.all(requestList.map(function(request) {
+      return cache.match(request);
+    }));
+  }).then(function(responseList) {
+    ok(responseList.length > 0, 'should have at least one response in cache');
+    responseList.forEach(function(response) {
+      ok(response, 'each request in list should be non-null');
+    });
+  }).then(function() {
+    do_test_finished();
+  }).catch(function(e) {
+    ok(false, 'caught exception ' + e);
+    do_test_finished();
+  });
+}
diff --git a/dom/cache/test/xpcshell/xpcshell.ini b/dom/cache/test/xpcshell/xpcshell.ini
new file mode 100644
--- /dev/null
+++ b/dom/cache/test/xpcshell/xpcshell.ini
@@ -0,0 +1,16 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+[DEFAULT]
+head = head.js
+tail =
+skip-if = toolkit == 'gonk'
+support-files =
+  schema_15_profile.zip
+
+# dummy test entry to generate profile zip files
+[make_profile.js]
+  skip-if = true
+
+[test_migration.js]
