# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  0e7661e894e6991fd20134b6b9a6a3192ddc905e
Bug 1431814 P2 Add blob-url-inherits-controller.https.html wpt test. r=asuth

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -285172,16 +285172,21 @@
      {}
     ]
    ],
    "service-workers/service-worker/resources/blank.html": [
     [
      {}
     ]
    ],
+   "service-workers/service-worker/resources/blob-url-inherit-controller-frame.html": [
+    [
+     {}
+    ]
+   ],
    "service-workers/service-worker/resources/bytecheck-worker-imported-script.py": [
     [
      {}
     ]
    ],
    "service-workers/service-worker/resources/bytecheck-worker.py": [
     [
      {}
@@ -349542,16 +349547,24 @@
     ]
    ],
    "service-workers/service-worker/appcache-ordering-main.https.html": [
     [
      "/service-workers/service-worker/appcache-ordering-main.https.html",
      {}
     ]
    ],
+   "service-workers/service-worker/blob-url-inherits-controller.https.html": [
+    [
+     "/service-workers/service-worker/blob-url-inherits-controller.https.html",
+     {
+      "timeout": "long"
+     }
+    ]
+   ],
    "service-workers/service-worker/claim-affect-other-registration.https.html": [
     [
      "/service-workers/service-worker/claim-affect-other-registration.https.html",
      {}
     ]
    ],
    "service-workers/service-worker/claim-fetch.https.html": [
     [
@@ -493514,17 +493527,17 @@
    "a736f68dc602c0fccab56ec5cc6234cb3298c88d",
    "support"
   ],
   "css/css-scoping/shadow-cascade-order-001.html": [
    "46913ea7e47811b11be898de5c3bd0a330ea6637",
    "testharness"
   ],
   "css/css-scoping/slotted-invalidation.html": [
-   "b22e8258671a8709a3ce6fdc42501b43b866e946",
+   "c500e1ceba1b293d45df5f66fd89d4a5d9ceb952",
    "testharness"
   ],
   "css/css-scoping/slotted-parsing.html": [
    "6bac5b15011d7177a40f7ca3e3c5f7e410643920",
    "testharness"
   ],
   "css/css-scoping/slotted-with-pseudo-element-ref.html": [
    "48561a3dff973b7ad1bfa9702461e50fd4a67c2d",
@@ -574361,16 +574374,20 @@
   "service-workers/service-worker/active.https.html": [
    "974fc8372db8f06f87919d35be48f922166d6652",
    "testharness"
   ],
   "service-workers/service-worker/appcache-ordering-main.https.html": [
    "a71f51cde17f9d209750877dfbe1bacd26412ab3",
    "testharness"
   ],
+  "service-workers/service-worker/blob-url-inherits-controller.https.html": [
+   "d9664f06b94aef27fbbff94fc6f2381cead1c82e",
+   "testharness"
+  ],
   "service-workers/service-worker/claim-affect-other-registration.https.html": [
    "96ffb6f3376a5fa73abd405e123d019d8cac694d",
    "testharness"
   ],
   "service-workers/service-worker/claim-fetch.https.html": [
    "69100d1070d261e9819217fd7a6531f48b343e14",
    "testharness"
   ],
@@ -574993,16 +575010,20 @@
   "service-workers/service-worker/resources/appcache-ordering.manifest": [
    "963e8436d3c2571fb971f05aaa4710f5d3dd7abe",
    "support"
   ],
   "service-workers/service-worker/resources/blank.html": [
    "0ddb4f1cf84729ed673295719ec58a3e5d600a12",
    "support"
   ],
+  "service-workers/service-worker/resources/blob-url-inherit-controller-frame.html": [
+   "39e51dc3382b01f553f9f83e528833171ce0de5a",
+   "support"
+  ],
   "service-workers/service-worker/resources/bytecheck-worker-imported-script.py": [
    "b488558e1bb16901b0a9b60f40aeddab9c464021",
    "support"
   ],
   "service-workers/service-worker/resources/bytecheck-worker.py": [
    "11a8883c24628b25f3faa1470da05caddd5eb094",
    "support"
   ],
diff --git a/testing/web-platform/meta/service-workers/service-worker/blob-url-inherits-controller.https.html.ini b/testing/web-platform/meta/service-workers/service-worker/blob-url-inherits-controller.https.html.ini
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/meta/service-workers/service-worker/blob-url-inherits-controller.https.html.ini
@@ -0,0 +1,4 @@
+[blob-url-inherits-controller.https.html]
+  [Same-origin blob URL worker should inherit service worker controller.]
+    expected: FAIL
+
diff --git a/testing/web-platform/tests/service-workers/service-worker/blob-url-inherits-controller.https.html b/testing/web-platform/tests/service-workers/service-worker/blob-url-inherits-controller.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/blob-url-inherits-controller.https.html
@@ -0,0 +1,40 @@
+<!DOCTYPE html>
+<title>Service Worker: blob URL windows and workers inherit controller</title>
+<meta name=timeout content=long>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="/common/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<body>
+<script>
+
+const SCRIPT = 'resources/empty.js';
+const SCOPE = 'resources/blob-url-inherit-controller-frame.html';
+
+async function doAsyncTest(t, opts) {
+  let reg = await service_worker_unregister_and_register(t, SCRIPT, SCOPE);
+  await wait_for_state(t, reg.installing, 'activated');
+
+  let frame = await with_iframe(SCOPE);
+  assert_not_equals(frame.contentWindow.navigator.serviceWorker.controller, null,
+                    'frame should be controlled');
+
+  let blobController = await frame.contentWindow.checkBlobController(opts);
+  assert_equals(blobController,
+                frame.contentWindow.navigator.serviceWorker.controller.scriptURL,
+                'blob URL child should inherit controller');
+
+  frame.remove();
+  await service_worker_unregister_and_done(t, SCOPE);
+}
+
+promise_test(function(t) {
+  return doAsyncTest(t, { child: 'iframe' });
+}, 'Same-origin blob URL iframe should inherit service worker controller.');
+
+promise_test(function(t) {
+  return doAsyncTest(t, { child: 'worker' });
+}, 'Same-origin blob URL worker should inherit service worker controller.');
+
+</script>
+</body>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/blob-url-inherit-controller-frame.html b/testing/web-platform/tests/service-workers/service-worker/resources/blob-url-inherit-controller-frame.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/blob-url-inherit-controller-frame.html
@@ -0,0 +1,64 @@
+<!DOCTYPE html>
+<html>
+<script>
+function getBlobText(opts) {
+  if (opts.child === 'iframe') {
+    return '<script>' +
+             'let t = navigator.serviceWorker.controller ' +
+                   '? navigator.serviceWorker.controller.scriptURL ' +
+                   ': null; ' +
+             'parent.postMessage(t, "*");' +
+           '</' + 'script>';
+  }
+
+  if (opts.child === 'worker') {
+    return 'let t = navigator.serviceWorker.controller ' +
+                 '? navigator.serviceWorker.controller.scriptURL ' +
+                 ': null; ' +
+           'self.postMessage(t);';
+  }
+
+  throw('unexpected child type ' + opts.child);
+}
+
+function testWorkerChild(url) {
+  let w = new Worker(url);
+  return new Promise((resolve, reject) => {
+    w.onmessage = resolve;
+    w.onerror = evt => {
+      reject(evt.message);
+    }
+  });
+}
+
+function testIframeChild(url) {
+  let frame = document.createElement('iframe');
+  frame.src = url;
+  document.body.appendChild(frame);
+
+  return new Promise(resolve => {
+    addEventListener('message', evt => {
+      resolve(evt.data);
+    }, { once: true });
+  });
+}
+
+function testURL(opts, url) {
+  if (opts.child === 'worker') {
+    return testWorkerChild(url);
+  }
+
+  if (opts.child === 'iframe') {
+    return testIframeChild(url);
+  }
+
+  throw('unexpected child type ' + opts.child);
+}
+
+function checkBlobController(opts) {
+  let blob = new Blob([getBlobText(opts)]);
+  let url = URL.createObjectURL(blob);
+  return testURL(opts, url);
+}
+</script>
+</html>
