# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  86bcf1262b52fd4235b7fb358a9f9146c7121798
Bug 1431814 P2 Add local-url-inherit-controller.https.html wpt test. r=asuth

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -285762,16 +285762,21 @@
      {}
     ]
    ],
    "service-workers/service-worker/resources/loaded.html": [
     [
      {}
     ]
    ],
+   "service-workers/service-worker/resources/local-url-inherit-controller-frame.html": [
+    [
+     {}
+    ]
+   ],
    "service-workers/service-worker/resources/malformed-worker.py": [
     [
      {}
     ]
    ],
    "service-workers/service-worker/resources/mime-sniffing-worker.js": [
     [
      {}
@@ -350000,16 +350005,24 @@
     ]
    ],
    "service-workers/service-worker/iso-latin1-header.https.html": [
     [
      "/service-workers/service-worker/iso-latin1-header.https.html",
      {}
     ]
    ],
+   "service-workers/service-worker/local-url-inherit-controller.https.html": [
+    [
+     "/service-workers/service-worker/local-url-inherit-controller.https.html",
+     {
+      "timeout": "long"
+     }
+    ]
+   ],
    "service-workers/service-worker/mime-sniffing.https.html": [
     [
      "/service-workers/service-worker/mime-sniffing.https.html",
      {}
     ]
    ],
    "service-workers/service-worker/multi-globals/url-parsing.https.html": [
     [
@@ -493514,17 +493527,17 @@
    "a736f68dc602c0fccab56ec5cc6234cb3298c88d",
    "support"
   ],
   "css/css-scoping/shadow-cascade-order-001.html": [
    "46913ea7e47811b11be898de5c3bd0a330ea6637",
    "testharness"
   ],
   "css/css-scoping/slotted-invalidation.html": [
-   "b22e8258671a8709a3ce6fdc42501b43b866e946",
+   "c500e1ceba1b293d45df5f66fd89d4a5d9ceb952",
    "testharness"
   ],
   "css/css-scoping/slotted-parsing.html": [
    "6bac5b15011d7177a40f7ca3e3c5f7e410643920",
    "testharness"
   ],
   "css/css-scoping/slotted-with-pseudo-element-ref.html": [
    "48561a3dff973b7ad1bfa9702461e50fd4a67c2d",
@@ -574661,16 +574674,20 @@
   "service-workers/service-worker/invalid-header.https.html": [
    "5cc3f2c872435df9c735390426a6cf8b4b788fb0",
    "testharness"
   ],
   "service-workers/service-worker/iso-latin1-header.https.html": [
    "3c75caa66d3906602d10b07ff22e7d0f210cfee9",
    "testharness"
   ],
+  "service-workers/service-worker/local-url-inherit-controller.https.html": [
+   "e29f2ffef20a9436cc721293ddcf932ca1b26bda",
+   "testharness"
+  ],
   "service-workers/service-worker/mime-sniffing.https.html": [
    "d61a859a111dea758efb91480817fa1a029c152b",
    "testharness"
   ],
   "service-workers/service-worker/multi-globals/current/current.https.html": [
    "2f7a23c1a4dfa7feb121e55d13ff8a0980165b37",
    "support"
   ],
@@ -575465,16 +575482,20 @@
   "service-workers/service-worker/resources/load_worker.js": [
    "08525451705224fd78993adaed33a345d514c9a1",
    "support"
   ],
   "service-workers/service-worker/resources/loaded.html": [
    "7ef9421050590733bab9b7c1d0d1b8695b5cb920",
    "support"
   ],
+  "service-workers/service-worker/resources/local-url-inherit-controller-frame.html": [
+   "bf2722799132cf551a9d32e5593c0734b85a3c0f",
+   "support"
+  ],
   "service-workers/service-worker/resources/malformed-worker.py": [
    "a9f19c8f8f6908c4a4732bbd0f6b2f3d19401909",
    "support"
   ],
   "service-workers/service-worker/resources/mime-sniffing-worker.js": [
    "b37f174839f3fa92cb46835d3574e547de369b88",
    "support"
   ],
@@ -582498,17 +582519,17 @@
    "254d9b7074c89c57e15613e6efe9674eba95b74d",
    "testharness"
   ],
   "web-animations/OWNERS": [
    "c4f52fc673833f80178284b30d6fc4bad1f581d2",
    "support"
   ],
   "web-animations/README.md": [
-   "6344565e53b2f9e8d6ee7658d1c5c5670e68fc98",
+   "9dfaf5979c3bf30bf075b3929ac3620954e83497",
    "support"
   ],
   "web-animations/animation-model/animation-types/accumulation-per-property.html": [
    "b26f3961d1913de731906ff0eed9a8548df7bbb2",
    "testharness"
   ],
   "web-animations/animation-model/animation-types/addition-per-property.html": [
    "c16ee3be3338bd5831ff3eab455cbf6943aa8d5b",
@@ -582610,65 +582631,65 @@
    "5677f7e8b076dc096d636aaaa4d4191c286f1d90",
    "testharness"
   ],
   "web-animations/interfaces/Animation/play.html": [
    "54edbdd6c0e1953f8d0e2bfbb92bfe318114ab74",
    "testharness"
   ],
   "web-animations/interfaces/Animation/playbackRate.html": [
-   "27d289f603953b3e39322287fb2a55f84dd8dc54",
+   "a298a65aaeb5a337fe894f0160493693f309c2a1",
    "testharness"
   ],
   "web-animations/interfaces/Animation/ready.html": [
    "bd4a18205791b2b0271a6266dba3ebc8482c835b",
    "testharness"
   ],
   "web-animations/interfaces/Animation/startTime.html": [
    "01f669542434f03d37e9f148a4f3135fe3122d46",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/delay.html": [
    "4de5b0a692d645961de27df67efa8257adb0a031",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/direction.html": [
-   "11398d5ea40bb4137b4f5d4e6e6238af64caf3c5",
+   "642207ce454fb816cc47d14fbe29f65d92ddf6ed",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/duration.html": [
-   "315810a1e73f9b4ef2cffea868fb766af5ee5c93",
+   "14abe09cb19080585a315115e387b85784c7d862",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/easing.html": [
    "b3ad4c78c9bce0e17db0ce780cd1260de1ce7cb0",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/endDelay.html": [
-   "b36d9c8a4e4082e6a75ac5d8f336cf474cd75aab",
+   "a8609f22672b092178c2391d7ba7ef804112bef4",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/fill.html": [
    "1cef601cde33eea3b591a0826ad52f379bb31d0d",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/getComputedTiming.html": [
    "020e9faaae05de5a25829a05558ea72672b04f63",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/idlharness.html": [
    "aa9823e5a06c76921b49aa5f5e61fd1dedfac3af",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/iterationStart.html": [
-   "734743adeec628da907ea2f6cc4ae3be3aab7329",
+   "393b37098ab470e75b1254b53875901e705d8d1b",
    "testharness"
   ],
   "web-animations/interfaces/AnimationEffectTiming/iterations.html": [
-   "c8705eb209d8a4912b5d3fd94a05c763b7707eca",
+   "1e8bb46b5a1eef496edda32b16c856baa16e9b30",
    "testharness"
   ],
   "web-animations/interfaces/AnimationPlaybackEvent/constructor.html": [
    "5aff03b7fa469e5ec0dc02a389eca963ae24b470",
    "testharness"
   ],
   "web-animations/interfaces/AnimationPlaybackEvent/idlharness.html": [
    "bfdfc896fb5fe4451419464e35fe94b5e4938c2c",
@@ -582742,21 +582763,21 @@
    "08da0c81847809328bda0d6e0581711f7838916e",
    "support"
   ],
   "web-animations/resources/xhr-doc.py": [
    "de68c45fc1d38a49946f9046f34031e9278a1531",
    "support"
   ],
   "web-animations/testcommon.js": [
-   "94130b39fda8e95ca495d297f9d47eefa6430a04",
+   "de3f89d5ed07d00d453746df5d13387d15f05016",
    "support"
   ],
   "web-animations/timing-model/animation-effects/active-time.html": [
-   "68ca985984ed6f868cebb539dfde6d7ddba6c824",
+   "f05ff3594dde7248c84db42f8a80a6d0136b5f54",
    "testharness"
   ],
   "web-animations/timing-model/animation-effects/current-iteration.html": [
    "617bfd8c533d159c4e56ea823917d580fe262bf6",
    "testharness"
   ],
   "web-animations/timing-model/animation-effects/local-time.html": [
    "cd76b6be13cba0bc7d3b1a0e87b70c6a66222f40",
@@ -582770,49 +582791,49 @@
    "602fe7e6880e0b18329262699872c696f451d744",
    "testharness"
   ],
   "web-animations/timing-model/animations/canceling-an-animation.html": [
    "d82cbc5caf654b9811c90d5165fb0429891cb149",
    "testharness"
   ],
   "web-animations/timing-model/animations/current-time.html": [
-   "390e2ba8d6de9bfea5f26cd2e7a42ccdf73f1a35",
+   "52d23e752878c821754b2c2b752e7393882609e2",
    "testharness"
   ],
   "web-animations/timing-model/animations/finishing-an-animation.html": [
    "8d430adcb97bf3dab9703bc2d31be23e1adaec85",
    "testharness"
   ],
   "web-animations/timing-model/animations/pausing-an-animation.html": [
    "c46fbcb8bc40fc3ee26e10802a205926ab97a84f",
    "testharness"
   ],
   "web-animations/timing-model/animations/play-states.html": [
    "3ec76eff991e306699b21fb03bc1f346ffd9cee3",
    "testharness"
   ],
   "web-animations/timing-model/animations/playing-an-animation.html": [
-   "6ee1b850154ce22fffafa686fc2fdfef9dded38b",
+   "1ae05a904e5b4fbcf1d904f02825f836da7b4c18",
    "testharness"
   ],
   "web-animations/timing-model/animations/reversing-an-animation.html": [
    "3afdb3cc9a9dafb28ebe46902276c19c24aeb9a8",
    "testharness"
   ],
   "web-animations/timing-model/animations/set-the-animation-start-time.html": [
-   "10fea7d0b0dbe046d72b4048607816c9ebe37f7f",
+   "fa26feebcde00a5b0b63f8f3587acc313a58f26a",
    "testharness"
   ],
   "web-animations/timing-model/animations/set-the-target-effect-of-an-animation.html": [
    "3b7f1f60cd771ff8587daf7ab76ccbecff59f781",
    "testharness"
   ],
   "web-animations/timing-model/animations/set-the-timeline-of-an-animation.html": [
-   "ef8ce243226296718453e10d89b4cfd68b2d765e",
+   "bd33cb8638aa373b17cda20906af5aea2f5a7503",
    "testharness"
   ],
   "web-animations/timing-model/animations/updating-the-finished-state.html": [
    "c30161f7d5a20db616ade354133ae6a8989d149f",
    "testharness"
   ],
   "web-animations/timing-model/time-transformations/transformed-progress.html": [
    "2e55f43def584a67eeb313f050154cd146002938",
diff --git a/testing/web-platform/meta/service-workers/service-worker/local-url-inherit-controller.https.html.ini b/testing/web-platform/meta/service-workers/service-worker/local-url-inherit-controller.https.html.ini
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/meta/service-workers/service-worker/local-url-inherit-controller.https.html.ini
@@ -0,0 +1,6 @@
+[local-url-inherit-controller.https.html]
+  [Same-origin blob URL worker should inherit service worker controller.]
+    expected: FAIL
+  [Data URL worker should not inherit service worker controller.]
+    expected: FAIL
+
diff --git a/testing/web-platform/tests/service-workers/service-worker/local-url-inherit-controller.https.html b/testing/web-platform/tests/service-workers/service-worker/local-url-inherit-controller.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/local-url-inherit-controller.https.html
@@ -0,0 +1,79 @@
+<!DOCTYPE html>
+<title>Service Worker: local URL windows and workers inherit controller</title>
+<meta name=timeout content=long>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="/common/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<body>
+<script>
+
+const SCRIPT = 'resources/empty.js';
+const SCOPE = 'resources/local-url-inherit-controller-frame.html';
+
+async function doAsyncTest(t, opts) {
+  let name = opts.scheme + '-' + opts.child;
+  let scope = SCOPE + '?name=' + name;
+  let reg = await service_worker_unregister_and_register(t, SCRIPT, scope);
+  add_completion_callback(_ => reg.unregister());
+  await wait_for_state(t, reg.installing, 'activated');
+
+  let frame = await with_iframe(scope);
+  add_completion_callback(_ => frame.remove());
+  assert_not_equals(frame.contentWindow.navigator.serviceWorker.controller, null,
+                    'frame should be controlled');
+
+  let blobController = await frame.contentWindow.checkChildController(opts);
+
+  let expect = opts.expect === 'inherit'
+             ?  frame.contentWindow.navigator.serviceWorker.controller.scriptURL
+             : null;
+
+  assert_equals(blobController, expect,
+                `${opts.scheme} URL ${opts.child} should ${opts.expect} controller`);
+}
+
+promise_test(function(t) {
+  return doAsyncTest(t, {
+    scheme: 'blob',
+    child: 'iframe',
+    expect: 'inherit',
+  });
+}, 'Same-origin blob URL iframe should inherit service worker controller.');
+
+promise_test(function(t) {
+  return doAsyncTest(t, {
+    scheme: 'blob',
+    child: 'worker',
+    expect: 'inherit',
+  });
+}, 'Same-origin blob URL worker should inherit service worker controller.');
+
+promise_test(function(t) {
+  // Data URLs should result in an opaque origin and should probably not
+  // have access to a cross-origin service worker.  See:
+  //
+  // https://github.com/w3c/ServiceWorker/issues/1262
+  //
+  return doAsyncTest(t, {
+    scheme: 'data',
+    child: 'iframe',
+    expect: 'not inherit',
+  });
+}, 'Data URL iframe should not inherit service worker controller.');
+
+promise_test(function(t) {
+  // Data URLs should result in an opaque origin and should probably not
+  // have access to a cross-origin service worker.  See:
+  //
+  // https://github.com/w3c/ServiceWorker/issues/1262
+  //
+  return doAsyncTest(t, {
+    scheme: 'data',
+    child: 'worker',
+    expect: 'not inherit',
+  });
+}, 'Data URL worker should not inherit service worker controller.');
+
+</script>
+</body>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-frame.html b/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-frame.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-frame.html
@@ -0,0 +1,85 @@
+<!DOCTYPE html>
+<html>
+<script>
+
+const frameText =
+`<script>
+  let t = navigator.serviceWorker.controller
+        ? navigator.serviceWorker.controller.scriptURL
+        : null;
+  parent.postMessage(t, "*");
+</` + `script>`;
+
+const workerText =
+`let t = navigator.serviceWorker.controller
+       ? navigator.serviceWorker.controller.scriptURL
+       : null;
+self.postMessage(t);`;
+
+function getChildText(opts) {
+  if (opts.child === 'iframe') {
+    return frameText;
+  }
+
+  if (opts.child === 'worker') {
+    return workerText;
+  }
+
+  throw('unexpected child type ' + opts.child);
+}
+
+function makeURL(opts) {
+  if (opts.scheme === 'blob') {
+    let blob = new Blob([getChildText(opts)]);
+    return URL.createObjectURL(blob);
+  }
+
+  if (opts.scheme === 'data') {
+    let mimetype = opts.child === 'iframe' ? 'text/html'
+                                           : 'text/javascript';
+    return `data:${mimetype},${getChildText(opts)}`;
+  }
+
+  throw(`unexpected URL scheme ${opts.scheme}`);
+}
+
+function testWorkerChild(url) {
+  let w = new Worker(url);
+  return new Promise((resolve, reject) => {
+    w.onmessage = resolve;
+    w.onerror = evt => {
+      reject(evt.message);
+    }
+  });
+}
+
+function testIframeChild(url) {
+  let frame = document.createElement('iframe');
+  frame.src = url;
+  document.body.appendChild(frame);
+
+  return new Promise(resolve => {
+    addEventListener('message', evt => {
+      resolve(evt.data);
+    }, { once: true });
+  });
+}
+
+function testURL(opts, url) {
+  if (opts.child === 'worker') {
+    return testWorkerChild(url);
+  }
+
+  if (opts.child === 'iframe') {
+    return testIframeChild(url);
+  }
+
+  throw(`unexpected child type ${opts.child}`);
+}
+
+function checkChildController(opts) {
+  let url = makeURL(opts);
+  return testURL(opts, url);
+}
+</script>
+</html>
