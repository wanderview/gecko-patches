# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4f6e597104dabedfecfafa2ab63dc79fd7f8bc7a
Bug 1471303 Fix CopyableErrorResult::operator==() to actually compile with ipdl types. r=bz

diff --git a/dom/bindings/BindingUtils.cpp b/dom/bindings/BindingUtils.cpp
--- a/dom/bindings/BindingUtils.cpp
+++ b/dom/bindings/BindingUtils.cpp
@@ -179,17 +179,17 @@ struct TErrorResult<CleanupPolicy>::Mess
   nsTArray<nsString> mArgs;
   dom::ErrNum mErrorNumber;
 
   bool HasCorrectNumberOfArguments()
   {
     return GetErrorArgCount(mErrorNumber) == mArgs.Length();
   }
 
-  bool operator==(const TErrorResult<CleanupPolicy>::Message& aRight)
+  bool operator==(const TErrorResult<CleanupPolicy>::Message& aRight) const
   {
     return mErrorNumber == aRight.mErrorNumber &&
            mArgs == aRight.mArgs;
   }
 };
 
 template<typename CleanupPolicy>
 nsTArray<nsString>&
@@ -336,17 +336,17 @@ struct TErrorResult<CleanupPolicy>::DOME
   DOMExceptionInfo(nsresult rv, const nsACString& message)
     : mMessage(message)
     , mRv(rv)
   {}
 
   nsCString mMessage;
   nsresult mRv;
 
-  bool operator==(const TErrorResult<CleanupPolicy>::DOMExceptionInfo& aRight)
+  bool operator==(const TErrorResult<CleanupPolicy>::DOMExceptionInfo& aRight) const
   {
     return mRv == aRight.mRv &&
            mMessage == aRight.mMessage;
   }
 };
 
 template<typename CleanupPolicy>
 void
@@ -505,16 +505,42 @@ TErrorResult<CleanupPolicy>::operator=(T
   // Note: It's important to do this last, since this affects the condition
   // checks above!
   mResult = aRHS.mResult;
   aRHS.mResult = NS_OK;
   return *this;
 }
 
 template<typename CleanupPolicy>
+bool
+TErrorResult<CleanupPolicy>::operator==(const ErrorResult& aRight) const
+{
+  auto right = reinterpret_cast<const TErrorResult<CleanupPolicy>*>(&aRight);
+
+  if (mResult != right->mResult) {
+    return false;
+  }
+
+  if (IsJSException()) {
+    // js exceptions are always non-equal
+    return false;
+  }
+
+  if (IsErrorWithMessage()) {
+    return *mExtra.mMessage == *right->mExtra.mMessage;
+  }
+
+  if (IsDOMException()) {
+    return *mExtra.mDOMExceptionInfo == *right->mExtra.mDOMExceptionInfo;
+  }
+
+  return true;
+}
+
+template<typename CleanupPolicy>
 void
 TErrorResult<CleanupPolicy>::CloneTo(TErrorResult& aRv) const
 {
   AssertInOwningThread();
   aRv.AssertInOwningThread();
   aRv.ClearUnionData();
   aRv.mResult = mResult;
 #ifdef DEBUG
diff --git a/dom/bindings/ErrorResult.h b/dom/bindings/ErrorResult.h
--- a/dom/bindings/ErrorResult.h
+++ b/dom/bindings/ErrorResult.h
@@ -641,42 +641,16 @@ binding_danger::TErrorResult<CleanupPoli
 
 template<typename CleanupPolicy>
 binding_danger::TErrorResult<CleanupPolicy>::operator const ErrorResult&() const
 {
   return *static_cast<const ErrorResult*>(
      reinterpret_cast<const TErrorResult<AssertAndSuppressCleanupPolicy>*>(this));
 }
 
-template<typename CleanupPolicy>
-bool
-binding_danger::TErrorResult<CleanupPolicy>::operator==(const ErrorResult& aRight) const
-{
-  auto right = reinterpret_cast<const TErrorResult<CleanupPolicy>*>(&aRight);
-
-  if (mResult != right->mResult) {
-    return false;
-  }
-
-  if (IsJSException()) {
-    // js exceptions are always non-equal
-    return false;
-  }
-
-  if (IsErrorWithMessage()) {
-    return *mExtra.mMessage == *right->mExtra.mMessage;
-  }
-
-  if (IsDOMException()) {
-    return *mExtra.mDOMExceptionInfo == *right->mExtra.mDOMExceptionInfo;
-  }
-
-  return true;
-}
-
 // A class for use when an ErrorResult should just automatically be ignored.
 // This doesn't inherit from ErrorResult so we don't make two separate calls to
 // SuppressException.
 class IgnoredErrorResult :
     public binding_danger::TErrorResult<binding_danger::JustSuppressCleanupPolicy>
 {
 };
 
