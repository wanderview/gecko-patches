# HG changeset patch
# Parent 16c702dcd5fe221d50af86230305c5b36aeebf56
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P7 interdiff 001 test invalid scheme handling (originally from p4 interdiff 017)


diff --git a/dom/tests/mochitest/cache/test_cache.js b/dom/tests/mochitest/cache/test_cache.js
--- a/dom/tests/mochitest/cache/test_cache.js
+++ b/dom/tests/mochitest/cache/test_cache.js
@@ -21,33 +21,37 @@ caches.open('snafu').then(function(openC
   return snafu.keys();
 }).then(function(empty) {
   is(0, empty.length, 'cache.keys() should resolve to an array of length 0');
 }).then(function() {
   return caches.open('snafu');
 }).then(function(snafu) {
   var req = './cachekey';
   var res = new Response("Hello world");
-  return snafu.put(req, res).then(function(v) {
+  return snafu.put('ftp://invalid', res).catch(function (err) {
+    is(err.name, 'TypeError', 'put() should throw TypeError for invalid scheme');
+    return snafu.put(req, res);
+  }).then(function(v) {
     return snafu;
   });
 }).then(function(snafu) {
   return Promise.all([snafu, snafu.keys()]);
 }).then(function(args) {
   var snafu = args[0];
   var keys = args[1];
   is(1, keys.length, 'cache.keys() should resolve to an array of length 1');
   ok(keys[0] instanceof Request, 'key should be a Request');
   ok(keys[0].url.match(/cachekey$/), 'Request URL should match original');
-  return Promise.all([snafu, snafu.match(keys[0])]);
+  return Promise.all([snafu, snafu.match(keys[0]), snafu.match('ftp://invalid')]);
 }).then(function(args) {
   var snafu = args[0];
   var response = args[1];
   ok(response instanceof Response, 'value should be a Response');
   is(response.status, 200, 'Response status should be 200');
+  is(undefined, args[2], 'Match with invalid scheme should resolve undefined');
   return Promise.all([snafu, snafu.put('./cachekey2', response)]);
 }).then(function(args) {
   var snafu = args[0]
   return snafu.match('./cachekey2');
 }).then(function(response) {
   return response.text().then(function(v) {
     is(v, "Hello world", "Response body should match original");
   });
diff --git a/dom/tests/mochitest/cache/test_cache_add.js b/dom/tests/mochitest/cache/test_cache_add.js
--- a/dom/tests/mochitest/cache/test_cache_add.js
+++ b/dom/tests/mochitest/cache/test_cache_add.js
@@ -2,16 +2,22 @@ var singleUrl = './test_cache_add.js';
 var urlList = [
   './helloworld.txt',
   './foobar.txt',
   './test_cache.js'
 ];
 var cache;
 caches.open('adder').then(function(openCache) {
   cache = openCache;
+  return cache.add('ftp://example.com/invalid');
+}).catch(function (err) {
+  is(err.name, 'NetworkError', 'add() should throw NetworkError for invalid scheme');
+  return cache.addAll(['http://example.com/valid', 'ftp://example.com/invalid']);
+}).catch(function (err) {
+  is(err.name, 'NetworkError', 'addAll() should throw NetworkError for invalid scheme');
   var promiseList = urlList.map(function(url) {
     return cache.match(url);
   });
   promiseList.push(cache.match(singleUrl));
   return Promise.all(promiseList);
 }).then(function(resultList) {
   is(urlList.length + 1, resultList.length, 'Expected number of results');
   resultList.every(function(result) {
