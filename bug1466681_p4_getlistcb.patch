# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  9d650e1d1af15c6c42d837343012dff6fc059f07
Bug 1466681 P4 Make ServiceWorkerContainer::Inner::GetRegistrations() use callbacks instead of MozPromise. r=asuth

diff --git a/dom/serviceworkers/ServiceWorkerContainer.cpp b/dom/serviceworkers/ServiceWorkerContainer.cpp
--- a/dom/serviceworkers/ServiceWorkerContainer.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainer.cpp
@@ -407,42 +407,37 @@ ServiceWorkerContainer::GetRegistrations
   }
 
   RefPtr<Promise> outer = Promise::Create(global, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   RefPtr<ServiceWorkerContainer> self = this;
-  RefPtr<DOMMozPromiseRequestHolder<ServiceWorkerRegistrationListPromise>> holder =
-    new DOMMozPromiseRequestHolder<ServiceWorkerRegistrationListPromise>(global);
 
-  mInner->GetRegistrations(clientInfo.ref())->Then(
-    global->EventTargetFor(TaskCategory::Other), __func__,
-    [self, outer, holder] (const nsTArray<ServiceWorkerRegistrationDescriptor>& aDescList) {
-      holder->Complete();
+  mInner->GetRegistrations(clientInfo.ref(),
+    [self, outer] (const nsTArray<ServiceWorkerRegistrationDescriptor>& aDescList) {
       ErrorResult rv;
       nsIGlobalObject* global = self->GetGlobalIfValid(rv);
       if (rv.Failed()) {
         outer->MaybeReject(rv);
         return;
       }
       nsTArray<RefPtr<ServiceWorkerRegistration>> regList;
       for (auto& desc : aDescList) {
         RefPtr<ServiceWorkerRegistration> reg =
           global->GetOrCreateServiceWorkerRegistration(desc);
         if (reg) {
           regList.AppendElement(std::move(reg));
         }
       }
       outer->MaybeResolve(regList);
-    }, [self, outer, holder] (const CopyableErrorResult& aRv) {
-      holder->Complete();
-      outer->MaybeReject(CopyableErrorResult(aRv));
-    })->Track(*holder);
+    }, [self, outer] (ErrorResult& aRv) {
+      outer->MaybeReject(aRv);
+    });
 
   return outer.forget();
 }
 
 already_AddRefed<Promise>
 ServiceWorkerContainer::GetRegistration(const nsAString& aURL,
                                         ErrorResult& aRv)
 {
diff --git a/dom/serviceworkers/ServiceWorkerContainer.h b/dom/serviceworkers/ServiceWorkerContainer.h
--- a/dom/serviceworkers/ServiceWorkerContainer.h
+++ b/dom/serviceworkers/ServiceWorkerContainer.h
@@ -41,18 +41,20 @@ public:
              ServiceWorkerFailureCallback&& aFailureCB) const = 0;
 
     virtual void
     GetRegistration(const ClientInfo& aClientInfo,
                     const nsACString& aURL,
                     ServiceWorkerRegistrationCallback&& aSuccessCB,
                     ServiceWorkerFailureCallback&& aFailureCB) const = 0;
 
-    virtual RefPtr<ServiceWorkerRegistrationListPromise>
-    GetRegistrations(const ClientInfo& aClientInfo) const = 0;
+    virtual void
+    GetRegistrations(const ClientInfo& aClientInfo,
+                     ServiceWorkerRegistrationListCallback&& aSuccessCB,
+                     ServiceWorkerFailureCallback&& aFailureCB) const = 0;
 
     virtual void
     GetReady(const ClientInfo& aClientInfo,
              ServiceWorkerRegistrationCallback&& aSuccessCB,
              ServiceWorkerFailureCallback&& aFailureCB) const = 0;
 
     NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
   };
diff --git a/dom/serviceworkers/ServiceWorkerContainerImpl.cpp b/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
--- a/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
@@ -100,26 +100,47 @@ ServiceWorkerContainerImpl::GetRegistrat
       holder->Complete();
       successCB(aDescriptor);
     }, [failureCB = std::move(aFailureCB), holder] (const CopyableErrorResult& aResult) {
       holder->Complete();
       failureCB(CopyableErrorResult(aResult));
     })->Track(*holder);
 }
 
-RefPtr<ServiceWorkerRegistrationListPromise>
-ServiceWorkerContainerImpl::GetRegistrations(const ClientInfo& aClientInfo) const
+void
+ServiceWorkerContainerImpl::GetRegistrations(const ClientInfo& aClientInfo,
+                                             ServiceWorkerRegistrationListCallback&& aSuccessCB,
+                                             ServiceWorkerFailureCallback&& aFailureCB) const
 {
+  MOZ_DIAGNOSTIC_ASSERT(mOuter);
+
+  nsIGlobalObject* global = mOuter->GetParentObject();
+  if (NS_WARN_IF(!global)) {
+    aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
+    return;
+  }
+
   RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
   if (NS_WARN_IF(!swm)) {
-    return ServiceWorkerRegistrationListPromise::CreateAndReject(NS_ERROR_DOM_INVALID_STATE_ERR,
-                                                                 __func__);
+    aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
+    return;
   }
 
-  return swm->GetRegistrations(aClientInfo);
+  auto holder =
+    MakeRefPtr<DOMMozPromiseRequestHolder<ServiceWorkerRegistrationListPromise>>(global);
+
+  swm->GetRegistrations(aClientInfo)->Then(
+    global->EventTargetFor(TaskCategory::Other), __func__,
+    [successCB = std::move(aSuccessCB), holder] (const nsTArray<ServiceWorkerRegistrationDescriptor>& aList) {
+      holder->Complete();
+      successCB(aList);
+    }, [failureCB = std::move(aFailureCB), holder] (const CopyableErrorResult& aResult) {
+      holder->Complete();
+      failureCB(CopyableErrorResult(aResult));
+    })->Track(*holder);
 }
 
 void
 ServiceWorkerContainerImpl::GetReady(const ClientInfo& aClientInfo,
                                      ServiceWorkerRegistrationCallback&& aSuccessCB,
                                      ServiceWorkerFailureCallback&& aFailureCB) const
 {
   MOZ_DIAGNOSTIC_ASSERT(mOuter);
diff --git a/dom/serviceworkers/ServiceWorkerContainerImpl.h b/dom/serviceworkers/ServiceWorkerContainerImpl.h
--- a/dom/serviceworkers/ServiceWorkerContainerImpl.h
+++ b/dom/serviceworkers/ServiceWorkerContainerImpl.h
@@ -37,18 +37,20 @@ public:
            ServiceWorkerFailureCallback&& aFailureCB) const override;
 
   void
   GetRegistration(const ClientInfo& aClientInfo,
                   const nsACString& aURL,
                   ServiceWorkerRegistrationCallback&& aSuccessCB,
                   ServiceWorkerFailureCallback&& aFailureCB) const override;
 
-  RefPtr<ServiceWorkerRegistrationListPromise>
-  GetRegistrations(const ClientInfo& aClientInfo) const override;
+  void
+  GetRegistrations(const ClientInfo& aClientInfo,
+                   ServiceWorkerRegistrationListCallback&& aSuccessCB,
+                   ServiceWorkerFailureCallback&& aFailureCB) const override;
 
   void
   GetReady(const ClientInfo& aClientInfo,
            ServiceWorkerRegistrationCallback&& aSuccessCB,
            ServiceWorkerFailureCallback&& aFailureCB) const override;
 
   NS_INLINE_DECL_REFCOUNTING(ServiceWorkerContainerImpl, override)
 };
diff --git a/dom/serviceworkers/ServiceWorkerUtils.h b/dom/serviceworkers/ServiceWorkerUtils.h
--- a/dom/serviceworkers/ServiceWorkerUtils.h
+++ b/dom/serviceworkers/ServiceWorkerUtils.h
@@ -23,16 +23,19 @@ typedef MozPromise<ServiceWorkerRegistra
         ServiceWorkerRegistrationPromise;
 
 typedef MozPromise<nsTArray<ServiceWorkerRegistrationDescriptor>, CopyableErrorResult, false>
         ServiceWorkerRegistrationListPromise;
 
 typedef std::function<void (const ServiceWorkerRegistrationDescriptor&)>
         ServiceWorkerRegistrationCallback;
 
+typedef std::function<void (const nsTArray<ServiceWorkerRegistrationDescriptor>&)>
+        ServiceWorkerRegistrationListCallback;
+
 typedef std::function<void (ErrorResult&)>
         ServiceWorkerFailureCallback;
 
 bool
 ServiceWorkerParentInterceptEnabled();
 
 bool
 ServiceWorkerRegistrationDataIsValid(const ServiceWorkerRegistrationData& aData);
