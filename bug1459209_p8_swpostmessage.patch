# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  a8aa8e7c2e72524eaa21c1c05893226cc7247323
Bug 1459209 P8 Implement RemoteServiceWorkerImpl::PostMessage() across IPC and to the parent-side SWM. r=baku

diff --git a/dom/serviceworkers/PServiceWorker.ipdl b/dom/serviceworkers/PServiceWorker.ipdl
--- a/dom/serviceworkers/PServiceWorker.ipdl
+++ b/dom/serviceworkers/PServiceWorker.ipdl
@@ -1,22 +1,27 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 include protocol PBackground;
 
+include ClientIPCTypes;
+include DOMTypes;
+
 namespace mozilla {
 namespace dom {
 
 protocol PServiceWorker
 {
   manager PBackground;
 
 parent:
   async Teardown();
 
+  async PostMessage(ClonedMessageData aClonedData, ClientInfoAndState aSource);
+
 child:
   async __delete__();
 };
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/RemoteServiceWorkerImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerImpl.cpp
--- a/dom/serviceworkers/RemoteServiceWorkerImpl.cpp
+++ b/dom/serviceworkers/RemoteServiceWorkerImpl.cpp
@@ -1,16 +1,18 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "RemoteServiceWorkerImpl.h"
 
+#include "mozilla/dom/ClientInfo.h"
+#include "mozilla/dom/ClientState.h"
 #include "mozilla/ipc/BackgroundChild.h"
 #include "mozilla/ipc/PBackgroundChild.h"
 #include "ServiceWorkerChild.h"
 
 namespace mozilla {
 namespace dom {
 
 using mozilla::ipc::BackgroundChild;
@@ -55,17 +57,29 @@ RemoteServiceWorkerImpl::RemoveServiceWo
   mWorker = nullptr;
 }
 
 void
 RemoteServiceWorkerImpl::PostMessage(ipc::StructuredCloneData&& aData,
                                      const ClientInfo& aClientInfo,
                                      const ClientState& aClientState)
 {
-  // TODO
+  NS_ASSERT_OWNINGTHREAD(RemoteServiceWorkerImpl);
+  if (!mActor) {
+    return;
+  }
+
+  ClonedMessageData data;
+  if (!aData.BuildClonedMessageDataForBackgroundChild(mActor->Manager(),
+                                                      data)) {
+    return;
+  }
+
+  mActor->SendPostMessage(data, ClientInfoAndState(aClientInfo.ToIPC(),
+                                                   aClientState.ToIPC()));
 }
 
 RemoteServiceWorkerImpl::RemoteServiceWorkerImpl(const ServiceWorkerDescriptor& aDescriptor)
   : mActor(nullptr)
   , mWorker(nullptr)
   , mShutdown(false)
 {
   PBackgroundChild* parentActor = BackgroundChild::GetOrCreateForCurrentThread();
diff --git a/dom/serviceworkers/ServiceWorkerParent.cpp b/dom/serviceworkers/ServiceWorkerParent.cpp
--- a/dom/serviceworkers/ServiceWorkerParent.cpp
+++ b/dom/serviceworkers/ServiceWorkerParent.cpp
@@ -2,20 +2,24 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorkerParent.h"
 
 #include "ServiceWorkerProxy.h"
+#include "mozilla/dom/ClientInfo.h"
+#include "mozilla/dom/ClientState.h"
+#include "mozilla/dom/ipc/StructuredCloneData.h"
 
 namespace mozilla {
 namespace dom {
 
+using mozilla::dom::ipc::StructuredCloneData;
 using mozilla::ipc::IPCResult;
 
 void
 ServiceWorkerParent::ActorDestroy(ActorDestroyReason aReason)
 {
   if (mProxy) {
     mProxy->RevokeActor(this);
     mProxy = nullptr;
@@ -24,16 +28,29 @@ ServiceWorkerParent::ActorDestroy(ActorD
 
 IPCResult
 ServiceWorkerParent::RecvTeardown()
 {
   MaybeSendDelete();
   return IPC_OK();
 }
 
+IPCResult
+ServiceWorkerParent::RecvPostMessage(const ClonedMessageData& aClonedData,
+                                     const ClientInfoAndState& aSource)
+{
+  StructuredCloneData clonedData;
+  clonedData.CopyFromClonedMessageDataForBackgroundParent(aClonedData);
+
+  mProxy->PostMessage(std::move(clonedData), ClientInfo(aSource.info()),
+                      ClientState::FromIPC(aSource.state()));
+
+  return IPC_OK();
+}
+
 ServiceWorkerParent::ServiceWorkerParent()
   : mDeleteSent(false)
 {
 }
 
 ServiceWorkerParent::~ServiceWorkerParent()
 {
   MOZ_DIAGNOSTIC_ASSERT(!mProxy);
diff --git a/dom/serviceworkers/ServiceWorkerParent.h b/dom/serviceworkers/ServiceWorkerParent.h
--- a/dom/serviceworkers/ServiceWorkerParent.h
+++ b/dom/serviceworkers/ServiceWorkerParent.h
@@ -22,16 +22,20 @@ class ServiceWorkerParent final : public
 
   // PServiceWorkerParent
   void
   ActorDestroy(ActorDestroyReason aReason) override;
 
   mozilla::ipc::IPCResult
   RecvTeardown() override;
 
+  mozilla::ipc::IPCResult
+  RecvPostMessage(const ClonedMessageData& aClonedData,
+                  const ClientInfoAndState& aSource) override;
+
 public:
   ServiceWorkerParent();
   ~ServiceWorkerParent();
 
   void
   Init(const IPCServiceWorkerDescriptor& aDescriptor);
 
   void
diff --git a/dom/serviceworkers/ServiceWorkerProxy.cpp b/dom/serviceworkers/ServiceWorkerProxy.cpp
--- a/dom/serviceworkers/ServiceWorkerProxy.cpp
+++ b/dom/serviceworkers/ServiceWorkerProxy.cpp
@@ -139,10 +139,27 @@ ServiceWorkerProxy::RevokeActor(ServiceW
   mActor = nullptr;
 
   nsCOMPtr<nsIRunnable> r =
     NewRunnableMethod(__func__, this,
                       &ServiceWorkerProxy::StopListeningOnMainThread);
   MOZ_ALWAYS_SUCCEEDS(SystemGroup::Dispatch(TaskCategory::Other, r.forget()));
 }
 
+void
+ServiceWorkerProxy::PostMessage(StructuredCloneData&& aClonedData,
+                                const ClientInfo& aClientInfo,
+                                const ClientState& aClientState)
+{
+  AssertIsOnBackgroundThread();
+  RefPtr<ServiceWorkerProxy> self = this;
+  nsCOMPtr<nsIRunnable> r = NS_NewRunnableFunction(__func__,
+    [self, aClonedData = std::move(aClonedData), aClientInfo, aClientState] () mutable {
+      if (!self->mInfo) {
+        return;
+      }
+      self->mInfo->PostMessage(std::move(aClonedData), aClientInfo, aClientState);
+    });
+  MOZ_ALWAYS_SUCCEEDS(SystemGroup::Dispatch(TaskCategory::Other, r.forget()));
+}
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/ServiceWorkerProxy.h b/dom/serviceworkers/ServiceWorkerProxy.h
--- a/dom/serviceworkers/ServiceWorkerProxy.h
+++ b/dom/serviceworkers/ServiceWorkerProxy.h
@@ -9,16 +9,20 @@
 
 #include "nsProxyRelease.h"
 #include "ServiceWorkerDescriptor.h"
 #include "ServiceWorkerInfo.h"
 
 namespace mozilla {
 namespace dom {
 
+namespace ipc {
+class StructuredCloneData;
+} // namespace ipc
+
 class ServiceWorkerInfo;
 class ServiceWorkerParent;
 
 class ServiceWorkerProxy final : public ServiceWorkerInfo::Listener
 {
   // Background thread only
   ServiceWorkerParent* mActor;
 
@@ -54,15 +58,20 @@ class ServiceWorkerProxy final : public 
 
 public:
   ServiceWorkerProxy(ServiceWorkerParent* aActor,
                      const ServiceWorkerDescriptor& aDescriptor);
 
   void
   RevokeActor(ServiceWorkerParent* aActor);
 
+  void
+  PostMessage(ipc::StructuredCloneData&& aClonedData,
+              const ClientInfo& aClientInfo,
+              const ClientState& aState);
+
   NS_INLINE_DECL_THREADSAFE_REFCOUNTING(ServiceWorkerProxy, override);
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // moz_dom_ServiceWorkerProxy_h
