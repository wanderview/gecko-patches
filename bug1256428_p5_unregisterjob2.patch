# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  142d7fbf94c57fab7e65e41658782194c4e7bbfa
Bug 1256428 P5 Add ServiceWorkerUnregisterJob2 class. r=ehsan

diff --git a/dom/workers/ServiceWorkerManager.h b/dom/workers/ServiceWorkerManager.h
--- a/dom/workers/ServiceWorkerManager.h
+++ b/dom/workers/ServiceWorkerManager.h
@@ -330,16 +330,17 @@ class ServiceWorkerManager final
   friend class ServiceWorkerJobQueue;
   friend class ServiceWorkerInstallJob;
   friend class ServiceWorkerRegisterJob;
   friend class ServiceWorkerJob2;
   friend class ServiceWorkerJobBase;
   friend class ServiceWorkerScriptJobBase;
   friend class ServiceWorkerRegistrationInfo;
   friend class ServiceWorkerUnregisterJob;
+  friend class ServiceWorkerUnregisterJob2;
   friend class ServiceWorkerUpdateJob2;
   friend class UpdateTimerCallback;
 
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSISERVICEWORKERMANAGER
   NS_DECL_NSIIPCBACKGROUNDCHILDCREATECALLBACK
   NS_DECL_NSIOBSERVER
diff --git a/dom/workers/ServiceWorkerUnregisterJob.cpp b/dom/workers/ServiceWorkerUnregisterJob.cpp
new file mode 100644
--- /dev/null
+++ b/dom/workers/ServiceWorkerUnregisterJob.cpp
@@ -0,0 +1,108 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ServiceWorkerUnregisterJob.h"
+
+namespace mozilla {
+namespace dom {
+namespace workers {
+
+ServiceWorkerUnregisterJob2::~ServiceWorkerUnregisterJob2()
+{
+}
+
+void
+ServiceWorkerUnregisterJob2::AsyncExecute()
+{
+  AssertIsOnMainThread();
+
+  if (Canceled()) {
+    Finish(NS_ERROR_DOM_ABORT_ERR);
+    return;
+  }
+
+  // TODO: if scope does not match principal, abort with SecurityError
+
+  PrincipalInfo principalInfo;
+  nsresult rv = PrincipalToPrincipalInfo(mPrincipal, &principalInfo);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    Finish(NS_OK);
+    return;
+  }
+
+  RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
+
+  nsAutoCString scopeKey;
+  rv = swm->PrincipalToScopeKey(mPrincipal, scopeKey);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    Finish(NS_OK);
+    return;
+  }
+
+  // "Let registration be the result of running [[Get Registration]]
+  // algorithm passing scope as the argument."
+  ServiceWorkerManager::RegistrationDataPerPrincipal* data;
+  // TODO: Don't reach into SWM internals here.  Expose a method instead.
+  if (!swm->mRegistrationInfos.Get(scopeKey, &data)) {
+    // "If registration is null, then, resolve promise with false."
+    Finish(NS_OK);
+    return;
+  }
+
+  RefPtr<ServiceWorkerRegistrationInfo> registration;
+  if (!data->mInfos.Get(mScope, getter_AddRefs(registration))) {
+    // "If registration is null, then, resolve promise with false."
+    Finish(NS_OK);
+    return;
+  }
+
+  MOZ_ASSERT(registration);
+
+  // Note, we send the message to remove the registration from disk now even
+  // though we may only set the mPendingUninstall flag below.  This is
+  // necessary to ensure the registration is removed if the controlled
+  // clients are closed by shutting down the browser.  If the registration
+  // is resurrected by clearing mPendingUninstall then it should be saved
+  // to disk again.
+  // TODO: Don't reach into SWM internals here.  Expose a method instead.
+  if (mSendToParent && !registration->mPendingUninstall && swm->mActor) {
+    swm->mActor->SendUnregister(principalInfo, NS_ConvertUTF8toUTF16(mScope));
+  }
+
+  // "Set registration's uninstalling flag."
+  registration->mPendingUninstall = true;
+
+  // "Resolve promise with true"
+  mResult = true;
+  InvokeResultCallbacks(NS_OK);
+
+  // "If no service worker client is using registration..."
+  if (!registration->IsControllingDocuments()) {
+    // "If registration's uninstalling flag is set.."
+    if (!registration->mPendingUninstall) {
+      Finish(NS_OK);
+      return;
+    }
+
+    // "Invoke [[Clear Registration]]..."
+    swm->RemoveRegistration(registration);
+  }
+
+  Finish(NS_OK);
+}
+
+ServiceWorkerUnregisterJob2::ServiceWorkerUnregisterJob2(nsIPrincipal* aPrincipal,
+                                                         const nsACString& aScope,
+                                                         bool aSendToParent)
+  : ServiceWorkerJob2(Type::Unregister, aPrincipal, aScope, EmptyCString())
+  , mResult(false)
+  , mSendToParent(aSendToParent)
+{
+}
+
+} // namespace workers
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/workers/ServiceWorkerUnregisterJob.h b/dom/workers/ServiceWorkerUnregisterJob.h
new file mode 100644
--- /dev/null
+++ b/dom/workers/ServiceWorkerUnregisterJob.h
@@ -0,0 +1,40 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_workers_serviceworkerunregisterjob_h
+#define mozilla_dom_workers_serviceworkerunregisterjob_h
+
+#include "ServiceWorkerJob.h"
+
+namespace mozilla {
+namespace dom {
+namespace workers {
+
+class ServiceWorkerUnregisterJob2 final : public ServiceWorkerJob2
+{
+  bool mResult;
+  bool mSendToParent;
+
+protected:
+  virtual ~ServiceWorkerUnregisterJob2();
+
+  virtual void
+  AsyncExecute() override;
+
+public:
+  ServiceWorkerUnregisterJob2(nsIPrincipal* aPrincipal,
+                              const nsACString& aScope,
+                              bool aSendToParent);
+
+  bool
+  GetResult() const;
+};
+
+} // namespace workers
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_workers_serviceworkerunregisterjob_h
diff --git a/dom/workers/moz.build b/dom/workers/moz.build
--- a/dom/workers/moz.build
+++ b/dom/workers/moz.build
@@ -73,16 +73,17 @@ UNIFIED_SOURCES += [
     'ServiceWorkerManagerParent.cpp',
     'ServiceWorkerManagerService.cpp',
     'ServiceWorkerMessageEvent.cpp',
     'ServiceWorkerPrivate.cpp',
     'ServiceWorkerRegisterJob.cpp',
     'ServiceWorkerRegistrar.cpp',
     'ServiceWorkerRegistration.cpp',
     'ServiceWorkerScriptCache.cpp',
+    'ServiceWorkerUnregisterJob.cpp',
     'ServiceWorkerUpdateJob.cpp',
     'ServiceWorkerWindowClient.cpp',
     'SharedWorker.cpp',
     'URL.cpp',
     'WorkerDebuggerManager.cpp',
     'WorkerLocation.cpp',
     'WorkerNavigator.cpp',
     'WorkerPrivate.cpp',
