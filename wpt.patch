# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  eb3e08654dba4369cebf341c9c248e06c7ad46a1

diff --git a/testing/web-platform/tests/fetch/api/request/request-cache-force-cache.html b/testing/web-platform/tests/fetch/api/request/request-cache-force-cache.html
--- a/testing/web-platform/tests/fetch/api/request/request-cache-force-cache.html
+++ b/testing/web-platform/tests/fetch/api/request/request-cache-force-cache.html
@@ -66,13 +66,22 @@
       },
       {
         name: 'RequestCache "force-cache" stores the response in the cache if it goes to the network',
         state: "fresh",
         request_cache: ["force-cache", "default"],
         expected_validation_headers: [false],
         expected_no_cache_headers: [false],
       },
+      {
+        name: 'RequestCache "force-cache" mode checks the cache for previously cached content and goes to the network if previous response was no-store',
+        state: "stale",
+        cache_control: "no-store",
+        pragma: "no-cache",
+        request_cache: ["default", "force-cache"],
+        expected_validation_headers: [false, false],
+        expected_no_cache_headers: [false, false],
+      },
     ];
     run_tests(tests);
     </script>
   </body>
 </html>
diff --git a/testing/web-platform/tests/fetch/api/request/request-cache-only-if-cached.html b/testing/web-platform/tests/fetch/api/request/request-cache-only-if-cached.html
--- a/testing/web-platform/tests/fetch/api/request/request-cache-only-if-cached.html
+++ b/testing/web-platform/tests/fetch/api/request/request-cache-only-if-cached.html
@@ -64,13 +64,23 @@
         name: 'RequestCache "only-if-cached" (with "same-origin") does not follow redirects across origins and rejects',
         state: "stale",
         request_cache: ["default", "only-if-cached"],
         redirect: "cross-origin",
         response: [null, "error"],
         expected_validation_headers: [false, false],
         expected_no_cache_headers: [false, false],
       },
+      {
+        name: 'RequestCache "only-if-cached" mode checks the cache for previously cached content and does not go to the network if a response was no-store',
+        state: "stale",
+        cache_control: "no-store",
+        pragma: "no-cache",
+        request_cache: ["default", "only-if-cached"],
+        response: [null, "error"],
+        expected_validation_headers: [false],
+        expected_no_cache_headers: [false]
+      },
     ];
     run_tests(tests);
     </script>
   </body>
 </html>
diff --git a/testing/web-platform/tests/fetch/api/request/request-cache.js b/testing/web-platform/tests/fetch/api/request/request-cache.js
--- a/testing/web-platform/tests/fetch/api/request/request-cache.js
+++ b/testing/web-platform/tests/fetch/api/request/request-cache.js
@@ -59,28 +59,32 @@ function make_url(uuid, id, value, conte
   var vary = "";
   if ("vary" in info) {
     vary = "&vary=" + info.vary;
   }
   var cache_control = "";
   if ("cache_control" in info) {
     cache_control = "&cache_control=" + info.cache_control;
   }
+  var pragma = "";
+  if ("pragma" in info) {
+    pragma = "&Pragma=" + info.pragma;
+  }
   var redirect = "";
 
   var ignore_request_headers = "";
   if ("request_headers" in info) {
     // Ignore the request headers that we send since they may be synthesized by the test.
     ignore_request_headers = "&ignore";
   }
   var url_sans_redirect = "resources/cache.py?token=" + uuid +
     "&content=" + content +
     "&" + id + "=" + value +
     "&expires=" + dates[info.state] +
-    vary + cache_control + ignore_request_headers;
+    vary + cache_control + pragma + ignore_request_headers;
   // If there's a redirect, the target is the script without any redirect at
   // either the same domain or a different domain.
   if ("redirect" in info) {
     var host_info = get_host_info();
     var origin;
     switch (info.redirect) {
       case "same-origin":
         origin = host_info['HTTP_ORIGIN'];
