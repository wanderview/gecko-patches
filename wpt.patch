# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  98fb88927417e2e00866740018f64fdb1c250088

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -64813,16 +64813,26 @@
      {}
     ]
    ],
    "service-workers/service-worker/resources/404.py": [
     [
      {}
     ]
    ],
+   "service-workers/service-worker/resources/about-blank-replacement-frame.html": [
+    [
+     {}
+    ]
+   ],
+   "service-workers/service-worker/resources/about-blank-replacement-worker.js": [
+    [
+     {}
+    ]
+   ],
    "service-workers/service-worker/resources/appcache-ordering.install.html": [
     [
      {}
     ]
    ],
    "service-workers/service-worker/resources/appcache-ordering.is-appcached.html": [
     [
      {}
@@ -126881,16 +126891,24 @@
     ]
    ],
    "service-workers/service-worker/ServiceWorkerGlobalScope/update.https.html": [
     [
      "/service-workers/service-worker/ServiceWorkerGlobalScope/update.https.html",
      {}
     ]
    ],
+   "service-workers/service-worker/about-blank-replacement.https.html": [
+    [
+     "/service-workers/service-worker/about-blank-replacement.https.html",
+     {
+      "timeout": "long"
+     }
+    ]
+   ],
    "service-workers/service-worker/activate-event-after-install-state-change.https.html": [
     [
      "/service-workers/service-worker/activate-event-after-install-state-change.https.html",
      {}
     ]
    ],
    "service-workers/service-worker/activation-after-registration.https.html": [
     [
@@ -192593,17 +192611,17 @@
    "3fabcfa40caf9c66bc74bcd83663eddb0f385051",
    "support"
   ],
   "interfaces/webrtc-pc.idl": [
    "4f94c4236168ed722f71d81bd957e0da72b29c71",
    "support"
   ],
   "intersection-observer/bounding-box.html": [
-   "0deef078368d11e2a55ef0988d50f548587a4c57",
+   "a3ac1b70ba26234b7c968055171e652f3a8a14d8",
    "testharness"
   ],
   "intersection-observer/client-rect.html": [
    "acec9a4f59ebee1840950cf766a45676490eef84",
    "testharness"
   ],
   "intersection-observer/containing-block.html": [
    "8bdf6fa6a3ee09130981bf83728aa9f61a6ebc54",
@@ -213000,16 +213018,20 @@
   "service-workers/service-worker/ServiceWorkerGlobalScope/unregister.https.html": [
    "9fe4c10b921a84dc086cea47d48bb34fdbb28eee",
    "testharness"
   ],
   "service-workers/service-worker/ServiceWorkerGlobalScope/update.https.html": [
    "f574c7a96a1ca766445cd0b427b9963b18c62795",
    "testharness"
   ],
+  "service-workers/service-worker/about-blank-replacement.https.html": [
+   "b98ea05992656f63d50dbceec3e2eccfa745d309",
+   "testharness"
+  ],
   "service-workers/service-worker/activate-event-after-install-state-change.https.html": [
    "9d1971d9b5dcb52a14a0d2313065e27766c0489a",
    "testharness"
   ],
   "service-workers/service-worker/activation-after-registration.https.html": [
    "913c58ba58de077b82d0ec9cc21258610b26fe97",
    "testharness"
   ],
@@ -213536,16 +213558,24 @@
   "service-workers/service-worker/resource-timing.https.html": [
    "587060940cb25ff8072fa83cb41d538a73320ca6",
    "testharness"
   ],
   "service-workers/service-worker/resources/404.py": [
    "567d0a7de3ef54adaa8339bb04632a2ecfcc57a5",
    "support"
   ],
+  "service-workers/service-worker/resources/about-blank-replacement-frame.html": [
+   "e4661bc5b18bdf1cb0be58b8dbf9b29383b6c45d",
+   "support"
+  ],
+  "service-workers/service-worker/resources/about-blank-replacement-worker.js": [
+   "a3beb43dedd926269df3c3546c73fb6672309224",
+   "support"
+  ],
   "service-workers/service-worker/resources/appcache-ordering.install.html": [
    "2fbe9f464383783774f08276b8e2cc7103fee83c",
    "support"
   ],
   "service-workers/service-worker/resources/appcache-ordering.is-appcached.html": [
    "4e7b85b7e2d9dbcd6def515b856db51020b54595",
    "support"
   ],
diff --git a/testing/web-platform/tests/service-workers/service-worker/about-blank-replacement.https.html b/testing/web-platform/tests/service-workers/service-worker/about-blank-replacement.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/about-blank-replacement.https.html
@@ -0,0 +1,30 @@
+<!DOCTYPE html>
+<title>Service Worker: about:blank replacement handling</title>
+<meta name=timeout content=long>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="/common/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<body>
+<script>
+const worker = 'resources/about-blank-replacement-worker.js';
+const scope = 'resources/about-blank-replacement-frame.html'
+
+promise_test(async function(t) {
+  try {
+    let reg = await service_worker_unregister_and_register(t, worker, scope);
+    dump(`### ### got reg ${reg}\n`);
+    await wait_for_state(t, reg.installing, 'activated');
+    dump(`### ### worker activated\n`);
+    let frame = await with_iframe(scope);
+    dump(`### ### got frame ${frame}\n`);
+    assert_true(true);
+    frame.remove();
+  } catch (e) {
+    assert_true(false, `caught exception ${e}`);
+  } finally {
+    await service_worker_unregister_and_done(t, scope);
+  }
+}, 'TODO');
+</script>
+</body>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/about-blank-replacement-frame.html b/testing/web-platform/tests/service-workers/service-worker/resources/about-blank-replacement-frame.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/about-blank-replacement-frame.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html>
+<body>
+<iframe src="?nested" id="nested"></iframe>
+<script>
+let frame = document.getElementById('nested');
+frame.contentWindow.navigator.serviceWorker.addEventListener('message', evt => {
+  if (evt.data.type === 'PING') {
+    dump(`### ### frame got ping, location is ${frame.contentWindow.location.toString()}\n`);
+    evt.source.postMessage({
+      type: 'PONG',
+      location: frame.contentWindow.location.toString()
+    });
+  }
+});
+</script>
+</body>
+</html>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/about-blank-replacement-worker.js b/testing/web-platform/tests/service-workers/service-worker/resources/about-blank-replacement-worker.js
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/about-blank-replacement-worker.js
@@ -0,0 +1,46 @@
+let resolveDelayed;
+function delayedResponse() {
+  return new Promise(resolve => {
+    resolveDelayed = _ => resolve(new Response());
+  });
+}
+
+function waitForPong() {
+  return new Promise(resolve => {
+    self.addEventListener('message', function onMessage(evt) {
+      dump(`### ### pong ${JSON.stringify(evt.data)}\n`);
+      if (evt.data.type === 'PONG') {
+        resolve(evt.data.location);
+      }
+    });
+  });
+}
+
+function delay(ms) {
+  return new Promise(resolve => setTimeout(resolve, ms));
+}
+
+async function pingNested(url) {
+  await delay(100);
+  let list = await clients.matchAll({ includeUncontrolled: true });
+  let target;
+  for (client of list) {
+    dump(`### ### checking ${client.url}\n`);
+    if (client.frameType === 'nested' && client.url === url) {
+      target = client;
+      break;
+    }
+  }
+
+  target.postMessage({ type: 'PING' })
+  return await waitForPong(target);
+}
+
+addEventListener('fetch', async evt => {
+  if (evt.request.url.endsWith('nested')) {
+    evt.respondWith(delayedResponse());
+    let location = await pingNested('about:blank');
+    dump(`### ### got location ${location}\n`);
+    return;
+  }
+});
