# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  3efae4bf831357092a4fc37ca31e75801df62614
Bug 1441932 P4 Treat same-value assignments to the LoadInfo reserved and initial ClientInfo values as no-op changes. r=mayhemer

diff --git a/dom/clients/manager/ClientInfo.cpp b/dom/clients/manager/ClientInfo.cpp
--- a/dom/clients/manager/ClientInfo.cpp
+++ b/dom/clients/manager/ClientInfo.cpp
@@ -55,16 +55,22 @@ ClientInfo::operator=(ClientInfo&& aRigh
   mData = Move(aRight.mData);
   return *this;
 }
 
 ClientInfo::~ClientInfo()
 {
 }
 
+bool
+ClientInfo::operator==(const ClientInfo& aRight) const
+{
+  return *mData == *aRight.mData;
+}
+
 const nsID&
 ClientInfo::Id() const
 {
   return mData->id();
 }
 
 ClientType
 ClientInfo::Type() const
diff --git a/dom/clients/manager/ClientInfo.h b/dom/clients/manager/ClientInfo.h
--- a/dom/clients/manager/ClientInfo.h
+++ b/dom/clients/manager/ClientInfo.h
@@ -42,16 +42,19 @@ public:
 
   ClientInfo&
   operator=(ClientInfo&& aRight);
 
   explicit ClientInfo(const IPCClientInfo& aData);
 
   ~ClientInfo();
 
+  bool
+  operator==(const ClientInfo& aRight) const;
+
   // Get the unique identifier chosen at the time of the global's creation.
   const nsID&
   Id() const;
 
   // Determine what kind of global this is; e.g. Window, Worker, SharedWorker,
   // etc.
   ClientType
   Type() const;
diff --git a/netwerk/base/LoadInfo.cpp b/netwerk/base/LoadInfo.cpp
--- a/netwerk/base/LoadInfo.cpp
+++ b/netwerk/base/LoadInfo.cpp
@@ -1312,30 +1312,40 @@ LoadInfo::TakeReservedClientSource()
   }
   return Move(mReservedClientSource);
 }
 
 void
 LoadInfo::SetReservedClientInfo(const ClientInfo& aClientInfo)
 {
   MOZ_DIAGNOSTIC_ASSERT(mInitialClientInfo.isNothing());
+  // Treat assignments of the same value as a no-op.  The emplace below
+  // will normally assert when overwriting an existing value.
+  if (mReservedClientInfo.isSome() && mReservedClientInfo.ref() == aClientInfo) {
+    return;
+  }
   mReservedClientInfo.emplace(aClientInfo);
 }
 
 const Maybe<ClientInfo>&
 LoadInfo::GetReservedClientInfo()
 {
   return mReservedClientInfo;
 }
 
 void
 LoadInfo::SetInitialClientInfo(const ClientInfo& aClientInfo)
 {
   MOZ_DIAGNOSTIC_ASSERT(!mReservedClientSource);
   MOZ_DIAGNOSTIC_ASSERT(mReservedClientInfo.isNothing());
+  // Treat assignments of the same value as a no-op.  The emplace below
+  // will normally assert when overwriting an existing value.
+  if (mInitialClientInfo.isSome() && mInitialClientInfo.ref() == aClientInfo) {
+    return;
+  }
   mInitialClientInfo.emplace(aClientInfo);
 }
 
 const Maybe<ClientInfo>&
 LoadInfo::GetInitialClientInfo()
 {
   return mInitialClientInfo;
 }
