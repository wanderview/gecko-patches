# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d53b301a14e1dfa05324072a7159796a4f5e24c7
Bug 1265795 P2 Add a web-platform-test for the window navigation case. r=bz

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -35159,16 +35159,22 @@
             "url": "/html/webappapis/scripting/processing-model-2/window-onerror-with-cross-frame-event-listeners-3.html"
           }
         ],
         "html/webappapis/scripting/processing-model-2/window-onerror-with-cross-frame-event-listeners-4.html": [
           {
             "path": "html/webappapis/scripting/processing-model-2/window-onerror-with-cross-frame-event-listeners-4.html",
             "url": "/html/webappapis/scripting/processing-model-2/window-onerror-with-cross-frame-event-listeners-4.html"
           }
+        ],
+        "service-workers/service-worker/navigate-window.https.html": [
+          {
+            "path": "service-workers/service-worker/navigate-window.https.html",
+            "url": "/service-workers/service-worker/navigate-window.https.html"
+          }
         ]
       }
     },
     "reftest_nodes": {}
   },
   "reftest_nodes": {
     "2dcontext/building-paths/canvas_complexshapes_arcto_001.htm": [
       {
diff --git a/testing/web-platform/tests/service-workers/service-worker/navigate-window.https.html b/testing/web-platform/tests/service-workers/service-worker/navigate-window.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/navigate-window.https.html
@@ -0,0 +1,106 @@
+<!DOCTYPE html>
+<title>Service Worker: Navigate a Window</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<body>
+<script>
+var host_info = get_host_info();
+var BASE_URL = host_info['HTTPS_ORIGIN'] + base_path();
+
+function with_window(url) {
+  return new Promise(function(resolve, reject) {
+    var win = window.open(url);
+    window.addEventListener('message', function onMsg(evt) {
+      if (evt.data.type === 'LOADED') {
+        window.removeEventListener('message', onMsg);
+        resolve(win);
+      }
+    });
+  });
+}
+
+function navigate_window(win, url) {
+  return new Promise(function(resolve, reject) {
+    window.addEventListener('message', function onMsg(evt) {
+      if (evt.data.type === 'LOADED') {
+        window.removeEventListener('message', onMsg);
+        resolve(win);
+      }
+    });
+    win.location = url;
+  });
+}
+
+function get_clients(win, sw, opts) {
+  return new Promise(function(resolve, reject) {
+    win.navigator.serviceWorker.addEventListener('message', function onMsg(evt) {
+      win.navigator.serviceWorker.removeEventListener('message', onMsg);
+      if (evt.data.type === 'success') {
+        resolve(evt.data.detail);
+      } else {
+        reject(evt.data.detail);
+      }
+    });
+    sw.postMessage({ type: 'GET_CLIENTS', opts: (opts || {}) });
+  });
+}
+
+async_test(function(t) {
+    var worker = BASE_URL + 'resources/navigate-window-worker.js';
+    var scope = BASE_URL + 'resources/loaded.html?navigate-window';
+    var url1 = scope + '&q=1';
+    var url2 = scope + '&q=2';
+    var serviceWorker;
+    var win;
+    service_worker_unregister_and_register(t, worker, scope)
+      .then(function(reg) {
+          return wait_for_state(t, reg.installing, 'activated');
+        })
+      .then(function() {
+          return with_window(url1);
+        })
+      .then(function(w) {
+          win = w;
+          // In order to compare service worker instances we need to
+          // make sure the DOM object is owned by the same global; the
+          // opened window in this case.
+          return win.navigator.serviceWorker.getRegistration(scope);
+        })
+      .then(function(reg) {
+          serviceWorker = reg.active;
+          assert_equals(win.navigator.serviceWorker.controller, serviceWorker,
+                        'window should be controlled by service worker');
+          return get_clients(win, serviceWorker);
+        })
+      .then(function(resultList) {
+          dump('### ### results: ' + JSON.stringify(resultList) + '\n');
+          assert_equals(resultList.length, 1, 'there should only be one client');
+          assert_equals(resultList[0].url, win.location.href,
+                        'client should be our opened window');
+          assert_equals(resultList[0].frameType, 'auxiliary',
+                        'window.open() should create a client with an auxiliary frame type');
+          return navigate_window(win, url2);
+        })
+      .then(function() {
+          return win.navigator.serviceWorker.getRegistration(win.location.href);
+        })
+      .then(function(reg) {
+          serviceWorker = reg.active;
+          assert_equals(win.navigator.serviceWorker.controller, serviceWorker,
+                        'window should be controlled by service worker');
+          return get_clients(win, serviceWorker);
+        })
+      .then(function(resultList) {
+          dump('### ### results: ' + JSON.stringify(resultList) + '\n');
+          win.close();
+        })
+      .catch(unreached_rejection(t))
+      .then(function() {
+          return service_worker_unregister_and_done(t, scope);
+        });
+  }, 'Clients.matchAll() should not show an old window as controlled after ' +
+     'it navigates.');
+</script>
+</body>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/loaded.html b/testing/web-platform/tests/service-workers/service-worker/resources/loaded.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/loaded.html
@@ -0,0 +1,5 @@
+<script>
+addEventListener('load', function() {
+  opener.postMessage({ type: 'LOADED' }, '*');
+});
+</script>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/navigate-window-worker.js b/testing/web-platform/tests/service-workers/service-worker/resources/navigate-window-worker.js
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/navigate-window-worker.js
@@ -0,0 +1,21 @@
+addEventListener('message', function(evt) {
+  if (evt.data.type === 'GET_CLIENTS') {
+    clients.matchAll(evt.data.opts).then(function(clientList) {
+      var resultList = clientList.map(function(c) {
+        return { url: c.url, frameType: c.frameType, id: c.id };
+      });
+      evt.source.postMessage({ type: 'success', detail: resultList });
+    }).catch(function(err) {
+      evt.source.postMessage({
+        type: 'failure',
+        detail: 'matchAll() rejected with "' + err + '"'
+      });
+    });
+    return;
+  }
+
+  evt.source.postMessage({
+    type: 'failure',
+    detail: 'Unexpected message type "' + evt.data.type + '"'
+  });
+});
