# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  a9ad8fef830402edce54004620c572c3321139a2

diff --git a/dom/serviceworkers/ServiceWorkerParent.cpp b/dom/serviceworkers/ServiceWorkerParent.cpp
--- a/dom/serviceworkers/ServiceWorkerParent.cpp
+++ b/dom/serviceworkers/ServiceWorkerParent.cpp
@@ -75,17 +75,18 @@ ServiceWorkerParent::~ServiceWorkerParen
 {
   MOZ_DIAGNOSTIC_ASSERT(!mProxy);
 }
 
 void
 ServiceWorkerParent::Init(const IPCServiceWorkerDescriptor& aDescriptor)
 {
   MOZ_DIAGNOSTIC_ASSERT(!mProxy);
-  mProxy = new ServiceWorkerProxy(this, ServiceWorkerDescriptor(aDescriptor));
+  mProxy = new ServiceWorkerProxy(ServiceWorkerDescriptor(aDescriptor));
+  mProxy->Init(this);
 }
 
 void
 ServiceWorkerParent::MaybeSendDelete()
 {
   if (mDeleteSent) {
     return;
   }
diff --git a/dom/serviceworkers/ServiceWorkerProxy.cpp b/dom/serviceworkers/ServiceWorkerProxy.cpp
--- a/dom/serviceworkers/ServiceWorkerProxy.cpp
+++ b/dom/serviceworkers/ServiceWorkerProxy.cpp
@@ -110,26 +110,37 @@ ServiceWorkerProxy::SetState(ServiceWork
   nsCOMPtr<nsIRunnable> r =
     NewRunnableMethod<ServiceWorkerState>(__func__, this,
                                           &ServiceWorkerProxy::SetStateOnBGThread,
                                           aState);
 
   MOZ_ALWAYS_SUCCEEDS(mEventTarget->Dispatch(r.forget(), NS_DISPATCH_NORMAL));
 }
 
-ServiceWorkerProxy::ServiceWorkerProxy(ServiceWorkerParent* aActor,
-                                       const ServiceWorkerDescriptor& aDescriptor)
-  : mActor(aActor)
+ServiceWorkerProxy::ServiceWorkerProxy(const ServiceWorkerDescriptor& aDescriptor)
+  : mActor(nullptr)
   , mEventTarget(GetCurrentThreadSerialEventTarget())
   , mDescriptor(aDescriptor)
 {
+}
+
+void
+ServiceWorkerProxy::Init(ServiceWorkerParent* aActor)
+{
   AssertIsOnBackgroundThread();
-  MOZ_DIAGNOSTIC_ASSERT(mActor);
+  MOZ_DIAGNOSTIC_ASSERT(aActor);
+  MOZ_DIAGNOSTIC_ASSERT(!mActor);
   MOZ_DIAGNOSTIC_ASSERT(mEventTarget);
 
+  mActor = aActor;
+
+  // Note, this must be done from a separate Init() method and not in
+  // the constructor.  If done from the constructor the runnable can
+  // execute, complete, and release its reference before the constructor
+  // returns.
   nsCOMPtr<nsIRunnable> r = NewRunnableMethod("ServiceWorkerProxy::Init", this,
                                               &ServiceWorkerProxy::InitOnMainThread);
   MOZ_ALWAYS_SUCCEEDS(SystemGroup::Dispatch(TaskCategory::Other, r.forget()));
 }
 
 void
 ServiceWorkerProxy::RevokeActor(ServiceWorkerParent* aActor)
 {
diff --git a/dom/serviceworkers/ServiceWorkerProxy.h b/dom/serviceworkers/ServiceWorkerProxy.h
--- a/dom/serviceworkers/ServiceWorkerProxy.h
+++ b/dom/serviceworkers/ServiceWorkerProxy.h
@@ -49,18 +49,20 @@ class ServiceWorkerProxy final : public 
   void
   StopListeningOnMainThread();
 
   // ServiceWorkerInfo::Listener interface
   void
   SetState(ServiceWorkerState aState) override;
 
 public:
-  ServiceWorkerProxy(ServiceWorkerParent* aActor,
-                     const ServiceWorkerDescriptor& aDescriptor);
+  explicit ServiceWorkerProxy(const ServiceWorkerDescriptor& aDescriptor);
+
+  void
+  Init(ServiceWorkerParent* aActor);
 
   void
   RevokeActor(ServiceWorkerParent* aActor);
 
   void
   PostMessage(RefPtr<ServiceWorkerCloneData>&& aData,
               const ClientInfo& aClientInfo,
               const ClientState& aState);
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationParent.cpp b/dom/serviceworkers/ServiceWorkerRegistrationParent.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationParent.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationParent.cpp
@@ -86,18 +86,18 @@ ServiceWorkerRegistrationParent::~Servic
 {
   MOZ_DIAGNOSTIC_ASSERT(!mProxy);
 }
 
 void
 ServiceWorkerRegistrationParent::Init(const IPCServiceWorkerRegistrationDescriptor& aDescriptor)
 {
   MOZ_DIAGNOSTIC_ASSERT(!mProxy);
-  mProxy = new ServiceWorkerRegistrationProxy(
-    this, ServiceWorkerRegistrationDescriptor(aDescriptor));
+  mProxy = new ServiceWorkerRegistrationProxy(ServiceWorkerRegistrationDescriptor(aDescriptor));
+  mProxy->Init(this);
 }
 
 void
 ServiceWorkerRegistrationParent::MaybeSendDelete()
 {
   if (mDeleteSent) {
     return;
   }
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp b/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
@@ -184,26 +184,37 @@ bool
 ServiceWorkerRegistrationProxy::MatchesDescriptor(const ServiceWorkerRegistrationDescriptor& aDescriptor)
 {
   AssertIsOnMainThread();
   return aDescriptor.Id() == mDescriptor.Id() &&
          aDescriptor.PrincipalInfo() == mDescriptor.PrincipalInfo() &&
          aDescriptor.Scope() == mDescriptor.Scope();
 }
 
-ServiceWorkerRegistrationProxy::ServiceWorkerRegistrationProxy(ServiceWorkerRegistrationParent* aActor,
-                                                               const ServiceWorkerRegistrationDescriptor& aDescriptor)
-  : mActor(aActor)
+ServiceWorkerRegistrationProxy::ServiceWorkerRegistrationProxy(const ServiceWorkerRegistrationDescriptor& aDescriptor)
+  : mActor(nullptr)
   , mEventTarget(GetCurrentThreadSerialEventTarget())
   , mDescriptor(aDescriptor)
 {
+}
+
+void
+ServiceWorkerRegistrationProxy::Init(ServiceWorkerRegistrationParent* aActor)
+{
   AssertIsOnBackgroundThread();
-  MOZ_DIAGNOSTIC_ASSERT(mActor);
+  MOZ_DIAGNOSTIC_ASSERT(aActor);
+  MOZ_DIAGNOSTIC_ASSERT(!mActor);
   MOZ_DIAGNOSTIC_ASSERT(mEventTarget);
 
+  mActor = aActor;
+
+  // Note, this must be done from a separate Init() method and not in
+  // the constructor.  If done from the constructor the runnable can
+  // execute, complete, and release its reference before the constructor
+  // returns.
   nsCOMPtr<nsIRunnable> r = NewRunnableMethod(
     "ServiceWorkerRegistrationProxy::Init", this,
     &ServiceWorkerRegistrationProxy::InitOnMainThread);
   MOZ_ALWAYS_SUCCEEDS(SystemGroup::Dispatch(TaskCategory::Other, r.forget()));
 }
 
 void
 ServiceWorkerRegistrationProxy::RevokeActor(ServiceWorkerRegistrationParent* aActor)
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationProxy.h b/dom/serviceworkers/ServiceWorkerRegistrationProxy.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationProxy.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationProxy.h
@@ -65,18 +65,20 @@ class ServiceWorkerRegistrationProxy fin
 
   void
   GetScope(nsAString& aScope) const override;
 
   bool
   MatchesDescriptor(const ServiceWorkerRegistrationDescriptor& aDescriptor) override;
 
 public:
-  ServiceWorkerRegistrationProxy(ServiceWorkerRegistrationParent* aActor,
-                                 const ServiceWorkerRegistrationDescriptor& aDescriptor);
+  explicit ServiceWorkerRegistrationProxy(const ServiceWorkerRegistrationDescriptor& aDescriptor);
+
+  void
+  Init(ServiceWorkerRegistrationParent* aActor);
 
   void
   RevokeActor(ServiceWorkerRegistrationParent* aActor);
 
   RefPtr<GenericPromise>
   Unregister();
 
   RefPtr<ServiceWorkerRegistrationPromise>
