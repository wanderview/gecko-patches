# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  cc79acbc543721fd5fa03679a42df6cc737c1047

diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -30,22 +30,27 @@ NS_IMPL_CYCLE_COLLECTION_INHERITED(Servi
 
 NS_IMPL_ADDREF_INHERITED(ServiceWorkerRegistration, DOMEventTargetHelper)
 NS_IMPL_RELEASE_INHERITED(ServiceWorkerRegistration, DOMEventTargetHelper)
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(ServiceWorkerRegistration)
   NS_INTERFACE_MAP_ENTRY(ServiceWorkerRegistration)
 NS_INTERFACE_MAP_END_INHERITING(DOMEventTargetHelper)
 
+namespace {
+const uint64_t kNoInstallingWorkerId = 0;
+} // anonymous namespace
+
 ServiceWorkerRegistration::ServiceWorkerRegistration(nsIGlobalObject* aGlobal,
                                                      const ServiceWorkerRegistrationDescriptor& aDescriptor,
                                                      ServiceWorkerRegistration::Inner* aInner)
   : DOMEventTargetHelper(aGlobal)
   , mDescriptor(aDescriptor)
   , mInner(aInner)
+  , mInstallingWorkerId(kNoInstallingWorkerId)
 {
   MOZ_DIAGNOSTIC_ASSERT(mInner);
 
   KeepAliveIfHasListenersFor(NS_LITERAL_STRING("updatefound"));
 
   UpdateState(mDescriptor);
   mInner->SetServiceWorkerRegistration(this);
 }
@@ -327,16 +332,49 @@ ServiceWorkerRegistration::GetNotificati
 
 const ServiceWorkerRegistrationDescriptor&
 ServiceWorkerRegistration::Descriptor() const
 {
   return mDescriptor;
 }
 
 void
+ServiceWorkerRegistration::MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor)
+{
+  uint64_t newId = aInstallingDescriptor.isSome()
+                 ? aInstallingDescriptor.ref().Id()
+                 : kNoInstallingWorkerId;
+
+  bool updateFound = newId != kNoInstallingWorkerId &&
+                     mInstallingWorkerId != newId;
+  mInstallingWorkerId = newId;
+
+  if (!updateFound) {
+    return;
+  }
+
+  nsIGlobalObject* global = GetParentObject();
+  NS_ENSURE_TRUE_VOID(global);
+
+  nsCOMPtr<nsIRunnable> r = NewCancelableRunnableMethod(
+    "ServiceWorkerRegistration::UpdateState",
+    this,
+    &ServiceWorkerRegistration::DispatchUpdateFound);
+
+  Unused << global->EventTargetFor(TaskCategory::Other)->Dispatch(
+    r.forget(), NS_DISPATCH_NORMAL);
+}
+
+void
+ServiceWorkerRegistration::DispatchUpdateFound()
+{
+  DispatchTrustedEvent(NS_LITERAL_STRING("updatefound"));
+}
+
+void
 ServiceWorkerRegistration::UpdateStateInternal(const Maybe<ServiceWorkerDescriptor>& aInstalling,
                                                const Maybe<ServiceWorkerDescriptor>& aWaiting,
                                                const Maybe<ServiceWorkerDescriptor>& aActive)
 {
   // Move the currently exposed workers into a separate list
   // of "old" workers.  We will then potentially add them
   // back to the registration properties below based on the
   // given descriptor.  Any that are not restored will need
@@ -383,16 +421,18 @@ ServiceWorkerRegistration::UpdateStateIn
       if (!oldWorker) {
         continue;
       }
 
       oldWorker->MaybeDispatchStateChangeEvent();
     }
   });
 
+  MaybeScheduleUpdateFound(mDescriptor.GetInstalling());
+
   // Clear all workers if the registration has been detached from the global.
   // Also, we cannot expose ServiceWorker objects on worker threads yet, so
   // do the same on when off-main-thread.  This main thread check should be
   // removed as part of bug 1113522.
   nsCOMPtr<nsIGlobalObject> global = GetParentObject();
   if (!global || !NS_IsMainThread()) {
     return;
   }
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -126,23 +126,31 @@ private:
 
   ~ServiceWorkerRegistration();
 
   void
   UpdateStateInternal(const Maybe<ServiceWorkerDescriptor>& aInstalling,
                       const Maybe<ServiceWorkerDescriptor>& aWaiting,
                       const Maybe<ServiceWorkerDescriptor>& aActive);
 
+  void
+  MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor);
+
+  void
+  DispatchUpdateFound();
+
   ServiceWorkerRegistrationDescriptor mDescriptor;
   RefPtr<Inner> mInner;
 
   RefPtr<ServiceWorker> mInstallingWorker;
   RefPtr<ServiceWorker> mWaitingWorker;
   RefPtr<ServiceWorker> mActiveWorker;
   RefPtr<PushManager> mPushManager;
+
+  uint64_t mInstallingWorkerId;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(ServiceWorkerRegistration, NS_DOM_SERVICEWORKERREGISTRATION_IID)
 
 } // namespace dom
 } // namespace mozilla
 
 #endif /* mozilla_dom_ServiceWorkerRegistration_h */
