# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  96492ade8eb6930f859a022831ed6448c8b16063
Bug 1239113 P1 Rename nsIServiceWorkerManager.propagateSoftUpdate() to requestSoftUpdate(). r=ehsan

diff --git a/b2g/components/AboutServiceWorkers.jsm b/b2g/components/AboutServiceWorkers.jsm
--- a/b2g/components/AboutServiceWorkers.jsm
+++ b/b2g/components/AboutServiceWorkers.jsm
@@ -126,17 +126,17 @@ this.AboutServiceWorkers = {
         }
 
         if (!message.principal ||
             !message.principal.originAttributes) {
           self.sendError(message.id, "MissingOriginAttributes");
           return;
         }
 
-        gServiceWorkerManager.propagateSoftUpdate(
+        gServiceWorkerManager.requestSoftUpdate(
           message.principal.originAttributes,
           message.scope
         );
 
         self.sendResult(message.id, true);
         break;
 
       case "unregister":
diff --git a/b2g/components/test/unit/test_aboutserviceworkers.js b/b2g/components/test/unit/test_aboutserviceworkers.js
--- a/b2g/components/test/unit/test_aboutserviceworkers.js
+++ b/b2g/components/test/unit/test_aboutserviceworkers.js
@@ -123,20 +123,20 @@ function run_test() {
 // registrations are not allowed.
 // All we can do for now is to test the interface of the swm.
 add_test(function test_swm() {
   do_check_true(gServiceWorkerManager, "SWM exists");
   do_check_true(gServiceWorkerManager.getAllRegistrations,
                 "SWM.getAllRegistrations exists");
   do_check_true(typeof gServiceWorkerManager.getAllRegistrations == "function",
                 "SWM.getAllRegistrations is a function");
-  do_check_true(gServiceWorkerManager.propagateSoftUpdate,
-                "SWM.propagateSoftUpdate exists");
-  do_check_true(typeof gServiceWorkerManager.propagateSoftUpdate == "function",
+  do_check_true(gServiceWorkerManager.requestSoftUpdate,
+                "SWM.requestSoftUpdate exists");
+  do_check_true(typeof gServiceWorkerManager.requestSoftUpdate == "function",
 
-                "SWM.propagateSoftUpdate is a function");
+                "SWM.requestSoftUpdate is a function");
   do_check_true(gServiceWorkerManager.propagateUnregister,
                 "SWM.propagateUnregister exists");
   do_check_true(typeof gServiceWorkerManager.propagateUnregister == "function",
                 "SWM.propagateUnregister exists");
 
   run_next_test();
 });
diff --git a/dom/interfaces/base/nsIServiceWorkerManager.idl b/dom/interfaces/base/nsIServiceWorkerManager.idl
--- a/dom/interfaces/base/nsIServiceWorkerManager.idl
+++ b/dom/interfaces/base/nsIServiceWorkerManager.idl
@@ -68,17 +68,17 @@ interface nsIServiceWorkerRegistrationIn
 [scriptable, uuid(9e523e7c-ad6f-4df0-8077-c74aebbc679d)]
 interface nsIServiceWorkerManagerListener : nsISupports
 {
   void onRegister(in nsIServiceWorkerRegistrationInfo aInfo);
 
   void onUnregister(in nsIServiceWorkerRegistrationInfo aInfo);
 };
 
-[scriptable, builtinclass, uuid(12381ddf-9b51-4c0a-9123-9e7754393a5a)]
+[scriptable, builtinclass, uuid(ea04f1b5-a62b-4365-a817-b3b93fb65313)]
 interface nsIServiceWorkerManager : nsISupports
 {
   /**
    * Registers a ServiceWorker with script loaded from `aScriptURI` to act as
    * the ServiceWorker for aScope.  Requires a valid entry settings object on
    * the stack. This means you must call this from content code 'within'
    * a window.
    *
@@ -154,19 +154,21 @@ interface nsIServiceWorkerManager : nsIS
   // Testing
   DOMString getScopeForUrl(in nsIPrincipal aPrincipal, in DOMString aPath);
 
   // Note: This is meant to be used only by about:serviceworkers.
   // It returns an array of nsIServiceWorkerRegistrationInfos.
   nsIArray getAllRegistrations();
 
   // Note: This is meant to be used only by about:serviceworkers.
-  // It calls softUpdate() for each child process.
-  [implicit_jscontext] void propagateSoftUpdate(in jsval aOriginAttributes,
-                                                in DOMString aScope);
+  // It calls softUpdate() in the current process if the origin's
+  // appId matches the current process appId.  Otherwise it dispatches
+  // the update to the first child process found with the matching appId.
+  [implicit_jscontext] void requestSoftUpdate(in jsval aOriginAttributes,
+                                              in DOMString aScope);
 
   // Note: This is meant to be used only by about:serviceworkers.
   // It calls unregister() in each child process. The callback is used to
   // inform when unregister() is completed on the current process.
   void propagateUnregister(in nsIPrincipal aPrincipal,
                            in nsIServiceWorkerUnregisterCallback aCallback,
                            in DOMString aScope);
 
diff --git a/dom/workers/ServiceWorkerManager.cpp b/dom/workers/ServiceWorkerManager.cpp
--- a/dom/workers/ServiceWorkerManager.cpp
+++ b/dom/workers/ServiceWorkerManager.cpp
@@ -4722,19 +4722,19 @@ ServiceWorkerManager::Observe(nsISupport
     return NS_OK;
   }
 
   MOZ_CRASH("Received message we aren't supposed to be registered for!");
   return NS_OK;
 }
 
 NS_IMETHODIMP
-ServiceWorkerManager::PropagateSoftUpdate(JS::Handle<JS::Value> aOriginAttributes,
-                                          const nsAString& aScope,
-                                          JSContext* aCx)
+ServiceWorkerManager::RequestSoftUpdate(JS::Handle<JS::Value> aOriginAttributes,
+                                        const nsAString& aScope,
+                                        JSContext* aCx)
 {
   AssertIsOnMainThread();
 
   PrincipalOriginAttributes attrs;
   if (!aOriginAttributes.isObject() || !attrs.Init(aCx, aOriginAttributes)) {
     return NS_ERROR_INVALID_ARG;
   }
 
diff --git a/dom/workers/test/serviceworkers/test_aboutserviceworkers.html b/dom/workers/test/serviceworkers/test_aboutserviceworkers.html
--- a/dom/workers/test/serviceworkers/test_aboutserviceworkers.html
+++ b/dom/workers/test/serviceworkers/test_aboutserviceworkers.html
@@ -47,17 +47,17 @@ function update() {
 
     for (let i = 0; i < registrations.length; i++) {
       let registration = registrations.queryElementAt(i, Ci.nsIServiceWorkerRegistrationInfo);
       if (!registration) {
         reject();
         return;
       }
       info('Update service worker registration');
-      gServiceWorkerManager.propagateSoftUpdate(
+      gServiceWorkerManager.requestSoftUpdate(
         registration.principal.originAttributes,
         registration.scope
       );
     }
     resolve();
   });
 }
 
diff --git a/toolkit/content/aboutServiceWorkers.js b/toolkit/content/aboutServiceWorkers.js
--- a/toolkit/content/aboutServiceWorkers.js
+++ b/toolkit/content/aboutServiceWorkers.js
@@ -132,17 +132,17 @@ function display(info, pushService) {
         dump("about:serviceworkers - retrieving push registration failed\n");
       }
     });
   }
 
   let updateButton = document.createElement("button");
   updateButton.appendChild(document.createTextNode(bundle.GetStringFromName('update')));
   updateButton.onclick = function() {
-    gSWM.propagateSoftUpdate(info.principal.originAttributes, info.scope);
+    gSWM.requestSoftUpdate(info.principal.originAttributes, info.scope);
   };
   div.appendChild(updateButton);
 
   let unregisterButton = document.createElement("button");
   unregisterButton.appendChild(document.createTextNode(bundle.GetStringFromName('unregister')));
   div.appendChild(unregisterButton);
 
   let loadingMessage = document.createElement('span');
