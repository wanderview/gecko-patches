# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  974b0d43314f7b13c89c2d9d6ce15e60e8998597

diff --git a/dom/clients/manager/ClientHandle.cpp b/dom/clients/manager/ClientHandle.cpp
--- a/dom/clients/manager/ClientHandle.cpp
+++ b/dom/clients/manager/ClientHandle.cpp
@@ -154,17 +154,17 @@ ClientHandle::PostMessage(StructuredClon
   // TODO: Ideally we should be able to wait for the actor to initialize,
   //       but for now just fail the postMessage() if its not ready.  We
   //       need a RefCounted version of the StructuredCloneData in order
   //       to capture it in the lambda here.
   if (!GetActor() ||
       !aData.BuildClonedMessageDataForBackgroundChild(GetActor()->Manager()->Manager(),
                                                       args.clonedData())) {
     ref = GenericPromise::CreateAndReject(NS_ERROR_DOM_INVALID_STATE_ERR, __func__);
-    ref.forget();
+    return ref.forget();
   }
 
   RefPtr<GenericPromise::Private> outerPromise =
     new GenericPromise::Private(__func__);
 
   RefPtr<ClientOpPromise> innerPromise = StartOp(args);
   innerPromise->Then(AbstractThread::GetCurrent(), __func__,
     [outerPromise](const ClientOpResult& aResult) {
diff --git a/dom/clients/manager/ClientThing.h b/dom/clients/manager/ClientThing.h
--- a/dom/clients/manager/ClientThing.h
+++ b/dom/clients/manager/ClientThing.h
@@ -24,17 +24,17 @@ class ClientThing
   };
 
   template <typename Callable>
   class TaskImpl final : public Task
   {
     Callable mCallable;
 
   public:
-    explicit TaskImpl(Callable aCallable)
+    explicit TaskImpl(const Callable& aCallable)
       : mCallable(aCallable)
     { }
 
     void
     Execute(ActorType* aActor) override
     {
       MOZ_DIAGNOSTIC_ASSERT(aActor);
       mCallable(aActor);
@@ -66,17 +66,17 @@ protected:
   bool
   IsShutdown() const
   {
     return mShutdown;
   }
 
   template<typename Callable>
   void
-  MaybeExecute(Callable aCallable)
+  MaybeExecute(const Callable& aCallable)
   {
     if (mShutdown) {
       return;
     }
     mTaskList.AppendElement(new TaskImpl<Callable>(aCallable));
     MaybeExecuteTaskList();
   }
 
