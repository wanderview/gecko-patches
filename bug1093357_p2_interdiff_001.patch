# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  7ab4c6848bb44d12a77f6f7652207a90838a6ecb
Bug 1093357 P2 interdiff 001 address review feedback

diff --git a/ipc/glue/InputStreamParamsOrSendStream.ipdlh b/ipc/glue/InputStreamParamsWithFdsOrSendStream.ipdlh
rename from ipc/glue/InputStreamParamsOrSendStream.ipdlh
rename to ipc/glue/InputStreamParamsWithFdsOrSendStream.ipdlh
--- a/ipc/glue/InputStreamParamsOrSendStream.ipdlh
+++ b/ipc/glue/InputStreamParamsWithFdsOrSendStream.ipdlh
@@ -3,23 +3,28 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 include protocol PSendStream;
 include InputStreamParams;
 
 namespace mozilla {
 namespace ipc {
 
-struct InputStreamParamsOrSendStream
+struct InputStreamParamsWithFds
 {
-  OptionalInputStreamParams optionalStream;
+  InputStreamParams stream;
   OptionalFileDescriptorSet optionalFds;
-  nullable PSendStream optionalSendStream;
 };
 
-union OptionalInputStreamParamsOrSendStream
+union InputStreamParamsWithFdsOrSendStream
 {
-  InputStreamParamsOrSendStream;
+  InputStreamParamsWithFds;
+  PSendStream;
+};
+
+union OptionalInputStreamParamsWithFdsOrSendStream
+{
+  InputStreamParamsWithFdsOrSendStream;
   void_t;
 };
 
 } // namespace ipc
 } // namespace mozilla
diff --git a/ipc/glue/InputStreamUtils.cpp b/ipc/glue/InputStreamUtils.cpp
--- a/ipc/glue/InputStreamUtils.cpp
+++ b/ipc/glue/InputStreamUtils.cpp
@@ -184,24 +184,24 @@ DeserializeInputStream(const OptionalInp
       MOZ_ASSERT(false, "Unknown params!");
   }
 
   return stream.forget();
 }
 
 namespace {
 
-// The SerializeOrSendInputStream() and CleanupSendInputStreamParamsOrSendStream
+// The SerializeOrSendInputStream() and CleanupSendInputStreamParamsWithFdsOrSendStream
 // functions could be externally exposed.  For now, though, keep them private
 // to encourage use of the safer RAII AutoIPCStreamChild class.
 
 template<typename M>
 void
 SerializeOrSendInputStream(nsIInputStream* aStream,
-                           InputStreamParamsOrSendStream& aValue,
+                           InputStreamParamsWithFdsOrSendStream& aValue,
                            M* aManager)
 {
   MOZ_ASSERT(aStream);
   MOZ_ASSERT(aManager);
 
   // First attempt simple stream serialization
   nsCOMPtr<nsIIPCSerializableInputStream> serializable =
     do_QueryInterface(aStream);
@@ -210,190 +210,205 @@ SerializeOrSendInputStream(nsIInputStrea
     AutoTArray<FileDescriptor, 4> fds;
 
     serializable->Serialize(params, fds);
 
     if (params.type() == InputStreamParams::T__None) {
       MOZ_CRASH("Serialize failed!");
     }
 
-    aValue.optionalStream() = params;
+    InputStreamParamsWithFds streamWithFds(params, void_t());
 
     if (!fds.IsEmpty()) {
       PFileDescriptorSetChild* fdSet =
         aManager->SendPFileDescriptorSetConstructor(fds[0]);
       for (uint32_t i = 1; i < fds.Length(); ++i) {
         Unused << fdSet->SendAddFileDescriptor(fds[i]);
       }
 
-      aValue.optionalFds() = fdSet;
+      streamWithFds.optionalFds() = fdSet;
     }
 
+    aValue = streamWithFds;
+
     return;
   }
 
   // As a fallback, attempt to stream the data across using a SendStream
   // actor.  This will fail for blocking streams.
   nsCOMPtr<nsIAsyncInputStream> asyncStream = do_QueryInterface(aStream);
-  aValue.optionalSendStreamChild() =
-    SendStreamChild::Create(asyncStream, aManager);
+  aValue = SendStreamChild::Create(asyncStream, aManager);
 
-  if (!aValue.optionalSendStreamChild()) {
+  if (!aValue.get_PSendStreamChild()) {
     MOZ_CRASH("SendStream creation failed!");
   }
 }
 
 template<typename M>
 void
 SerializeOrSendInputStream(nsIInputStream* aStream,
-                           OptionalInputStreamParamsOrSendStream& aValue,
+                           OptionalInputStreamParamsWithFdsOrSendStream& aValue,
                            M* aManager)
 {
   if (!aStream) {
     aValue = void_t();
     return;
   }
 
-  aValue = InputStreamParamsOrSendStream(void_t(), void_t(), nullptr, nullptr);
-  SerializeOrSendInputStream(aStream, aValue.get_InputStreamParamsOrSendStream(),
+  aValue = InputStreamParamsWithFdsOrSendStream();
+  SerializeOrSendInputStream(aStream, aValue.get_InputStreamParamsWithFdsOrSendStream(),
                              aManager);
 }
 
 void
-CleanupInputStreamParamsOrSendStream(InputStreamParamsOrSendStream& aValue,
-                                     bool aConsumedByIPC)
+CleanupInputStreamParamsWithFdsOrSendStream(InputStreamParamsWithFdsOrSendStream& aValue,
+                                            bool aConsumedByIPC)
 {
-  // Cleanup file descriptors if necessary
-  if (aValue.optionalFds().type() ==
-      OptionalFileDescriptorSet::TPFileDescriptorSetChild) {
+  if (aValue.type() == InputStreamParamsWithFdsOrSendStream::TInputStreamParamsWithFds) {
 
-    AutoTArray<FileDescriptor, 4> fds;
+    InputStreamParamsWithFds& streamWithFds =
+      aValue.get_InputStreamParamsWithFds();
 
-    FileDescriptorSetChild* fdSetActor = static_cast<FileDescriptorSetChild*>(
-      aValue.optionalFds().get_PFileDescriptorSetChild());
-    MOZ_ASSERT(fdSetActor);
+    // Cleanup file descriptors if necessary
+    if (streamWithFds.optionalFds().type() ==
+        OptionalFileDescriptorSet::TPFileDescriptorSetChild) {
 
-    if (!aConsumedByIPC) {
-      Unused << fdSetActor->Send__delete__(fdSetActor);
+      AutoTArray<FileDescriptor, 4> fds;
+
+      FileDescriptorSetChild* fdSetActor = static_cast<FileDescriptorSetChild*>(
+        streamWithFds.optionalFds().get_PFileDescriptorSetChild());
+      MOZ_ASSERT(fdSetActor);
+
+      if (!aConsumedByIPC) {
+        Unused << fdSetActor->Send__delete__(fdSetActor);
+      }
+
+      // FileDescriptorSet doesn't clear its fds in its ActorDestroy, so we
+      // unconditionally forget them here.  The fds themselves are auto-closed in
+      // ~FileDescriptor since they originated in this process.
+      fdSetActor->ForgetFileDescriptors(fds);
     }
 
-    // FileDescriptorSet doesn't clear its fds in its ActorDestroy, so we
-    // unconditionally forget them here.  The fds themselves are auto-closed in
-    // ~FileDescriptor since they originated in this process.
-    fdSetActor->ForgetFileDescriptors(fds);
+    return;
   }
 
-  if (aValue.optionalSendStreamChild()) {
-    auto sendStream =
-      static_cast<SendStreamChild*>(aValue.optionalSendStreamChild());
+  MOZ_ASSERT(aValue.type() == InputStreamParamsWithFdsOrSendStream::TPSendStreamChild);
 
-    if (!aConsumedByIPC) {
-      sendStream->StartDestroy();
-      return;
-    }
+  auto sendStream =
+    static_cast<SendStreamChild*>(aValue.get_PSendStreamChild());
 
-    // If we the SendStream was taken to be sent to the parent, then we need to
-    // start it before forgetting about it.
-    sendStream->Start();
+  if (!aConsumedByIPC) {
+    sendStream->StartDestroy();
+    return;
   }
+
+  // If the SendStream was taken to be sent to the parent, then we need to
+  // start it before forgetting about it.
+  sendStream->Start();
 }
 
 void
-CleanupInputStreamParamsOrSendStream(OptionalInputStreamParamsOrSendStream& aValue,
-                                     bool aConsumedByIPC)
+CleanupInputStreamParamsWithFdsOrSendStream(OptionalInputStreamParamsWithFdsOrSendStream& aValue,
+                                            bool aConsumedByIPC)
 {
-  if (aValue.type() == OptionalInputStreamParamsOrSendStream::Tvoid_t) {
+  if (aValue.type() == OptionalInputStreamParamsWithFdsOrSendStream::Tvoid_t) {
     return;
   }
 
-  CleanupInputStreamParamsOrSendStream(aValue.get_InputStreamParamsOrSendStream(),
+  CleanupInputStreamParamsWithFdsOrSendStream(aValue.get_InputStreamParamsWithFdsOrSendStream(),
                                        aConsumedByIPC);
 }
 
 } // anonymous namespace
 
 already_AddRefed<nsIInputStream>
-DeserializeInputStream(const InputStreamParamsOrSendStream& aValue)
+DeserializeInputStream(const InputStreamParamsWithFdsOrSendStream& aValue)
 {
-  auto sendStream =
-    static_cast<SendStreamParent*>(aValue.optionalSendStreamParent());
-  if (sendStream) {
+  if (aValue.type() == InputStreamParamsWithFdsOrSendStream::TPSendStreamParent) {
+    auto sendStream =
+      static_cast<SendStreamParent*>(aValue.get_PSendStreamParent());
     return sendStream->TakeReader();
   }
 
+  MOZ_ASSERT(aValue.type() ==
+             InputStreamParamsWithFdsOrSendStream::TInputStreamParamsWithFds);
+
+  const InputStreamParamsWithFds& streamWithFds =
+    aValue.get_InputStreamParamsWithFds();
+
   AutoTArray<FileDescriptor, 4> fds;
-  if (aValue.optionalFds().type() ==
+  if (streamWithFds.optionalFds().type() ==
       OptionalFileDescriptorSet::TPFileDescriptorSetParent) {
 
     FileDescriptorSetParent* fdSetActor = static_cast<FileDescriptorSetParent*>(
-      aValue.optionalFds().get_PFileDescriptorSetParent());
+      streamWithFds.optionalFds().get_PFileDescriptorSetParent());
     MOZ_ASSERT(fdSetActor);
 
     fdSetActor->ForgetFileDescriptors(fds);
     MOZ_ASSERT(!fds.IsEmpty());
 
     if (!fdSetActor->Send__delete__(fdSetActor)) {
       // child process is gone, warn and allow actor to clean up normally
       NS_WARNING("Failed to delete fd set actor.");
     }
   }
 
-  return DeserializeInputStream(aValue.optionalStream(), fds);
+  return DeserializeInputStream(streamWithFds.stream(), fds);
 }
 
 already_AddRefed<nsIInputStream>
-DeserializeInputStream(const OptionalInputStreamParamsOrSendStream& aValue)
+DeserializeInputStream(const OptionalInputStreamParamsWithFdsOrSendStream& aValue)
 {
-  if (aValue.type() == OptionalInputStreamParamsOrSendStream::Tvoid_t) {
+  if (aValue.type() == OptionalInputStreamParamsWithFdsOrSendStream::Tvoid_t) {
     return nullptr;
   }
 
-  return DeserializeInputStream(aValue.get_InputStreamParamsOrSendStream());
+  return DeserializeInputStream(aValue.get_InputStreamParamsWithFdsOrSendStream());
 }
 
 AutoIPCStreamChild::AutoIPCStreamChild()
   : mInlineValue(void_t())
   , mValue(nullptr)
   , mOptionalValue(&mInlineValue)
   , mTaken(false)
 {
 }
 
-AutoIPCStreamChild::AutoIPCStreamChild(InputStreamParamsOrSendStream& aTarget)
+AutoIPCStreamChild::AutoIPCStreamChild(InputStreamParamsWithFdsOrSendStream& aTarget)
   : mInlineValue(void_t())
   , mValue(&aTarget)
   , mOptionalValue(nullptr)
   , mTaken(false)
 {
-  *mValue = InputStreamParamsOrSendStream(void_t(), void_t(), nullptr, nullptr);
 }
 
-AutoIPCStreamChild::AutoIPCStreamChild(OptionalInputStreamParamsOrSendStream& aTarget)
+AutoIPCStreamChild::AutoIPCStreamChild(OptionalInputStreamParamsWithFdsOrSendStream& aTarget)
   : mInlineValue(void_t())
   , mValue(nullptr)
   , mOptionalValue(&aTarget)
   , mTaken(false)
 {
   *mOptionalValue = void_t();
 }
 
 AutoIPCStreamChild::~AutoIPCStreamChild()
 {
   MOZ_ASSERT(mValue || mOptionalValue);
-  if (mValue) {
-    CleanupInputStreamParamsOrSendStream(*mValue, mTaken);
+  if (mValue && IsSet()) {
+    CleanupInputStreamParamsWithFdsOrSendStream(*mValue, mTaken);
   } else {
-    CleanupInputStreamParamsOrSendStream(*mOptionalValue, mTaken);
+    CleanupInputStreamParamsWithFdsOrSendStream(*mOptionalValue, mTaken);
   }
 }
 
 void
 AutoIPCStreamChild::SerializeOrSend(nsIInputStream* aStream,
                                     PContentChild* aManager)
 {
+  MOZ_ASSERT(aStream);
   MOZ_ASSERT(aManager);
   MOZ_ASSERT(mValue || mOptionalValue);
   MOZ_ASSERT(!mTaken);
   MOZ_ASSERT(!IsSet());
 
   if (mValue) {
     SerializeOrSendInputStream(aStream, *mValue, aManager);
   } else {
@@ -418,58 +433,70 @@ AutoIPCStreamChild::SerializeOrSend(nsII
   }
 }
 
 bool
 AutoIPCStreamChild::IsSet() const
 {
   MOZ_ASSERT(mValue || mOptionalValue);
   if (mValue) {
-    return mValue->optionalSendStreamChild() != nullptr ||
-           mValue->optionalStream().type() != OptionalInputStreamParams::Tvoid_t;
+    return mValue->type() != InputStreamParamsWithFdsOrSendStream::T__None;
   } else {
     return mOptionalValue->type() !=
-           OptionalInputStreamParamsOrSendStream::Tvoid_t;
+           OptionalInputStreamParamsWithFdsOrSendStream::Tvoid_t;
   }
 }
 
-InputStreamParamsOrSendStream&
+namespace {
+
+void
+AssertValidValueToTake(const InputStreamParamsWithFdsOrSendStream& aVal)
+{
+  MOZ_ASSERT(aVal.type() == InputStreamParamsWithFdsOrSendStream::TPSendStreamChild ||
+             aVal.type() == InputStreamParamsWithFdsOrSendStream::TInputStreamParamsWithFds);
+}
+
+void
+AssertValidValueToTake(const OptionalInputStreamParamsWithFdsOrSendStream& aVal)
+{
+  MOZ_ASSERT(aVal.type() == OptionalInputStreamParamsWithFdsOrSendStream::Tvoid_t ||
+             aVal.type() == OptionalInputStreamParamsWithFdsOrSendStream::TInputStreamParamsWithFdsOrSendStream);
+  if (aVal.type() == OptionalInputStreamParamsWithFdsOrSendStream::TInputStreamParamsWithFdsOrSendStream) {
+    AssertValidValueToTake(aVal.get_InputStreamParamsWithFdsOrSendStream());
+  }
+}
+
+} // anonymous namespace
+
+InputStreamParamsWithFdsOrSendStream&
 AutoIPCStreamChild::TakeValue()
 {
   MOZ_ASSERT(mValue || mOptionalValue);
   MOZ_ASSERT(!mTaken);
   MOZ_ASSERT(IsSet());
 
   mTaken = true;
 
   if (mValue) {
+    AssertValidValueToTake(*mValue);
     return *mValue;
   }
 
-  InputStreamParamsOrSendStream& value =
-    mOptionalValue->get_InputStreamParamsOrSendStream();
+  InputStreamParamsWithFdsOrSendStream& value =
+    mOptionalValue->get_InputStreamParamsWithFdsOrSendStream();
 
-  // We should never have the parent SendStream actor set on the child side.
-  MOZ_ASSERT(value.optionalSendStreamParent() == nullptr);
-
-  // We must have a send stream actor or a serialized stream
-  MOZ_ASSERT(value.optionalSendStreamChild() != nullptr ||
-             value.optionalStream().type() != OptionalInputStreamParams::Tvoid_t);
-
-  // If the file descriptors are set, then we must have a serialized stream.
-  MOZ_ASSERT_IF(value.optionalFds().type() != OptionalFileDescriptorSet::Tvoid_t,
-                value.optionalStream().type() != OptionalInputStreamParams::Tvoid_t);
-
+  AssertValidValueToTake(value);
   return value;
 }
 
-OptionalInputStreamParamsOrSendStream&
+OptionalInputStreamParamsWithFdsOrSendStream&
 AutoIPCStreamChild::TakeOptionalValue()
 {
   MOZ_ASSERT(!mTaken);
   MOZ_ASSERT(!mValue);
   MOZ_ASSERT(mOptionalValue);
   mTaken = true;
+  AssertValidValueToTake(*mOptionalValue);
   return *mOptionalValue;
 }
 
 } // namespace ipc
 } // namespace mozilla
diff --git a/ipc/glue/InputStreamUtils.h b/ipc/glue/InputStreamUtils.h
--- a/ipc/glue/InputStreamUtils.h
+++ b/ipc/glue/InputStreamUtils.h
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_ipc_InputStreamUtils_h
 #define mozilla_ipc_InputStreamUtils_h
 
 #include "mozilla/ipc/InputStreamParams.h"
-#include "mozilla/ipc/InputStreamParamsOrSendStream.h"
+#include "mozilla/ipc/InputStreamParamsWithFdsOrSendStream.h"
 #include "nsCOMPtr.h"
 #include "nsIInputStream.h"
 #include "nsTArray.h"
 
 namespace mozilla {
 
 namespace dom {
 class PContentChild;
@@ -36,100 +36,100 @@ already_AddRefed<nsIInputStream>
 DeserializeInputStream(const InputStreamParams& aParams,
                        const nsTArray<FileDescriptor>& aFileDescriptors);
 
 already_AddRefed<nsIInputStream>
 DeserializeInputStream(const OptionalInputStreamParams& aParams,
                        const nsTArray<FileDescriptor>& aFileDescriptors);
 
 already_AddRefed<nsIInputStream>
-DeserializeInputStream(const InputStreamParamsOrSendStream& aValue);
+DeserializeInputStream(const InputStreamParamsWithFdsOrSendStream& aValue);
 
 already_AddRefed<nsIInputStream>
-DeserializeInputStream(const OptionalInputStreamParamsOrSendStream& aValue);
+DeserializeInputStream(const OptionalInputStreamParamsWithFdsOrSendStream& aValue);
 
 // RAII helper class that serializes an nsIInputStream into an
-// InputStreamParamsOrSendStream IPC struct.  Any SendStreamChild actors
+// InputStreamParamsWithFdsOrSendStream IPC struct.  Any SendStreamChild actors
 // are automatically managed correctly.
 //
 // Use the TakeValue() method when passing the value (or just after passing the
 // value) to the IPC Send*() method.
 //
 // For example:
 //
 //  AutoIPCStreamChild streamChild();
 //  streamChild.SerializeOrSend(inputStream, actor->Manager());
 //  actor->SendData(streamChild.TakeValue());
 //
-// If you need to manage an InputStreamParamsOrSendStream struct embedded in
+// If you need to manage an InputStreamParamsWithFdsOrSendStream struct embedded in
 // another type, you can create the AutoIPCStreamChild around the existing
 // struct like this:
 //
 //  MyIPCStruct data;
 //  AutoIpcStreamChild streamChild(data.myStream());
 //  streamChild.SerializeOrSend(inputStream, actor->Manager());
 //  actor->SendData(data);
 //  streamChild.TakeValue();
 //
-// The AutoIPCStreamChild class also supports OptionalInputStreamParamsOrSendStream
+// The AutoIPCStreamChild class also supports OptionalInputStreamParamsWithFdsOrSendStream
 // values.  As long as you did not initialize the object with a non-optional
-// InputStreamParamsOrSendStream, you can call TakeOptionalValue() instead.
+// InputStreamParamsWithFdsOrSendStream, you can call TakeOptionalValue() instead.
 //
 // Like SerializeInputStream(), the AutoIPCStreamChild will crash if
 // serialization cannot be completed.  Currently, this should only
 // occur if the nsIInputStream cannot be serialized and is also blocking.
 //
 class MOZ_STACK_CLASS AutoIPCStreamChild final
 {
-  OptionalInputStreamParamsOrSendStream mInlineValue;
-  InputStreamParamsOrSendStream* mValue;
-  OptionalInputStreamParamsOrSendStream* mOptionalValue;
+  OptionalInputStreamParamsWithFdsOrSendStream mInlineValue;
+  InputStreamParamsWithFdsOrSendStream* mValue;
+  OptionalInputStreamParamsWithFdsOrSendStream* mOptionalValue;
   bool mTaken;
 
   bool
   IsSet() const;
 
 public:
-  // Implicitly create an OptionalInputStreamParamsOrSendStream value.  Either
+  // Implicitly create an OptionalInputStreamParamsWithFdsOrSendStream value.  Either
   // TakeValue() or TakeOptionalValue() can be used.
   AutoIPCStreamChild();
 
-  // Wrap an existing InputStreamParamsOrSendStream.  Only TakeValue() may be
+  // Wrap an existing InputStreamParamsWithFdsOrSendStream.  Only TakeValue() may be
   // used.  If a nullptr nsIInputStream is passed to SerializeOrSend() then
   // a crash will be forced.
-  explicit AutoIPCStreamChild(InputStreamParamsOrSendStream& aTarget);
+  explicit AutoIPCStreamChild(InputStreamParamsWithFdsOrSendStream& aTarget);
 
-  // Wrap an existing OptionalInputStreamParamsOrSendStream.  Either TakeValue()
+  // Wrap an existing OptionalInputStreamParamsWithFdsOrSendStream.  Either TakeValue()
   // or TakeOptionalValue can be used.
-  explicit AutoIPCStreamChild(OptionalInputStreamParamsOrSendStream& aTarget);
+  explicit AutoIPCStreamChild(OptionalInputStreamParamsWithFdsOrSendStream& aTarget);
 
   ~AutoIPCStreamChild();
 
   // Serialize the input stream or create a SendStream actor using the PContent
   // manager.  If neither of these succeed, then crash.  This should only be
   // used on the main thread.
   void
   SerializeOrSend(nsIInputStream* aStream, dom::PContentChild* aManager);
 
   // Serialize the input stream or create a SendStream actor using the
   // PBackground manager.  If neither of these succeed, then crash.  This can
   // be called on the main thread or Worker threads.
   void
   SerializeOrSend(nsIInputStream* aStream, PBackgroundChild* aManager);
 
-  // Get the InputStreamParamsOrSendStream as a non-optional value.  This will
+  // Get the InputStreamParamsWithFdsOrSendStream as a non-optional value.  This will
   // assert if a stream has not been serialized or if it has already been taken.
   // This should only be called if the value is being, or has already been, sent
   // to the parent
-  InputStreamParamsOrSendStream&
+  InputStreamParamsWithFdsOrSendStream&
   TakeValue();
 
-  // Get the OptionalInputStreamParamsOrSendStream value.  This will assert if
+  // Get the OptionalInputStreamParamsWithFdsOrSendStream value.  This will assert if
   // the value has already been taken.  This should only be called if the value
   // is being, or has already been, sent to the parent
-  OptionalInputStreamParamsOrSendStream&
+  OptionalInputStreamParamsWithFdsOrSendStream&
   TakeOptionalValue();
 };
 
 } // namespace ipc
 } // namespace mozilla
 
 #endif // mozilla_ipc_InputStreamUtils_h
diff --git a/ipc/glue/moz.build b/ipc/glue/moz.build
--- a/ipc/glue/moz.build
+++ b/ipc/glue/moz.build
@@ -152,17 +152,17 @@ LOCAL_INCLUDES += [
     '/dom/indexedDB',
     '/dom/workers',
     '/media/webrtc/trunk',
     '/xpcom/build',
 ]
 
 IPDL_SOURCES = [
     'InputStreamParams.ipdlh',
-    'InputStreamParamsOrSendStream.ipdlh',
+    'InputStreamParamsWithFdsOrSendStream.ipdlh',
     'PBackground.ipdl',
     'PBackgroundSharedTypes.ipdlh',
     'PBackgroundTest.ipdl',
     'PFileDescriptorSet.ipdl',
     'PProcLoader.ipdl',
     'ProtocolTypes.ipdlh',
     'PSendStream.ipdl',
     'URIParams.ipdlh',
