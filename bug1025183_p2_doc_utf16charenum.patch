# HG changeset patch
# Parent b2169efd72c6ee811594ca00474f9efbf31d4b83
# User Ben Kelly <ben@wanderview.com>
Bug 1025183 P2 Document how UTF16CharEnumerator treats buffer position on error. r=bz

diff --git a/xpcom/string/nsUTF8Utils.h b/xpcom/string/nsUTF8Utils.h
--- a/xpcom/string/nsUTF8Utils.h
+++ b/xpcom/string/nsUTF8Utils.h
@@ -6,16 +6,17 @@
 #ifndef nsUTF8Utils_h_
 #define nsUTF8Utils_h_
 
 // This file may be used in two ways: if MOZILLA_INTERNAL_API is defined, this
 // file will provide signatures for the Mozilla abstract string types. It will
 // use XPCOM assertion/debugging macros, etc.
 
 #include "nscore.h"
+#include "mozilla/Assertions.h"
 #include "mozilla/SSE.h"
 
 #include "nsCharTraits.h"
 
 class UTF8traits
 {
 public:
   static bool isASCII(char aChar)
@@ -162,16 +163,21 @@ private:
   }
 };
 
 
 /**
  * Extract the next UCS-4 character from the buffer and return it.  The
  * pointer passed in is advanced to the start of the next character in the
  * buffer.  If non-null, the err parameter is filled in if an error occurs.
+ *
+ * If an error occurs that causes UCS2_REPLACEMENT_CHAR to be returned, then
+ * the buffer will be updated to move only a single UCS-2 character.
+ *
+ * Any other error returns 0 and does not move the buffer position.
  */
 
 
 class UTF16CharEnumerator
 {
 public:
   static uint32_t NextChar(const char16_t** aBuffer, const char16_t* aEnd,
                            bool* aErr = nullptr)
@@ -254,20 +260,17 @@ public:
       NS_WARNING("got a low Surrogate but no high surrogate");
       if (aErr) {
         *aErr = true;
       }
       *aBuffer = p;
       return 0xFFFD;
     }
 
-    if (aErr) {
-      *aErr = true;
-    }
-    return 0;
+    MOZ_ASSERT_UNREACHABLE("Impossible UCS-2 character value.");
   }
 };
 
 
 /**
  * A character sink (see |copy_string| in nsAlgorithm.h) for converting
  * UTF-8 to UTF-16
  */
