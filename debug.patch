# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  ddd77af08b8ab6dea4009c23f9116086e7d15985

diff --git a/dom/base/nsGlobalWindowInner.cpp b/dom/base/nsGlobalWindowInner.cpp
--- a/dom/base/nsGlobalWindowInner.cpp
+++ b/dom/base/nsGlobalWindowInner.cpp
@@ -1752,16 +1752,23 @@ nsGlobalWindowInner::EnsureClientSource(
       bool isBlob = false;
       ignoreLoadInfo = (NS_SUCCEEDED(uri->SchemeIs("data", &isData)) && isData) ||
                        (NS_SUCCEEDED(uri->SchemeIs("blob", &isBlob)) && isBlob);
     }
 
     if (!ignoreLoadInfo) {
       loadInfo = channel->GetLoadInfo();
     }
+
+    nsCOMPtr<nsIScriptSecurityManager> ssm = nsContentUtils::GetSecurityManager();
+    nsCOMPtr<nsIPrincipal> channelPrincipal;
+    Unused << ssm->GetChannelResultPrincipal(channel, getter_AddRefs(channelPrincipal));
+    if (channelPrincipal) {
+      MOZ_DIAGNOSTIC_ASSERT(channelPrincipal->Equals(mDoc->NodePrincipal()));
+    }
   }
 
   // Take the initial client source from the docshell immediately.  Even if we
   // don't end up using it here we should consume it.
   UniquePtr<ClientSource> initialClientSource;
   nsIDocShell* docshell = GetDocShell();
   if (docshell) {
     initialClientSource = docshell->TakeInitialClientSource();
diff --git a/dom/clients/manager/ClientSource.cpp b/dom/clients/manager/ClientSource.cpp
--- a/dom/clients/manager/ClientSource.cpp
+++ b/dom/clients/manager/ClientSource.cpp
@@ -368,16 +368,32 @@ ClientSource::WorkerSyncPing(WorkerPriva
   GetActor()->SendWorkerSyncPing();
 }
 
 void
 ClientSource::SetController(const ServiceWorkerDescriptor& aServiceWorker)
 {
   NS_ASSERT_OWNINGTHREAD(ClientSource);
 
+  if (!ClientMatchPrincipalInfo(mClientInfo.PrincipalInfo(),
+                                aServiceWorker.PrincipalInfo()) &&
+      NS_IsMainThread()) {
+    nsCOMPtr<nsIPrincipal> p1 = mClientInfo.GetPrincipal();
+    nsCOMPtr<nsIPrincipal> p2 = PrincipalInfoToPrincipal(aServiceWorker.PrincipalInfo());
+
+    nsAutoCString o1;
+    nsAutoCString o2;
+
+    p1->GetOrigin(o1);
+    p2->GetOrigin(o2);
+
+    printf_stderr("### ### [%p] ClientSource::%s principal mismatch client:%s serviceworker:%s\n",
+                  this, __func__, o1.get(), o2.get());
+  }
+
   // We should never have a cross-origin controller.  Since this would be
   // same-origin policy violation we do a full release assertion here.
   MOZ_RELEASE_ASSERT(ClientMatchPrincipalInfo(mClientInfo.PrincipalInfo(),
                                               aServiceWorker.PrincipalInfo()));
 
   // A client in private browsing mode should never be controlled by
   // a service worker.  The principal origin attributes should guarantee
   // this invariant.
