# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  dacfd5401d0987229d93f047519883d44030fc7c

diff --git a/dom/media/test/manifest.js b/dom/media/test/manifest.js
--- a/dom/media/test/manifest.js
+++ b/dom/media/test/manifest.js
@@ -1663,21 +1663,23 @@ function MediaTestManager() {
   // Don't call more than once per token.
   this.started = function(token, handler) {
     this.tokens.push(token);
     this.numTestsRunning++;
     this.handlers[token] = handler;
 
     var onTimeout = () => {
       this.hasTimeout = true;
+      dump('### ### token:' + token + ' timed out!\n');
       ok(false, `${token} timed out!`);
       this.finished(token);
     };
     // Default timeout to 180s for each test.
     this.timers[token] = setTimeout(onTimeout, 180000);
+    dump('### ### token:' + token + ' got timeout ID:' + this.timers[token] + '\n');
 
     is(this.numTestsRunning, this.tokens.length,
        "[started " + token + " t=" + elapsedTime(this.startTime) + "] Length of array should match number of running tests");
   }
 
   // Registers that the test corresponding to 'token' has finished. Call when
   // you've finished your test. If all tests are complete this will finish the
   // run, otherwise it may start up the next run. It's ok to call multiple times
@@ -1687,16 +1689,17 @@ function MediaTestManager() {
     if (i != -1) {
       // Remove the element from the list of running tests.
       this.tokens.splice(i, 1);
     }
 
     if (this.timers[token]) {
       // Cancel the timer when the test finishes.
       clearTimeout(this.timers[token]);
+      dump('### ### token:' + token + ' cleared timeout ID:' + this.timers[token] + '\n');
       this.timers[token] = null;
     }
 
     info("[finished " + token + "] remaining= " + this.tokens);
     this.numTestsRunning--;
     is(this.numTestsRunning, this.tokens.length,
        "[finished " + token + " t=" + elapsedTime(this.startTime) + "] Length of array should match number of running tests");
     if (this.tokens.length < PARALLEL_TESTS) {
