# HG changeset patch
# Parent ad7ac48023fb9353a109979bb866a49e94731985
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 027 ManagerId, PrincipalVerifier, and a few more CacheStorageParent issues

diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -33,44 +33,61 @@ using mozilla::ipc::PrincipalInfo;
 CacheStorageParent::CacheStorageParent(PBackgroundParent* aManagingActor,
                                        Namespace aNamespace,
                                        const PrincipalInfo& aPrincipalInfo)
   : mNamespace(aNamespace)
 {
   MOZ_COUNT_CTOR(cache::CacheStorageParent);
   MOZ_ASSERT(aManagingActor);
 
-  nsresult rv = PrincipalVerifier::Create(this, aManagingActor, aPrincipalInfo,
-                                          getter_AddRefs(mVerifier));
+  // Start the async principal verification process immediately.  If an
+  // error occurs here, just delete the actor causing all operations on
+  // the DOM object to reject.  This will be short lived since a failure
+  // here means we are shutting down.
+  //
+  // While we could delay starting verification until the first request,
+  // and therefore return the error code, this would also introduce
+  // latency in the first request.  Lets not pessimize typical operations
+  // for the handling of one rare corner condition.
+  nsresult rv = PrincipalVerifier::CreateAndDispatch(this, aManagingActor,
+                                                     aPrincipalInfo,
+                                                     getter_AddRefs(mVerifier));
   if (NS_WARN_IF(NS_FAILED(rv))) {
     unused << Send__delete__(this);
   }
 }
 
 CacheStorageParent::~CacheStorageParent()
 {
   MOZ_COUNT_DTOR(cache::CacheStorageParent);
+  MOZ_ASSERT(!mVerifier);
   MOZ_ASSERT(!mManager);
 }
 
 void
 CacheStorageParent::ActorDestroy(ActorDestroyReason aReason)
 {
+  if (mVerifier) {
+    mVerifier->ClearListener();
+    mVerifier = nullptr;
+  }
+
   if (mManager) {
     MOZ_ASSERT(!mActiveRequests.IsEmpty());
     mManager->RemoveListener(this);
     mManager = nullptr;
   }
 }
 
 bool
 CacheStorageParent::RecvMatch(const RequestId& aRequestId,
                               const PCacheRequest& aRequest,
                               const PCacheQueryParams& aParams)
 {
+  // queue requests if we are still waiting for principal verification
   if (!mManagerId) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mOp = OP_MATCH;
     entry->mRequestId = aRequestId;
     entry->mRequest = aRequest;
     entry->mParams = aParams;
     return true;
   }
@@ -87,16 +104,17 @@ CacheStorageParent::RecvMatch(const Requ
                         aParams);
 
   return true;
 }
 
 bool
 CacheStorageParent::RecvHas(const RequestId& aRequestId, const nsString& aKey)
 {
+  // queue requests if we are still waiting for principal verification
   if (!mManagerId) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mOp = OP_HAS;
     entry->mRequestId = aRequestId;
     entry->mKey = aKey;
     return true;
   }
 
@@ -110,16 +128,17 @@ CacheStorageParent::RecvHas(const Reques
   manager->StorageHas(this, aRequestId, mNamespace, aKey);
 
   return true;
 }
 
 bool
 CacheStorageParent::RecvOpen(const RequestId& aRequestId, const nsString& aKey)
 {
+  // queue requests if we are still waiting for principal verification
   if (!mManagerId) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mOp = OP_OPEN;
     entry->mRequestId = aRequestId;
     entry->mKey = aKey;
     return true;
   }
 
@@ -134,16 +153,17 @@ CacheStorageParent::RecvOpen(const Reque
 
   return true;
 }
 
 bool
 CacheStorageParent::RecvDelete(const RequestId& aRequestId,
                                const nsString& aKey)
 {
+  // queue requests if we are still waiting for principal verification
   if (!mManagerId) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mOp = OP_DELETE;
     entry->mRequestId = aRequestId;
     entry->mKey = aKey;
     return true;
   }
 
@@ -157,16 +177,17 @@ CacheStorageParent::RecvDelete(const Req
   manager->StorageDelete(this, aRequestId, mNamespace, aKey);
 
   return true;
 }
 
 bool
 CacheStorageParent::RecvKeys(const RequestId& aRequestId)
 {
+  // queue requests if we are still waiting for principal verification
   if (!mManagerId) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mOp = OP_DELETE;
     entry->mRequestId = aRequestId;
     return true;
   }
 
   nsRefPtr<cache::Manager> manager;
@@ -268,17 +289,17 @@ CacheStorageParent::OnStorageKeys(Reques
   ReleaseManager(aRequestId);
   unused << SendKeysResponse(aRequestId, aRv, aKeys);
 }
 
 void
 CacheStorageParent::RetryPendingRequests()
 {
   for (uint32_t i = 0; i < mPendingRequests.Length(); ++i) {
-    Entry& entry = mPendingRequests[i];
+    const Entry& entry = mPendingRequests[i];
     switch(entry.mOp) {
       case OP_MATCH:
         RecvMatch(entry.mRequestId, entry.mRequest, entry.mParams);
         break;
       case OP_HAS:
         RecvHas(entry.mRequestId, entry.mKey);
         break;
       case OP_OPEN:
@@ -298,17 +319,17 @@ CacheStorageParent::RetryPendingRequests
 }
 
 void
 CacheStorageParent::FailPendingRequests(nsresult aRv)
 {
   MOZ_ASSERT(NS_FAILED(aRv));
 
   for (uint32_t i = 0; i < mPendingRequests.Length(); ++i) {
-    Entry& entry = mPendingRequests[i];
+    const Entry& entry = mPendingRequests[i];
     switch(entry.mOp) {
       case OP_MATCH:
       {
         PCacheResponseOrVoid responseOrVoid;
         responseOrVoid = void_t();
         unused << SendMatchResponse(entry.mRequestId, aRv, responseOrVoid);
         break;
       }
diff --git a/dom/cache/ManagerId.cpp b/dom/cache/ManagerId.cpp
--- a/dom/cache/ManagerId.cpp
+++ b/dom/cache/ManagerId.cpp
@@ -1,58 +1,41 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/ManagerId.h"
 #include "nsIPrincipal.h"
+#include "nsProxyRelease.h"
 #include "nsRefPtr.h"
 #include "nsThreadUtils.h"
 
-namespace {
-
-class ReleasePrincipalRunnable : public nsRunnable
-{
-public:
-  ReleasePrincipalRunnable(already_AddRefed<nsIPrincipal> aPrincipal)
-    : mPrincipal(aPrincipal)
-  { }
-
-  NS_IMETHOD Run() MOZ_OVERRIDE
-  {
-    MOZ_ASSERT(NS_IsMainThread());
-    mPrincipal = nullptr;
-    return NS_OK;
-  }
-
-private:
-  ~ReleasePrincipalRunnable() { }
-
-  nsCOMPtr<nsIPrincipal> mPrincipal;
-};
-
-} // anonymous namespace
-
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 // static
 nsresult
 ManagerId::Create(nsIPrincipal* aPrincipal, ManagerId** aManagerIdOut)
 {
   MOZ_ASSERT(NS_IsMainThread());
 
   // The QuotaManager::GetInfoFromPrincipal() has special logic for system
   // and about: principals.  We currently don't need the system principal logic
   // because ManagerId only uses the origin for in memory comparisons.  We
   // also don't do any special logic to host the same Cache for different about:
   // pages, so we don't need those checks either.
+  //
+  // But, if we get the same QuotaManager directory for different about:
+  // origins, we probably only want one Manager instance.  So, we might
+  // want to start using the QM's concept of origin uniqueness here.
+  //
+  // TODO: consider using QuotaManager's modified origin here (bug 1112071)
 
   nsAutoCString origin;
   nsresult rv = aPrincipal->GetOrigin(getter_Copies(origin));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   uint32_t appId;
   rv = aPrincipal->GetAppId(&appId);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
@@ -83,24 +66,28 @@ ManagerId::ManagerId(nsIPrincipal* aPrin
     , mAppId(aAppId)
     , mInBrowserElement(aInBrowserElement)
 {
   MOZ_ASSERT(mPrincipal);
 }
 
 ManagerId::~ManagerId()
 {
+  // If we're already on the main thread, then default destruction is fine
   if (NS_IsMainThread()) {
     return;
   }
 
-  nsCOMPtr<nsIRunnable> runnable =
-    new ReleasePrincipalRunnable(mPrincipal.forget());
+  // Otherwise we need to proxy to main thread to do the release
 
-  nsresult rv = NS_DispatchToMainThread(runnable);
-  if (NS_FAILED(rv)) {
-    MOZ_CRASH("Failed to dispatch ManagerId release runnable.");
-  }
+  // The PBackground worker thread shouldn't be running after the main thread
+  // is stopped.  So main thread is guaranteed to exist here.
+  nsCOMPtr<nsIThread> mainThread = do_GetMainThread();
+  MOZ_ASSERT(mainThread);
+
+  nsIPrincipal* principal;
+  mPrincipal.forget(&principal);
+  NS_ProxyRelease(mainThread, principal);
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/PrincipalVerifier.cpp b/dom/cache/PrincipalVerifier.cpp
--- a/dom/cache/PrincipalVerifier.cpp
+++ b/dom/cache/PrincipalVerifier.cpp
@@ -8,115 +8,111 @@
 
 #include "mozilla/AppProcessChecker.h"
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/cache/ManagerId.h"
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozilla/ipc/PBackgroundParent.h"
 #include "mozilla/ipc/BackgroundUtils.h"
 #include "nsIPrincipal.h"
-
-namespace {
-
-using mozilla::dom::ContentParent;
-
-class ReleaseContentParentRunnable : public nsRunnable
-{
-public:
-  ReleaseContentParentRunnable(already_AddRefed<ContentParent> aActor)
-    : mActor(aActor)
-  { }
-
-  NS_IMETHOD Run() MOZ_OVERRIDE
-  {
-    MOZ_ASSERT(NS_IsMainThread());
-    mActor = nullptr;
-    return NS_OK;
-  }
-
-private:
-  ~ReleaseContentParentRunnable() { }
-
-  nsRefPtr<ContentParent> mActor;
-};
-
-} // anonymous namespace
+#include "nsProxyRelease.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
+using mozilla::ipc::AssertIsOnBackgroundThread;
 using mozilla::ipc::BackgroundParent;
 using mozilla::ipc::PBackgroundParent;
 using mozilla::ipc::PrincipalInfo;
 using mozilla::ipc::PrincipalInfoToPrincipal;
 
 // static
 nsresult
-PrincipalVerifier::Create(Listener* aListener, PBackgroundParent* aActor,
-                          const PrincipalInfo& aPrincipalInfo,
-                          PrincipalVerifier** aVerifierOut)
+PrincipalVerifier::CreateAndDispatch(Listener* aListener,
+                                     PBackgroundParent* aActor,
+                                     const PrincipalInfo& aPrincipalInfo,
+                                     PrincipalVerifier** aVerifierOut)
 {
+  // We must get the ContentParent actor from the PBackgroundParent.  This
+  // only works on the PBackground thread.
+  AssertIsOnBackgroundThread();
+
   nsRefPtr<PrincipalVerifier> verifier = new PrincipalVerifier(aListener,
                                                                aActor,
                                                                aPrincipalInfo);
 
   nsresult rv = NS_DispatchToMainThread(verifier);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   verifier.forget(aVerifierOut);
 
   return NS_OK;
 }
 
 void
 PrincipalVerifier::ClearListener()
 {
-  MOZ_ASSERT(NS_GetCurrentThread() == mInitiatingThread);
+  AssertIsOnBackgroundThread();
   MOZ_ASSERT(mListener);
   mListener = nullptr;
 }
 
 PrincipalVerifier::PrincipalVerifier(Listener* aListener,
                                      PBackgroundParent* aActor,
                                      const PrincipalInfo& aPrincipalInfo)
   : mListener(aListener)
   , mActor(BackgroundParent::GetContentParent(aActor))
   , mPrincipalInfo(aPrincipalInfo)
   , mInitiatingThread(NS_GetCurrentThread())
   , mResult(NS_OK)
 {
+  AssertIsOnBackgroundThread();
   MOZ_ASSERT(mListener);
   MOZ_ASSERT(mInitiatingThread);
 }
 
 PrincipalVerifier::~PrincipalVerifier()
 {
+  // Since the PrincipalVerifier is a Runnable that executes on multiple
+  // threads, its a race to see which thread de-refs us last.  Therefore
+  // we cannot guarantee which thread we destruct on.
+
   MOZ_ASSERT(!mListener);
 
+  // If we are on the main thread, the normal destruction is fine.  Likewise,
+  // if we don't have an actor.  We only have to do special action if we're
+  // releasing the ContentParent actor off the main thread.
   if (!mActor || NS_IsMainThread()) {
     return;
   }
 
-  nsCOMPtr<nsIRunnable> runnable =
-    new ReleaseContentParentRunnable(mActor.forget());
+  // Otherwise we need to proxy to main thread to do the release
 
-  nsresult rv = NS_DispatchToMainThread(runnable);
-  if (NS_FAILED(rv)) {
-    MOZ_CRASH("Failed to dispatch ManagerId release runnable.");
-  }
+  // The PBackground worker thread shouldn't be running after the main thread
+  // is stopped.  So main thread is guaranteed to exist here.
+  nsCOMPtr<nsIThread> mainThread = do_GetMainThread();
+  MOZ_ASSERT(mainThread);
+
+  ContentParent* actor;
+  mActor.forget(&actor);
+  NS_ProxyRelease(mainThread, ToSupports(actor));
 }
 
 NS_IMETHODIMP
 PrincipalVerifier::Run()
 {
+  // Executed twice.  First, on the main thread and then back on the
+  // originating thread.
+
   if (NS_IsMainThread()) {
     VerifyOnMainThread();
     return NS_OK;
   }
+
   CompleteOnInitiatingThread();
   return NS_OK;
 }
 
 void
 PrincipalVerifier::VerifyOnMainThread()
 {
   MOZ_ASSERT(NS_IsMainThread());
@@ -142,29 +138,47 @@ PrincipalVerifier::VerifyOnMainThread()
   }
 
   DispatchToInitiatingThread(NS_OK);
 }
 
 void
 PrincipalVerifier::CompleteOnInitiatingThread()
 {
-  MOZ_ASSERT(NS_GetCurrentThread() == mInitiatingThread);
+  AssertIsOnBackgroundThread();
 
+  // This can happen if the listener is destroyed before we finish.  For
+  // example, if the child process OOMs and the actor is destroyed.
   if (!mListener) {
     return;
   }
+
   mListener->OnPrincipalVerified(mResult, mManagerId);
+
+  // The listener must clear their reference in OnPrincipalVerified()
+  MOZ_ASSERT(!mListener);
 }
 
 void
 PrincipalVerifier::DispatchToInitiatingThread(nsresult aRv)
 {
+  MOZ_ASSERT(NS_IsMainThread());
+
   mResult = aRv;
+
+  // The Cache ShutdownObserver does not track all principal verifiers, so we
+  // cannot ensure this always succeeds.  Instead, simply warn on failures.
+  // This will result in a new CacheStorage object delaying operations until
+  // shutdown completes and the browser goes away.  This is as graceful as
+  // we can get here.
   nsresult rv = mInitiatingThread->Dispatch(this, nsIThread::DISPATCH_NORMAL);
   if (NS_FAILED(rv)) {
-    MOZ_CRASH("Failed to dispatch PrincipalVerifier to initiating thread.");
+    NS_WARNING("Cache unable to complete principal verification due to shutdown.");
   }
+
+  // Drop our thread ref to avoid maintaining a ref cycle in the case where
+  // the thread does not drain its event queue.
+  mInitiatingThread = nullptr;
 }
 
 } // namesapce cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/PrincipalVerifier.h b/dom/cache/PrincipalVerifier.h
--- a/dom/cache/PrincipalVerifier.h
+++ b/dom/cache/PrincipalVerifier.h
@@ -19,43 +19,53 @@ namespace ipc {
 namespace dom {
 namespace cache {
 
 class ManagerId;
 
 class PrincipalVerifier MOZ_FINAL : public nsRunnable
 {
 public:
+  // An interface to be implemented by code wishing to use the
+  // PrincipalVerifier.  Note, the Listener implementation is responsible
+  // for calling ClearListener() on the PrincipalVerifier to clear the
+  // weak reference.
   class Listener
   {
   public:
-    virtual ~Listener() { }
-
+    ~Listener() { }
     virtual void OnPrincipalVerified(nsresult aRv, ManagerId* aManagerId) = 0;
   };
 
   static nsresult
-  Create(Listener* aListener, ipc::PBackgroundParent* aActor,
-         const ipc::PrincipalInfo& aPrincipalInfo,
-         PrincipalVerifier** aVerifierOut);
+  CreateAndDispatch(Listener* aListener, ipc::PBackgroundParent* aActor,
+                    const ipc::PrincipalInfo& aPrincipalInfo,
+                    PrincipalVerifier** aVerifierOut);
 
+  // The Listener must call ClearListener() when OnPrincipalVerified() is
+  // called or when the Listener is destroyed.
   void ClearListener();
 
 private:
   PrincipalVerifier(Listener* aListener, ipc::PBackgroundParent* aActor,
                     const ipc::PrincipalInfo& aPrincipalInfo);
   virtual ~PrincipalVerifier();
 
   void VerifyOnMainThread();
   void CompleteOnInitiatingThread();
 
   void DispatchToInitiatingThread(nsresult aRv);
 
+  // Weak reference cleared by ClearListener()
   Listener* mListener;
+
+  // set in originating thread at construction, but must be accessed and
+  // released on main thread
   nsRefPtr<ContentParent> mActor;
+
   const ipc::PrincipalInfo mPrincipalInfo;
   nsCOMPtr<nsIThread> mInitiatingThread;
   nsresult mResult;
   nsRefPtr<ManagerId> mManagerId;
 
 public:
   NS_DECL_NSIRUNNABLE
 };
