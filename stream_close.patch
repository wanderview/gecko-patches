# HG changeset patch
# Parent 8ed1940072806efb09618c3084718451d32c5de1
# User Ben Kelly <ben@wanderview.com>
Do not try to send stream close messages when actors are destroyed.  This now asserts.


diff --git a/dom/cache/CacheStreamControlChild.cpp b/dom/cache/CacheStreamControlChild.cpp
--- a/dom/cache/CacheStreamControlChild.cpp
+++ b/dom/cache/CacheStreamControlChild.cpp
@@ -41,17 +41,19 @@ void
 CacheStreamControlChild::NoteClosed(const nsID& aId)
 {
   unused << SendNoteClosed(aId);
 }
 
 void
 CacheStreamControlChild::ActorDestroy(ActorDestroyReason aReason)
 {
-  RecvCloseAll();
+  for (uint32_t i = 0; i < mListeners.Length(); ++i) {
+    mListeners[i]->CloseStreamWithoutReporting();
+  }
 }
 
 bool
 CacheStreamControlChild::RecvClose(const nsID& aId)
 {
   // defensive copy of list since may be modified as we close streams
   nsTArray<CacheStreamControlListener*> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
diff --git a/dom/cache/CacheStreamControlListener.h b/dom/cache/CacheStreamControlListener.h
--- a/dom/cache/CacheStreamControlListener.h
+++ b/dom/cache/CacheStreamControlListener.h
@@ -13,16 +13,17 @@ namespace mozilla {
 namespace dom {
 namespace cache {
 
 class CacheStreamControlListener
 {
 public:
   virtual ~CacheStreamControlListener() { }
   virtual void CloseStream()=0;
+  virtual void CloseStreamWithoutReporting()=0;
   virtual bool MatchId(const nsID& aId)=0;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_CacheStreamControlListener_h
diff --git a/dom/cache/CacheStreamControlParent.cpp b/dom/cache/CacheStreamControlParent.cpp
--- a/dom/cache/CacheStreamControlParent.cpp
+++ b/dom/cache/CacheStreamControlParent.cpp
@@ -37,17 +37,21 @@ CacheStreamControlParent::RemoveListener
   MOZ_ASSERT(aListener);
   mListeners.RemoveElement(aListener);
 }
 
 void
 CacheStreamControlParent::ActorDestroy(ActorDestroyReason aReason)
 {
   MOZ_ASSERT(mStreamList);
+  for (uint32_t i = 0; i < mListeners.Length(); ++i) {
+    mListeners[i]->CloseStreamWithoutReporting();
+  }
   mStreamList->RemoveStreamControl(this);
+  mStreamList->NoteClosedAll();
   mStreamList = nullptr;
 }
 
 bool
 CacheStreamControlParent::RecvNoteClosed(const nsID& aId)
 {
   MOZ_ASSERT(mStreamList);
   mStreamList->NoteClosed(aId);
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -1110,16 +1110,30 @@ Manager::StreamList::NoteClosed(const ns
   }
 
   if (mList.IsEmpty() && mStreamControl) {
     mStreamControl->Shutdown();
   }
 }
 
 void
+Manager::StreamList::NoteClosedAll()
+{
+  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
+  for (uint32_t i = 0; i < mList.Length(); ++i) {
+    mManager->ReleaseBodyId(mList[i].mId);
+  }
+  mList.Clear();
+
+  if (mStreamControl) {
+    mStreamControl->Shutdown();
+  }
+}
+
+void
 Manager::StreamList::Close(const nsID& aId)
 {
   NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
   if (mStreamControl) {
     mStreamControl->Close(aId);
   }
 }
 
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -59,16 +59,17 @@ public:
     void RemoveStreamControl(StreamControl* aStreamControl);
 
     void Activate(CacheId aCacheId);
 
     void Add(const nsID& aId, nsIInputStream* aStream);
     already_AddRefed<nsIInputStream> Extract(const nsID& aId);
 
     void NoteClosed(const nsID& aId);
+    void NoteClosedAll();
     void Close(const nsID& aId);
     void CloseAll();
 
   private:
     ~StreamList();
     struct Entry
     {
       nsID mId;
diff --git a/dom/cache/ReadStream.cpp b/dom/cache/ReadStream.cpp
--- a/dom/cache/ReadStream.cpp
+++ b/dom/cache/ReadStream.cpp
@@ -343,16 +343,22 @@ ReadStream::Serialize(PCacheReadStream* 
 }
 
 void
 ReadStream::CloseStream()
 {
   Close();
 }
 
+void
+ReadStream::CloseStreamWithoutReporting()
+{
+  Forget();
+}
+
 bool
 ReadStream::MatchId(const nsID& aId)
 {
   return mId.Equals(aId);
 }
 
 ReadStream::ReadStream(const nsID& aId, nsIInputStream* aStream)
   : mId(aId)
diff --git a/dom/cache/ReadStream.h b/dom/cache/ReadStream.h
--- a/dom/cache/ReadStream.h
+++ b/dom/cache/ReadStream.h
@@ -44,16 +44,17 @@ public:
   Create(PCacheStreamControlParent* aControl, const nsID& aId,
          nsIInputStream* aStream);
 
   void Serialize(PCacheReadStreamOrVoid* aReadStreamOut);
   void Serialize(PCacheReadStream* aReadStreamOut);
 
   // CacheStreamControlListener methods
   virtual void CloseStream() MOZ_OVERRIDE;
+  virtual void CloseStreamWithoutReporting() MOZ_OVERRIDE;
   virtual bool MatchId(const nsID& aId) MOZ_OVERRIDE;
 
 protected:
   ReadStream(const nsID& aId, nsIInputStream* aStream);
   virtual ~ReadStream();
 
   void NoteClosed();
   void Forget();
