# HG changeset patch
# Parent 0d04be8c39518da843cedfe9eb91b7cf9ea88db6
# User Ben Kelly <ben@wanderview.com>
Bug 1110487 P2 Implement the nsIOfflineStorage interface in Cache.


diff --git a/dom/cache/QuotaOfflineStorage.cpp b/dom/cache/QuotaOfflineStorage.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/QuotaOfflineStorage.cpp
@@ -0,0 +1,93 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/cache/QuotaOfflineStorage.h"
+
+#include "mozilla/dom/cache/Context.h"
+#include "nsThreadUtils.h"
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+using mozilla::dom::quota::Client;
+
+NS_IMPL_ISUPPORTS(mozilla::dom::cache::QuotaOfflineStorage, nsIOfflineStorage);
+
+QuotaOfflineStorage::QuotaOfflineStorage(Context* aContext,
+                                         nsIThread* aBackgroundThread)
+  : mContext(aContext)
+  , mBackgroundThread(aBackgroundThread)
+{
+  MOZ_ASSERT(mContext);
+  MOZ_ASSERT(mBackgroundThread);
+}
+
+QuotaOfflineStorage::~QuotaOfflineStorage()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  // TODO: proxy release Context on background thread
+}
+
+NS_IMETHODIMP_(const nsACString&)
+QuotaOfflineStorage::Id()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  return EmptyCString();
+}
+
+NS_IMETHODIMP_(Client*)
+QuotaOfflineStorage::GetClient()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  return nullptr;
+}
+
+NS_IMETHODIMP_(bool)
+QuotaOfflineStorage::IsOwnedByProcess(ContentParent* aOwner)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  return true;
+}
+
+NS_IMETHODIMP_(const nsACString&)
+QuotaOfflineStorage::Origin()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  return EmptyCString();
+}
+
+NS_IMETHODIMP_(nsresult)
+QuotaOfflineStorage::Close()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  // TODO: proxy to background thread
+
+  // To "close" we just de-ref the Context and let it destroy itself once all
+  // pending Actions have completed.
+  MOZ_ASSERT(mContext);
+  mContext = nullptr;
+  return NS_OK;
+}
+
+NS_IMETHODIMP_(void)
+QuotaOfflineStorage::Invalidate()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  // TODO: proxy to background thread
+
+  // To "invalidate" we cancel all pending Actions and then de-ref so that it
+  // will destroy itself.
+  mContext->CancelAll();
+  mContext = nullptr;
+}
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/QuotaOfflineStorage.h b/dom/cache/QuotaOfflineStorage.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/QuotaOfflineStorage.h
@@ -0,0 +1,41 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_QuotaOfflineStorage_h
+#define mozilla_dom_cache_QuotaOfflineStorage_h
+
+#include "nsCOMPtr.h"
+#include "nsIOfflineStorage.h"
+#include "nsRefPtr.h"
+
+class nsIThread;
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+class Context;
+
+class QuotaOfflineStorage MOZ_FINAL : public nsIOfflineStorage
+{
+public:
+  QuotaOfflineStorage(Context* aContext, nsIThread* aBackgroundThread);
+
+private:
+  ~QuotaOfflineStorage();
+
+  nsRefPtr<Context> mContext;
+  nsCOMPtr<nsIThread> mBackgroundThread;
+
+  NS_DECL_NSIOFFLINESTORAGE
+  NS_DECL_ISUPPORTS
+};
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_QuotaOfflineStorage_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -23,25 +23,27 @@ EXPORTS.mozilla.dom.cache += [
     'Feature.h',
     'FetchPut.h',
     'FileUtils.h',
     'IPCUtils.h',
     'Manager.h',
     'ManagerId.h',
     'PrincipalVerifier.h',
     'QuotaClient.h',
+    'QuotaOfflineStorage.h',
     'ReadStream.h',
     'SavedTypes.h',
     'StreamList.h',
     'StreamUtils.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
-UNIFIED_SOURCES += [
+#UNIFIED_SOURCES += [
+SOURCES += [
     'Action.cpp',
     'ActorChild.cpp',
     'AutoUtils.cpp',
     'Cache.cpp',
     'CacheChild.cpp',
     'CacheParent.cpp',
     'CacheStorage.cpp',
     'CacheStorageChild.cpp',
@@ -53,16 +55,17 @@ UNIFIED_SOURCES += [
     'DBSchema.cpp',
     'Feature.cpp',
     'FetchPut.cpp',
     'FileUtils.cpp',
     'Manager.cpp',
     'ManagerId.cpp',
     'PrincipalVerifier.cpp',
     'QuotaClient.cpp',
+    'QuotaOfflineStorage.cpp',
     'ReadStream.cpp',
     'StreamList.cpp',
     'StreamUtils.cpp',
     'TypeUtils.cpp',
 ]
 
 IPDL_SOURCES += [
     'CacheInitData.ipdlh',
