# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  6a1ad8323a42576942cc548a278da48c32eeed14

diff --git a/dom/workers/WorkerHolderToken.cpp b/dom/workers/WorkerHolderToken.cpp
--- a/dom/workers/WorkerHolderToken.cpp
+++ b/dom/workers/WorkerHolderToken.cpp
@@ -98,12 +98,16 @@ WorkerHolderToken::Notify(Status aStatus
   mShuttingDown = true;
 
   // Start the asynchronous destruction of our actors.  These will call back
   // into RemoveActor() once the actor is destroyed.
   for (uint32_t i = 0; i < mListenerList.Length(); ++i) {
     mListenerList[i]->WorkerShuttingDown();
   }
 
+  if (mLambdaListener) {
+    mLambdaListener->WorkerShuttingDown();
+  }
+
   return true;
 }
 
 END_WORKERS_NAMESPACE
diff --git a/dom/workers/WorkerHolderToken.h b/dom/workers/WorkerHolderToken.h
--- a/dom/workers/WorkerHolderToken.h
+++ b/dom/workers/WorkerHolderToken.h
@@ -20,20 +20,65 @@ class WorkerHolderToken final : public W
 public:
   class Listener
   {
   public:
     virtual void
     WorkerShuttingDown() = 0;
   };
 
+private:
+  class RefListener : public Listener
+  {
+    ~RefListener() = default;
+  public:
+    NS_INLINE_DECL_REFCOUNTING(RefListener)
+  };
+
+  template<typename Callable>
+  class LambdaListener final : public RefListener
+  {
+    Callable mCallable;
+
+    ~LambdaListener() = default;
+
+  public:
+    explicit LambdaListener(Callable aCallable)
+      : mCallable(aCallable)
+    {
+    }
+
+    void
+    WorkerShuttingDown() override
+    {
+      mCallable();
+    }
+  };
+
+public:
   static already_AddRefed<WorkerHolderToken>
   Create(workers::WorkerPrivate* aWorkerPrivate, Status aShutdownStatus,
          Behavior aBehavior = PreventIdleShutdownStart);
 
+  template<typename Callable>
+  static already_AddRefed<WorkerHolderToken>
+  Create(workers::WorkerPrivate* aWorkerPrivate, Status aShutdownStatus,
+         Callable aCallable, Behavior aBehavior = PreventIdleShutdownStart)
+  {
+    RefPtr<WorkerHolderToken> ref = Create(aWorkerPrivate, aShutdownStatus,
+                                           aBehavior);
+    if (!ref) {
+      return ref.forget();
+    }
+
+    ref->mLambdaListener = new LambdaListener<Callable>(aCallable);
+
+    return ref.forget();
+  }
+
   void
   AddListener(Listener* aListener);
 
   void
   RemoveListener(Listener* aListener);
 
   bool
   IsShuttingDown() const;
@@ -46,16 +91,17 @@ private:
 
   ~WorkerHolderToken();
 
   // WorkerHolder methods
   virtual bool
   Notify(workers::Status aStatus) override;
 
   nsTArray<Listener*> mListenerList;
+  RefPtr<RefListener> mLambdaListener;
   const Status mShutdownStatus;
   bool mShuttingDown;
 
 public:
   NS_INLINE_DECL_REFCOUNTING(WorkerHolderToken)
 };
 
 END_WORKERS_NAMESPACE
