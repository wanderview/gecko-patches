# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  5aff208e4bdfdd9eea526605a53c822bb8dab37b

diff --git a/js/src/vm/Debugger.cpp b/js/src/vm/Debugger.cpp
--- a/js/src/vm/Debugger.cpp
+++ b/js/src/vm/Debugger.cpp
@@ -8789,17 +8789,17 @@ const JSPropertySpec DebuggerObject::pro
     JS_PSG("boundArguments", DebuggerObject_getBoundArguments, 0),
     JS_PSG("global", DebuggerObject_getGlobal, 0),
     JS_PSG("allocationSite", DebuggerObject_getAllocationSite, 0),
     JS_PSG("errorMessageName", DebuggerObject_getErrorMessageName, 0),
     JS_PS_END
 };
 
 #ifdef SPIDERMONKEY_PROMISE
-const JSPropertySpec DebuggerObject::promiseProperties_[] = {
+static const JSPropertySpec DebuggerObject_promiseProperties[] = {
     JS_PSG("isPromise", DebuggerObject_getIsPromise, 0),
     JS_PSG("promiseState", DebuggerObject_getPromiseState, 0),
     JS_PSG("promiseLifetime", DebuggerObject_getPromiseLifetime, 0),
     JS_PSG("promiseTimeToResolution", DebuggerObject_getPromiseTimeToResolution, 0),
     JS_PSG("promiseAllocationSite", DebuggerObject_getPromiseAllocationSite, 0),
     JS_PSG("promiseResolutionSite", DebuggerObject_getPromiseResolutionSite, 0),
     JS_PSG("promiseID", DebuggerObject_getPromiseID, 0),
     JS_PSG("promiseDependentPromises", DebuggerObject_getPromiseDependentPromises, 0),
@@ -8838,18 +8838,18 @@ DebuggerObject::initClass(JSContext* cx,
     Rooted<GlobalObject*> global(cx, &obj->as<GlobalObject>());
     RootedObject objProto(cx, global->getOrCreateObjectPrototype(cx));
 
     RootedNativeObject objectProto(cx, InitClass(cx, debugCtor, objProto, &class_,
                                                  DebuggerObject_construct, 0, properties_,
                                                  methods_, nullptr, nullptr));
 
 #ifdef SPIDERMONKEY_PROMISE
-    if (!DefinePropertiesAndFunctions(cx, objectProto, promiseProperties_, nullptr))
-        return false;
+    if (!DefinePropertiesAndFunctions(cx, objectProto, DebuggerObject_promiseProperties, nullptr))
+        return nullptr;
 #endif // SPIDERMONKEY_PROMISE
 
     return objectProto;
 }
 
 /* static */ DebuggerObject*
 DebuggerObject::create(JSContext* cx, HandleObject proto, HandleObject referent,
                        HandleNativeObject debugger)
@@ -9357,17 +9357,16 @@ Builder::newObject(JSContext* cx)
     RootedPlainObject obj(cx, NewBuiltinClassInstance<PlainObject>(cx));
 
     // If the allocation failed, this will return a false Object, as the spec promises.
     return Object(cx, *this, obj);
 }
 
 
 /*** JS::dbg::AutoEntryMonitor ******************************************************************/
-
 AutoEntryMonitor::AutoEntryMonitor(JSContext* cx)
   : runtime_(cx->runtime()),
     savedMonitor_(cx->runtime()->entryMonitor)
 {
     runtime_->entryMonitor = this;
 }
 
 AutoEntryMonitor::~AutoEntryMonitor()
@@ -9426,17 +9425,17 @@ JS_DefineDebuggerObject(JSContext* cx, H
     if (!sourceProto)
         return false;
 
     objectProto = DebuggerObject::initClass(cx, obj, debugCtor);
     if (!objectProto)
         return false;
 
 #ifdef SPIDERMONKEY_PROMISE
-    if (!DefinePropertiesAndFunctions(cx, objectProto, DebuggerObject::promiseProperties_, nullptr))
+    if (!DefinePropertiesAndFunctions(cx, objectProto, DebuggerObject_promiseProperties, nullptr))
         return false;
 #endif // SPIDERMONKEY_PROMISE
 
     envProto = InitClass(cx, debugCtor, objProto, &DebuggerEnv_class,
                          DebuggerEnv_construct, 0,
                          DebuggerEnv_properties, DebuggerEnv_methods,
                          nullptr, nullptr);
     if (!envProto)
