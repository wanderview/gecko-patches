# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  abdc0dccc7f5810fcff891b4693559acbb216eea

diff --git a/dom/cache/DBMigration.cpp b/dom/cache/DBMigration.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/DBMigration.cpp
@@ -0,0 +1,174 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/cache/DBMigration.h"
+
+#include "mozilla/DebugOnly.h"
+#include "mozilla/dom/cache/DBSchema.h"
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+namespace db {
+
+namespace {
+
+typedef nsresult (*MigrationFunc)(mozIStorageConnection*);
+struct Migration
+{
+  Migration(int32_t aFromVersion, MigrationFunc aFunc)
+    : mFromVersion(aFromVersion)
+    , mFunc(aFunc)
+  { }
+  int32_t mFromVersion;
+  MigrationFunc mFunc;
+};
+
+nsresult MigrateFromVersion15(mozIStorageConnection* aConn);
+
+Migration sMigrationList[] = {
+  Migration(15, MigrateFromVersion15),
+};
+
+uint32_t sMigrationListLength = sizeof(sMigrationList) / sizeof(Migration);
+
+} // anonymous namespace
+
+nsresult
+Migrate(mozIStorageConnection* aConn)
+{
+  MOZ_ASSERT(!NS_IsMainThread());
+  MOZ_ASSERT(aConn);
+
+  int32_t currentVersion = 0;
+  nsresult rv = aConn->GetSchemaVersion(&currentVersion);
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  while (currentVersion < kLatestSchemaVersion) {
+    // Wiping old databases is handled in DBAction.  Make sure we don't
+    // accidentally get here for one of those old databases.
+    MOZ_ASSERT(currentVersion >= kMaxWipeSchemaVersion);
+
+    for (uint32_t i = 0; i < sMigrationListLength; ++i) {
+      if (sMigrationList[i].mFromVersion == currentVersion) {
+        rv = sMigrationList[i].mFunc(aConn);
+        if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+        break;
+      }
+    }
+
+    DebugOnly<int32_t> lastVersion = currentVersion;
+    rv = aConn->GetSchemaVersion(&currentVersion);
+    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+    MOZ_ASSERT(currentVersion > lastVersion);
+  }
+
+  MOZ_ASSERT(currentVersion == kLatestSchemaVersion);
+
+  return rv;
+}
+
+namespace {
+
+nsresult MigrateFromVersion15(mozIStorageConnection* aConn)
+{
+  MOZ_ASSERT(!NS_IsMainThread());
+  MOZ_ASSERT(aConn);
+
+  // TODO: rewrite this using ALTER TABLE and master table fixup
+  // https://www.sqlite.org/lang_altertable.html
+
+  // NOTE: We migrate through a temporary table instead of using ALTER TABLE to
+  //       avoid requiring a default value on the new column.  This will also
+  //       provide a template for performing more complex migrations.
+
+  nsresult rv = aConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(
+    "PRAGMA foreign_keys=OFF;"
+  ));
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  // TODO: factor the sql string out into a shared constant
+  rv = aConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(
+    "CREATE TABLE new_entries ("
+      "id INTEGER NOT NULL PRIMARY KEY, "
+      "request_method TEXT NOT NULL, "
+      "request_url_no_query TEXT NOT NULL, "
+      "request_url_no_query_hash BLOB NOT NULL, " // first 8-bytes of sha1 hash
+      "request_url_query TEXT NOT NULL, "
+      "request_url_query_hash BLOB NOT NULL, "    // first 8-bytes of sha1 hash
+      "request_referrer TEXT NOT NULL, "
+      "request_headers_guard INTEGER NOT NULL, "
+      "request_mode INTEGER NOT NULL, "
+      "request_credentials INTEGER NOT NULL, "
+      "request_contentpolicytype INTEGER NOT NULL, "
+      "request_cache INTEGER NOT NULL, "
+      "request_redirect INTEGER NOT NULL, "
+      "request_body_id TEXT NULL, "
+      "response_type INTEGER NOT NULL, "
+      "response_url TEXT NOT NULL, "
+      "response_status INTEGER NOT NULL, "
+      "response_status_text TEXT NOT NULL, "
+      "response_headers_guard INTEGER NOT NULL, "
+      "response_body_id TEXT NULL, "
+      "response_security_info_id INTEGER NULL REFERENCES security_info(id), "
+      "response_principal_info TEXT NOT NULL, "
+      "response_redirected INTEGER NOT NULL, "
+      // Note that response_redirected_url is either going to be empty, or
+      // it's going to be a URL different than response_url.
+      "response_redirected_url TEXT NOT NULL, "
+      "cache_id INTEGER NOT NULL REFERENCES caches(id) ON DELETE CASCADE"
+    ");"
+  ));
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  rv = aConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(
+    "INSERT INTO new_entries "
+      "SELECT (id, "
+              "request_method, "
+              "request_url_no_query, "
+              "request_no_query_hash, "
+              "request_referrer, "
+              "request_headers_guard, "
+              "request_mode, "
+              "request_credentials, "
+              "request_contentpolicytype, "
+              "request_cache, "
+              "0, " // populate new request_redirect with default "follow" value
+              "request_body_id, "
+              "response_type, "
+              "response_url, "
+              "response_status, "
+              "response_status_text, "
+              "response_headers_guard, "
+              "response_body_id, "
+              "response_security_info_id, "
+              "response_principal_info, "
+              "response_redirected, "
+              "response_redirected_url, "
+              "cache_id) "
+      "FROM entries;"
+  ));
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  rv = aConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(
+    "DROP TABLE entries;"
+  ));
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  rv = aConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(
+    "ALTER TABLE new_entries to entries;"
+  ));
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  return rv;
+}
+
+} // anonymous namespace
+
+} // namespace db
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/DBMigration.h b/dom/cache/DBMigration.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/DBMigration.h
@@ -0,0 +1,25 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_DBMigration_h
+#define mozilla_dom_cache_DBMigration_h
+
+class mozIStorageConnection;
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+namespace db {
+
+nsresult
+Migrate(mozIStorageConnection* aConn);
+
+} // namespace db
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_DBMigration_h
diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -29,19 +29,21 @@
 namespace mozilla {
 namespace dom {
 namespace cache {
 namespace db {
 
 // This should not be changed any more.  Write a migration instead.
 const int32_t kMaxWipeSchemaVersion = 15;
 
+// Update this whenever the schema is changed.
+const int32_t kLatestSchemaVersion = 16;
+
 namespace {
 
-const int32_t kLatestSchemaVersion = 16;
 const int32_t kMaxEntriesPerStatement = 255;
 
 const uint32_t kPageSize = 4 * 1024;
 
 // Grow the database in chunks to reduce fragmentation
 const uint32_t kGrowthSize = 32 * 1024;
 const uint32_t kGrowthPages = kGrowthSize / kPageSize;
 static_assert(kGrowthSize % kPageSize == 0,
diff --git a/dom/cache/DBSchema.h b/dom/cache/DBSchema.h
--- a/dom/cache/DBSchema.h
+++ b/dom/cache/DBSchema.h
@@ -114,14 +114,17 @@ StorageGetKeys(mozIStorageConnection* aC
 
 // Note, this works best when its NOT executed within a transaction.
 nsresult
 IncrementalVacuum(mozIStorageConnection* aConn);
 
 // We will wipe out databases with a schema versions less than this.
 extern const int32_t kMaxWipeSchemaVersion;
 
+// The latest DB schema version.
+extern const int32_t kLatestSchemaVersion;
+
 } // namespace db
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_DBSchema_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -19,16 +19,17 @@ EXPORTS.mozilla.dom.cache += [
     'CacheStorage.h',
     'CacheStorageChild.h',
     'CacheStorageParent.h',
     'CacheStreamControlChild.h',
     'CacheStreamControlParent.h',
     'Connection.h',
     'Context.h',
     'DBAction.h',
+    'DBMigration.h',
     'DBSchema.h',
     'Feature.h',
     'FileUtils.h',
     'IPCUtils.h',
     'Manager.h',
     'ManagerId.h',
     'PrincipalVerifier.h',
     'QuotaClient.h',
@@ -54,16 +55,17 @@ UNIFIED_SOURCES += [
     'CacheStorage.cpp',
     'CacheStorageChild.cpp',
     'CacheStorageParent.cpp',
     'CacheStreamControlChild.cpp',
     'CacheStreamControlParent.cpp',
     'Connection.cpp',
     'Context.cpp',
     'DBAction.cpp',
+    'DBMigration.cpp',
     'DBSchema.cpp',
     'Feature.cpp',
     'FileUtils.cpp',
     'Manager.cpp',
     'ManagerId.cpp',
     'PrincipalVerifier.cpp',
     'QuotaClient.cpp',
     'ReadStream.cpp',
