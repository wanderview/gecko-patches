# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4799b0e6a4fe0b9e835f12a9b495d61e597ff95c

diff --git a/xpcom/threads/TimerThread.cpp b/xpcom/threads/TimerThread.cpp
--- a/xpcom/threads/TimerThread.cpp
+++ b/xpcom/threads/TimerThread.cpp
@@ -400,19 +400,16 @@ TimerThread::Run()
     usForPosInterval <<= 1;
   }
 
   size_t usIntervalResolution;
   BinarySearchIf(MicrosecondsToInterval(), 0, usForPosInterval, IntervalComparator(), &usIntervalResolution);
   MOZ_ASSERT(PR_MicrosecondsToInterval(usIntervalResolution - 1) == 0);
   MOZ_ASSERT(PR_MicrosecondsToInterval(usIntervalResolution) == 1);
 
-  TimeDuration intervalResolution(
-    TimeDuration::FromMicroseconds(usIntervalResolution));
-
   // Half of the amount of microseconds needed to get positive PRIntervalTime.
   // We use this to decide how to round our wait times later
   TimeDuration halfIntervalResolution(
     TimeDuration::FromMicroseconds(usIntervalResolution / 2));
   bool forceRunNextTimer = false;
 
   while (!mShutdown) {
     TimeDuration waitFor(TimeDuration::Forever());
@@ -509,17 +506,25 @@ TimerThread::Run()
 
         // If the delay is less than the actual measurable resolution on
         // this platform then fire the timer immediately.
         if (delay < halfIntervalResolution) {
           forceRunNextTimer = false;
           goto next; // round down; execute event now
         }
 
-        waitFor = TimeDuration::Max(delay, intervalResolution);
+        if (delay != TimeDuration::Forever()) {
+          PRIntervalTime interval = PR_MicrosecondsToInterval(delay.ToMicroseconds());
+          if (interval < 1) {
+            interval = 1;
+          }
+          delay = TimeDuration::FromMicroseconds(PR_IntervalToMicroseconds(interval));
+        }
+
+        waitFor = delay;
       }
 
       if (MOZ_LOG_TEST(GetTimerLog(), LogLevel::Debug)) {
         if (waitFor == TimeDuration::Forever())
           MOZ_LOG(GetTimerLog(), LogLevel::Debug,
                  ("waiting for forever\n"));
         else
           MOZ_LOG(GetTimerLog(), LogLevel::Debug,
