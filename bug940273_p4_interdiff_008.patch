# HG changeset patch
# Parent 29b51734374b5f47282cf07caed4c45b63ff062f
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 008 Remove Manager::StreamControl and separate StreamList

diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -6,16 +6,17 @@
 
 #include "mozilla/dom/cache/CacheParent.h"
 
 #include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/SavedTypes.h"
+#include "mozilla/dom/cache/StreamList.h"
 #include "mozilla/ipc/InputStreamUtils.h"
 #include "mozilla/ipc/PBackgroundParent.h"
 #include "mozilla/ipc/FileDescriptorSetParent.h"
 #include "mozilla/ipc/PFileDescriptorSetParent.h"
 #include "nsCOMPtr.h"
 
 namespace mozilla {
 namespace dom {
@@ -138,17 +139,17 @@ CacheParent::RecvKeys(const RequestId& a
   MOZ_ASSERT(mManager);
   mManager->CacheKeys(this, aRequestId, mCacheId, aRequest, aParams);
   return true;
 }
 
 void
 CacheParent::OnCacheMatch(RequestId aRequestId, nsresult aRv,
                           const SavedResponse* aSavedResponse,
-                          Manager::StreamList* aStreamList)
+                          StreamList* aStreamList)
 {
   PCacheResponseOrVoid responseOrVoid;
 
   // no match
   if (NS_FAILED(aRv) || !aSavedResponse || !aStreamList) {
     responseOrVoid = void_t();
     unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
     return;
@@ -170,19 +171,19 @@ CacheParent::OnCacheMatch(RequestId aReq
   responseOrVoid.get_PCacheResponse().body() = readStream;
 
   unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
 }
 
 void
 CacheParent::OnCacheMatchAll(RequestId aRequestId, nsresult aRv,
                              const nsTArray<SavedResponse>& aSavedResponses,
-                             Manager::StreamList* aStreamList)
+                             StreamList* aStreamList)
 {
-  Manager::StreamControl* streamControl = nullptr;
+  CacheStreamControlParent* streamControl = nullptr;
   nsTArray<PCacheResponse> responses;
 
   for (uint32_t i = 0; i < aSavedResponses.Length(); ++i) {
     PCacheResponse* res = responses.AppendElement();
     *res = aSavedResponses[i].mValue;
 
     if (!aSavedResponses[i].mHasBodyId) {
       res->body() = void_t();
@@ -209,19 +210,19 @@ void
 CacheParent::OnCacheDelete(RequestId aRequestId, nsresult aRv, bool aSuccess)
 {
   unused << SendDeleteResponse(aRequestId, aRv, aSuccess);
 }
 
 void
 CacheParent::OnCacheKeys(RequestId aRequestId, nsresult aRv,
                          const nsTArray<SavedRequest>& aSavedRequests,
-                         Manager::StreamList* aStreamList)
+                         StreamList* aStreamList)
 {
-  Manager::StreamControl* streamControl = nullptr;
+  CacheStreamControlParent* streamControl = nullptr;
   nsTArray<PCacheRequest> requests;
 
   for (uint32_t i = 0; i < aSavedRequests.Length(); ++i) {
     PCacheRequest* req = requests.AppendElement();
     *req = aSavedRequests[i].mValue;
 
     if (!aSavedRequests[i].mHasBodyId) {
       req->body() = void_t();
@@ -241,20 +242,20 @@ CacheParent::OnCacheKeys(RequestId aRequ
 void
 CacheParent::OnFetchPut(FetchPut* aFetchPut, RequestId aRequestId, nsresult aRv)
 {
   aFetchPut->ClearListener();
   mFetchPutList.RemoveElement(aFetchPut);
   unused << SendAddAllResponse(aRequestId, aRv);
 }
 
-Manager::StreamControl*
-CacheParent::SerializeReadStream(Manager::StreamControl *aStreamControl,
+CacheStreamControlParent*
+CacheParent::SerializeReadStream(CacheStreamControlParent *aStreamControl,
                                  const nsID& aId,
-                                 Manager::StreamList* aStreamList,
+                                 StreamList* aStreamList,
                                  PCacheReadStream* aReadStreamOut)
 {
   MOZ_ASSERT(aStreamList);
   MOZ_ASSERT(aReadStreamOut);
 
   nsCOMPtr<nsIInputStream> stream = aStreamList->Extract(aId);
   MOZ_ASSERT(stream);
 
diff --git a/dom/cache/CacheParent.h b/dom/cache/CacheParent.h
--- a/dom/cache/CacheParent.h
+++ b/dom/cache/CacheParent.h
@@ -15,16 +15,17 @@
 struct nsID;
 template <class T> class nsRefPtr;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class CacheDBConnection;
+class CacheStreamControlParent;
 struct SavedResponse;
 struct StreamHolder;
 
 class CacheParent MOZ_FINAL : public PCacheParent
                             , public Manager::Listener
                             , public FetchPut::Listener
 {
 public:
@@ -49,35 +50,35 @@ public:
              const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool
   RecvKeys(const RequestId& aRequestId, const PCacheRequestOrVoid& aRequest,
            const PCacheQueryParams& aParams) MOZ_OVERRIDE;
 
   // Manager::Listener methods
   virtual void OnCacheMatch(RequestId aRequestId, nsresult aRv,
                             const SavedResponse* aSavedResponse,
-                            Manager::StreamList* aStreamList) MOZ_OVERRIDE;
+                            StreamList* aStreamList) MOZ_OVERRIDE;
   virtual void OnCacheMatchAll(RequestId aRequestId, nsresult aRv,
                                const nsTArray<SavedResponse>& aSavedResponses,
-                               Manager::StreamList* aStreamList) MOZ_OVERRIDE;
+                               StreamList* aStreamList) MOZ_OVERRIDE;
   virtual void OnCachePutAll(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
   virtual void OnCacheDelete(RequestId aRequestId, nsresult aRv,
                              bool aSuccess) MOZ_OVERRIDE;
   virtual void OnCacheKeys(RequestId aRequestId, nsresult aRv,
                            const nsTArray<SavedRequest>& aSavedRequests,
-                           Manager::StreamList* aStreamList) MOZ_OVERRIDE;
+                           StreamList* aStreamList) MOZ_OVERRIDE;
 
   // FetchPut::Listener methods
   virtual void OnFetchPut(FetchPut* aFetchPut, RequestId aRequestId,
                           nsresult aRv) MOZ_OVERRIDE;
 
 private:
-  Manager::StreamControl*
-  SerializeReadStream(Manager::StreamControl *aStreamControl, const nsID& aId,
-                      Manager::StreamList* aStreamList,
+  CacheStreamControlParent*
+  SerializeReadStream(CacheStreamControlParent *aStreamControl, const nsID& aId,
+                      StreamList* aStreamList,
                       PCacheReadStream* aReadStreamOut);
 
   already_AddRefed<nsIInputStream>
   DeserializeCacheStream(const PCacheReadStreamOrVoid& aStreamOrVoid);
 
   nsRefPtr<cache::Manager> mManager;
   const CacheId mCacheId;
   nsTArray<nsRefPtr<FetchPut>> mFetchPutList;
diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -8,16 +8,17 @@
 
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/cache/CacheParent.h"
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 #include "mozilla/dom/cache/Manager.h"
 #include "mozilla/dom/cache/ManagerId.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/SavedTypes.h"
+#include "mozilla/dom/cache/StreamList.h"
 #include "mozilla/ipc/PBackgroundParent.h"
 #include "mozilla/ipc/InputStreamUtils.h"
 #include "mozilla/ipc/PFileDescriptorSetParent.h"
 #include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
 #include "nsCOMPtr.h"
 
 namespace mozilla {
@@ -164,17 +165,17 @@ CacheStorageParent::OnPrincipalVerified(
   mVerifier = nullptr;
 
   RetryPendingRequests();
 }
 
 void
 CacheStorageParent::OnStorageMatch(RequestId aRequestId, nsresult aRv,
                                    const SavedResponse* aSavedResponse,
-                                   Manager::StreamList* aStreamList)
+                                   StreamList* aStreamList)
 {
   PCacheResponseOrVoid responseOrVoid;
 
   ReleaseManager(aRequestId);
 
   // no match
   if (NS_FAILED(aRv) || !aSavedResponse) {
     responseOrVoid = void_t();
@@ -238,20 +239,20 @@ CacheStorageParent::OnStorageDelete(Requ
 void
 CacheStorageParent::OnStorageKeys(RequestId aRequestId, nsresult aRv,
                                   const nsTArray<nsString>& aKeys)
 {
   ReleaseManager(aRequestId);
   unused << SendKeysResponse(aRequestId, aRv, aKeys);
 }
 
-Manager::StreamControl*
-CacheStorageParent::SerializeReadStream(Manager::StreamControl *aStreamControl,
+CacheStreamControlParent*
+CacheStorageParent::SerializeReadStream(CacheStreamControlParent *aStreamControl,
                                         const nsID& aId,
-                                        Manager::StreamList* aStreamList,
+                                        StreamList* aStreamList,
                                         PCacheReadStream* aReadStreamOut)
 {
   MOZ_ASSERT(aStreamList);
   MOZ_ASSERT(aReadStreamOut);
 
   nsCOMPtr<nsIInputStream> stream = aStreamList->Extract(aId);
   MOZ_ASSERT(stream);
 
diff --git a/dom/cache/CacheStorageParent.h b/dom/cache/CacheStorageParent.h
--- a/dom/cache/CacheStorageParent.h
+++ b/dom/cache/CacheStorageParent.h
@@ -14,16 +14,17 @@
 #include "mozilla/dom/cache/Types.h"
 
 template <class T> class nsRefPtr;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
+class CacheStreamControlParent;
 class ManagerId;
 
 class CacheStorageParent MOZ_FINAL : public PCacheStorageParent
                                    , public PrincipalVerifier::Listener
                                    , public Manager::Listener
 {
 public:
   CacheStorageParent(PBackgroundParent* aManagingActor, Namespace aNamespace,
@@ -45,30 +46,30 @@ public:
 
   // PrincipalVerifier::Listener methods
   virtual void OnPrincipalVerified(nsresult aRv,
                                    ManagerId* aManagerId) MOZ_OVERRIDE;
 
   // Manager::Listener methods
   virtual void OnStorageMatch(RequestId aRequestId, nsresult aRv,
                               const SavedResponse* aResponse,
-                              Manager::StreamList* aStreamList) MOZ_OVERRIDE;
+                              StreamList* aStreamList) MOZ_OVERRIDE;
   virtual void OnStorageHas(RequestId aRequestId, nsresult aRv,
                             bool aCacheFound) MOZ_OVERRIDE;
   virtual void OnStorageOpen(RequestId aRequestId, nsresult aRv,
                              CacheId aCacheId) MOZ_OVERRIDE;
   virtual void OnStorageDelete(RequestId aRequestId, nsresult aRv,
                                bool aCacheDeleted) MOZ_OVERRIDE;
   virtual void OnStorageKeys(RequestId aRequestId, nsresult aRv,
                              const nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
 
 private:
-  Manager::StreamControl*
-  SerializeReadStream(Manager::StreamControl *aStreamControl, const nsID& aId,
-                      Manager::StreamList* aStreamList,
+  CacheStreamControlParent*
+  SerializeReadStream(CacheStreamControlParent *aStreamControl, const nsID& aId,
+                      StreamList* aStreamList,
                       PCacheReadStream* aReadStreamOut);
 
   void RetryPendingRequests();
   void FailPendingRequests(nsresult aRv);
 
   cache::Manager* RequestManager(RequestId aRequestId);
   void ReleaseManager(RequestId aRequestId);
 
diff --git a/dom/cache/CacheStreamControlParent.cpp b/dom/cache/CacheStreamControlParent.cpp
--- a/dom/cache/CacheStreamControlParent.cpp
+++ b/dom/cache/CacheStreamControlParent.cpp
@@ -4,16 +4,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 
 #include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
 #include "mozilla/dom/cache/ReadStream.h"
+#include "mozilla/dom/cache/StreamList.h"
 #include "nsISupportsImpl.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 CacheStreamControlParent::CacheStreamControlParent()
 {
@@ -58,17 +59,17 @@ bool
 CacheStreamControlParent::RecvNoteClosed(const nsID& aId)
 {
   MOZ_ASSERT(mStreamList);
   mStreamList->NoteClosed(aId);
   return true;
 }
 
 void
-CacheStreamControlParent::SetStreamList(Manager::StreamList* aStreamList)
+CacheStreamControlParent::SetStreamList(StreamList* aStreamList)
 {
   MOZ_ASSERT(!mStreamList);
   mStreamList = aStreamList;
 }
 
 void
 CacheStreamControlParent::Close(const nsID& aId)
 {
diff --git a/dom/cache/CacheStreamControlParent.h b/dom/cache/CacheStreamControlParent.h
--- a/dom/cache/CacheStreamControlParent.h
+++ b/dom/cache/CacheStreamControlParent.h
@@ -2,51 +2,51 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_cache_CacheStreamControlParent_h
 #define mozilla_dom_cache_CacheStreamControlParent_h
 
-#include "mozilla/dom/cache/Manager.h"
+#include "mozilla/dom/cache/PCacheStreamControlParent.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class ReadStream;
+class StreamList;
 
-class CacheStreamControlParent : public Manager::StreamControl
+class CacheStreamControlParent : public PCacheStreamControlParent
 {
 public:
   CacheStreamControlParent();
   ~CacheStreamControlParent();
 
   void AddListener(ReadStream* aListener);
   void RemoveListener(ReadStream* aListener);
 
+  void SetStreamList(StreamList* aStreamList);
+  void Close(const nsID& aId);
+  void CloseAll();
+  void Shutdown();
+
   // PCacheStreamControlParent methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvNoteClosed(const nsID& aId) MOZ_OVERRIDE;
 
-  // Manager::StreamControl methods
-  virtual void SetStreamList(Manager::StreamList* aStreamList) MOZ_OVERRIDE;
-  virtual void Close(const nsID& aId) MOZ_OVERRIDE;
-  virtual void CloseAll() MOZ_OVERRIDE;
-  virtual void Shutdown() MOZ_OVERRIDE;
-
 private:
   void NotifyClose(const nsID& aId);
   void NotifyCloseAll();
 
   // Cycle with StreamList via a weak-ref to us.  Cleanup occurs when the actor
   // is deleted by the PBackground manager.  ActorDestroy() then calls
   // StreamList::RemoveStreamControl() to clear the weak ref.
-  nsRefPtr<Manager::StreamList> mStreamList;
+  nsRefPtr<StreamList> mStreamList;
 
   nsTArray<ReadStream*> mListeners;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -7,16 +7,17 @@
 #include "mozilla/dom/cache/Manager.h"
 
 #include "mozilla/dom/cache/DBAction.h"
 #include "mozilla/dom/cache/DBSchema.h"
 #include "mozilla/dom/cache/FileUtils.h"
 #include "mozilla/dom/cache/ManagerId.h"
 #include "mozilla/dom/cache/PCacheTypes.h"
 #include "mozilla/dom/cache/SavedTypes.h"
+#include "mozilla/dom/cache/StreamList.h"
 #include "mozilla/dom/cache/ShutdownObserver.h"
 #include "mozilla/dom/cache/Types.h"
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozStorageHelper.h"
 #include "nsAutoPtr.h"
 #include "nsIInputStream.h"
 #include "nsID.h"
 #include "nsIFile.h"
@@ -1017,155 +1018,16 @@ public:
   }
 
 private:
   virtual ~StorageKeysAction() { }
   const Namespace mNamespace;
   nsTArray<nsString> mKeys;
 };
 
-Manager::StreamList::StreamList(Manager* aManager, Context* aContext)
-  : mManager(aManager)
-  , mContext(aContext)
-  , mCacheId(0)
-  , mStreamControl(nullptr)
-  , mActivated(false)
-{
-  MOZ_ASSERT(mManager);
-  MOZ_ASSERT(mContext);
-}
-
-void
-Manager::StreamList::SetStreamControl(StreamControl* aStreamControl)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  MOZ_ASSERT(aStreamControl);
-
-  // For cases where multiple streams are serialized for a single list
-  // then the control will get passed multiple times.  This ok, but
-  // it should be the same control each time.
-  if (mStreamControl) {
-    MOZ_ASSERT(aStreamControl == mStreamControl);
-    return;
-  }
-
-  mStreamControl = aStreamControl;
-  mStreamControl->SetStreamList(this);
-}
-
-void
-Manager::StreamList::RemoveStreamControl(StreamControl* aStreamControl)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  MOZ_ASSERT(mStreamControl);
-  mStreamControl = nullptr;
-}
-
-void
-Manager::StreamList::Activate(CacheId aCacheId)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  MOZ_ASSERT(!mActivated);
-  MOZ_ASSERT(!mCacheId);
-  mActivated = true;
-  mCacheId = aCacheId;
-  mManager->AddRefCacheId(mCacheId);
-  mManager->AddStreamList(this);
-
-  for (uint32_t i = 0; i < mList.Length(); ++i) {
-    mManager->AddRefBodyId(mList[i].mId);
-  }
-}
-
-void
-Manager::StreamList::Add(const nsID& aId, nsIInputStream* aStream)
-{
-  // All streams should be added on IO thread before we set the stream
-  // control on the owning IPC thread.
-  MOZ_ASSERT(!mStreamControl);
-  MOZ_ASSERT(aStream);
-  Entry* entry = mList.AppendElement();
-  entry->mId = aId;
-  entry->mStream = aStream;
-}
-
-already_AddRefed<nsIInputStream>
-Manager::StreamList::Extract(const nsID& aId)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  for (uint32_t i = 0; i < mList.Length(); ++i) {
-    if (mList[i].mId == aId) {
-      return mList[i].mStream.forget();
-    }
-  }
-  return nullptr;
-}
-
-void
-Manager::StreamList::NoteClosed(const nsID& aId)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  for (uint32_t i = 0; i < mList.Length(); ++i) {
-    if (mList[i].mId == aId) {
-      mList.RemoveElementAt(i);
-      mManager->ReleaseBodyId(aId);
-      break;
-    }
-  }
-
-  if (mList.IsEmpty() && mStreamControl) {
-    mStreamControl->Shutdown();
-  }
-}
-
-void
-Manager::StreamList::NoteClosedAll()
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  for (uint32_t i = 0; i < mList.Length(); ++i) {
-    mManager->ReleaseBodyId(mList[i].mId);
-  }
-  mList.Clear();
-
-  if (mStreamControl) {
-    mStreamControl->Shutdown();
-  }
-}
-
-void
-Manager::StreamList::Close(const nsID& aId)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  if (mStreamControl) {
-    mStreamControl->Close(aId);
-  }
-}
-
-void
-Manager::StreamList::CloseAll()
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  if (mStreamControl) {
-    mStreamControl->CloseAll();
-  }
-}
-
-Manager::StreamList::~StreamList()
-{
-  NS_ASSERT_OWNINGTHREAD(Manager::StreamList);
-  MOZ_ASSERT(!mStreamControl);
-  if (mActivated) {
-    mManager->RemoveStreamList(this);
-    for (uint32_t i = 0; i < mList.Length(); ++i) {
-      mManager->ReleaseBodyId(mList[i].mId);
-    }
-    mManager->ReleaseCacheId(mCacheId);
-  }
-}
-
 // static
 already_AddRefed<Manager>
 Manager::GetOrCreate(ManagerId* aManagerId)
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
   return Factory::Instance().GetOrCreate(aManagerId);
 }
 
@@ -1221,16 +1083,56 @@ Manager::ReleaseCacheId(CacheId aCacheId
         }
       }
       return;
     }
   }
   MOZ_ASSERT_UNREACHABLE("Attempt to release CacheId that is not referenced!");
 }
 
+void
+Manager::AddRefBodyId(const nsID& aBodyId)
+{
+  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
+    if (mBodyIdRefs[i].mBodyId == aBodyId) {
+      mBodyIdRefs[i].mCount += 1;
+      return;
+    }
+  }
+  BodyIdRefCounter* entry = mBodyIdRefs.AppendElement();
+  entry->mBodyId = aBodyId;
+  entry->mCount = 1;
+  entry->mOrphaned = false;
+}
+
+void
+Manager::ReleaseBodyId(const nsID& aBodyId)
+{
+  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
+    if (mBodyIdRefs[i].mBodyId == aBodyId) {
+      DebugOnly<uint32_t> oldRef = mBodyIdRefs[i].mCount;
+      mBodyIdRefs[i].mCount -= 1;
+      MOZ_ASSERT(mBodyIdRefs[i].mCount < oldRef);
+      if (mBodyIdRefs[i].mCount < 1) {
+        bool orphaned = mBodyIdRefs[i].mOrphaned;
+        mBodyIdRefs.RemoveElementAt(i);
+        // TODO: note that we need to check this body for staleness on startup (bug 1110446)
+        if (orphaned && !mShuttingDown) {
+          nsRefPtr<Action> action = new DeleteOrphanedBodyAction(aBodyId);
+          CurrentContext()->Dispatch(mIOThread, action);
+        }
+      }
+      return;
+    }
+  }
+  MOZ_ASSERT_UNREACHABLE("Attempt to release BodyId that is not referenced!");
+}
+
 bool
 Manager::SetCacheIdOrphanedIfRefed(CacheId aCacheId)
 {
   NS_ASSERT_OWNINGTHREAD(Context::Listener);
   for (uint32_t i = 0; i < mCacheIdRefs.Length(); ++i) {
     if (mCacheIdRefs[i].mCacheId == aCacheId) {
       MOZ_ASSERT(mCacheIdRefs[i].mCount > 0);
       MOZ_ASSERT(!mCacheIdRefs[i].mOrphaned);
@@ -1266,16 +1168,32 @@ Manager::Shutdown()
 already_AddRefed<ManagerId>
 Manager::GetManagerId() const
 {
   nsRefPtr<ManagerId> ref = mManagerId;
   return ref.forget();
 }
 
 void
+Manager::AddStreamList(StreamList* aStreamList)
+{
+  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  MOZ_ASSERT(aStreamList);
+  mStreamLists.AppendElement(aStreamList);
+}
+
+void
+Manager::RemoveStreamList(StreamList* aStreamList)
+{
+  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  MOZ_ASSERT(aStreamList);
+  mStreamLists.RemoveElement(aStreamList);
+}
+
+void
 Manager::CacheMatch(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
                     const PCacheRequest& aRequest,
                     const PCacheQueryParams& aParams)
 {
   NS_ASSERT_OWNINGTHREAD(Context::Listener);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnCacheMatch(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
@@ -1531,72 +1449,16 @@ Manager::GetListener(ListenerId aListene
   for (uint32_t i = 0; i < mListeners.Length(); ++i) {
     if (reinterpret_cast<ListenerId>(mListeners[i]) == aListenerId) {
       return mListeners[i];
     }
   }
   return nullptr;
 }
 
-void
-Manager::AddStreamList(StreamList* aStreamList)
-{
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
-  MOZ_ASSERT(aStreamList);
-  mStreamLists.AppendElement(aStreamList);
-}
-
-void
-Manager::RemoveStreamList(StreamList* aStreamList)
-{
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
-  MOZ_ASSERT(aStreamList);
-  mStreamLists.RemoveElement(aStreamList);
-}
-
-void
-Manager::AddRefBodyId(const nsID& aBodyId)
-{
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
-  for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
-    if (mBodyIdRefs[i].mBodyId == aBodyId) {
-      mBodyIdRefs[i].mCount += 1;
-      return;
-    }
-  }
-  BodyIdRefCounter* entry = mBodyIdRefs.AppendElement();
-  entry->mBodyId = aBodyId;
-  entry->mCount = 1;
-  entry->mOrphaned = false;
-}
-
-void
-Manager::ReleaseBodyId(const nsID& aBodyId)
-{
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
-  for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
-    if (mBodyIdRefs[i].mBodyId == aBodyId) {
-      DebugOnly<uint32_t> oldRef = mBodyIdRefs[i].mCount;
-      mBodyIdRefs[i].mCount -= 1;
-      MOZ_ASSERT(mBodyIdRefs[i].mCount < oldRef);
-      if (mBodyIdRefs[i].mCount < 1) {
-        bool orphaned = mBodyIdRefs[i].mOrphaned;
-        mBodyIdRefs.RemoveElementAt(i);
-        // TODO: note that we need to check this body for staleness on startup (bug 1110446)
-        if (orphaned && !mShuttingDown) {
-          nsRefPtr<Action> action = new DeleteOrphanedBodyAction(aBodyId);
-          CurrentContext()->Dispatch(mIOThread, action);
-        }
-      }
-      return;
-    }
-  }
-  MOZ_ASSERT_UNREACHABLE("Attempt to release BodyId that is not referenced!");
-}
-
 // TODO: provide way to set body non-orphaned if its added back to a cache (bug 1110479)
 
 bool
 Manager::SetBodyIdOrphanedIfRefed(const nsID& aBodyId)
 {
   NS_ASSERT_OWNINGTHREAD(Context::Listener);
   for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
     if (mBodyIdRefs[i].mBodyId == aBodyId) {
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -27,70 +27,21 @@ namespace cache {
 class CacheRequestResponse;
 class ManagerId;
 class PCacheQueryParams;
 class PCacheRequest;
 class PCacheRequestOrVoid;
 class PCacheResponse;
 struct SavedRequest;
 struct SavedResponse;
+class StreamList;
 
 class Manager MOZ_FINAL : public Context::Listener
 {
 public:
-  class StreamList;
-
-  class StreamControl : public PCacheStreamControlParent
-  {
-  public:
-    virtual ~StreamControl() { }
-
-    virtual void SetStreamList(StreamList* aStreamList)=0;
-
-    virtual void Close(const nsID& aId)=0;
-    virtual void CloseAll()=0;
-    virtual void Shutdown()=0;
-  };
-
-  class StreamList
-  {
-  public:
-    StreamList(Manager* aManager, Context* aContext);
-
-    void SetStreamControl(StreamControl* aStreamControl);
-    void RemoveStreamControl(StreamControl* aStreamControl);
-
-    void Activate(CacheId aCacheId);
-
-    void Add(const nsID& aId, nsIInputStream* aStream);
-    already_AddRefed<nsIInputStream> Extract(const nsID& aId);
-
-    void NoteClosed(const nsID& aId);
-    void NoteClosedAll();
-    void Close(const nsID& aId);
-    void CloseAll();
-
-  private:
-    ~StreamList();
-    struct Entry
-    {
-      nsID mId;
-      nsCOMPtr<nsIInputStream> mStream;
-    };
-    nsRefPtr<Manager> mManager;
-    nsRefPtr<Context> mContext;
-    CacheId mCacheId;
-    StreamControl* mStreamControl;
-    nsTArray<Entry> mList;
-    bool mActivated;
-
-  public:
-    NS_INLINE_DECL_REFCOUNTING(mozilla::dom::cache::Manager::StreamList)
-  };
-
   class Listener
   {
   public:
     virtual ~Listener() { }
 
     virtual void OnCacheMatch(RequestId aRequestId, nsresult aRv,
                               const SavedResponse* aResponse,
                               StreamList* aStreamList) { }
@@ -118,20 +69,25 @@ public:
   };
 
   static already_AddRefed<Manager> GetOrCreate(ManagerId* aManagerId);
   static already_AddRefed<Manager> Get(ManagerId* aManagerId);
 
   void RemoveListener(Listener* aListener);
   void AddRefCacheId(CacheId aCacheId);
   void ReleaseCacheId(CacheId aCacheId);
+  void AddRefBodyId(const nsID& aBodyId);
+  void ReleaseBodyId(const nsID& aBodyId);
   bool SetCacheIdOrphanedIfRefed(CacheId aCacheId);
   void Shutdown();
   already_AddRefed<ManagerId> GetManagerId() const;
 
+  void AddStreamList(StreamList* aStreamList);
+  void RemoveStreamList(StreamList* aStreamList);
+
   // TODO: consider moving CacheId up in the argument lists below (bug 1110485)
   void CacheMatch(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
                   const PCacheRequest& aRequest,
                   const PCacheQueryParams& aParams);
   void CacheMatchAll(Listener* aListener, RequestId aRequestId,
                      CacheId aCacheId, const PCacheRequestOrVoid& aRequestOrVoid,
                      const PCacheQueryParams& aParams);
   void CachePutAll(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
@@ -182,21 +138,16 @@ private:
 
   Manager(ManagerId* aManagerId);
   ~Manager();
   Context* CurrentContext();
 
   ListenerId SaveListener(Listener* aListener);
   Listener* GetListener(ListenerId aListenerId) const;
 
-  void AddStreamList(StreamList* aStreamList);
-  void RemoveStreamList(StreamList* aStreamList);
-
-  void AddRefBodyId(const nsID& aBodyId);
-  void ReleaseBodyId(const nsID& aBodyId);
   bool SetBodyIdOrphanedIfRefed(const nsID& aBodyId);
   void NoteOrphanedBodyIdList(const nsTArray<nsID>& aDeletedBodyIdList);
 
   nsRefPtr<ManagerId> mManagerId;
   nsCOMPtr<nsIThread> mIOThread;
   nsTArray<Listener*> mListeners;
   nsTArray<StreamList*> mStreamLists;
 
diff --git a/dom/cache/StreamList.cpp b/dom/cache/StreamList.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/StreamList.cpp
@@ -0,0 +1,159 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/cache/StreamList.h"
+
+#include "mozilla/dom/cache/CacheStreamControlParent.h"
+#include "mozilla/dom/cache/Context.h"
+#include "mozilla/dom/cache/Manager.h"
+#include "nsIInputStream.h"
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+StreamList::StreamList(Manager* aManager, Context* aContext)
+  : mManager(aManager)
+  , mContext(aContext)
+  , mCacheId(0)
+  , mStreamControl(nullptr)
+  , mActivated(false)
+{
+  MOZ_ASSERT(mManager);
+  MOZ_ASSERT(mContext);
+}
+
+void
+StreamList::SetStreamControl(CacheStreamControlParent* aStreamControl)
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  MOZ_ASSERT(aStreamControl);
+
+  // For cases where multiple streams are serialized for a single list
+  // then the control will get passed multiple times.  This is ok, but
+  // it should be the same control each time.
+  if (mStreamControl) {
+    MOZ_ASSERT(aStreamControl == mStreamControl);
+    return;
+  }
+
+  mStreamControl = aStreamControl;
+  mStreamControl->SetStreamList(this);
+}
+
+void
+StreamList::RemoveStreamControl(CacheStreamControlParent* aStreamControl)
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  MOZ_ASSERT(mStreamControl);
+  mStreamControl = nullptr;
+}
+
+void
+StreamList::Activate(CacheId aCacheId)
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  MOZ_ASSERT(!mActivated);
+  MOZ_ASSERT(!mCacheId);
+  mActivated = true;
+  mCacheId = aCacheId;
+  mManager->AddRefCacheId(mCacheId);
+  mManager->AddStreamList(this);
+
+  for (uint32_t i = 0; i < mList.Length(); ++i) {
+    mManager->AddRefBodyId(mList[i].mId);
+  }
+}
+
+void
+StreamList::Add(const nsID& aId, nsIInputStream* aStream)
+{
+  // All streams should be added on IO thread before we set the stream
+  // control on the owning IPC thread.
+  MOZ_ASSERT(!mStreamControl);
+  MOZ_ASSERT(aStream);
+  Entry* entry = mList.AppendElement();
+  entry->mId = aId;
+  entry->mStream = aStream;
+}
+
+already_AddRefed<nsIInputStream>
+StreamList::Extract(const nsID& aId)
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  for (uint32_t i = 0; i < mList.Length(); ++i) {
+    if (mList[i].mId == aId) {
+      return mList[i].mStream.forget();
+    }
+  }
+  return nullptr;
+}
+
+void
+StreamList::NoteClosed(const nsID& aId)
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  for (uint32_t i = 0; i < mList.Length(); ++i) {
+    if (mList[i].mId == aId) {
+      mList.RemoveElementAt(i);
+      mManager->ReleaseBodyId(aId);
+      break;
+    }
+  }
+
+  if (mList.IsEmpty() && mStreamControl) {
+    mStreamControl->Shutdown();
+  }
+}
+
+void
+StreamList::NoteClosedAll()
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  for (uint32_t i = 0; i < mList.Length(); ++i) {
+    mManager->ReleaseBodyId(mList[i].mId);
+  }
+  mList.Clear();
+
+  if (mStreamControl) {
+    mStreamControl->Shutdown();
+  }
+}
+
+void
+StreamList::Close(const nsID& aId)
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  if (mStreamControl) {
+    mStreamControl->Close(aId);
+  }
+}
+
+void
+StreamList::CloseAll()
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  if (mStreamControl) {
+    mStreamControl->CloseAll();
+  }
+}
+
+StreamList::~StreamList()
+{
+  NS_ASSERT_OWNINGTHREAD(StreamList);
+  MOZ_ASSERT(!mStreamControl);
+  if (mActivated) {
+    mManager->RemoveStreamList(this);
+    for (uint32_t i = 0; i < mList.Length(); ++i) {
+      mManager->ReleaseBodyId(mList[i].mId);
+    }
+    mManager->ReleaseCacheId(mCacheId);
+  }
+}
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/StreamList.h b/dom/cache/StreamList.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/StreamList.h
@@ -0,0 +1,64 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_StreamList_h
+#define mozilla_dom_cache_StreamList_h
+
+#include "mozilla/dom/cache/Types.h"
+#include "nsRefPtr.h"
+#include "nsTArray.h"
+
+class nsIInputStream;
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+class CacheStreamControlParent;
+class Context;
+class Manager;
+
+class StreamList
+{
+public:
+  StreamList(Manager* aManager, Context* aContext);
+
+  void SetStreamControl(CacheStreamControlParent* aStreamControl);
+  void RemoveStreamControl(CacheStreamControlParent* aStreamControl);
+
+  void Activate(CacheId aCacheId);
+
+  void Add(const nsID& aId, nsIInputStream* aStream);
+  already_AddRefed<nsIInputStream> Extract(const nsID& aId);
+
+  void NoteClosed(const nsID& aId);
+  void NoteClosedAll();
+  void Close(const nsID& aId);
+  void CloseAll();
+
+private:
+  ~StreamList();
+  struct Entry
+  {
+    nsID mId;
+    nsCOMPtr<nsIInputStream> mStream;
+  };
+  nsRefPtr<Manager> mManager;
+  nsRefPtr<Context> mContext;
+  CacheId mCacheId;
+  CacheStreamControlParent* mStreamControl;
+  nsTArray<Entry> mList;
+  bool mActivated;
+
+public:
+  NS_INLINE_DECL_REFCOUNTING(cache::StreamList)
+};
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_StreamList_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -22,16 +22,17 @@ EXPORTS.mozilla.dom.cache += [
     'IPCUtils.h',
     'Manager.h',
     'ManagerId.h',
     'PrincipalVerifier.h',
     'QuotaClient.h',
     'ReadStream.h',
     'SavedTypes.h',
     'ShutdownObserver.h',
+    'StreamList.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
 SOURCES += [
     'Action.cpp',
     'Cache.cpp',
     'CacheChild.cpp',
@@ -47,16 +48,17 @@ SOURCES += [
     'FetchPut.cpp',
     'FileUtils.cpp',
     'Manager.cpp',
     'ManagerId.cpp',
     'PrincipalVerifier.cpp',
     'QuotaClient.cpp',
     'ReadStream.cpp',
     'ShutdownObserver.cpp',
+    'StreamList.cpp',
     'TypeUtils.cpp',
 ]
 
 IPDL_SOURCES += [
     'CacheInitData.ipdlh',
     'PCache.ipdl',
     'PCacheStorage.ipdl',
     'PCacheStreamControl.ipdl',
