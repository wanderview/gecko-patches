# HG changeset patch
# Parent 69cb671a316a43a63a58dfd8c32d5743be10100e
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 021 DBAction.(h|cpp) issues.

diff --git a/dom/cache/Context.cpp b/dom/cache/Context.cpp
--- a/dom/cache/Context.cpp
+++ b/dom/cache/Context.cpp
@@ -63,17 +63,17 @@ namespace cache {
 using mozilla::DebugOnly;
 using mozilla::dom::quota::OriginOrPatternString;
 using mozilla::dom::quota::QuotaManager;
 using mozilla::dom::quota::PERSISTENCE_TYPE_DEFAULT;
 using mozilla::dom::quota::PersistenceType;
 
 // Executed to perform the complicated dance of steps necessary to initialize
 // the QuotaManager.  This must be performed for each origin before any disk
-// IO is occurrs.
+// IO occurrs.
 class Context::QuotaInitRunnable MOZ_FINAL : public nsIRunnable
                                            , public Action::Resolver
 {
 public:
   QuotaInitRunnable(Context* aContext,
                     Manager* aManager,
                     const nsACString& aQuotaId,
                     Action* aQuotaIOThreadAction)
diff --git a/dom/cache/DBAction.cpp b/dom/cache/DBAction.cpp
--- a/dom/cache/DBAction.cpp
+++ b/dom/cache/DBAction.cpp
@@ -2,16 +2,17 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/DBAction.h"
 
 #include "mozilla/dom/quota/PersistenceType.h"
+#include "mozilla/net/nsFileProtocolHandler.h"
 #include "mozIStorageConnection.h"
 #include "mozIStorageService.h"
 #include "mozStorageCID.h"
 #include "nsIFile.h"
 #include "nsIURI.h"
 #include "nsNetUtil.h"
 
 namespace mozilla {
@@ -28,16 +29,17 @@ DBAction::DBAction(Mode aMode)
 
 DBAction::~DBAction()
 {
 }
 
 void
 DBAction::RunOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo)
 {
+  MOZ_ASSERT(!NS_IsMainThread());
   MOZ_ASSERT(aResolver);
   MOZ_ASSERT(aQuotaInfo.mDir);
 
   nsCOMPtr<nsIFile> dbDir;
   nsresult rv = aQuotaInfo.mDir->Clone(getter_AddRefs(dbDir));
   if (NS_WARN_IF(NS_FAILED(rv))) {
     aResolver->Resolve(rv);
     return;
@@ -59,16 +61,17 @@ DBAction::RunOnTarget(Resolver* aResolve
 
   RunWithDBOnTarget(aResolver, aQuotaInfo, dbDir, conn);
 }
 
 nsresult
 DBAction::OpenConnection(const QuotaInfo& aQuotaInfo, nsIFile* aDBDir,
                          mozIStorageConnection** aConnOut)
 {
+  MOZ_ASSERT(!NS_IsMainThread());
   MOZ_ASSERT(aDBDir);
   MOZ_ASSERT(aConnOut);
 
   bool exists;
   nsresult rv = aDBDir->Exists(&exists);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   if (!exists) {
@@ -76,28 +79,32 @@ DBAction::OpenConnection(const QuotaInfo
     rv = aDBDir->Create(nsIFile::DIRECTORY_TYPE, 0755);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
 
   nsCOMPtr<nsIFile> dbFile;
   rv = aDBDir->Clone(getter_AddRefs(dbFile));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  rv = dbFile->Append(NS_LITERAL_STRING("db.sqlite"));
+  rv = dbFile->Append(NS_LITERAL_STRING("caches.sqlite"));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = dbFile->Exists(&exists);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  // XXX: Jonas tells me nsIFileURL usage off-main-thread is dangerous,
-  //      but this is what IDB does to access mozIStorageConnection so
-  //      it seems at least this corner case mostly works.
-  // TODO: move this to main thread where GetInfoFromPrincipal() is executed (bug 1110485)
+  // Use our default file:// protocol handler directly to construct the database
+  // URL.  This avoids any problems if a plugin registers a custom file://
+  // handler.  If such a custom handler used javascript, then we would have a
+  // bad time running off the main thread here.
+  nsRefPtr<nsFileProtocolHandler> handler = new nsFileProtocolHandler();
+  rv = handler->Init();
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
   nsCOMPtr<nsIURI> uri;
-  rv = NS_NewFileURI(getter_AddRefs(uri), dbFile);
+  rv = handler->NewFileURI(dbFile, getter_AddRefs(uri));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   nsCOMPtr<nsIFileURL> dbFileUrl = do_QueryInterface(uri);
   if (NS_WARN_IF(!dbFileUrl)) { return NS_ERROR_UNEXPECTED; }
 
   nsAutoCString type;
   PersistenceTypeToText(PERSISTENCE_TYPE_DEFAULT, type);
 
@@ -108,19 +115,25 @@ DBAction::OpenConnection(const QuotaInfo
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   nsCOMPtr<mozIStorageService> ss =
     do_GetService(MOZ_STORAGE_SERVICE_CONTRACTID);
   if (NS_WARN_IF(!ss)) { return NS_ERROR_UNEXPECTED; }
 
   rv = ss->OpenDatabaseWithFileURL(dbFileUrl, aConnOut);
   if (rv == NS_ERROR_FILE_CORRUPTED) {
-    dbFile->Remove(false);
+    NS_WARNING("Cache database corrupted. Recreating empty database.");
+
+    // There is nothing else we can do to recover.  Also, this data can
+    // be deleted by QuotaManager at any time anyways.
+    rv = dbFile->Remove(false);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
+    // TODO: clean up any orphaned body files (bug 1110446)
+
     rv = ss->OpenDatabaseWithFileURL(dbFileUrl, aConnOut);
   }
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   MOZ_ASSERT(*aConnOut);
   return rv;
 }
 
 SyncDBAction::SyncDBAction(Mode aMode)
@@ -132,24 +145,26 @@ SyncDBAction::~SyncDBAction()
 {
 }
 
 void
 SyncDBAction::RunWithDBOnTarget(Resolver* aResolver,
                                 const QuotaInfo& aQuotaInfo, nsIFile* aDBDir,
                                 mozIStorageConnection* aConn)
 {
+  MOZ_ASSERT(!NS_IsMainThread());
   MOZ_ASSERT(aResolver);
   MOZ_ASSERT(aDBDir);
   MOZ_ASSERT(aConn);
 
   nsresult rv = RunSyncWithDBOnTarget(aQuotaInfo, aDBDir, aConn);
   aResolver->Resolve(rv);
 }
 
 void
 SyncDBAction::CancelOnTarget()
 {
+  // This action runs synchronously.  Nothing to cancel here.
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/DBAction.h b/dom/cache/DBAction.h
--- a/dom/cache/DBAction.h
+++ b/dom/cache/DBAction.h
@@ -23,40 +23,43 @@ class DBAction : public Action
 {
 protected:
   enum Mode
   {
     Existing,
     Create
   };
 
-  DBAction(Mode aMode);
+  explicit DBAction(Mode aMode);
+
+  // Action objects are deleted through their base pointer
   virtual ~DBAction();
 
   // Just as the resolver must be ref'd until cancel or resolve, you may also
   // ref the DB connection.  The connection can only be referenced from the
   // target thread and must be released upon cancel or resolve.
   virtual void
   RunWithDBOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo,
                     nsIFile* aDBDir, mozIStorageConnection* aConn) = 0;
 
   virtual void
   RunOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo) MOZ_OVERRIDE;
 
-private:
   nsresult OpenConnection(const QuotaInfo& aQuotaInfo, nsIFile* aQuotaDir,
                           mozIStorageConnection** aConnOut);
 
   const Mode mMode;
 };
 
 class SyncDBAction : public DBAction
 {
 protected:
-  SyncDBAction(Mode aMode);
+  explicit SyncDBAction(Mode aMode);
+
+  // Action objects are deleted through their base pointer
   virtual ~SyncDBAction();
 
   virtual nsresult
   RunSyncWithDBOnTarget(const QuotaInfo& aQuotaInfo, nsIFile* aDBDir,
                         mozIStorageConnection* aConn) = 0;
 
   virtual void
   RunWithDBOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo,
diff --git a/dom/cache/QuotaClient.cpp b/dom/cache/QuotaClient.cpp
--- a/dom/cache/QuotaClient.cpp
+++ b/dom/cache/QuotaClient.cpp
@@ -133,24 +133,24 @@ QuotaClient::GetUsageForOrigin(Persisten
       } else {
         NS_WARNING("Unknown Cache directory found!");
       }
 
       continue;
     }
 
     // Ignore transient sqlite files
-    if (leafName.EqualsLiteral("db.sqlite-journal") ||
-        leafName.EqualsLiteral("db.sqlite-shm") ||
-        leafName.Find(NS_LITERAL_CSTRING("db.sqlite-mj"), false, 0, 0) == 0) {
+    if (leafName.EqualsLiteral("caches.sqlite-journal") ||
+        leafName.EqualsLiteral("caches.sqlite-shm") ||
+        leafName.Find(NS_LITERAL_CSTRING("caches.sqlite-mj"), false, 0, 0) == 0) {
       continue;
     }
 
-    if (leafName.EqualsLiteral("db.sqlite") ||
-        leafName.EqualsLiteral("db.sqlite-wal")) {
+    if (leafName.EqualsLiteral("caches.sqlite") ||
+        leafName.EqualsLiteral("caches.sqlite-wal")) {
       int64_t fileSize;
       rv = file->GetFileSize(&fileSize);
       if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
       MOZ_ASSERT(fileSize >= 0);
 
       aUsageInfo->AppendToDatabaseUsage(fileSize);
       continue;
     }
