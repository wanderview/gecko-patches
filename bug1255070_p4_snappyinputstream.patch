# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  bd3866e72dd75789fd0c2432ca811a24387820f4
Bug 1255070 P4 Make SnappyUncompressInputStream implement nsIBufferedInputStream. r=froydnj

diff --git a/xpcom/io/SnappyUncompressInputStream.cpp b/xpcom/io/SnappyUncompressInputStream.cpp
--- a/xpcom/io/SnappyUncompressInputStream.cpp
+++ b/xpcom/io/SnappyUncompressInputStream.cpp
@@ -9,17 +9,18 @@
 #include <algorithm>
 #include "nsIAsyncInputStream.h"
 #include "nsStreamUtils.h"
 #include "snappy/snappy.h"
 
 namespace mozilla {
 
 NS_IMPL_ISUPPORTS(SnappyUncompressInputStream,
-                  nsIInputStream);
+                  nsIInputStream,
+                  nsIBufferedInputStream);
 
 // Putting kCompressedBufferLength inside a function avoids a static
 // constructor.
 static size_t CompressedBufferLength()
 {
   static size_t kCompressedBufferLength =
       detail::SnappyFrameUtils::MaxCompressedBufferLength(snappy::kBlockSize);
 
@@ -354,9 +355,16 @@ SnappyUncompressInputStream::ReadAll(cha
 
 size_t
 SnappyUncompressInputStream::UncompressedLength() const
 {
   MOZ_ASSERT(mNextByte <= mUncompressedBytes);
   return mUncompressedBytes - mNextByte;
 }
 
+NS_IMETHODIMP
+SnappyUncompressInputStream::Init(nsIInputStream*, uint32_t)
+{
+  MOZ_CRASH("SnappyUncompressInputStream must not be initialized using "
+            "nsIBufferedInputStream::Init()!");
+}
+
 } // namespace mozilla
diff --git a/xpcom/io/SnappyUncompressInputStream.h b/xpcom/io/SnappyUncompressInputStream.h
--- a/xpcom/io/SnappyUncompressInputStream.h
+++ b/xpcom/io/SnappyUncompressInputStream.h
@@ -5,23 +5,24 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_SnappyUncompressInputStream_h__
 #define mozilla_SnappyUncompressInputStream_h__
 
 #include "mozilla/Attributes.h"
 #include "mozilla/UniquePtr.h"
 #include "nsCOMPtr.h"
+#include "nsIBufferedStreams.h"
 #include "nsIInputStream.h"
 #include "nsISupportsImpl.h"
 #include "SnappyFrameUtils.h"
 
 namespace mozilla {
 
-class SnappyUncompressInputStream final : public nsIInputStream
+class SnappyUncompressInputStream final : public nsIBufferedInputStream
                                         , protected detail::SnappyFrameUtils
 {
 public:
   // Construct a new blocking stream to uncompress the given base stream.  The
   // base stream must also be blocking.  The base stream does not have to be
   // buffered.
   explicit SnappyUncompressInputStream(nsIInputStream* aBaseStream);
 
@@ -78,13 +79,14 @@ private:
 
   // The stream must begin with a StreamIdentifier chunk.  Are we still
   // expecting it?
   bool mNeedFirstStreamIdentifier;
 
 public:
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_NSIINPUTSTREAM
+  NS_DECL_NSIBUFFEREDINPUTSTREAM
 };
 
 } // namespace mozilla
 
 #endif // mozilla_SnappyUncompressInputStream_h__
diff --git a/xpcom/tests/gtest/TestSnappyStreams.cpp b/xpcom/tests/gtest/TestSnappyStreams.cpp
--- a/xpcom/tests/gtest/TestSnappyStreams.cpp
+++ b/xpcom/tests/gtest/TestSnappyStreams.cpp
@@ -184,8 +184,21 @@ TEST(SnappyStream, UncompressCorruptComp
 
 TEST(SnappyStream, UncompressCorruptCompressedDataContent)
 {
   static const char data[] = "\xff\x06\x00\x00sNaPpY" // stream identifier
                              "\x00\x25\x00\x00This is not a valid compressed stream";
   static const uint32_t dataLength = (sizeof(data) / sizeof(const char)) - 1;
   TestUncompressCorrupt(data, dataLength);
 }
+
+TEST(SnappyStream, UncompressInterfaces)
+{
+  nsCOMPtr<nsIInputStream> source;
+  nsresult rv = NS_NewCStringInputStream(getter_AddRefs(source), EmptyCString());
+  ASSERT_TRUE(NS_SUCCEEDED(rv));
+
+  nsCOMPtr<nsIInputStream> uncompress =
+    new SnappyUncompressInputStream(source);
+
+  nsCOMPtr<nsIBufferedInputStream> type1 = do_QueryInterface(uncompress);
+  ASSERT_TRUE(type1);
+}
