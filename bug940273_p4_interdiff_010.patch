# HG changeset patch
# Parent d3390c0aa4e7041fb6d3cf39c7b08aa02e5d1ca4
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 010 Fix pure virtual =0 style and remove stale virtual keywords.


diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -76,34 +76,28 @@ public:
 
   // binding methods
   static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
 
   virtual nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
 
   // methods forwarded from CacheChild
-  virtual void ActorDestroy(mozilla::ipc::IProtocol* aActor);
-  virtual void
-  RecvMatchResponse(RequestId aRequestId, nsresult aRv,
-                    const PCacheResponseOrVoid& aResponse);
-  virtual void
-  RecvMatchAllResponse(RequestId aRequestId, nsresult aRv,
-                       const nsTArray<PCacheResponse>& aResponses);
-  virtual void
-  RecvAddAllResponse(RequestId aRequestId, nsresult aRv);
-  virtual void
-  RecvPutResponse(RequestId aRequestId, nsresult aRv);
+  void ActorDestroy(mozilla::ipc::IProtocol* aActor);
+  void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
+                         const PCacheResponseOrVoid& aResponse);
+  void RecvMatchAllResponse(RequestId aRequestId, nsresult aRv,
+                            const nsTArray<PCacheResponse>& aResponses);
+  void RecvAddAllResponse(RequestId aRequestId, nsresult aRv);
+  void RecvPutResponse(RequestId aRequestId, nsresult aRv);
 
-  virtual void
-  RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
-                     bool aSuccess);
-  virtual void
-  RecvKeysResponse(RequestId aRequestId, nsresult aRv,
-                   const nsTArray<PCacheRequest>& aRequests);
+  void RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
+                          bool aSuccess);
+  void RecvKeysResponse(RequestId aRequestId, nsresult aRv,
+                        const nsTArray<PCacheRequest>& aRequests);
 
   // TypeUtils methods
   virtual nsIGlobalObject*
   GetGlobalObject() const MOZ_OVERRIDE;
   const nsACString& Origin() const MOZ_OVERRIDE;
 
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -73,27 +73,25 @@ public:
   virtual nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
 
   // nsIIPCbackgroundChildCreateCallback methods
   virtual void ActorCreated(PBackgroundChild* aActor) MOZ_OVERRIDE;
   virtual void ActorFailed() MOZ_OVERRIDE;
 
   // Methods forwarded from CacheStorageChild
-  virtual void ActorDestroy(mozilla::ipc::IProtocol* aActor);
-  virtual void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
-                           const PCacheResponseOrVoid& aResponse);
-  virtual void RecvHasResponse(RequestId aRequestId, nsresult aRv,
-                               bool aSuccess);
-  virtual void RecvOpenResponse(RequestId aRequestId, nsresult aRv,
-                                PCacheChild* aActor);
-  virtual void RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
-                                  bool aSuccess);
-  virtual void RecvKeysResponse(RequestId aRequestId, nsresult aRv,
-                                const nsTArray<nsString>& aKeys);
+  void ActorDestroy(mozilla::ipc::IProtocol* aActor);
+  void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
+                         const PCacheResponseOrVoid& aResponse);
+  void RecvHasResponse(RequestId aRequestId, nsresult aRv, bool aSuccess);
+  void RecvOpenResponse(RequestId aRequestId, nsresult aRv,
+                        PCacheChild* aActor);
+  void RecvDeleteResponse(RequestId aRequestId, nsresult aRv, bool aSuccess);
+  void RecvKeysResponse(RequestId aRequestId, nsresult aRv,
+                        const nsTArray<nsString>& aKeys);
 
   // TypeUtils method
   virtual nsIGlobalObject* GetGlobalObject() const MOZ_OVERRIDE;
   virtual const nsACString& Origin() const MOZ_OVERRIDE;
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
 #endif
 
diff --git a/dom/cache/DBAction.h b/dom/cache/DBAction.h
--- a/dom/cache/DBAction.h
+++ b/dom/cache/DBAction.h
@@ -31,17 +31,17 @@ protected:
   DBAction(Mode aMode);
   virtual ~DBAction();
 
   // Just as the resolver must be ref'd until cancel or resolve, you may also
   // ref the DB connection.  The connection can only be referenced from the
   // target thread and must be released upon cancel or resolve.
   virtual void
   RunWithDBOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo,
-                    nsIFile* aDBDir, mozIStorageConnection* aConn)=0;
+                    nsIFile* aDBDir, mozIStorageConnection* aConn) = 0;
 
   virtual void
   RunOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo) MOZ_OVERRIDE;
 
 private:
   nsresult OpenConnection(const QuotaInfo& aQuotaInfo, nsIFile* aQuotaDir,
                           mozIStorageConnection** aConnOut);
 
@@ -51,17 +51,17 @@ private:
 class SyncDBAction : public DBAction
 {
 protected:
   SyncDBAction(Mode aMode);
   virtual ~SyncDBAction();
 
   virtual nsresult
   RunSyncWithDBOnTarget(const QuotaInfo& aQuotaInfo, nsIFile* aDBDir,
-                        mozIStorageConnection* aConn)=0;
+                        mozIStorageConnection* aConn) = 0;
 
   virtual void
   RunWithDBOnTarget(Resolver* aResolver, const QuotaInfo& aQuotaInfo,
                     nsIFile* aDBDir, mozIStorageConnection* aConn) MOZ_OVERRIDE;
 
   virtual void CancelOnTarget() MOZ_OVERRIDE;
 };
 
diff --git a/dom/cache/FetchPut.h b/dom/cache/FetchPut.h
--- a/dom/cache/FetchPut.h
+++ b/dom/cache/FetchPut.h
@@ -41,17 +41,17 @@ class FetchPut MOZ_FINAL : public Manage
 {
 public:
   typedef std::pair<nsRefPtr<Request>, nsRefPtr<Response>> PutPair;
 
   class Listener
   {
   public:
     virtual void
-    OnFetchPut(FetchPut* aFetchPut, RequestId aRequestId, nsresult aRv)=0;
+    OnFetchPut(FetchPut* aFetchPut, RequestId aRequestId, nsresult aRv) = 0;
   };
 
   static nsresult
   Create(Listener* aListener, Manager* aManager,
          RequestId aRequestId, CacheId aCacheId,
          const nsTArray<PCacheRequest>& aRequests,
          const nsTArray<nsCOMPtr<nsIInputStream>>& aRequestStreams,
          FetchPut** aFetchPutOut);
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -145,17 +145,17 @@ protected:
   BaseAction(Manager* aManager, ListenerId aListenerId, RequestId aRequestId)
     : SyncDBAction(DBAction::Existing)
     , mManager(aManager)
     , mListenerId(aListenerId)
     , mRequestId (aRequestId)
   { }
 
   virtual void
-  Complete(Listener* aListener, nsresult aRv)=0;
+  Complete(Listener* aListener, nsresult aRv) = 0;
 
   virtual void
   CompleteOnInitiatingThread(nsresult aRv) MOZ_OVERRIDE
   {
     Listener* listener = mManager->GetListener(mListenerId);
     if (!listener) {
       return;
     }
diff --git a/dom/cache/PrincipalVerifier.h b/dom/cache/PrincipalVerifier.h
--- a/dom/cache/PrincipalVerifier.h
+++ b/dom/cache/PrincipalVerifier.h
@@ -24,17 +24,17 @@ class ManagerId;
 class PrincipalVerifier MOZ_FINAL : public nsRunnable
 {
 public:
   class Listener
   {
   public:
     virtual ~Listener() { }
 
-    virtual void OnPrincipalVerified(nsresult aRv, ManagerId* aManagerId)=0;
+    virtual void OnPrincipalVerified(nsresult aRv, ManagerId* aManagerId) = 0;
   };
 
   static nsresult
   Create(Listener* aListener, ipc::PBackgroundParent* aActor,
          const ipc::PrincipalInfo& aPrincipalInfo,
          PrincipalVerifier** aVerifierOut);
 
   void ClearListener();
diff --git a/dom/cache/ReadStream.h b/dom/cache/ReadStream.h
--- a/dom/cache/ReadStream.h
+++ b/dom/cache/ReadStream.h
@@ -41,34 +41,34 @@ public:
   static already_AddRefed<ReadStream>
   Create(PCacheStreamControlParent* aControl, const nsID& aId,
          nsIInputStream* aStream);
 
   void Serialize(PCacheReadStreamOrVoid* aReadStreamOut);
   void Serialize(PCacheReadStream* aReadStreamOut);
 
   // methods called from the child and parent CacheStreamControl actors
-  virtual void CloseStream();
-  virtual void CloseStreamWithoutReporting();
-  virtual bool MatchId(const nsID& aId) const;
+  void CloseStream();
+  void CloseStreamWithoutReporting();
+  bool MatchId(const nsID& aId) const;
 
 protected:
   ReadStream(const nsID& aId, nsIInputStream* aStream);
   virtual ~ReadStream();
 
   void NoteClosed();
   void Forget();
 
-  virtual void NoteClosedOnWorkerThread()=0;
-  virtual void ForgetOnWorkerThread()=0;
-  virtual void SerializeControl(PCacheReadStream* aReadStreamOut)=0;
+  virtual void NoteClosedOnWorkerThread() = 0;
+  virtual void ForgetOnWorkerThread() = 0;
+  virtual void SerializeControl(PCacheReadStream* aReadStreamOut) = 0;
 
   virtual void
   SerializeFds(PCacheReadStream* aReadStreamOut,
-               const nsTArray<mozilla::ipc::FileDescriptor>& fds)=0;
+               const nsTArray<mozilla::ipc::FileDescriptor>& fds) = 0;
 
   const nsID mId;
   nsCOMPtr<nsIInputStream> mStream;
   nsCOMPtr<nsIInputStream> mSnappyStream;
   nsCOMPtr<nsIThread> mThread;
   bool mClosed;
 
 public:
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -48,20 +48,20 @@ protected:
 
   enum ReferrerAction
   {
     PassThroughReferrer,
     ExpandReferrer
   };
 
   virtual ~TypeUtils() { }
-  virtual nsIGlobalObject* GetGlobalObject() const=0;
-  virtual const nsACString& Origin() const=0;
+  virtual nsIGlobalObject* GetGlobalObject() const = 0;
+  virtual const nsACString& Origin() const = 0;
 #ifdef DEBUG
-  virtual void AssertOwningThread() const=0;
+  virtual void AssertOwningThread() const = 0;
 #else
   inline void AssertOwningThread() const { }
 #endif
 
   void
   ToPCacheRequest(PCacheRequest& aOut,
                   const RequestOrUSVString& aIn, BodyAction aBodyAction,
                   ReferrerAction aReferrerAction, ErrorResult& aRv);
