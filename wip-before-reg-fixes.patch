# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  00272b2998a46f8109c5549e1d4ce4f8b1ca8577

diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -287,17 +287,16 @@ ServiceWorkerRegistration::ShowNotificat
     return nullptr;
   }
 
   NS_ConvertUTF8toUTF16 scope(mDescriptor.Scope());
 
   // Until we ship ServiceWorker objects on worker threads the active
   // worker will always be nullptr.  So limit this check to main
   // thread for now.
-  MOZ_ASSERT_IF(!NS_IsMainThread(), mDescriptor.GetActive().isNothing());
   if (mDescriptor.GetActive().isNothing() && NS_IsMainThread()) {
     aRv.ThrowTypeError<MSG_NO_ACTIVE_WORKER>(scope);
     return nullptr;
   }
 
   RefPtr<Promise> p =
     Notification::ShowPersistentNotification(aCx, global, scope,
                                              aTitle, aOptions, aRv);
@@ -413,17 +412,17 @@ ServiceWorkerRegistration::UpdateStateIn
     mInstallingWorker = global->GetOrCreateServiceWorker(aInstalling.ref());
     mInstallingWorker->SetState(aInstalling.ref().State());
   } else {
     mInstallingWorker = nullptr;
   }
 }
 
 void
-ServiceWorkerRegistration::MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor> aInstallingDescriptor)
+ServiceWorkerRegistration::MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor)
 {
   uint64_t newId = aInstallingDescriptor.isSome()
                  ? aInstallingDescriptor.ref().Id()
                  : kInvalidUpdateFoundId;
 
   if (mScheduledUpdateFoundId != kInvalidUpdateFoundId) {
     if (mScheduledUpdateFoundId == newId) {
       return;
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -127,17 +127,17 @@ private:
   ~ServiceWorkerRegistration();
 
   void
   UpdateStateInternal(const Maybe<ServiceWorkerDescriptor>& aInstalling,
                       const Maybe<ServiceWorkerDescriptor>& aWaiting,
                       const Maybe<ServiceWorkerDescriptor>& aActive);
 
   void
-  MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor> aInstallingDescriptor);
+  MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor);
 
   void
   MaybeDispatchUpdateFound();
 
   void
   UpdatePromiseSettled();
 
   ServiceWorkerRegistrationDescriptor mDescriptor;
