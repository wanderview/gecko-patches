# HG changeset patch
# Parent b3a8e67ad1573a078f16b32408c94671d509cd59
# User Ben Kelly <ben@wanderview.com>
Bug 1110814 P3 Evil work around for non-e10s.  CrossProcessPipe currently asserts there.

diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -8,28 +8,31 @@
 
 #include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
 #include "mozilla/dom/cache/AutoUtils.h"
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/SavedTypes.h"
 #include "mozilla/dom/cache/StreamList.h"
+#include "mozilla/dom/cache/StreamStash.h"
+#include "mozilla/ipc/BackgroundParent.h"
 #include "mozilla/ipc/InputStreamUtils.h"
 #include "mozilla/ipc/PBackgroundParent.h"
 #include "mozilla/ipc/FileDescriptorSetParent.h"
 #include "mozilla/ipc/PFileDescriptorSetParent.h"
 #include "nsCOMPtr.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::unused;
 using mozilla::void_t;
+using mozilla::ipc::BackgroundParent;
 using mozilla::ipc::FileDescriptorSetParent;
 using mozilla::ipc::PFileDescriptorSetParent;
 
 CacheParent::CacheParent(cache::Manager* aManager, CacheId aCacheId)
   : mManager(aManager)
   , mCacheId(aCacheId)
 {
   MOZ_COUNT_CTOR(cache::CacheParent);
@@ -226,17 +229,25 @@ already_AddRefed<nsIInputStream>
 CacheParent::DeserializeCacheStream(const PCacheReadStreamOrVoid& aStreamOrVoid)
 {
   if (aStreamOrVoid.type() == PCacheReadStreamOrVoid::Tvoid_t) {
     return nullptr;
   }
 
   const PCacheReadStream& readStream = aStreamOrVoid.get_PCacheReadStream();
 
-  nsCOMPtr<nsIInputStream> stream = ReadStream::Create(readStream);
+  nsCOMPtr<nsIInputStream> stream;
+  if (!BackgroundParent::IsOtherProcessActor(Manager())) {
+    stream = RemoveFromStreamStash(readStream.stashId());
+    if (stream) {
+      return stream.forget();
+    }
+  }
+
+  stream = ReadStream::Create(readStream);
   if (stream) {
     return stream.forget();
   }
 
   nsAutoTArray<FileDescriptor, 4> fds;
   if (readStream.fds().type() ==
       OptionalFileDescriptorSet::TPFileDescriptorSetChild) {
 
diff --git a/dom/cache/PCacheTypes.ipdlh b/dom/cache/PCacheTypes.ipdlh
--- a/dom/cache/PCacheTypes.ipdlh
+++ b/dom/cache/PCacheTypes.ipdlh
@@ -7,16 +7,17 @@ include PHeaders;
 include InputStreamParams;
 
 using HeadersGuardEnum from "mozilla/dom/FetchIPCUtils.h";
 using RequestCredentials from "mozilla/dom/FetchIPCUtils.h";
 using RequestMode from "mozilla/dom/FetchIPCUtils.h";
 using mozilla::dom::ResponseType from "mozilla/dom/FetchIPCUtils.h";
 using mozilla::void_t from "ipc/IPCMessageUtils.h";
 using struct nsID from "nsID.h";
+using mozilla::dom::cache::StreamStashId from "mozilla/dom/cache/Types.h";
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 struct PCacheQueryParams
 {
   bool ignoreSearch;
@@ -28,16 +29,17 @@ struct PCacheQueryParams
 };
 
 struct PCacheReadStream
 {
   nsID id;
   OptionalInputStreamParams params;
   OptionalFileDescriptorSet fds;
   nullable PCacheStreamControl control;
+  StreamStashId stashId;
 };
 
 union PCacheReadStreamOrVoid
 {
   void_t;
   PCacheReadStream;
 };
 
diff --git a/dom/cache/StreamStash.cpp b/dom/cache/StreamStash.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/StreamStash.cpp
@@ -0,0 +1,98 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/cache/StreamStash.h"
+
+#include "mozilla/StaticMutex.h"
+#include "mozilla/StaticPtr.h"
+#include "nsCOMPtr.h"
+
+namespace {
+
+using mozilla::StaticAutoPtr;
+using mozilla::StaticMutex;
+using mozilla::StaticMutexAutoLock;
+using mozilla::dom::cache::StreamStashId;
+using mozilla::dom::cache::INVALID_REQUEST_ID;
+
+class StreamStash MOZ_FINAL
+{
+public:
+  static StreamStashId Add(nsIInputStream* aStream)
+  {
+    StaticMutexAutoLock lock(sMutex);
+    if (!sInstance) {
+      sInstance = new StreamStash();
+    }
+    StreamStashId id = sNextId;
+    sNextId += 1;
+    sInstance->mList.AppendElement(Entry(id, aStream));
+    return id;
+  }
+
+  static already_AddRefed<nsIInputStream>
+  Remove(StreamStashId aStashId)
+  {
+    StaticMutexAutoLock lock(sMutex);
+    if (!sInstance) {
+      return nullptr;
+    }
+    for (uint32_t i = 0; i < sInstance->mList.Length(); ++i) {
+      if (sInstance->mList[i].mId == aStashId) {
+        nsCOMPtr<nsIInputStream> ref = sInstance->mList[i].mStream.forget();
+        sInstance->mList.RemoveElementAt(i);
+        if (sInstance->mList.IsEmpty()) {
+          sInstance = nullptr;
+        }
+        return ref.forget();
+      }
+    }
+    return nullptr;
+  }
+
+private:
+  static StaticMutex sMutex;
+  static StaticAutoPtr<StreamStash> sInstance;
+  static StreamStashId sNextId;
+
+  struct Entry
+  {
+    Entry() : mId(0) { }
+    Entry(StreamStashId aStashId, nsIInputStream* aStream)
+      : mId(aStashId), mStream(aStream)
+    { }
+    StreamStashId mId;
+    nsCOMPtr<nsIInputStream> mStream;
+  };
+
+  nsTArray<Entry> mList;
+};
+
+StaticMutex StreamStash::sMutex;
+StaticAutoPtr<StreamStash> StreamStash::sInstance;
+StreamStashId StreamStash::sNextId = 0;
+
+} // anonymous namespace
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+StreamStashId
+AddToStreamStash(nsIInputStream* aStream)
+{
+  return StreamStash::Add(aStream);
+}
+
+already_AddRefed<nsIInputStream>
+RemoveFromStreamStash(StreamStashId aStashId)
+{
+  return StreamStash::Remove(aStashId);
+}
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/StreamStash.h b/dom/cache/StreamStash.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/StreamStash.h
@@ -0,0 +1,28 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_StreamStash_h
+#define mozilla_dom_cache_StreamStash_h
+
+#include "mozilla/AlreadyAddRefed.h"
+#include "mozilla/dom/cache/Types.h"
+#include "nsIInputStream.h"
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+StreamStashId
+AddToStreamStash(nsIInputStream* aStream);
+
+already_AddRefed<nsIInputStream>
+RemoveFromStreamStash(StreamStashId aStashId);
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_StreamStash_h
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -424,20 +424,28 @@ TypeUtils::SerializeCacheStream(nsIInput
     return;
   }
 
   nsCOMPtr<nsIInputStream> stream;
 
   nsCOMPtr<nsIIPCSerializableInputStream> serial = do_QueryInterface(aStream);
   nsCOMPtr<nsIAsyncInputStream> asyncInput = do_QueryInterface(aStream);
 
+  StreamStashId stashId = INVALID_STREAM_STASH_ID;
+
   // If we can serialize the stream, then just do so
   if (serial) {
     stream = aStream;
 
+  // Currently we cannot use CrossProcessPipe in non-e10s mode.  Work around
+  // this by using a static stash to pass the current stream to the "parent".
+  // TODO: remove stream stash for non-e10s once CrossProcessPipe supports it
+  } else if (XRE_GetProcessType() == GeckoProcessType_Default) {
+    stashId = AddToStreamStash(aStream);
+
   // If we can't serialize directly, then we need to copy it across a
   // CrossProcessPipe.  We only support this for async inputs, though,
   // because we are going to do the copy on the current thread.
   } else if (asyncInput) {
     nsCOMPtr<nsICrossProcessPipe> pipe = CreateCrossProcessPipe(Sending);
 
     aRv = pipe->Init(nullptr, true /* sending */);
     if (NS_WARN_IF(aRv.Failed())) { return; }
@@ -473,16 +481,17 @@ TypeUtils::SerializeCacheStream(nsIInput
     NS_WARNING("Cache got an unsupported body stream.");
     aRv.Throw(NS_ERROR_FAILURE);
     return;
   }
 
   PCacheReadStream readStream;
   readStream.controlChild() = nullptr;
   readStream.controlParent() = nullptr;
+  readStream.stashId() = stashId;
 
   nsAutoTArray<FileDescriptor, 4> fds;
   SerializeInputStream(stream, readStream.params(), fds);
 
   PFileDescriptorSetChild* fdSet = nullptr;
   if (!fds.IsEmpty()) {
     // We should not be serializing until we have an actor ready
     PBackgroundChild* manager = BackgroundChild::GetForCurrentThread();
diff --git a/dom/cache/Types.h b/dom/cache/Types.h
--- a/dom/cache/Types.h
+++ b/dom/cache/Types.h
@@ -21,16 +21,19 @@ enum Namespace
   DEFAULT_NAMESPACE,
   CHROME_ONLY_NAMESPACE,
   NUMBER_OF_NAMESPACES
 };
 
 typedef uintptr_t RequestId;
 static const RequestId INVALID_REQUEST_ID = 0;
 
+typedef uint64_t StreamStashId;
+static const StreamStashId INVALID_STREAM_STASH_ID = UINT64_MAX;
+
 typedef int32_t CacheId;
 
 struct QuotaInfo
 {
   QuotaInfo() : mIsApp(false) { }
   nsCOMPtr<nsIFile> mDir;
   nsCString mGroup;
   nsCString mOrigin;
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -26,16 +26,17 @@ EXPORTS.mozilla.dom.cache += [
     'IPCUtils.h',
     'Manager.h',
     'ManagerId.h',
     'PrincipalVerifier.h',
     'QuotaClient.h',
     'ReadStream.h',
     'SavedTypes.h',
     'StreamList.h',
+    'StreamStash.h',
     'StreamUtils.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
 UNIFIED_SOURCES += [
     'Action.cpp',
     'AutoUtils.cpp',
@@ -54,16 +55,17 @@ UNIFIED_SOURCES += [
     'FetchPut.cpp',
     'FileUtils.cpp',
     'Manager.cpp',
     'ManagerId.cpp',
     'PrincipalVerifier.cpp',
     'QuotaClient.cpp',
     'ReadStream.cpp',
     'StreamList.cpp',
+    'StreamStash.cpp',
     'StreamUtils.cpp',
     'TypeUtils.cpp',
 ]
 
 IPDL_SOURCES += [
     'CacheInitData.ipdlh',
     'PCache.ipdl',
     'PCacheStorage.ipdl',
