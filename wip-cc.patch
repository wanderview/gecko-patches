# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  7ad2665bf240489918a4f20771e4d5ea51975eab

diff --git a/dom/base/nsGlobalWindowInner.cpp b/dom/base/nsGlobalWindowInner.cpp
--- a/dom/base/nsGlobalWindowInner.cpp
+++ b/dom/base/nsGlobalWindowInner.cpp
@@ -1524,16 +1524,20 @@ NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mAudioWorklet)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mPaintWorklet)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mExternal)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mInstallTrigger)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mIntlUtils)
 
   tmp->TraverseHostObjectURIs(cb);
 
+  tmp->ForEachEventTargetObject([&] (DOMEventTargetHelper* aTarget, bool* aDoneOut) {
+    aTarget->MaybeNoteNativeChild(cb);
+  });
+
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mChromeFields.mMessageManager)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mChromeFields.mGroupMessageManagers)
 
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mPendingPromises)
 
   for (size_t i = 0; i < tmp->mDocumentFlushedResolvers.Length(); i++) {
     NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mDocumentFlushedResolvers[i]->mPromise);
     NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mDocumentFlushedResolvers[i]->mCallback);
diff --git a/dom/events/DOMEventTargetHelper.h b/dom/events/DOMEventTargetHelper.h
--- a/dom/events/DOMEventTargetHelper.h
+++ b/dom/events/DOMEventTargetHelper.h
@@ -158,18 +158,21 @@ public:
 
   virtual void EventListenerWasAdded(const nsAString& aType,
                                      ErrorResult& aRv,
                                      JSCompartment* aCompartment = nullptr) {}
   virtual void EventListenerWasRemoved(const nsAString& aType,
                                        ErrorResult& aRv,
                                        JSCompartment* aCompartment = nullptr) {}
 
+  virtual void MaybeNoteNativeChild(nsCycleCollectionTraversalCallback& aCb) { }
+
   // Dispatch a trusted, non-cancellable and non-bubbling event to |this|.
   nsresult DispatchTrustedEvent(const nsAString& aEventName);
+
 protected:
   virtual ~DOMEventTargetHelper();
 
   nsresult WantsUntrusted(bool* aRetVal);
 
   void MaybeUpdateKeepAlive();
   void MaybeDontKeepAlive();
 
diff --git a/dom/serviceworkers/ServiceWorker.cpp b/dom/serviceworkers/ServiceWorker.cpp
--- a/dom/serviceworkers/ServiceWorker.cpp
+++ b/dom/serviceworkers/ServiceWorker.cpp
@@ -83,16 +83,19 @@ ServiceWorker::ServiceWorker(nsIGlobalOb
 ServiceWorker::~ServiceWorker()
 {
   MOZ_ASSERT(NS_IsMainThread());
   if (mInner) {
     mInner->RemoveServiceWorker(this);
   }
 }
 
+NS_IMPL_CYCLE_COLLECTION_INHERITED(ServiceWorker,
+                                   DOMEventTargetHelper)
+
 NS_IMPL_ADDREF_INHERITED(ServiceWorker, DOMEventTargetHelper)
 NS_IMPL_RELEASE_INHERITED(ServiceWorker, DOMEventTargetHelper)
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(ServiceWorker)
   NS_INTERFACE_MAP_ENTRY(ServiceWorker)
 NS_INTERFACE_MAP_END_INHERITING(DOMEventTargetHelper)
 
 JSObject*
@@ -143,17 +146,23 @@ const ServiceWorkerDescriptor&
 ServiceWorker::Descriptor() const
 {
   return mDescriptor;
 }
 
 void
 ServiceWorker::DisconnectFromOwner()
 {
-  if (mInner) {
-    mInner->RemoveServiceWorker(this);
-    mInner = nullptr;
-  }
+  //if (mInner) {
+    //mInner->RemoveServiceWorker(this);
+    //mInner = nullptr;
+  //}
   DOMEventTargetHelper::DisconnectFromOwner();
 }
 
+void
+ServiceWorker::MaybeNoteNativeChild(nsCycleCollectionTraversalCallback& aCb)
+{
+  aCb.NoteNativeChild(this, NS_CYCLE_COLLECTION_PARTICIPANT(ServiceWorker));
+}
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/ServiceWorker.h b/dom/serviceworkers/ServiceWorker.h
--- a/dom/serviceworkers/ServiceWorker.h
+++ b/dom/serviceworkers/ServiceWorker.h
@@ -60,16 +60,18 @@ public:
                 ErrorResult& aRv) = 0;
 
     NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
   };
 
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_DOM_SERVICEWORKER_IID)
   NS_DECL_ISUPPORTS_INHERITED
 
+  NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(ServiceWorker, DOMEventTargetHelper)
+
   IMPL_EVENT_HANDLER(statechange)
   IMPL_EVENT_HANDLER(error)
 
   static already_AddRefed<ServiceWorker>
   Create(nsIGlobalObject* aOwner, const ServiceWorkerDescriptor& aDescriptor);
 
   virtual JSObject*
   WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) override;
@@ -88,16 +90,19 @@ public:
               const Sequence<JSObject*>& aTransferable, ErrorResult& aRv);
 
   const ServiceWorkerDescriptor&
   Descriptor() const;
 
   void
   DisconnectFromOwner() override;
 
+  void
+  MaybeNoteNativeChild(nsCycleCollectionTraversalCallback& aCb) override;
+
 private:
   ServiceWorker(nsIGlobalObject* aWindow,
                 const ServiceWorkerDescriptor& aDescriptor,
                 Inner* aInner);
 
   // This class is reference-counted and will be destroyed from Release().
   ~ServiceWorker();
 
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -90,21 +90,27 @@ ServiceWorkerRegistration::CreateForWork
     new ServiceWorkerRegistration(aGlobal, aDescriptor, inner);
 
   return registration.forget();
 }
 
 void
 ServiceWorkerRegistration::DisconnectFromOwner()
 {
-  mInner->ClearServiceWorkerRegistration(this);
-  mInner = nullptr;
+  //mInner->ClearServiceWorkerRegistration(this);
+  //mInner = nullptr;
   DOMEventTargetHelper::DisconnectFromOwner();
 }
 
+void
+ServiceWorkerRegistration::MaybeNoteNativeChild(nsCycleCollectionTraversalCallback& aCb)
+{
+  aCb.NoteNativeChild(this, NS_CYCLE_COLLECTION_PARTICIPANT(ServiceWorkerRegistration));
+}
+
 already_AddRefed<ServiceWorker>
 ServiceWorkerRegistration::GetInstalling() const
 {
   RefPtr<ServiceWorker> ref = mInstallingWorker;
   return ref.forget();
 }
 
 already_AddRefed<ServiceWorker>
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -78,16 +78,19 @@ public:
                   nsIGlobalObject* aGlobal,
                   const ServiceWorkerRegistrationDescriptor& aDescriptor);
 
   JSObject*
   WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) override;
 
   void DisconnectFromOwner() override;
 
+  void
+  MaybeNoteNativeChild(nsCycleCollectionTraversalCallback& aCb) override;
+
   already_AddRefed<ServiceWorker>
   GetInstalling() const;
 
   already_AddRefed<ServiceWorker>
   GetWaiting() const;
 
   already_AddRefed<ServiceWorker>
   GetActive() const;
