# HG changeset patch
# Parent bb07301ca2e94d7e1bfbe54789d9c77108fe11ea
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 041 Only call Send__delete__() from parent process.


diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -511,18 +511,18 @@ Cache::AssertOwningThread() const
 {
   NS_ASSERT_OWNINGTHREAD(Cache);
 }
 #endif
 
 Cache::~Cache()
 {
   if (mActor) {
-    PCacheChild::Send__delete__(mActor);
-    // ActorDestroy() is called synchronously by Send__delete__().  So we
+    mActor->StartDestroy();
+    // ActorDestroy() is called synchronously by StartDestroy().  So we
     // should have already cleared the mActor.
     MOZ_ASSERT(!mActor);
   }
 }
 
 RequestId
 Cache::AddRequestPromise(Promise* aPromise, ErrorResult& aRv)
 {
diff --git a/dom/cache/CacheChild.cpp b/dom/cache/CacheChild.cpp
--- a/dom/cache/CacheChild.cpp
+++ b/dom/cache/CacheChild.cpp
@@ -29,97 +29,114 @@ CacheChild::CacheChild()
 CacheChild::~CacheChild()
 {
   MOZ_COUNT_DTOR(cache::CacheChild);
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(!mListener);
 }
 
 void
-CacheChild::ActorDestroy(ActorDestroyReason aReason)
-{
-  NS_ASSERT_OWNINGTHREAD(CacheChild);
-  MOZ_ASSERT(mListener);
-
-  mListener->ActorDestroy(this);
-
-  // Cache listener should call ClearListener() in ActorDestroy()
-  MOZ_ASSERT(!mListener);
-}
-
-void
 CacheChild::SetListener(Cache* aListener)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(!mListener);
   mListener = aListener;
   MOZ_ASSERT(mListener);
 }
 
 void
 CacheChild::ClearListener()
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener = nullptr;
 }
 
+void
+CacheChild::StartDestroy()
+{
+  MOZ_ASSERT(mListener);
+  mListener->ActorDestroy(this);
+  // Cache listener should call ClearListener() in ActorDestroy()
+  MOZ_ASSERT(!mListener);
+
+  // Start actor destruction from parent process
+  unused << SendTeardown();
+}
+
+void
+CacheChild::ActorDestroy(ActorDestroyReason aReason)
+{
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
+  if (mListener) {
+    mListener->ActorDestroy(this);
+    // Cache listener should call ClearListener() in ActorDestroy()
+    MOZ_ASSERT(!mListener);
+  }
+}
+
 bool
 CacheChild::RecvMatchResponse(const RequestId& requestId, const nsresult& aRv,
                               const PCacheResponseOrVoid& aResponse)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvMatchResponse(requestId, aRv, aResponse);
+  if (mListener) {
+    mListener->RecvMatchResponse(requestId, aRv, aResponse);
+  }
   return true;
 }
 
 bool
 CacheChild::RecvMatchAllResponse(const RequestId& requestId, const nsresult& aRv,
                                  nsTArray<PCacheResponse>&& responses)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvMatchAllResponse(requestId, aRv, responses);
+  if (mListener) {
+    mListener->RecvMatchAllResponse(requestId, aRv, responses);
+  }
   return true;
 }
 
 bool
 CacheChild::RecvAddAllResponse(const RequestId& requestId, const nsresult& aRv)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvAddAllResponse(requestId, aRv);
+  if (mListener) {
+    mListener->RecvAddAllResponse(requestId, aRv);
+  }
   return true;
 }
 
 bool
 CacheChild::RecvPutResponse(const RequestId& aRequestId, const nsresult& aRv)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvPutResponse(aRequestId, aRv);
+  if (mListener) {
+    mListener->RecvPutResponse(aRequestId, aRv);
+  }
   return true;
 }
 
 bool
 CacheChild::RecvDeleteResponse(const RequestId& requestId, const nsresult& aRv,
                                const bool& result)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvDeleteResponse(requestId, aRv, result);
+  if (mListener) {
+    mListener->RecvDeleteResponse(requestId, aRv, result);
+  }
   return true;
 }
 
 bool
 CacheChild::RecvKeysResponse(const RequestId& requestId, const nsresult& aRv,
                              nsTArray<PCacheRequest>&& requests)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvKeysResponse(requestId, aRv, requests);
+  if (mListener) {
+    mListener->RecvKeysResponse(requestId, aRv, requests);
+  }
   return true;
 }
 
 } // namespace cache
 } // namespace dom
 } // namesapce mozilla
diff --git a/dom/cache/CacheChild.h b/dom/cache/CacheChild.h
--- a/dom/cache/CacheChild.h
+++ b/dom/cache/CacheChild.h
@@ -23,16 +23,20 @@ public:
 
   void SetListener(Cache* aListener);
 
   // Must be called by the associated Cache listener in its ActorDestroy()
   // method.  Also, Cache must Send__delete__() the actor in its destructor to
   // trigger ActorDestroy() if it has not been called yet.
   void ClearListener();
 
+  // Synchronously call ActorDestroy on our Cache listener and then start the
+  // actor destruction asynchronously from the parent-side.
+  void StartDestroy();
+
   // PCacheChild methods
   virtual void
   ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
 
   virtual bool
   RecvMatchResponse(const RequestId& requestId, const nsresult& aRv,
                     const PCacheResponseOrVoid& aResponse) MOZ_OVERRIDE;
   virtual bool
diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -53,16 +53,23 @@ CacheParent::ActorDestroy(ActorDestroyRe
   }
   mFetchPutList.Clear();
   mManager->RemoveListener(this);
   mManager->ReleaseCacheId(mCacheId);
   mManager = nullptr;
 }
 
 bool
+CacheParent::RecvTeardown()
+{
+  unused << Send__delete__(this);
+  return true;
+}
+
+bool
 CacheParent::RecvMatch(const RequestId& aRequestId, const PCacheRequest& aRequest,
                        const PCacheQueryParams& aParams)
 {
   MOZ_ASSERT(mManager);
   mManager->CacheMatch(this, aRequestId, mCacheId, aRequest,
                        aParams);
   return true;
 }
diff --git a/dom/cache/CacheParent.h b/dom/cache/CacheParent.h
--- a/dom/cache/CacheParent.h
+++ b/dom/cache/CacheParent.h
@@ -26,19 +26,20 @@ struct StreamHolder;
 
 class CacheParent MOZ_FINAL : public PCacheParent
                             , public Manager::Listener
                             , public FetchPut::Listener
 {
 public:
   CacheParent(cache::Manager* aManager, CacheId aCacheId);
   virtual ~CacheParent();
-  virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
 
   // PCacheParent method
+  virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
+  virtual bool RecvTeardown() MOZ_OVERRIDE;
   virtual bool
   RecvMatch(const RequestId& aRequestId, const PCacheRequest& aRequest,
             const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool
   RecvMatchAll(const RequestId& aRequestId, const PCacheRequestOrVoid& aRequest,
                const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool
   RecvAddAll(const RequestId& aRequestId,
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -416,17 +416,20 @@ CacheStorage::RecvOpenResponse(RequestId
 
   // Unlike most of our async callback Recv*() methods, this one gets back
   // an actor.  We need to make sure to clean it up in case of error.
 
   nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
 
   if (NS_FAILED(aRv)) {
     if (aActor) {
-      PCacheChild::Send__delete__(aActor);
+      // We cannot use the CacheChild::StartDestroy() method because there
+      // is no Cache object associated with the actor yet.  Instead, just
+      // send the underlying Teardown message.
+      unused << aActor->SendTeardown();
     }
     promise->MaybeReject(aRv);
     return;
   }
 
   if (!aActor) {
     promise->MaybeReject(NS_ERROR_DOM_INVALID_ACCESS_ERR);
     return;
@@ -482,18 +485,18 @@ CacheStorage::AssertOwningThread() const
 }
 #endif
 
 CacheStorage::~CacheStorage()
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 
   if (mActor) {
-    PCacheStorageChild::Send__delete__(mActor);
-    // ActorDestroy() is called synchronously by Send__delete__().  So we
+    mActor->StartDestroy();
+    // ActorDestroy() is called synchronously by StartDestroy().  So we
     // should have already cleared the mActor.
     MOZ_ASSERT(!mActor);
   }
 }
 
 void
 CacheStorage::MaybeRunPendingRequests()
 {
diff --git a/dom/cache/CacheStorageChild.cpp b/dom/cache/CacheStorageChild.cpp
--- a/dom/cache/CacheStorageChild.cpp
+++ b/dom/cache/CacheStorageChild.cpp
@@ -30,77 +30,93 @@ void
 CacheStorageChild::ClearListener()
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(mListener);
   mListener = nullptr;
 }
 
 void
+CacheStorageChild::StartDestroy()
+{
+  MOZ_ASSERT(mListener);
+  mListener->ActorDestroy(this);
+  // CacheStorage listener should call ClearListener() in ActorDestroy()
+  MOZ_ASSERT(!mListener);
+
+  // Start actor destruction from parent process
+  unused << SendTeardown();
+}
+
+void
 CacheStorageChild::ActorDestroy(ActorDestroyReason aReason)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
-  MOZ_ASSERT(mListener);
-
-  mListener->ActorDestroy(this);
-
-  // CacheStorage listener should call ClearListener() in ActorDestroy()
-  MOZ_ASSERT(!mListener);
+  if (mListener) {
+    mListener->ActorDestroy(this);
+    // CacheStorage listener should call ClearListener() in ActorDestroy()
+    MOZ_ASSERT(!mListener);
+  }
 }
 
 bool
 CacheStorageChild::RecvMatchResponse(const RequestId& aRequestId,
                                      const nsresult& aRv,
                                      const PCacheResponseOrVoid& aResponseOrVoid)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvMatchResponse(aRequestId, aRv, aResponseOrVoid);
+  if (mListener) {
+    mListener->RecvMatchResponse(aRequestId, aRv, aResponseOrVoid);
+  }
   return true;
 }
 
 bool
 CacheStorageChild::RecvHasResponse(const RequestId& aRequestId,
                                    const nsresult& aRv,
                                    const bool& aSuccess)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvHasResponse(aRequestId, aRv, aSuccess);
+  if (mListener) {
+    mListener->RecvHasResponse(aRequestId, aRv, aSuccess);
+  }
   return true;
 }
 
 bool
 CacheStorageChild::RecvOpenResponse(const RequestId& aRequestId,
                                     const nsresult& aRv,
                                     PCacheChild* aActor)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvOpenResponse(aRequestId, aRv, aActor);
+  if (mListener) {
+    mListener->RecvOpenResponse(aRequestId, aRv, aActor);
+  }
   return true;
 }
 
 bool
 CacheStorageChild::RecvDeleteResponse(const RequestId& aRequestId,
                                       const nsresult& aRv,
                                       const bool& aResult)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvDeleteResponse(aRequestId, aRv, aResult);
+  if (mListener) {
+    mListener->RecvDeleteResponse(aRequestId, aRv, aResult);
+  }
   return true;
 }
 
 bool
 CacheStorageChild::RecvKeysResponse(const RequestId& aRequestId,
                                     const nsresult& aRv,
                                     nsTArray<nsString>&& aKeys)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
-  MOZ_ASSERT(mListener);
-  mListener->RecvKeysResponse(aRequestId, aRv, aKeys);
+  if (mListener) {
+    mListener->RecvKeysResponse(aRequestId, aRv, aKeys);
+  }
   return true;
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/CacheStorageChild.h b/dom/cache/CacheStorageChild.h
--- a/dom/cache/CacheStorageChild.h
+++ b/dom/cache/CacheStorageChild.h
@@ -24,16 +24,20 @@ public:
   ~CacheStorageChild();
 
   // Must be called by the associated CacheStorage listener in its
   // ActorDestroy() method.  Also, CacheStorage must Send__delete__() the
   // actor in its destructor to trigger ActorDestroy() if it has not been
   // called yet.
   void ClearListener();
 
+  // Synchronously call ActorDestroy on our CacheStorage listener and then start
+  // the actor destruction asynchronously from the parent-side.
+  void StartDestroy();
+
   // PCacheStorageChild methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvMatchResponse(const RequestId& requestId,
                              const nsresult& aRv,
                              const PCacheResponseOrVoid& response) MOZ_OVERRIDE;
   virtual bool RecvHasResponse(const cache::RequestId& aRequestId,
                                const nsresult& aRv,
                                const bool& aSuccess) MOZ_OVERRIDE;
diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -83,16 +83,23 @@ CacheStorageParent::ActorDestroy(ActorDe
   if (mManager) {
     MOZ_ASSERT(!mActiveRequests.IsEmpty());
     mManager->RemoveListener(this);
     mManager = nullptr;
   }
 }
 
 bool
+CacheStorageParent::RecvTeardown()
+{
+  unused << Send__delete__(this);
+  return true;
+}
+
+bool
 CacheStorageParent::RecvMatch(const RequestId& aRequestId,
                               const PCacheRequest& aRequest,
                               const PCacheQueryParams& aParams)
 {
   // queue requests if we are still waiting for principal verification
   if (!mManagerId) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mOp = OP_MATCH;
diff --git a/dom/cache/CacheStorageParent.h b/dom/cache/CacheStorageParent.h
--- a/dom/cache/CacheStorageParent.h
+++ b/dom/cache/CacheStorageParent.h
@@ -28,16 +28,17 @@ class CacheStorageParent MOZ_FINAL : pub
 {
 public:
   CacheStorageParent(PBackgroundParent* aManagingActor, Namespace aNamespace,
                      const mozilla::ipc::PrincipalInfo& aPrincipalInfo);
   virtual ~CacheStorageParent();
 
   // PCacheStorageParent methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
+  virtual bool RecvTeardown() MOZ_OVERRIDE;
   virtual bool RecvMatch(const RequestId& aRequestId,
                          const PCacheRequest& aRequest,
                          const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool RecvHas(const RequestId& aRequestId,
                        const nsString& aKey) MOZ_OVERRIDE;
   virtual bool RecvOpen(const RequestId& aRequestId,
                         const nsString& aKey) MOZ_OVERRIDE;
   virtual bool RecvDelete(const RequestId& aRequestId,
diff --git a/dom/cache/PCache.ipdl b/dom/cache/PCache.ipdl
--- a/dom/cache/PCache.ipdl
+++ b/dom/cache/PCache.ipdl
@@ -15,16 +15,17 @@ namespace mozilla {
 namespace dom {
 namespace cache {
 
 protocol PCache
 {
   manager PBackground;
 
 parent:
+  Teardown();
   Match(RequestId requestId, PCacheRequest request, PCacheQueryParams params);
   MatchAll(RequestId requestId, PCacheRequestOrVoid request, PCacheQueryParams params);
   AddAll(RequestId requestId, PCacheRequest[] requests);
   Put(RequestId requestId, CacheRequestResponse aPut);
   Delete(RequestId requestId, PCacheRequest request, PCacheQueryParams params);
   Keys(RequestId requestId, PCacheRequestOrVoid request, PCacheQueryParams params);
 
 child:
diff --git a/dom/cache/PCacheStorage.ipdl b/dom/cache/PCacheStorage.ipdl
--- a/dom/cache/PCacheStorage.ipdl
+++ b/dom/cache/PCacheStorage.ipdl
@@ -16,30 +16,29 @@ namespace mozilla {
 namespace dom {
 namespace cache {
 
 protocol PCacheStorage
 {
   manager PBackground;
 
 parent:
+  Teardown();
   Match(RequestId aRequestId, PCacheRequest aRequest,
         PCacheQueryParams aParams);
   Has(RequestId aRequestId, nsString aKey);
   Open(RequestId aRequestId, nsString aKey);
   Delete(RequestId aRequestId, nsString aKey);
   Keys(RequestId aRequestId);
 
 child:
   MatchResponse(RequestId aRequestId, nsresult aRv,
                 PCacheResponseOrVoid aResponseOrVoid);
   HasResponse(RequestId aRequestId, nsresult aRv, bool aSuccess);
   OpenResponse(RequestId aRequestId, nsresult aRv, nullable PCache aActor);
   DeleteResponse(RequestId aRequestId, nsresult aRv, bool aSuccess);
   KeysResponse(RequestId aRequestId, nsresult aRv, nsString[] aKeys);
-
-both:
   __delete__();
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/PCacheStreamControl.ipdl b/dom/cache/PCacheStreamControl.ipdl
--- a/dom/cache/PCacheStreamControl.ipdl
+++ b/dom/cache/PCacheStreamControl.ipdl
@@ -15,16 +15,14 @@ protocol PCacheStreamControl
   manager PBackground;
 
 parent:
   NoteClosed(nsID aStreamId);
 
 child:
   Close(nsID aStreamId);
   CloseAll();
-
-both:
   __delete__();
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
