# HG changeset patch
# Parent e53d793042c8cffbe03c1c96f9d2ce189a3d029c
# User Ben Kelly <ben@wanderview.com>
Bug 940273 p4 interdiff 033 QuotaClient and ipc issues

diff --git a/dom/cache/ActorUtils.h b/dom/cache/ActorUtils.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/ActorUtils.h
@@ -0,0 +1,44 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_ActorUtils_h
+#define mozilla_dom_cache_ActorUtils_h
+
+#include "mozilla/dom/cache/Types.h"
+
+namespace mozilla {
+
+namespace ipc {
+class PBackgroundParent;
+class PrincipalInfo;
+}
+
+namespace dom {
+namespace cache {
+
+class PCacheChild;
+class PCacheStreamControlChild;
+class PCacheStorageParent;
+
+// Factory methods for use in ipc/glue methods.  Implemented in individual actor
+// cpp files.
+
+PCacheChild*
+AllocPCacheChild();
+
+PCacheStreamControlChild*
+AllocPCacheStreamControlChild();
+
+PCacheStorageParent*
+AllocPCacheStorageParent(mozilla::ipc::PBackgroundParent* aManagingActor,
+                         Namespace aNamespace,
+                         const mozilla::ipc::PrincipalInfo& aPrincipalInfo);
+
+} // namesapce cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_ActorUtils_h
diff --git a/dom/cache/CacheChild.cpp b/dom/cache/CacheChild.cpp
--- a/dom/cache/CacheChild.cpp
+++ b/dom/cache/CacheChild.cpp
@@ -1,22 +1,30 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheChild.h"
 
+#include "mozilla/dom/cache/ActorUtils.h"
 #include "mozilla/dom/cache/Cache.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
+// Declared in ActorUtils.h
+PCacheChild*
+AllocPCacheChild()
+{
+  return new CacheChild();
+}
+
 CacheChild::CacheChild()
   : mListener(nullptr)
 {
   MOZ_COUNT_CTOR(cache::CacheChild);
 }
 
 CacheChild::~CacheChild()
 {
diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -2,16 +2,17 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStorageParent.h"
 
 #include "mozilla/dom/ContentParent.h"
+#include "mozilla/dom/cache/ActorUtils.h"
 #include "mozilla/dom/cache/AutoUtils.h"
 #include "mozilla/dom/cache/CacheParent.h"
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 #include "mozilla/dom/cache/Manager.h"
 #include "mozilla/dom/cache/ManagerId.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/SavedTypes.h"
 #include "mozilla/dom/cache/StreamList.h"
@@ -25,16 +26,25 @@
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::ipc::PBackgroundParent;
 using mozilla::ipc::PFileDescriptorSetParent;
 using mozilla::ipc::PrincipalInfo;
 
+// declared in ActorUtils.h
+PCacheStorageParent*
+AllocPCacheStorageParent(PBackgroundParent* aManagingActor,
+                         Namespace aNamespace,
+                         const mozilla::ipc::PrincipalInfo& aPrincipalInfo)
+{
+  return new CacheStorageParent(aManagingActor, aNamespace, aPrincipalInfo);
+}
+
 CacheStorageParent::CacheStorageParent(PBackgroundParent* aManagingActor,
                                        Namespace aNamespace,
                                        const PrincipalInfo& aPrincipalInfo)
   : mNamespace(aNamespace)
 {
   MOZ_COUNT_CTOR(cache::CacheStorageParent);
   MOZ_ASSERT(aManagingActor);
 
diff --git a/dom/cache/CacheStreamControlChild.cpp b/dom/cache/CacheStreamControlChild.cpp
--- a/dom/cache/CacheStreamControlChild.cpp
+++ b/dom/cache/CacheStreamControlChild.cpp
@@ -3,23 +3,31 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStreamControlChild.h"
 
 #include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
+#include "mozilla/dom/cache/ActorUtils.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "nsISupportsImpl.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
+// declared in ActorUtils.h
+PCacheStreamControlChild*
+AllocPCacheStreamControlChild()
+{
+  return new CacheStreamControlChild();
+}
+
 CacheStreamControlChild::CacheStreamControlChild()
 {
   MOZ_COUNT_CTOR(cache::CacheStreamControlChild);
 }
 
 CacheStreamControlChild::~CacheStreamControlChild()
 {
   MOZ_COUNT_DTOR(cache::CacheStreamControlChild);
diff --git a/dom/cache/QuotaClient.cpp b/dom/cache/QuotaClient.cpp
--- a/dom/cache/QuotaClient.cpp
+++ b/dom/cache/QuotaClient.cpp
@@ -2,23 +2,31 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/QuotaClient.h"
 
 #include "mozilla/DebugOnly.h"
+#include "mozilla/dom/cache/ShutdownObserver.h"
 #include "mozilla/dom/quota/QuotaManager.h"
 #include "mozilla/dom/quota/UsageInfo.h"
 #include "nsIFile.h"
 #include "nsISimpleEnumerator.h"
+#include "nsThreadUtils.h"
 
 namespace {
 
+using mozilla::DebugOnly;
+using mozilla::dom::cache::shutdown::ExecuteShutdown;
+using mozilla::dom::cache::shutdown::ManagersAreActive;
+using mozilla::dom::quota::Client;
+using mozilla::dom::quota::PersistenceType;
+using mozilla::dom::quota::QuotaManager;
 using mozilla::dom::quota::UsageInfo;
 
 static nsresult
 GetBodyUsage(nsIFile* aDir, UsageInfo* aUsageInfo)
 {
   nsCOMPtr<nsISimpleEnumerator> entries;
   nsresult rv = aDir->GetDirectoryEntries(getter_AddRefs(entries));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
@@ -49,164 +57,160 @@ GetBodyUsage(nsIFile* aDir, UsageInfo* a
     MOZ_ASSERT(fileSize >= 0);
 
     aUsageInfo->AppendToFileUsage(fileSize);
   }
 
   return NS_OK;
 }
 
+class CacheQuotaClient MOZ_FINAL : public Client
+{
+public:
+  virtual Type
+  GetType() MOZ_OVERRIDE
+  {
+    return DOMCACHE;
+  }
+
+  virtual nsresult
+  InitOrigin(PersistenceType aPersistenceType, const nsACString& aGroup,
+             const nsACString& aOrigin, UsageInfo* aUsageInfo) MOZ_OVERRIDE
+  {
+    return NS_OK;
+  }
+
+  virtual nsresult
+  GetUsageForOrigin(PersistenceType aPersistenceType, const nsACString& aGroup,
+                    const nsACString& aOrigin,
+                    UsageInfo* aUsageInfo) MOZ_OVERRIDE
+  {
+    QuotaManager* qm = QuotaManager::Get();
+    MOZ_ASSERT(qm);
+
+    nsCOMPtr<nsIFile> dir;
+    nsresult rv = qm->GetDirectoryForOrigin(aPersistenceType, aOrigin,
+                                            getter_AddRefs(dir));
+    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+    rv = dir->Append(NS_LITERAL_STRING(DOMCACHE_DIRECTORY_NAME));
+    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+    DebugOnly<bool> exists;
+    MOZ_ASSERT(NS_SUCCEEDED(dir->Exists(&exists)) && exists);
+
+    nsCOMPtr<nsISimpleEnumerator> entries;
+    rv = dir->GetDirectoryEntries(getter_AddRefs(entries));
+    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+    bool hasMore;
+    while (NS_SUCCEEDED(rv = entries->HasMoreElements(&hasMore)) && hasMore &&
+           !aUsageInfo->Canceled()) {
+      nsCOMPtr<nsISupports> entry;
+      rv = entries->GetNext(getter_AddRefs(entry));
+      if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+      nsCOMPtr<nsIFile> file = do_QueryInterface(entry);
+      if (!file) { return NS_NOINTERFACE; }
+
+      nsAutoString leafName;
+      rv = file->GetLeafName(leafName);
+      if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+      bool isDir;
+      rv = file->IsDirectory(&isDir);
+      if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+      if (isDir) {
+        if (leafName.EqualsLiteral("morgue")) {
+          rv = GetBodyUsage(file, aUsageInfo);
+        } else {
+          NS_WARNING("Unknown Cache directory found!");
+        }
+
+        continue;
+      }
+
+      // Ignore transient sqlite files
+      if (leafName.EqualsLiteral("caches.sqlite-journal") ||
+          leafName.EqualsLiteral("caches.sqlite-shm") ||
+          leafName.Find(NS_LITERAL_CSTRING("caches.sqlite-mj"), false, 0, 0) == 0) {
+        continue;
+      }
+
+      if (leafName.EqualsLiteral("caches.sqlite") ||
+          leafName.EqualsLiteral("caches.sqlite-wal")) {
+        int64_t fileSize;
+        rv = file->GetFileSize(&fileSize);
+        if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+        MOZ_ASSERT(fileSize >= 0);
+
+        aUsageInfo->AppendToDatabaseUsage(fileSize);
+        continue;
+      }
+
+      NS_WARNING("Unknown Cache file found!");
+    }
+
+    return NS_OK;
+  }
+
+  virtual void
+  OnOriginClearCompleted(PersistenceType aPersistenceType,
+                         const nsACString& aOrigin) MOZ_OVERRIDE
+  {
+    // nothing to do
+  }
+
+  virtual void
+  ReleaseIOThreadObjects() MOZ_OVERRIDE
+  {
+    // nothing to do
+  }
+
+  virtual bool
+  IsFileServiceUtilized() MOZ_OVERRIDE
+  {
+    return false;
+  }
+
+  virtual bool
+  IsTransactionServiceActivated() MOZ_OVERRIDE
+  {
+    return ManagersAreActive();
+  }
+
+  virtual void
+  WaitForStoragesToComplete(nsTArray<nsIOfflineStorage*>& aStorages,
+                            nsIRunnable* aCallback) MOZ_OVERRIDE
+  {
+    // TODO: implement nsIOfflineStorage interface (bug 1110487)
+  }
+
+
+  virtual void
+  ShutdownTransactionService() MOZ_OVERRIDE
+  {
+    MOZ_ASSERT(NS_IsMainThread());
+
+    // spins event loop until Cache is shutdown
+    ExecuteShutdown();
+  }
+
+public:
+  NS_INLINE_DECL_REFCOUNTING(CacheQuotaClient)
+};
+
 } // anonymous namespace;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-using mozilla::dom::quota::Client;
-using mozilla::dom::quota::PersistenceType;
-using mozilla::dom::quota::QuotaManager;
-using mozilla::dom::quota::UsageInfo;
-
-Client*
-QuotaClient::Create()
+already_AddRefed<quota::Client> CreateQuotaClient()
 {
-  // TODO: implement nsIOfflineStorage interface (bug 1110487)
-  return new QuotaClient();
+  nsRefPtr<CacheQuotaClient> ref = new CacheQuotaClient();
+  return ref.forget();
 }
 
-Client::Type
-QuotaClient::GetType()
-{
-  return DOMCACHE;
-}
-
-nsresult
-QuotaClient::InitOrigin(PersistenceType aPersistenceType,
-                        const nsACString& aGroup, const nsACString& aOrigin,
-                        UsageInfo* aUsageInfo)
-{
-  return NS_OK;
-}
-
-nsresult
-QuotaClient::GetUsageForOrigin(PersistenceType aPersistenceType,
-                               const nsACString& aGroup,
-                               const nsACString& aOrigin, UsageInfo* aUsageInfo)
-{
-  QuotaManager* qm = QuotaManager::Get();
-  MOZ_ASSERT(qm);
-
-  nsCOMPtr<nsIFile> dir;
-  nsresult rv = qm->GetDirectoryForOrigin(aPersistenceType, aOrigin,
-                                          getter_AddRefs(dir));
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-  rv = dir->Append(NS_LITERAL_STRING(DOMCACHE_DIRECTORY_NAME));
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-  DebugOnly<bool> exists;
-  MOZ_ASSERT(NS_SUCCEEDED(dir->Exists(&exists)) && exists);
-
-  nsCOMPtr<nsISimpleEnumerator> entries;
-  rv = dir->GetDirectoryEntries(getter_AddRefs(entries));
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-  bool hasMore;
-  while (NS_SUCCEEDED(rv = entries->HasMoreElements(&hasMore)) && hasMore &&
-         !aUsageInfo->Canceled()) {
-    nsCOMPtr<nsISupports> entry;
-    rv = entries->GetNext(getter_AddRefs(entry));
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-    nsCOMPtr<nsIFile> file = do_QueryInterface(entry);
-    if (!file) { return NS_NOINTERFACE; }
-
-    nsAutoString leafName;
-    rv = file->GetLeafName(leafName);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-    bool isDir;
-    rv = file->IsDirectory(&isDir);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-    if (isDir) {
-      if (leafName.EqualsLiteral("morgue")) {
-        rv = GetBodyUsage(file, aUsageInfo);
-      } else {
-        NS_WARNING("Unknown Cache directory found!");
-      }
-
-      continue;
-    }
-
-    // Ignore transient sqlite files
-    if (leafName.EqualsLiteral("caches.sqlite-journal") ||
-        leafName.EqualsLiteral("caches.sqlite-shm") ||
-        leafName.Find(NS_LITERAL_CSTRING("caches.sqlite-mj"), false, 0, 0) == 0) {
-      continue;
-    }
-
-    if (leafName.EqualsLiteral("caches.sqlite") ||
-        leafName.EqualsLiteral("caches.sqlite-wal")) {
-      int64_t fileSize;
-      rv = file->GetFileSize(&fileSize);
-      if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-      MOZ_ASSERT(fileSize >= 0);
-
-      aUsageInfo->AppendToDatabaseUsage(fileSize);
-      continue;
-    }
-
-    NS_WARNING("Unknown Cache file found!");
-  }
-
-  return NS_OK;
-}
-
-void
-QuotaClient::OnOriginClearCompleted(PersistenceType aPersistenceType,
-                                    const nsACString& aOrigin)
-{
-}
-
-void
-QuotaClient::ReleaseIOThreadObjects()
-{
-  // nothing to do
-}
-
-bool
-QuotaClient::IsFileServiceUtilized()
-{
-  return false;
-}
-
-bool
-QuotaClient::IsTransactionServiceActivated()
-{
-  return false;
-}
-
-void
-QuotaClient::WaitForStoragesToComplete(nsTArray<nsIOfflineStorage*>& aStorages,
-                                       nsIRunnable* aCallback)
-{
-  // nothing to do
-}
-
-void
-QuotaClient::ShutdownTransactionService()
-{
-  // nothing to do
-}
-
-QuotaClient::QuotaClient()
-{
-}
-
-QuotaClient::~QuotaClient()
-{
-}
-
-
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/QuotaClient.h b/dom/cache/QuotaClient.h
--- a/dom/cache/QuotaClient.h
+++ b/dom/cache/QuotaClient.h
@@ -9,53 +9,15 @@
 
 #include "mozilla/Attributes.h"
 #include "mozilla/dom/quota/Client.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-class QuotaClient MOZ_FINAL : public quota::Client
-{
-public:
-  static quota::Client*
-  Create();
-
-  // quota::Client methods
-  Type GetType() MOZ_OVERRIDE;
-
-  nsresult InitOrigin(quota::PersistenceType aPersistenceType,
-                      const nsACString& aGroup, const nsACString& aOrigin,
-                      quota::UsageInfo* aUsageInfo) MOZ_OVERRIDE;
-
-  nsresult GetUsageForOrigin(quota::PersistenceType aPersistenceType,
-                             const nsACString& aGroup,
-                             const nsACString& aOrigin,
-                             quota::UsageInfo* aUsageInfo) MOZ_OVERRIDE;
-
-  void OnOriginClearCompleted(quota::PersistenceType aPersistenceType,
-                              const nsACString& aOrigin) MOZ_OVERRIDE;
-
-  void ReleaseIOThreadObjects() MOZ_OVERRIDE;
-
-  bool IsFileServiceUtilized() MOZ_OVERRIDE;
-
-  bool IsTransactionServiceActivated() MOZ_OVERRIDE;
-
-  void WaitForStoragesToComplete(nsTArray<nsIOfflineStorage*>& aStorages,
-                                 nsIRunnable* aCallback) MOZ_OVERRIDE;
-
-  void ShutdownTransactionService() MOZ_OVERRIDE;
-
-private:
-  QuotaClient();
-  ~QuotaClient();
-
-public:
-  NS_INLINE_DECL_REFCOUNTING(mozilla::dom::cache::QuotaClient)
-};
+already_AddRefed<quota::Client> CreateQuotaClient();
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_QuotaClient_h
diff --git a/dom/cache/ShutdownObserver.cpp b/dom/cache/ShutdownObserver.cpp
--- a/dom/cache/ShutdownObserver.cpp
+++ b/dom/cache/ShutdownObserver.cpp
@@ -71,19 +71,23 @@ private:
 public:
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_NSIOBSERVER
 };
 
 // ShutdownObserver conflicts with other code here, so use CacheShutdownObserver
 NS_IMPL_ISUPPORTS(CacheShutdownObserver, nsIObserver);
 
+// PBackground worker thread only
 static bool sInstanceInit = false;
 static StaticRefPtr<CacheShutdownObserver> sInstance;
 
+// Main thread only
+static bool sActive = false;
+
 // static
 already_AddRefed<CacheShutdownObserver>
 CacheShutdownObserver::Instance()
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
 
   // Use a separate init variable here.  Since we clear sInstance after
   // shutdown we can't just compare against nullptr.  The init variable
@@ -153,21 +157,23 @@ CacheShutdownObserver::RemoveManagerId(M
   MOZ_ASSERT(NS_SUCCEEDED(rv));
 }
 
 CacheShutdownObserver::CacheShutdownObserver()
   : mBackgroundThread(NS_GetCurrentThread())
   , mShuttingDown(false)
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
+  MOZ_ASSERT(!sActive);
 }
 
 CacheShutdownObserver::~CacheShutdownObserver()
 {
   // This can happen on either main thread or background thread.
+  MOZ_ASSERT(!sActive);
 }
 
 void
 CacheShutdownObserver::InitOnMainThread()
 {
   MOZ_ASSERT(NS_IsMainThread());
 
   nsCOMPtr<nsIObserverService> os = GetObserverService();
@@ -184,23 +190,25 @@ CacheShutdownObserver::InitOnMainThread(
 }
 
 void
 CacheShutdownObserver::AddManagerIdOnMainThread(ManagerId* aManagerId)
 {
   MOZ_ASSERT(NS_IsMainThread());
   MOZ_ASSERT(!mManagerIds.Contains(aManagerId, ManagerId::Comparator()));
   mManagerIds.AppendElement(aManagerId);
+  sActive = true;
 }
 
 void
 CacheShutdownObserver::RemoveManagerIdOnMainThread(ManagerId* aManagerId)
 {
   MOZ_ASSERT(NS_IsMainThread());
   mManagerIds.RemoveElement(aManagerId, ManagerId::Comparator());
+  sActive = !mManagerIds.IsEmpty();
 }
 
 void
 CacheShutdownObserver::StartShutdownOnBgThread()
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
 
   // prevent any further AddManagerId() calls
@@ -249,17 +257,17 @@ CacheShutdownObserver::DoShutdown()
   runnable =
     NS_NewRunnableMethod(this, &CacheShutdownObserver::FinishShutdownOnBgThread);
   rv = mBackgroundThread->Dispatch(runnable, nsIThread::DISPATCH_NORMAL);
   MOZ_ASSERT(NS_SUCCEEDED(rv));
 }
 
 NS_IMETHODIMP
 CacheShutdownObserver::Observe(nsISupports* aSubject, const char* aTopic,
-                          const char16_t* aData)
+                               const char16_t* aData)
 {
   MOZ_ASSERT(NS_IsMainThread());
 
   if (!strcmp(aTopic, "profile-before-change")) {
     DoShutdown();
   }
 
   return NS_OK;
@@ -269,29 +277,55 @@ CacheShutdownObserver::Observe(nsISuppor
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 namespace shutdown {
 
 nsresult AddManagerId(ManagerId* aManagerId)
 {
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
   nsRefPtr<CacheShutdownObserver> so = CacheShutdownObserver::Instance();
   if (!so) {
     return NS_ERROR_ILLEGAL_DURING_SHUTDOWN;
   }
 
   so->AddManagerId(aManagerId);
 
   return NS_OK;
 }
 
 void RemoveManagerId(ManagerId* aManagerId)
 {
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
   // We should never get a nullptr while a Manager is still running.
   nsRefPtr<CacheShutdownObserver> so = CacheShutdownObserver::Instance();
   so->RemoveManagerId(aManagerId);
 }
 
+bool ManagersAreActive()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  return sActive;
+}
+
+void ExecuteShutdown()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  if (!sActive) {
+    return;
+  }
+
+  // If sActive is true, then we are guaranteed for there to be an observer
+  // instance available.
+  MOZ_ASSERT(sInstance);
+
+  // Simulate an observer service notification
+  sInstance->Observe(nullptr, "profile-before-change", nullptr);
+}
+
 } // namespace shutdown
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/ShutdownObserver.h b/dom/cache/ShutdownObserver.h
--- a/dom/cache/ShutdownObserver.h
+++ b/dom/cache/ShutdownObserver.h
@@ -13,21 +13,30 @@ namespace mozilla {
 namespace dom {
 namespace cache {
 
 class ManagerId;
 
 namespace shutdown {
 
 // Attempt to register a Manager with the ShutdownObserver.  If successful,
-// this will block shutdown until the RemoveManagerId is called.
+// this will block shutdown until the RemoveManagerId is called.  PBackground
+// worker thread only.
 nsresult AddManagerId(ManagerId* aManagerId);
 
 // Remove the given Manager from the ShutdownObserver.  This must be called
-// exactly once for each AddManagerId() call.
+// exactly once for each AddManagerId() call. PBackground worker thread only.
 void RemoveManagerId(ManagerId* aManagerId);
 
+// Determine if there are any managers active.  Main thread only.
+bool ManagersAreActive();
+
+// Begin the shutdown sequence immediately instead of waiting for the observer
+// service to start it.  Spins the event loop until Cache Managers have
+// stopped.  Main thread only.
+void ExecuteShutdown();
+
 } // namespace shutdown
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_ShutdownObserver_h
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -400,23 +400,17 @@ TypeUtils::ToInternalRequest(const nsASt
   // Re-create a GlobalObject stack object so we can use webidl Constructors.
   AutoJSAPI jsapi;
   if (NS_WARN_IF(!jsapi.Init(GetGlobalObject()))) {
     aRv.Throw(NS_ERROR_UNEXPECTED);
     return nullptr;
   }
   JSContext* cx = jsapi.cx();
   GlobalObject global(cx, GetGlobalObject()->GetGlobalJSObject());
-  if (NS_WARN_IF(global.Failed())) {
-    JS::Rooted<JS::Value> exn(cx);
-    JS_GetPendingException(cx, &exn);
-    aRv.ThrowJSException(cx, exn);
-    JS_ClearPendingException(cx);
-    return nullptr;
-  }
+  MOZ_ASSERT(!global.Failed());
 
   nsRefPtr<Request> request = Request::Constructor(global, requestOrString,
                                                    RequestInit(), aRv);
   if (NS_WARN_IF(aRv.Failed())) { return nullptr; }
 
   return request->GetInternalRequest();
 }
 
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -1,16 +1,17 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXPORTS.mozilla.dom.cache += [
     'Action.h',
+    'ActorUtils.h',
     'AutoUtils.h',
     'Cache.h',
     'CacheChild.h',
     'CacheParent.h',
     'CacheStorage.h',
     'CacheStorageChild.h',
     'CacheStorageParent.h',
     'CacheStreamControlChild.h',
diff --git a/dom/quota/QuotaManager.cpp b/dom/quota/QuotaManager.cpp
--- a/dom/quota/QuotaManager.cpp
+++ b/dom/quota/QuotaManager.cpp
@@ -1426,17 +1426,17 @@ QuotaManager::Init()
   NS_ASSERTION(mClients.Capacity() == Client::TYPE_MAX,
                "Should be using an auto array with correct capacity!");
 
   nsRefPtr<Client> idbClient = indexedDB::CreateQuotaClient();
 
   // Register clients.
   mClients.AppendElement(idbClient);
   mClients.AppendElement(asmjscache::CreateClient());
-  mClients.AppendElement(cache::QuotaClient::Create());
+  mClients.AppendElement(cache::CreateQuotaClient());
 
   return NS_OK;
 }
 
 void
 QuotaManager::InitQuotaForOrigin(PersistenceType aPersistenceType,
                                  const nsACString& aGroup,
                                  const nsACString& aOrigin,
diff --git a/ipc/glue/BackgroundChildImpl.cpp b/ipc/glue/BackgroundChildImpl.cpp
--- a/ipc/glue/BackgroundChildImpl.cpp
+++ b/ipc/glue/BackgroundChildImpl.cpp
@@ -4,19 +4,20 @@
 
 #include "BackgroundChildImpl.h"
 
 #include "ActorsChild.h" // IndexedDB
 #include "BroadcastChannelChild.h"
 #include "FileDescriptorSetChild.h"
 #include "mozilla/Assertions.h"
 #include "mozilla/dom/PBlobChild.h"
-#include "mozilla/dom/cache/CacheChild.h"
+#include "mozilla/dom/cache/ActorUtils.h"
+#include "mozilla/dom/cache/PCacheChild.h"
 #include "mozilla/dom/cache/PCacheStorageChild.h"
-#include "mozilla/dom/cache/CacheStreamControlChild.h"
+#include "mozilla/dom/cache/PCacheStreamControlChild.h"
 #include "mozilla/dom/indexedDB/PBackgroundIDBFactoryChild.h"
 #include "mozilla/dom/ipc/BlobChild.h"
 #include "mozilla/ipc/PBackgroundTestChild.h"
 #include "mozilla/layout/VsyncChild.h"
 #include "nsID.h"
 #include "nsTraceRefcnt.h"
 
 namespace {
@@ -44,21 +45,19 @@ public:
   Recv__delete__(const nsCString& aTestArg) MOZ_OVERRIDE;
 };
 
 } // anonymous namespace
 
 namespace mozilla {
 namespace ipc {
 
+using mozilla::dom::cache::PCacheChild;
 using mozilla::dom::cache::PCacheStorageChild;
-using mozilla::dom::cache::CacheChild;
-using mozilla::dom::cache::PCacheChild;
 using mozilla::dom::cache::PCacheStreamControlChild;
-using mozilla::dom::cache::CacheStreamControlChild;
 
 // -----------------------------------------------------------------------------
 // BackgroundChildImpl::ThreadLocal
 // -----------------------------------------------------------------------------
 
 BackgroundChildImpl::
 ThreadLocal::ThreadLocal()
 {
@@ -259,32 +258,32 @@ BackgroundChildImpl::DeallocPCacheStorag
   // we own the object and must delete it.
   delete aActor;
   return true;
 }
 
 PCacheChild*
 BackgroundChildImpl::AllocPCacheChild()
 {
-  return new CacheChild();
+  return dom::cache::AllocPCacheChild();
 }
 
 bool
 BackgroundChildImpl::DeallocPCacheChild(PCacheChild* aActor)
 {
   // The CacheChild actor is provided to the PBackground manager, but
   // we own the object and must delete it.
   delete aActor;
   return true;
 }
 
 PCacheStreamControlChild*
 BackgroundChildImpl::AllocPCacheStreamControlChild()
 {
-  return new CacheStreamControlChild();
+  return dom::cache::AllocPCacheStreamControlChild();
 }
 
 bool
 BackgroundChildImpl::DeallocPCacheStreamControlChild(PCacheStreamControlChild* aActor)
 {
   delete aActor;
   return true;
 }
diff --git a/ipc/glue/BackgroundParentImpl.cpp b/ipc/glue/BackgroundParentImpl.cpp
--- a/ipc/glue/BackgroundParentImpl.cpp
+++ b/ipc/glue/BackgroundParentImpl.cpp
@@ -6,18 +6,19 @@
 
 #include "BroadcastChannelParent.h"
 #include "FileDescriptorSetParent.h"
 #include "mozilla/AppProcessChecker.h"
 #include "mozilla/Assertions.h"
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/PBlobParent.h"
 #include "mozilla/dom/ServiceWorkerRegistrar.h"
-#include "mozilla/dom/cache/CacheStorageParent.h"
+#include "mozilla/dom/cache/ActorUtils.h"
 #include "mozilla/dom/cache/PCacheParent.h"
+#include "mozilla/dom/cache/PCacheStorageParent.h"
 #include "mozilla/dom/cache/PCacheStreamControlParent.h"
 #include "mozilla/dom/indexedDB/ActorsParent.h"
 #include "mozilla/dom/ipc/BlobParent.h"
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozilla/ipc/BackgroundUtils.h"
 #include "mozilla/ipc/PBackgroundSharedTypes.h"
 #include "mozilla/ipc/PBackgroundTestParent.h"
 #include "mozilla/layout/VsyncParent.h"
@@ -30,17 +31,16 @@
 #ifdef DISABLE_ASSERTS_FOR_FUZZING
 #define ASSERT_UNLESS_FUZZING(...) do { } while (0)
 #else
 #define ASSERT_UNLESS_FUZZING(...) MOZ_ASSERT(false)
 #endif
 
 using mozilla::ipc::AssertIsOnBackgroundThread;
 using mozilla::dom::cache::PCacheParent;
-using mozilla::dom::cache::CacheStorageParent;
 using mozilla::dom::cache::PCacheStorageParent;
 using mozilla::dom::cache::PCacheStreamControlParent;
 
 namespace {
 
 void
 AssertIsInMainProcess()
 {
@@ -553,17 +553,17 @@ BackgroundParentImpl::RecvShutdownServic
   service->Shutdown();
   return true;
 }
 
 PCacheStorageParent*
 BackgroundParentImpl::AllocPCacheStorageParent(const Namespace& aNamespace,
                                                const PrincipalInfo& aPrincipalInfo)
 {
-  return new CacheStorageParent(this, aNamespace, aPrincipalInfo);
+  return dom::cache::AllocPCacheStorageParent(this, aNamespace, aPrincipalInfo);
 }
 
 bool
 BackgroundParentImpl::DeallocPCacheStorageParent(PCacheStorageParent* aActor)
 {
   delete aActor;
   return true;
 }
