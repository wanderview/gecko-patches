# HG changeset patch
# Parent ba38b5e78ddd07c0f2bc336ac7227f6dac8959ca
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 009 Remove Context::Listener abstract class

diff --git a/dom/cache/Context.cpp b/dom/cache/Context.cpp
--- a/dom/cache/Context.cpp
+++ b/dom/cache/Context.cpp
@@ -3,16 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/Context.h"
 
 #include "mozilla/DebugOnly.h"
 #include "mozilla/dom/cache/Action.h"
+#include "mozilla/dom/cache/Manager.h"
 #include "mozilla/dom/cache/ManagerId.h"
 #include "mozilla/dom/quota/OriginOrPatternString.h"
 #include "mozilla/dom/quota/QuotaManager.h"
 #include "nsIFile.h"
 #include "nsIPrincipal.h"
 #include "nsIRunnable.h"
 #include "nsThreadUtils.h"
 
@@ -70,29 +71,29 @@ using mozilla::dom::quota::QuotaManager;
 using mozilla::dom::quota::PERSISTENCE_TYPE_DEFAULT;
 using mozilla::dom::quota::PersistenceType;
 
 class Context::QuotaInitRunnable MOZ_FINAL : public nsIRunnable
                                            , public Action::Resolver
 {
 public:
   QuotaInitRunnable(Context* aContext,
-                    ManagerId* aManagerId,
+                    Manager* aManager,
                     const nsACString& aQuotaId,
                     Action* aQuotaIOThreadAction)
     : mContext(aContext)
-    , mManagerId(aManagerId)
+    , mManager(aManager)
     , mQuotaId(aQuotaId)
     , mQuotaIOThreadAction(aQuotaIOThreadAction)
     , mInitiatingThread(NS_GetCurrentThread())
     , mState(STATE_INIT)
     , mResult(NS_OK)
   {
     MOZ_ASSERT(mContext);
-    MOZ_ASSERT(mManagerId);
+    MOZ_ASSERT(mManager);
     MOZ_ASSERT(mInitiatingThread);
   }
 
   nsresult Dispatch()
   {
     NS_ASSERT_OWNINGTHREAD(Action::Resolver);
     MOZ_ASSERT(mState == STATE_INIT);
 
@@ -136,21 +137,22 @@ private:
     STATE_COMPLETE
   };
 
   void Clear()
   {
     NS_ASSERT_OWNINGTHREAD(Action::Resolver);
     MOZ_ASSERT(mContext);
     mContext = nullptr;
+    mManager = nullptr;
     mQuotaIOThreadAction = nullptr;
   }
 
   nsRefPtr<Context> mContext;
-  nsRefPtr<ManagerId> mManagerId;
+  nsRefPtr<Manager> mManager;
   const nsCString mQuotaId;
   nsRefPtr<Action> mQuotaIOThreadAction;
   nsCOMPtr<nsIThread> mInitiatingThread;
   State mState;
   nsresult mResult;
   QuotaInfo mQuotaInfo;
 
 public:
@@ -169,17 +171,18 @@ Context::QuotaInitRunnable::Run()
     {
       MOZ_ASSERT(NS_IsMainThread());
       QuotaManager* qm = QuotaManager::GetOrCreate();
       if (!qm) {
         Resolve(NS_ERROR_FAILURE);
         return NS_OK;
       }
 
-      nsCOMPtr<nsIPrincipal> principal = mManagerId->Principal();
+      nsRefPtr<ManagerId> managerId = mManager->GetManagerId();
+      nsCOMPtr<nsIPrincipal> principal = managerId->Principal();
       nsresult rv = qm->GetInfoFromPrincipal(principal,
                                              &mQuotaInfo.mGroup,
                                              &mQuotaInfo.mOrigin,
                                              &mQuotaInfo.mIsApp,
                                              &mQuotaInfo.mHasUnlimStoragePerm);
       if (NS_WARN_IF(NS_FAILED(rv))) {
         Resolve(rv);
         return NS_OK;
@@ -433,27 +436,24 @@ Context::ActionRunnable::Run()
       break;
     default:
       MOZ_CRASH("unexpected state in ActionRunnable");
       break;
   }
   return NS_OK;
 }
 
-Context::Context(Listener* aListener, ManagerId* aManagerId,
-                 Action* aQuotaIOThreadAction)
-  : mListener(aListener)
-  , mManagerId(aManagerId)
+Context::Context(Manager* aManager, Action* aQuotaIOThreadAction)
+  : mManager(aManager)
   , mState(STATE_CONTEXT_INIT)
 {
-  MOZ_ASSERT(mListener);
-  MOZ_ASSERT(mManagerId);
+  MOZ_ASSERT(mManager);
 
   nsRefPtr<QuotaInitRunnable> runnable =
-    new QuotaInitRunnable(this, mManagerId, NS_LITERAL_CSTRING("Cache"),
+    new QuotaInitRunnable(this, mManager, NS_LITERAL_CSTRING("Cache"),
                           aQuotaIOThreadAction);
   nsresult rv = runnable->Dispatch();
   if (NS_FAILED(rv)) {
     MOZ_CRASH("Failed to dispatch QuotaInitRunnable.");
   }
 }
 
 void
@@ -501,27 +501,27 @@ Context::CancelForCacheId(CacheId aCache
       mActionRunnables[i]->Cancel();
     }
   }
 }
 
 Context::~Context()
 {
   NS_ASSERT_OWNINGTHREAD(Context);
-  MOZ_ASSERT(mListener);
+  MOZ_ASSERT(mManager);
 
   // Unlock the quota dir as we go out of scope.
   nsCOMPtr<nsIRunnable> runnable =
     new QuotaReleaseRunnable(mQuotaInfo, NS_LITERAL_CSTRING("Cache"));
   nsresult rv = NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
   if (NS_FAILED(rv)) {
     MOZ_CRASH("Failed to dispatch QuotaReleaseRunnable to main thread.");
   }
 
-  mListener->RemoveContext(this);
+  mManager->RemoveContext(this);
 }
 
 void
 Context::DispatchAction(nsIEventTarget* aTarget, Action* aAction)
 {
   NS_ASSERT_OWNINGTHREAD(Context);
 
   nsRefPtr<ActionRunnable> runnable =
diff --git a/dom/cache/Context.h b/dom/cache/Context.h
--- a/dom/cache/Context.h
+++ b/dom/cache/Context.h
@@ -17,35 +17,22 @@
 class nsIEventTarget;
 class nsIFile;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class Action;
-class ManagerId;
+class Manager;
 
 class Context MOZ_FINAL
 {
 public:
-  class Listener
-  {
-  protected:
-    virtual ~Listener() { }
-  public:
-    // Called from the Context destructor on the thread that originally
-    // created the Context.
-    virtual void RemoveContext(Context* aContext)=0;
-
-    NS_INLINE_DECL_REFCOUNTING(mozilla::dom::cache::Context::Listener)
-  };
-
-  Context(Listener* aListener, ManagerId* aManagerId,
-          Action* aQuotaIOThreadAction);
+  Context(Manager* aManager, Action* aQuotaIOThreadAction);
 
   // Execute given action on the target once the quota manager has been
   // initialized.
   //
   // Only callable from the thread that created the Context.
   void Dispatch(nsIEventTarget* aTarget, Action* aAction);
 
   // Cancel any Actions running or waiting to run.  This should allow the
@@ -78,18 +65,17 @@ private:
     nsRefPtr<Action> mAction;
   };
 
   ~Context();
   void DispatchAction(nsIEventTarget* aTarget, Action* aAction);
   void OnQuotaInit(nsresult aRv, const QuotaInfo& aQuotaInfo);
   void OnActionRunnableComplete(ActionRunnable* const aAction);
 
-  nsRefPtr<Listener> mListener;
-  nsRefPtr<ManagerId> mManagerId;
+  nsRefPtr<Manager> mManager;
   State mState;
   QuotaInfo mQuotaInfo;
   nsTArray<PendingAction> mPendingActions;
 
   // weak refs since ~ActionRunnable() removes itself from this list
   nsTArray<ActionRunnable*> mActionRunnables;
 
 public:
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -1,16 +1,17 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/Manager.h"
 
+#include "mozilla/dom/cache/Context.h"
 #include "mozilla/dom/cache/DBAction.h"
 #include "mozilla/dom/cache/DBSchema.h"
 #include "mozilla/dom/cache/FileUtils.h"
 #include "mozilla/dom/cache/ManagerId.h"
 #include "mozilla/dom/cache/PCacheTypes.h"
 #include "mozilla/dom/cache/SavedTypes.h"
 #include "mozilla/dom/cache/StreamList.h"
 #include "mozilla/dom/cache/ShutdownObserver.h"
@@ -1037,40 +1038,40 @@ Manager::Get(ManagerId* aManagerId)
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
   return Factory::Instance().Get(aManagerId);
 }
 
 void
 Manager::RemoveListener(Listener* aListener)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   mListeners.RemoveElement(aListener);
 }
 
 void
 Manager::AddRefCacheId(CacheId aCacheId)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mCacheIdRefs.Length(); ++i) {
     if (mCacheIdRefs[i].mCacheId == aCacheId) {
       mCacheIdRefs[i].mCount += 1;
       return;
     }
   }
   CacheIdRefCounter* entry = mCacheIdRefs.AppendElement();
   entry->mCacheId = aCacheId;
   entry->mCount = 1;
   entry->mOrphaned = false;
 }
 
 void
 Manager::ReleaseCacheId(CacheId aCacheId)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mCacheIdRefs.Length(); ++i) {
     if (mCacheIdRefs[i].mCacheId == aCacheId) {
       DebugOnly<uint32_t> oldRef = mCacheIdRefs[i].mCount;
       mCacheIdRefs[i].mCount -= 1;
       MOZ_ASSERT(mCacheIdRefs[i].mCount < oldRef);
       if (mCacheIdRefs[i].mCount < 1) {
         bool orphaned = mCacheIdRefs[i].mOrphaned;
         mCacheIdRefs.RemoveElementAt(i);
@@ -1086,33 +1087,33 @@ Manager::ReleaseCacheId(CacheId aCacheId
     }
   }
   MOZ_ASSERT_UNREACHABLE("Attempt to release CacheId that is not referenced!");
 }
 
 void
 Manager::AddRefBodyId(const nsID& aBodyId)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
     if (mBodyIdRefs[i].mBodyId == aBodyId) {
       mBodyIdRefs[i].mCount += 1;
       return;
     }
   }
   BodyIdRefCounter* entry = mBodyIdRefs.AppendElement();
   entry->mBodyId = aBodyId;
   entry->mCount = 1;
   entry->mOrphaned = false;
 }
 
 void
 Manager::ReleaseBodyId(const nsID& aBodyId)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
     if (mBodyIdRefs[i].mBodyId == aBodyId) {
       DebugOnly<uint32_t> oldRef = mBodyIdRefs[i].mCount;
       mBodyIdRefs[i].mCount -= 1;
       MOZ_ASSERT(mBodyIdRefs[i].mCount < oldRef);
       if (mBodyIdRefs[i].mCount < 1) {
         bool orphaned = mBodyIdRefs[i].mOrphaned;
         mBodyIdRefs.RemoveElementAt(i);
@@ -1126,32 +1127,32 @@ Manager::ReleaseBodyId(const nsID& aBody
     }
   }
   MOZ_ASSERT_UNREACHABLE("Attempt to release BodyId that is not referenced!");
 }
 
 bool
 Manager::SetCacheIdOrphanedIfRefed(CacheId aCacheId)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mCacheIdRefs.Length(); ++i) {
     if (mCacheIdRefs[i].mCacheId == aCacheId) {
       MOZ_ASSERT(mCacheIdRefs[i].mCount > 0);
       MOZ_ASSERT(!mCacheIdRefs[i].mOrphaned);
       mCacheIdRefs[i].mOrphaned = true;
       return true;
     }
   }
   return false;
 }
 
 void
 Manager::Shutdown()
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   mShuttingDown = true;
   for (uint32_t i = 0; i < mStreamLists.Length(); ++i) {
     mStreamLists[i]->CloseAll();
   }
 
   // If there is no context, then note that we're done shutting down
   if (!mContext) {
     nsRefPtr<ShutdownObserver> so = ShutdownObserver::Instance();
@@ -1170,35 +1171,35 @@ Manager::GetManagerId() const
 {
   nsRefPtr<ManagerId> ref = mManagerId;
   return ref.forget();
 }
 
 void
 Manager::AddStreamList(StreamList* aStreamList)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aStreamList);
   mStreamLists.AppendElement(aStreamList);
 }
 
 void
 Manager::RemoveStreamList(StreamList* aStreamList)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aStreamList);
   mStreamLists.RemoveElement(aStreamList);
 }
 
 void
 Manager::CacheMatch(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
                     const PCacheRequest& aRequest,
                     const PCacheQueryParams& aParams)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnCacheMatch(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                             nullptr, nullptr);
     return;
   }
   nsRefPtr<StreamList> streamList = new StreamList(this, CurrentContext());
   ListenerId listenerId = SaveListener(aListener);
@@ -1208,17 +1209,17 @@ Manager::CacheMatch(Listener* aListener,
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::CacheMatchAll(Listener* aListener, RequestId aRequestId,
                        CacheId aCacheId, const PCacheRequestOrVoid& aRequest,
                        const PCacheQueryParams& aParams)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnCacheMatchAll(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                                nsTArray<SavedResponse>(), nullptr);
     return;
   }
   nsRefPtr<StreamList> streamList = new StreamList(this, CurrentContext());
   ListenerId listenerId = SaveListener(aListener);
@@ -1229,17 +1230,17 @@ Manager::CacheMatchAll(Listener* aListen
 }
 
 void
 Manager::CachePutAll(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
                      const nsTArray<CacheRequestResponse>& aPutList,
                      const nsTArray<nsCOMPtr<nsIInputStream>>& aRequestStreamList,
                      const nsTArray<nsCOMPtr<nsIInputStream>>& aResponseStreamList)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnCachePutAll(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN);
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new CachePutAllAction(this, listenerId, aRequestId,
                                                   aCacheId, aPutList,
@@ -1248,34 +1249,34 @@ Manager::CachePutAll(Listener* aListener
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::CacheDelete(Listener* aListener, RequestId aRequestId,
                      CacheId aCacheId, const PCacheRequest& aRequest,
                      const PCacheQueryParams& aParams)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnCacheDelete(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN, false);
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new CacheDeleteAction(this, listenerId, aRequestId,
                                                   aCacheId, aRequest, aParams);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::CacheKeys(Listener* aListener, RequestId aRequestId,
                    CacheId aCacheId, const PCacheRequestOrVoid& aRequestOrVoid,
                    const PCacheQueryParams& aParams)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnCacheKeys(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                            nsTArray<SavedRequest>(), nullptr);
     return;
   }
   nsRefPtr<StreamList> streamList = new StreamList(this, CurrentContext());
   ListenerId listenerId = SaveListener(aListener);
@@ -1285,17 +1286,17 @@ Manager::CacheKeys(Listener* aListener, 
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::StorageMatch(Listener* aListener, RequestId aRequestId,
                       Namespace aNamespace, const PCacheRequest& aRequest,
                       const PCacheQueryParams& aParams)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnStorageMatch(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                               nullptr, nullptr);
     return;
   }
   nsRefPtr<StreamList> streamList = new StreamList(this, CurrentContext());
   ListenerId listenerId = SaveListener(aListener);
@@ -1304,83 +1305,83 @@ Manager::StorageMatch(Listener* aListene
                                                    aParams, streamList);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::StorageHas(Listener* aListener, RequestId aRequestId,
                     Namespace aNamespace, const nsAString& aKey)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnStorageHas(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                             false);
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new StorageHasAction(this, listenerId, aRequestId,
                                                  aNamespace, aKey);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::StorageOpen(Listener* aListener, RequestId aRequestId,
                      Namespace aNamespace, const nsAString& aKey)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnStorageOpen(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN, 0);
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new StorageOpenAction(this, listenerId, aRequestId,
                                                   aNamespace, aKey);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::StorageDelete(Listener* aListener, RequestId aRequestId,
                        Namespace aNamespace, const nsAString& aKey)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnStorageDelete(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                                false);
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new StorageDeleteAction(this, listenerId, aRequestId,
                                                     aNamespace, aKey);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::StorageKeys(Listener* aListener, RequestId aRequestId,
                      Namespace aNamespace)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnStorageKeys(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                              nsTArray<nsString>());
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new StorageKeysAction(this, listenerId, aRequestId,
                                                   aNamespace);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::RemoveContext(Context* aContext)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(mContext);
   MOZ_ASSERT(mContext == aContext);
   mContext = nullptr;
 
   if (mShuttingDown) {
     nsRefPtr<ShutdownObserver> so = ShutdownObserver::Instance();
     if (so) {
       so->RemoveManagerId(mManagerId);
@@ -1406,80 +1407,80 @@ Manager::Manager(ManagerId* aManagerId)
     so->AddManagerId(mManagerId);
   } else {
     Shutdown();
   }
 }
 
 Manager::~Manager()
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   Shutdown();
   Factory::Instance().Remove(this);
   mIOThread->Shutdown();
 }
 
 Context*
 Manager::CurrentContext()
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   if (!mContext) {
     MOZ_ASSERT(!mShuttingDown);
     nsRefPtr<Action> setupAction = new SetupAction();
-    mContext = new Context(this, mManagerId, setupAction);
+    mContext = new Context(this, setupAction);
   }
   return mContext;
 }
 
 Manager::ListenerId
 Manager::SaveListener(Listener* aListener)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mListeners.Length(); ++i) {
     if (mListeners[i] == aListener) {
       return reinterpret_cast<ListenerId>(aListener);
     }
   }
   mListeners.AppendElement(aListener);
   return reinterpret_cast<ListenerId>(aListener);
 }
 
 Manager::Listener*
 Manager::GetListener(ListenerId aListenerId) const
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mListeners.Length(); ++i) {
     if (reinterpret_cast<ListenerId>(mListeners[i]) == aListenerId) {
       return mListeners[i];
     }
   }
   return nullptr;
 }
 
 // TODO: provide way to set body non-orphaned if its added back to a cache (bug 1110479)
 
 bool
 Manager::SetBodyIdOrphanedIfRefed(const nsID& aBodyId)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
     if (mBodyIdRefs[i].mBodyId == aBodyId) {
       MOZ_ASSERT(mBodyIdRefs[i].mCount > 0);
       MOZ_ASSERT(!mBodyIdRefs[i].mOrphaned);
       mBodyIdRefs[i].mOrphaned = true;
       return true;
     }
   }
   return false;
 }
 
 void
 Manager::NoteOrphanedBodyIdList(const nsTArray<nsID>& aDeletedBodyIdList)
 {
-  NS_ASSERT_OWNINGTHREAD(Context::Listener);
+  NS_ASSERT_OWNINGTHREAD(Manager);
   nsTArray<nsID> deleteNowList;
   for (uint32_t i = 0; i < aDeletedBodyIdList.Length(); ++i) {
     if (!SetBodyIdOrphanedIfRefed(aDeletedBodyIdList[i])) {
       deleteNowList.AppendElement(aDeletedBodyIdList[i]);
     }
   }
 
   if (!deleteNowList.IsEmpty()) {
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -3,43 +3,43 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_cache_Manager_h
 #define mozilla_dom_cache_Manager_h
 
 #include "mozilla/dom/cache/CacheInitData.h"
-#include "mozilla/dom/cache/Context.h"
 #include "mozilla/dom/cache/PCacheStreamControlParent.h"
 #include "mozilla/dom/cache/Types.h"
 #include "nsCOMPtr.h"
 #include "nsISupportsImpl.h"
 #include "nsString.h"
 #include "nsTArray.h"
 
 class nsIInputStream;
 class nsIOutputStream;
 class nsIThread;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class CacheRequestResponse;
+class Context;
 class ManagerId;
 class PCacheQueryParams;
 class PCacheRequest;
 class PCacheRequestOrVoid;
 class PCacheResponse;
 struct SavedRequest;
 struct SavedResponse;
 class StreamList;
 
-class Manager MOZ_FINAL : public Context::Listener
+class Manager MOZ_FINAL
 {
 public:
   class Listener
   {
   public:
     virtual ~Listener() { }
 
     virtual void OnCacheMatch(RequestId aRequestId, nsresult aRv,
@@ -108,18 +108,17 @@ public:
                   Namespace aNamespace, const nsAString& aKey);
   void StorageOpen(Listener* aListener, RequestId aRequestId,
                    Namespace aNamespace, const nsAString& aKey);
   void StorageDelete(Listener* aListener, RequestId aRequestId,
                      Namespace aNamespace, const nsAString& aKey);
   void StorageKeys(Listener* aListener, RequestId aRequestId,
                    Namespace aNamespace);
 
-  // Context::Listener methods
-  virtual void RemoveContext(Context* aContext) MOZ_OVERRIDE;
+  void RemoveContext(Context* aContext);
 
 private:
   class Factory;
   class BaseAction;
   class DeleteOrphanedBodyAction;
   class DeleteOrphanedCacheAction;
 
   class CacheMatchAction;
@@ -166,15 +165,18 @@ private:
     bool mOrphaned;
   };
   nsTArray<BodyIdRefCounter> mBodyIdRefs;
 
   // weak ref as Context destructor clears this pointer
   Context* mContext;
 
   bool mShuttingDown;
+
+public:
+  NS_INLINE_DECL_REFCOUNTING(cache::Manager)
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_Manager_h
