# HG changeset patch
# Parent c8e3484e7733f3e8540c1b69af49f650a7b5e5c6
# User Ben Kelly <ben@wanderview.com>
Bug 940273 Part 1 Cache webidl and stubs
* * *
Bug 940273 Part 2: CacheStorage webidl and stubs

diff --git a/dom/base/Navigator.cpp b/dom/base/Navigator.cpp
--- a/dom/base/Navigator.cpp
+++ b/dom/base/Navigator.cpp
@@ -25,16 +25,17 @@
 #include "nsICookiePermission.h"
 #include "nsIScriptSecurityManager.h"
 #include "nsCharSeparatedTokenizer.h"
 #include "nsContentUtils.h"
 #include "nsUnicharUtils.h"
 #include "mozilla/Preferences.h"
 #include "mozilla/Telemetry.h"
 #include "BatteryManager.h"
+#include "mozilla/dom/CacheStorage.h"
 #include "mozilla/dom/PowerManager.h"
 #include "mozilla/dom/WakeLock.h"
 #include "mozilla/dom/power/PowerManagerService.h"
 #include "mozilla/dom/MobileMessageManager.h"
 #include "mozilla/dom/ServiceWorkerContainer.h"
 #include "mozilla/dom/Telephony.h"
 #include "mozilla/Hal.h"
 #include "nsISiteSpecificUserAgent.h"
@@ -188,16 +189,17 @@ NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(
 #ifdef MOZ_AUDIO_CHANNEL_MANAGER
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mAudioChannelManager)
 #endif
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mCameraManager)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mMessagesManager)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mDeviceStorageStores)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mTimeManager)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mServiceWorkerContainer)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mCacheStorage)
 
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mWindow)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mCachedResolveResults)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
 NS_IMPL_CYCLE_COLLECTION_TRACE_WRAPPERCACHE(Navigator)
 
@@ -299,16 +301,17 @@ Navigator::Invalidate()
   }
   mDeviceStorageStores.Clear();
 
   if (mTimeManager) {
     mTimeManager = nullptr;
   }
 
   mServiceWorkerContainer = nullptr;
+  mCacheStorage = nullptr;
 }
 
 //*****************************************************************************
 //    Navigator::nsIDOMNavigator
 //*****************************************************************************
 
 NS_IMETHODIMP
 Navigator::GetUserAgent(nsAString& aUserAgent)
@@ -1901,16 +1904,27 @@ Navigator::ServiceWorker()
   if (!mServiceWorkerContainer) {
     mServiceWorkerContainer = new workers::ServiceWorkerContainer(mWindow);
   }
 
   nsRefPtr<workers::ServiceWorkerContainer> ref = mServiceWorkerContainer;
   return ref.forget();
 }
 
+already_AddRefed<CacheStorage>
+Navigator::Caches()
+{
+  if (!mCacheStorage) {
+    mCacheStorage = new CacheStorage(mWindow);
+  }
+
+  nsRefPtr<CacheStorage> ref = mCacheStorage;
+  return ref.forget();
+}
+
 size_t
 Navigator::SizeOfIncludingThis(mozilla::MallocSizeOf aMallocSizeOf) const
 {
   size_t n = aMallocSizeOf(this);
 
   // TODO: add SizeOfIncludingThis() to nsMimeTypeArray, bug 674113.
   // TODO: add SizeOfIncludingThis() to nsPluginArray, bug 674114.
   // TODO: add SizeOfIncludingThis() to Geolocation, bug 674115.
diff --git a/dom/base/Navigator.h b/dom/base/Navigator.h
--- a/dom/base/Navigator.h
+++ b/dom/base/Navigator.h
@@ -57,16 +57,17 @@ class BatteryManager;
 } // namespace battery
 
 #ifdef MOZ_B2G_FM
 class FMRadio;
 #endif
 
 class Promise;
 
+class CacheStorage;
 class DesktopNotificationCenter;
 class MobileMessageManager;
 class MozIdleObserver;
 #ifdef MOZ_GAMEPAD
 class Gamepad;
 #endif // MOZ_GAMEPAD
 #ifdef MOZ_MEDIA_NAVIGATOR
 class NavigatorUserMediaSuccessCallback;
@@ -255,16 +256,17 @@ public:
   void MozGetUserMediaDevices(const MediaStreamConstraints& aConstraints,
                               MozGetUserMediaDevicesSuccessCallback& aOnSuccess,
                               NavigatorUserMediaErrorCallback& aOnError,
                               uint64_t aInnerWindowID,
                               ErrorResult& aRv);
 #endif // MOZ_MEDIA_NAVIGATOR
 
   already_AddRefed<workers::ServiceWorkerContainer> ServiceWorker();
+  already_AddRefed<CacheStorage> Caches();
 
   bool DoNewResolve(JSContext* aCx, JS::Handle<JSObject*> aObject,
                     JS::Handle<jsid> aId,
                     JS::MutableHandle<JSPropertyDescriptor> aDesc);
   void GetOwnPropertyNames(JSContext* aCx, nsTArray<nsString>& aNames,
                            ErrorResult& aRv);
   void GetLanguages(nsTArray<nsString>& aLanguages);
   void GetAcceptLanguages(nsTArray<nsString>& aLanguages);
@@ -333,16 +335,17 @@ private:
 #ifdef MOZ_AUDIO_CHANNEL_MANAGER
   nsRefPtr<system::AudioChannelManager> mAudioChannelManager;
 #endif
   nsRefPtr<nsDOMCameraManager> mCameraManager;
   nsCOMPtr<nsIDOMNavigatorSystemMessages> mMessagesManager;
   nsTArray<nsRefPtr<nsDOMDeviceStorage> > mDeviceStorageStores;
   nsRefPtr<time::TimeManager> mTimeManager;
   nsRefPtr<workers::ServiceWorkerContainer> mServiceWorkerContainer;
+  nsRefPtr<CacheStorage> mCacheStorage;
   nsCOMPtr<nsPIDOMWindow> mWindow;
 
   // Hashtable for saving cached objects newresolve created, so we don't create
   // the object twice if asked for it twice, whether due to use of "delete" or
   // due to Xrays.  We could probably use a nsJSThingHashtable here, but then
   // we'd need to figure out exactly how to trace that, and that seems to be
   // rocket science.  :(
   nsInterfaceHashtable<nsStringHashKey, nsISupports> mCachedResolveResults;
diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/Cache.cpp
@@ -0,0 +1,120 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/Cache.h"
+#include "mozilla/dom/CacheBinding.h"
+#include "mozilla/dom/WorkerPrivate.h"
+#include "mozilla/Preferences.h"
+
+namespace mozilla {
+namespace dom {
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Cache);
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Cache);
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Cache, mOwner)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Cache)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+Cache::Cache(nsISupports* aOwner)
+: mOwner(aOwner)
+{
+  MOZ_ASSERT(aOwner);
+  SetIsDOMBinding();
+}
+
+already_AddRefed<Promise>
+Cache::Match(const RequestOrScalarValueString& aRequest,
+             const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::MatchAll(const RequestOrScalarValueString& aRequest,
+                const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Add(const RequestOrScalarValueString& aRequests)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::AddAll(const Sequence<OwningRequestOrScalarValueString>& aRequests)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Put(const RequestOrScalarValueString& aRequest,
+           const Response& aResponse)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Delete(const RequestOrScalarValueString& aRequest,
+              const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Keys(const Optional<RequestOrScalarValueString>& aRequest,
+            const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+// static
+bool
+Cache::PrefEnabled(JSContext* aCx, JSObject* aObj)
+{
+  using mozilla::dom::workers::WorkerPrivate;
+  using mozilla::dom::workers::GetWorkerPrivateFromContext;
+
+  // In the long term we want to support Cache on main-thread, so
+  // allow it to be exposed there via a pref.
+  if (NS_IsMainThread()) {
+    static bool sPrefCacheInit = false;
+    static bool sPrefEnabled = false;
+    if (sPrefCacheInit) {
+      return sPrefEnabled;
+    }
+    Preferences::AddBoolVarCache(&sPrefEnabled, "dom.main-thread-cache.enabled");
+    sPrefCacheInit = true;
+    return sPrefEnabled;
+  }
+
+  // Otherwise only expose on ServiceWorkers
+  WorkerPrivate* workerPrivate = GetWorkerPrivateFromContext(aCx);
+  return workerPrivate && workerPrivate->IsServiceWorker();
+}
+
+nsISupports*
+Cache::GetParentObject() const
+{
+  return mOwner;
+}
+
+JSObject*
+Cache::WrapObject(JSContext* aContext)
+{
+  return CacheBinding::Wrap(aContext, this);
+}
+
+Cache::~Cache()
+{
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/Cache.h
@@ -0,0 +1,63 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Cache_h
+#define mozilla_dom_Cache_h
+
+#include "nsCOMPtr.h"
+#include "nsISupportsImpl.h"
+#include "nsWrapperCache.h"
+
+namespace mozilla {
+namespace dom {
+
+class Promise;
+class OwningRequestOrScalarValueString;
+class RequestOrScalarValueString;
+class QueryParams;
+class Response;
+template<typename T> class Optional;
+template<typename T> class Sequence;
+
+class Cache MOZ_FINAL : public nsISupports
+                      , public nsWrapperCache
+{
+public:
+  // webidl interface methods
+  already_AddRefed<Promise> Match(const RequestOrScalarValueString& aRequest,
+                                  const QueryParams& aParams);
+  already_AddRefed<Promise> MatchAll(const RequestOrScalarValueString& aRequest,
+                                     const QueryParams& aParams);
+  already_AddRefed<Promise> Add(const RequestOrScalarValueString& aRequest);
+  already_AddRefed<Promise> AddAll(const Sequence<OwningRequestOrScalarValueString>& aRequests);
+  already_AddRefed<Promise> Put(const RequestOrScalarValueString& aRequest,
+                                const Response& aResponse);
+  already_AddRefed<Promise> Delete(const RequestOrScalarValueString& aRequest,
+                                   const QueryParams& aParams);
+  already_AddRefed<Promise> Keys(const Optional<RequestOrScalarValueString>& aRequest,
+                                 const QueryParams& aParams);
+
+  // binding methods
+  static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
+
+  virtual nsISupports* GetParentObject() const MOZ_OVERRIDE;
+  virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
+
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Cache)
+
+private:
+  Cache(nsISupports* aOwner);
+  virtual ~Cache();
+
+private:
+  nsCOMPtr<nsISupports> mOwner;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Cache_h
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/CacheStorage.cpp
@@ -0,0 +1,90 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/CacheStorage.h"
+#include "mozilla/dom/Cache.h"
+
+namespace mozilla {
+namespace dom {
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(CacheStorage);
+NS_IMPL_CYCLE_COLLECTING_RELEASE(CacheStorage);
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(CacheStorage, mOwner)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(CacheStorage)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+already_AddRefed<Promise>
+CacheStorage::Match(const RequestOrScalarValueString& aRequest,
+                    const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Get(const nsAString& aKey)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Has(const nsAString& aKey)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Create(const nsAString& aKey)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Delete(const nsAString& aKey)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+CacheStorage::Keys()
+{
+  MOZ_CRASH("not implemented");
+}
+
+// static
+bool
+CacheStorage::PrefEnabled(JSContext* aCx, JSObject* aObj)
+{
+  return Cache::PrefEnabled(aCx, aObj);
+}
+
+nsISupports*
+CacheStorage::GetParentObject() const
+{
+  return mOwner;
+}
+
+JSObject*
+CacheStorage::WrapObject(JSContext* aContext)
+{
+  MOZ_CRASH("not implemented");
+}
+
+CacheStorage::CacheStorage(nsISupports* aOwner)
+: mOwner(aOwner)
+{
+  MOZ_ASSERT(mOwner);
+  SetIsDOMBinding();
+}
+
+CacheStorage::~CacheStorage()
+{
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/CacheStorage.h
@@ -0,0 +1,53 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_CacheStorage_h
+#define mozilla_dom_CacheStorage_h
+
+#include "nsISupportsImpl.h"
+#include "nsWrapperCache.h"
+
+namespace mozilla {
+namespace dom {
+
+class Promise;
+class QueryParams;
+class RequestOrScalarValueString;
+
+class CacheStorage MOZ_FINAL : public nsISupports
+                             , public nsWrapperCache
+{
+public:
+  explicit CacheStorage(nsISupports* aOwner);
+
+  // webidl interface methods
+  already_AddRefed<Promise> Match(const RequestOrScalarValueString& aRequest,
+                                  const QueryParams& aParams);
+  already_AddRefed<Promise> Get(const nsAString& aKey);
+  already_AddRefed<Promise> Has(const nsAString& aKey);
+  already_AddRefed<Promise> Create(const nsAString& aKey);
+  already_AddRefed<Promise> Delete(const nsAString& aKey);
+  already_AddRefed<Promise> Keys();
+
+  // binding methods
+  static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
+
+  virtual nsISupports* GetParentObject() const MOZ_OVERRIDE;
+  virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
+
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(CacheStorage)
+
+private:
+  virtual ~CacheStorage();
+
+  nsCOMPtr<nsISupports> mOwner;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_CacheStorage_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/cache/moz.build
@@ -0,0 +1,23 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+EXPORTS.mozilla.dom += [
+    'Cache.h',
+    'CacheStorage.h',
+]
+
+UNIFIED_SOURCES += [
+    'Cache.cpp',
+    'CacheStorage.cpp',
+]
+
+LOCAL_INCLUDES += [
+    '../workers',
+]
+
+FAIL_ON_WARNINGS = True
+
+FINAL_LIBRARY = 'xul'
diff --git a/dom/ipc/PCache.ipdl b/dom/ipc/PCache.ipdl
new file mode 100644
--- /dev/null
+++ b/dom/ipc/PCache.ipdl
@@ -0,0 +1,19 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+include protocol PBackground;
+
+namespace mozilla {
+namespace dom {
+
+protocol PCache
+{
+  manager PBackground;
+
+both:
+  __delete__();
+};
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/ipc/PCacheStorage.ipdl b/dom/ipc/PCacheStorage.ipdl
new file mode 100644
--- /dev/null
+++ b/dom/ipc/PCacheStorage.ipdl
@@ -0,0 +1,19 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+include protocol PBackground;
+
+namespace mozilla {
+namespace dom {
+
+protocol PCacheStorage
+{
+  manager PBackground;
+
+both:
+  __delete__();
+};
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/ipc/moz.build b/dom/ipc/moz.build
--- a/dom/ipc/moz.build
+++ b/dom/ipc/moz.build
@@ -74,16 +74,18 @@ SOURCES += [
     'CrashReporterChild.cpp',
 ]
 
 IPDL_SOURCES += [
     'DOMTypes.ipdlh',
     'PBlob.ipdl',
     'PBlobStream.ipdl',
     'PBrowser.ipdl',
+    'PCache.ipdl',
+    'PCacheStorage.ipdl',
     'PColorPicker.ipdl',
     'PContent.ipdl',
     'PContentBridge.ipdl',
     'PContentPermission.ipdlh',
     'PContentPermissionRequest.ipdl',
     'PCrashReporter.ipdl',
     'PCycleCollectWithLogs.ipdl',
     'PDocumentRenderer.ipdl',
diff --git a/dom/moz.build b/dom/moz.build
--- a/dom/moz.build
+++ b/dom/moz.build
@@ -38,16 +38,17 @@ DIRS += [
     'animation',
     'apps',
     'base',
     'activities',
     'archivereader',
     'bindings',
     'battery',
     'browser-element',
+    'cache',
     'canvas',
     'contacts',
     'crypto',
     'phonenumberutils',
     'alarm',
     'datastore',
     'devicestorage',
     'encoding',
diff --git a/dom/webidl/Cache.webidl b/dom/webidl/Cache.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Cache.webidl
@@ -0,0 +1,41 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html
+ *
+ */
+
+[Exposed=(Window,Worker),
+ Func="mozilla::dom::Cache::PrefEnabled"]
+interface Cache {
+  Promise<Response> match((Request or ScalarValueString) request,
+                          optional QueryParams params);
+  Promise<sequence<Response>> matchAll((Request or ScalarValueString) request,
+                                       optional QueryParams params);
+  Promise<Response> add((Request or ScalarValueString) request);
+  Promise<sequence<Response>> addAll(sequence<(Request or ScalarValueString)> requests);
+  Promise<Response> put((Request or ScalarValueString) request,
+                        Response response);
+  Promise<boolean> delete((Request or ScalarValueString) request,
+                          optional QueryParams params);
+  Promise<sequence<Request>> keys(optional (Request or ScalarValueString) request,
+                                  optional QueryParams params);
+};
+
+dictionary QueryParams {
+  boolean ignoreSearch;
+  boolean ignoreMethod;
+  boolean ignoreVary;
+  boolean prefixMatch;
+  DOMString cacheName;
+};
+
+dictionary CacheBatchOperation {
+  DOMString type;
+  Request request;
+  Response response;
+  QueryParams matchParams;
+};
diff --git a/dom/webidl/CacheStorage.webidl b/dom/webidl/CacheStorage.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/CacheStorage.webidl
@@ -0,0 +1,21 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html
+ *
+ */
+
+[Exposed=(Window,Worker),
+ Func="mozilla::dom::CacheStorage::PrefEnabled"]
+interface CacheStorage {
+   Promise<Response> match((Request or ScalarValueString) request,
+                           optional QueryParams params);
+   Promise<Cache> get(DOMString cacheName);
+   Promise<boolean> has(DOMString cacheName);
+   Promise<Cache> create(DOMString cacheName);
+   Promise<boolean> delete(DOMString cacheName);
+   Promise<sequence<DOMString>> keys();
+};
diff --git a/dom/webidl/Navigator.webidl b/dom/webidl/Navigator.webidl
--- a/dom/webidl/Navigator.webidl
+++ b/dom/webidl/Navigator.webidl
@@ -374,15 +374,17 @@ partial interface Navigator {
                               optional unsigned long long innerWindowID = 0);
 };
 #endif // MOZ_MEDIA_NAVIGATOR
 
 // Service Workers/Navigation Controllers
 partial interface Navigator {
   [Pref="dom.serviceWorkers.enabled"]
   readonly attribute ServiceWorkerContainer serviceWorker;
+  [Pref="dom.main-thread-cache.enabled"]
+  readonly attribute CacheStorage caches;
 };
 
 partial interface Navigator {
   [Throws, Pref="beacon.enabled"]
   boolean sendBeacon(DOMString url,
                      optional (ArrayBufferView or Blob or DOMString or FormData)? data = null);
 };
diff --git a/dom/webidl/ServiceWorkerGlobalScope.webidl b/dom/webidl/ServiceWorkerGlobalScope.webidl
--- a/dom/webidl/ServiceWorkerGlobalScope.webidl
+++ b/dom/webidl/ServiceWorkerGlobalScope.webidl
@@ -8,18 +8,17 @@
  *
  * You are granted a license to use, reproduce and create derivative works of
  * this document.
  */
 
 [Global=(Worker,ServiceWorker),
  Exposed=ServiceWorker]
 interface ServiceWorkerGlobalScope : WorkerGlobalScope {
-  // FIXME(nsm): Bug 982725
-  // readonly attribute CacheList caches;
+  readonly attribute CacheStorage caches;
 
   // FIXME(nsm): Bug 982726
   // A container for a list of window objects, identifiable by ID, that
   // correspond to windows (or workers) that are "controlled" by this SW
   // readonly attribute ServiceWorkerClients clients;
 
   [Unforgeable] readonly attribute DOMString scope;
 
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -45,16 +45,18 @@ WEBIDL_FILES = [
     'AudioTrackList.webidl',
     'AutocompleteInfo.webidl',
     'BarProp.webidl',
     'BatteryManager.webidl',
     'BeforeUnloadEvent.webidl',
     'BiquadFilterNode.webidl',
     'Blob.webidl',
     'BrowserElementDictionaries.webidl',
+    'Cache.webidl',
+    'CacheStorage.webidl',
     'CallsList.webidl',
     'CameraCapabilities.webidl',
     'CameraControl.webidl',
     'CameraManager.webidl',
     'CanvasRenderingContext2D.webidl',
     'CaretPosition.webidl',
     'CDATASection.webidl',
     'ChannelMergerNode.webidl',
diff --git a/dom/workers/WorkerScope.cpp b/dom/workers/WorkerScope.cpp
--- a/dom/workers/WorkerScope.cpp
+++ b/dom/workers/WorkerScope.cpp
@@ -7,16 +7,17 @@
 #include "WorkerScope.h"
 
 #include "jsapi.h"
 #include "mozilla/EventListenerManager.h"
 #include "mozilla/dom/FunctionBinding.h"
 #include "mozilla/dom/DedicatedWorkerGlobalScopeBinding.h"
 #include "mozilla/dom/ServiceWorkerGlobalScopeBinding.h"
 #include "mozilla/dom/SharedWorkerGlobalScopeBinding.h"
+#include "mozilla/dom/CacheStorage.h"
 #include "mozilla/dom/Console.h"
 
 #ifdef ANDROID
 #include <android/log.h>
 #endif
 
 #include "Location.h"
 #include "Navigator.h"
@@ -322,16 +323,29 @@ SharedWorkerGlobalScope::WrapGlobalObjec
   JS::CompartmentOptions options;
   mWorkerPrivate->CopyJSCompartmentOptions(options);
 
   return SharedWorkerGlobalScopeBinding_workers::Wrap(aCx, this, this, options,
                                                       GetWorkerPrincipal(),
                                                       true);
 }
 
+NS_IMPL_ADDREF_INHERITED(ServiceWorkerGlobalScope, WorkerGlobalScope)
+NS_IMPL_RELEASE_INHERITED(ServiceWorkerGlobalScope, WorkerGlobalScope)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(ServiceWorkerGlobalScope, mCacheStorage)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(ServiceWorkerGlobalScope)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsIGlobalObject)
+NS_INTERFACE_MAP_END
+
+ServiceWorkerGlobalScope::~ServiceWorkerGlobalScope()
+{
+}
+
 ServiceWorkerGlobalScope::ServiceWorkerGlobalScope(WorkerPrivate* aWorkerPrivate,
                                                    const nsACString& aScope)
   : WorkerGlobalScope(aWorkerPrivate),
     mScope(NS_ConvertUTF8toUTF16(aScope))
 {
 }
 
 JSObject*
@@ -343,16 +357,27 @@ ServiceWorkerGlobalScope::WrapGlobalObje
   JS::CompartmentOptions options;
   mWorkerPrivate->CopyJSCompartmentOptions(options);
 
   return ServiceWorkerGlobalScopeBinding_workers::Wrap(aCx, this, this, options,
                                                        GetWorkerPrincipal(),
                                                        true);
 }
 
+already_AddRefed<CacheStorage>
+ServiceWorkerGlobalScope::Caches()
+{
+  if (!mCacheStorage) {
+    mCacheStorage = new CacheStorage(nullptr);
+  }
+
+  nsRefPtr<CacheStorage> ref = mCacheStorage;
+  return ref.forget();
+}
+
 bool
 GetterOnlyJSNative(JSContext* aCx, unsigned aArgc, JS::Value* aVp)
 {
   JS_ReportErrorNumber(aCx, js_GetErrorMessage, nullptr, JSMSG_GETTER_ONLY);
   return false;
 }
 
 END_WORKERS_NAMESPACE
diff --git a/dom/workers/WorkerScope.h b/dom/workers/WorkerScope.h
--- a/dom/workers/WorkerScope.h
+++ b/dom/workers/WorkerScope.h
@@ -7,16 +7,17 @@
 #define mozilla_dom_workerscope_h__
 
 #include "Workers.h"
 #include "mozilla/DOMEventTargetHelper.h"
 
 namespace mozilla {
 namespace dom {
 
+class CacheStorage;
 class Console;
 class Function;
 
 } // namespace dom
 } // namespace mozilla
 
 BEGIN_WORKERS_NAMESPACE
 
@@ -154,17 +155,18 @@ public:
   }
 
   IMPL_EVENT_HANDLER(connect)
 };
 
 class ServiceWorkerGlobalScope MOZ_FINAL : public WorkerGlobalScope
 {
   const nsString mScope;
-  ~ServiceWorkerGlobalScope() { }
+  nsRefPtr<CacheStorage> mCacheStorage;
+  ~ServiceWorkerGlobalScope();
 
 public:
   ServiceWorkerGlobalScope(WorkerPrivate* aWorkerPrivate, const nsACString& aScope);
 
   virtual JSObject*
   WrapGlobalObject(JSContext* aCx) MOZ_OVERRIDE;
 
   void
@@ -186,22 +188,28 @@ public:
   }
 
   void
   Unregister()
   {
     // FIXME(nsm): Bug 982728
   }
 
+  already_AddRefed<CacheStorage> Caches();
+
   IMPL_EVENT_HANDLER(activate)
   IMPL_EVENT_HANDLER(beforeevicted)
   IMPL_EVENT_HANDLER(evicted)
   IMPL_EVENT_HANDLER(fetch)
   IMPL_EVENT_HANDLER(install)
   IMPL_EVENT_HANDLER(message)
+
+  NS_DECL_ISUPPORTS_INHERITED
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED(ServiceWorkerGlobalScope,
+                                                         WorkerGlobalScope)
 };
 
 JSObject*
 CreateGlobalScope(JSContext* aCx);
 
 END_WORKERS_NAMESPACE
 
 #endif /* mozilla_dom_workerscope_h__ */
diff --git a/ipc/glue/BackgroundChildImpl.cpp b/ipc/glue/BackgroundChildImpl.cpp
--- a/ipc/glue/BackgroundChildImpl.cpp
+++ b/ipc/glue/BackgroundChildImpl.cpp
@@ -1,17 +1,22 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "BackgroundChildImpl.h"
 
+#include "mozilla/dom/PCacheStorageChild.h"
+#include "mozilla/dom/PCacheChild.h"
 #include "mozilla/ipc/PBackgroundTestChild.h"
 #include "nsTraceRefcnt.h"
 
+using mozilla::dom::PCacheStorageChild;
+using mozilla::dom::PCacheChild;
+
 namespace {
 
 class TestChild MOZ_FINAL : public mozilla::ipc::PBackgroundTestChild
 {
   friend class mozilla::ipc::BackgroundChildImpl;
 
   nsCString mTestArg;
 
@@ -87,16 +92,44 @@ bool
 BackgroundChildImpl::DeallocPBackgroundTestChild(PBackgroundTestChild* aActor)
 {
   MOZ_ASSERT(aActor);
 
   delete static_cast<TestChild*>(aActor);
   return true;
 }
 
+PCacheStorageChild*
+BackgroundChildImpl::AllocPCacheStorageChild()
+{
+  MOZ_CRASH("not implemented");
+  return nullptr;
+}
+
+bool
+BackgroundChildImpl::DeallocPCacheStorageChild(PCacheStorageChild* aActor)
+{
+  MOZ_CRASH("not implemented");
+  return false;
+}
+
+PCacheChild*
+BackgroundChildImpl::AllocPCacheChild()
+{
+  MOZ_CRASH("not implemented");
+  return nullptr;
+}
+
+bool
+BackgroundChildImpl::DeallocPCacheChild(PCacheChild* aActor)
+{
+  MOZ_CRASH("not implemented");
+  return false;
+}
+
 } // namespace ipc
 } // namespace mozilla
 
 bool
 TestChild::Recv__delete__(const nsCString& aTestArg)
 {
   MOZ_RELEASE_ASSERT(aTestArg == mTestArg,
                      "BackgroundTest message was corrupted!");
diff --git a/ipc/glue/BackgroundChildImpl.h b/ipc/glue/BackgroundChildImpl.h
--- a/ipc/glue/BackgroundChildImpl.h
+++ b/ipc/glue/BackgroundChildImpl.h
@@ -6,16 +6,20 @@
 #define mozilla_ipc_backgroundchildimpl_h__
 
 #include "mozilla/Attributes.h"
 #include "mozilla/ipc/PBackgroundChild.h"
 
 template <class> class nsAutoPtr;
 
 namespace mozilla {
+namespace dom {
+  class PCacheStorageChild;
+  class PCacheChild;
+}
 namespace ipc {
 
 // Instances of this class should never be created directly. This class is meant
 // to be inherited in BackgroundImpl.
 class BackgroundChildImpl : public PBackgroundChild
 {
 public:
   class ThreadLocal;
@@ -35,16 +39,28 @@ protected:
   virtual void
   ActorDestroy(ActorDestroyReason aWhy) MOZ_OVERRIDE;
 
   virtual PBackgroundTestChild*
   AllocPBackgroundTestChild(const nsCString& aTestArg) MOZ_OVERRIDE;
 
   virtual bool
   DeallocPBackgroundTestChild(PBackgroundTestChild* aActor) MOZ_OVERRIDE;
+
+  virtual mozilla::dom::PCacheStorageChild*
+  AllocPCacheStorageChild() MOZ_OVERRIDE;
+
+  virtual bool
+  DeallocPCacheStorageChild(mozilla::dom::PCacheStorageChild* aActor) MOZ_OVERRIDE;
+
+  virtual mozilla::dom::PCacheChild*
+  AllocPCacheChild() MOZ_OVERRIDE;
+
+  virtual bool
+  DeallocPCacheChild(mozilla::dom::PCacheChild* aActor) MOZ_OVERRIDE;
 };
 
 class BackgroundChildImpl::ThreadLocal
 {
   friend class nsAutoPtr<ThreadLocal>;
 
   // Add any members needed here.
 
diff --git a/ipc/glue/BackgroundParentImpl.cpp b/ipc/glue/BackgroundParentImpl.cpp
--- a/ipc/glue/BackgroundParentImpl.cpp
+++ b/ipc/glue/BackgroundParentImpl.cpp
@@ -2,21 +2,25 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "BackgroundParentImpl.h"
 
 #include "mozilla/Assertions.h"
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozilla/ipc/PBackgroundTestParent.h"
+#include "mozilla/dom/PCacheStorageParent.h"
+#include "mozilla/dom/PCacheParent.h"
 #include "nsThreadUtils.h"
 #include "nsTraceRefcnt.h"
 #include "nsXULAppAPI.h"
 
 using mozilla::ipc::AssertIsOnBackgroundThread;
+using mozilla::dom::PCacheStorageParent;
+using mozilla::dom::PCacheParent;
 
 namespace {
 
 void
 AssertIsInMainProcess()
 {
   MOZ_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
 }
@@ -103,16 +107,58 @@ BackgroundParentImpl::DeallocPBackground
   AssertIsInMainProcess();
   AssertIsOnBackgroundThread();
   MOZ_ASSERT(aActor);
 
   delete static_cast<TestParent*>(aActor);
   return true;
 }
 
+PCacheStorageParent*
+BackgroundParentImpl::AllocPCacheStorageParent()
+{
+  MOZ_CRASH("not implemented");
+  return nullptr;
+}
+
+bool
+BackgroundParentImpl::RecvPCacheStorageConstructor(PCacheStorageParent* aActor)
+{
+  MOZ_CRASH("not implemented");
+  return false;
+}
+
+bool
+BackgroundParentImpl::DeallocPCacheStorageParent(PCacheStorageParent* aActor)
+{
+  MOZ_CRASH("not implemented");
+  return false;
+}
+
+PCacheParent*
+BackgroundParentImpl::AllocPCacheParent()
+{
+  MOZ_CRASH("not implemented");
+  return nullptr;
+}
+
+bool
+BackgroundParentImpl::RecvPCacheConstructor(PCacheParent* aActor)
+{
+  MOZ_CRASH("not implemented");
+  return false;
+}
+
+bool
+BackgroundParentImpl::DeallocPCacheParent(PCacheParent* aActor)
+{
+  MOZ_CRASH("not implemented");
+  return false;
+}
+
 } // namespace ipc
 } // namespace mozilla
 
 void
 TestParent::ActorDestroy(ActorDestroyReason aWhy)
 {
   AssertIsInMainProcess();
   AssertIsOnBackgroundThread();
diff --git a/ipc/glue/BackgroundParentImpl.h b/ipc/glue/BackgroundParentImpl.h
--- a/ipc/glue/BackgroundParentImpl.h
+++ b/ipc/glue/BackgroundParentImpl.h
@@ -4,16 +4,20 @@
 
 #ifndef mozilla_ipc_backgroundparentimpl_h__
 #define mozilla_ipc_backgroundparentimpl_h__
 
 #include "mozilla/Attributes.h"
 #include "mozilla/ipc/PBackgroundParent.h"
 
 namespace mozilla {
+namespace dom {
+  class PCacheStorageParent;
+  class PCacheParent;
+}
 namespace ipc {
 
 // Instances of this class should never be created directly. This class is meant
 // to be inherited in BackgroundImpl.
 class BackgroundParentImpl : public PBackgroundParent
 {
 protected:
   BackgroundParentImpl();
@@ -26,14 +30,32 @@ protected:
   AllocPBackgroundTestParent(const nsCString& aTestArg) MOZ_OVERRIDE;
 
   virtual bool
   RecvPBackgroundTestConstructor(PBackgroundTestParent* aActor,
                                  const nsCString& aTestArg) MOZ_OVERRIDE;
 
   virtual bool
   DeallocPBackgroundTestParent(PBackgroundTestParent* aActor) MOZ_OVERRIDE;
+
+  virtual mozilla::dom::PCacheStorageParent*
+  AllocPCacheStorageParent() MOZ_OVERRIDE;
+
+  virtual bool
+  RecvPCacheStorageConstructor(mozilla::dom::PCacheStorageParent* aActor) MOZ_OVERRIDE;
+
+  virtual bool
+  DeallocPCacheStorageParent(mozilla::dom::PCacheStorageParent* aActor) MOZ_OVERRIDE;
+
+  virtual mozilla::dom::PCacheParent*
+  AllocPCacheParent() MOZ_OVERRIDE;
+
+  virtual bool
+  RecvPCacheConstructor(mozilla::dom::PCacheParent* aActor) MOZ_OVERRIDE;
+
+  virtual bool
+  DeallocPCacheParent(mozilla::dom::PCacheParent* aActor) MOZ_OVERRIDE;
 };
 
 } // namespace ipc
 } // namespace mozilla
 
 #endif // mozilla_ipc_backgroundparentimpl_h__
diff --git a/ipc/glue/PBackground.ipdl b/ipc/glue/PBackground.ipdl
--- a/ipc/glue/PBackground.ipdl
+++ b/ipc/glue/PBackground.ipdl
@@ -1,20 +1,26 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 include protocol PBackgroundTest;
+include protocol PCacheStorage;
+include protocol PCache;
 
 namespace mozilla {
 namespace ipc {
 
 protocol PBackground
 {
   manages PBackgroundTest;
+  manages PCacheStorage;
+  manages PCache;
 
 parent:
   // Only called at startup during mochitests to check the basic infrastructure.
   PBackgroundTest(nsCString testArg);
+  PCacheStorage();
+  PCache();
 };
 
 } // namespace ipc
 } // namespace mozilla
