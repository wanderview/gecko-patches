# HG changeset patch
# Parent 9b44f470262477f50368a2b3d17fdc42ead67617
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 017 Cache.(h|cpp) issues. Throw correctly on invalid URL schemes.

diff --git a/dom/cache/AutoUtils.cpp b/dom/cache/AutoUtils.cpp
--- a/dom/cache/AutoUtils.cpp
+++ b/dom/cache/AutoUtils.cpp
@@ -121,49 +121,51 @@ AutoChildRequestList::~AutoChildRequestL
   for (uint32_t i = 0; i < mRequestList.Length(); ++i) {
     CleanupChildFds(mRequestList[i].body(), action);
   }
 }
 
 void
 AutoChildRequestList::Add(const RequestOrUSVString& aRequest,
                           BodyAction aBodyAction,
-                          ReferrerAction aReferrerAction, ErrorResult& aRv)
+                          ReferrerAction aReferrerAction,
+                          SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   MOZ_ASSERT(!mSent);
 
   // The FileDescriptorSetChild asserts in its destructor that all fds have
   // been removed.  The copy constructor, however, simply duplicates the
   // fds without removing any.  This means each temporary and copy must be
   // explicitly cleaned up.
   //
   // Avoid a lot of this hassle by making sure we only create one here.  On
   // error we remove it.
 
   PCacheRequest* request = mRequestList.AppendElement();
   mTypeUtils->ToPCacheRequest(*request, aRequest, aBodyAction, aReferrerAction,
-                              aRv);
+                              aSchemeAction, aRv);
   if (aRv.Failed()) {
     mRequestList.RemoveElementAt(mRequestList.Length() - 1);
   }
 }
 
 void
 AutoChildRequestList::Add(const OwningRequestOrUSVString& aRequest,
                           BodyAction aBodyAction,
-                          ReferrerAction aReferrerAction, ErrorResult& aRv)
+                          ReferrerAction aReferrerAction,
+                          SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   MOZ_ASSERT(!mSent);
 
   // Same issue as above.  Make sure only one object is created and remove it
   // on error.
 
   PCacheRequest* request = mRequestList.AppendElement();
   mTypeUtils->ToPCacheRequest(*request, aRequest, aBodyAction, aReferrerAction,
-                              aRv);
+                              aSchemeAction, aRv);
   if (aRv.Failed()) {
     mRequestList.RemoveElementAt(mRequestList.Length() - 1);
   }
 }
 
 const nsTArray<PCacheRequest>&
 AutoChildRequestList::SendAsRequestList()
 {
@@ -189,21 +191,22 @@ AutoChildRequestResponse::~AutoChildRequ
   CleanupAction action = mSent ? ForgetFds : DeleteFds;
   CleanupChildFds(mRequestResponse.request().body(), action);
   CleanupChildFds(mRequestResponse.response().body(), action);
 }
 
 void
 AutoChildRequestResponse::Add(const RequestOrUSVString& aRequest,
                               BodyAction aBodyAction,
-                              ReferrerAction aReferrerAction, ErrorResult& aRv)
+                              ReferrerAction aReferrerAction,
+                              SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   MOZ_ASSERT(!mSent);
   mTypeUtils->ToPCacheRequest(mRequestResponse.request(), aRequest, aBodyAction,
-                              aReferrerAction, aRv);
+                              aReferrerAction, aSchemeAction, aRv);
 }
 
 void
 AutoChildRequestResponse::Add(Response& aResponse, ErrorResult& aRv)
 {
   MOZ_ASSERT(!mSent);
   mTypeUtils->ToPCacheResponse(mRequestResponse.response(), aResponse, aRv);
 }
diff --git a/dom/cache/AutoUtils.h b/dom/cache/AutoUtils.h
--- a/dom/cache/AutoUtils.h
+++ b/dom/cache/AutoUtils.h
@@ -42,60 +42,65 @@ class StreamList;
 // Note, these should only be used when *sending* streams across IPC.  The
 // deserialization case is handled by creating a ReadStream object.
 
 class AutoChildRequestList MOZ_STACK_CLASS MOZ_FINAL
 {
 public:
   typedef TypeUtils::BodyAction BodyAction;
   typedef TypeUtils::ReferrerAction ReferrerAction;
+  typedef TypeUtils::SchemeAction SchemeAction;
 
   AutoChildRequestList(TypeUtils* aTypeUtils, uint32_t aCapacity);
   ~AutoChildRequestList();
 
   void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
-           ReferrerAction aReferrerAction, ErrorResult& aRv);
+           ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+           ErrorResult& aRv);
   void Add(const OwningRequestOrUSVString& aRequest, BodyAction aBodyAction,
-           ReferrerAction aReferrerAction, ErrorResult& aRv);
+           ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+           ErrorResult& aRv);
 
   const nsTArray<PCacheRequest>& SendAsRequestList();
 
 private:
   TypeUtils* mTypeUtils;
   bool mSent;
 
   // Allocates ~5k inline in the stack-only class
   nsAutoTArray<PCacheRequest, 32> mRequestList;
 };
 
 class AutoChildRequestResponse MOZ_STACK_CLASS MOZ_FINAL
 {
 public:
   typedef TypeUtils::BodyAction BodyAction;
   typedef TypeUtils::ReferrerAction ReferrerAction;
+  typedef TypeUtils::SchemeAction SchemeAction;
 
-  AutoChildRequestResponse(TypeUtils* aTypeUtils);
+  explicit AutoChildRequestResponse(TypeUtils* aTypeUtils);
   ~AutoChildRequestResponse();
 
   void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
-           ReferrerAction aReferrerAction, ErrorResult& aRv);
+           ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+           ErrorResult& aRv);
   void Add(Response& aResponse, ErrorResult& aRv);
 
   const CacheRequestResponse& SendAsRequestResponse();
 
 private:
   TypeUtils* mTypeUtils;
   bool mSent;
   CacheRequestResponse mRequestResponse;
 };
 
 class AutoParentBase MOZ_STACK_CLASS
 {
 protected:
-  AutoParentBase(mozilla::ipc::PBackgroundParent* aManager);
+  explicit AutoParentBase(mozilla::ipc::PBackgroundParent* aManager);
   virtual ~AutoParentBase() = 0;
 
   void SerializeReadStream(const nsID& aId, StreamList* aStreamList,
                            PCacheReadStream* aReadStreamOut);
 
   mozilla::ipc::PBackgroundParent* mManager;
   CacheStreamControlParent* mStreamControl;
   bool mSent;
@@ -131,17 +136,17 @@ public:
 private:
   // Allocates ~4k inline in the stack-only class
   nsAutoTArray<PCacheResponse, 32> mResponseList;
 };
 
 class AutoParentResponseOrVoid MOZ_STACK_CLASS MOZ_FINAL : public AutoParentBase
 {
 public:
-  AutoParentResponseOrVoid(mozilla::ipc::PBackgroundParent* aManager);
+  explicit AutoParentResponseOrVoid(mozilla::ipc::PBackgroundParent* aManager);
   ~AutoParentResponseOrVoid();
 
   void Add(const SavedResponse& aSavedResponse, StreamList* aStreamList);
 
   const PCacheResponseOrVoid& SendAsResponseOrVoid();
 
 private:
   PCacheResponseOrVoid mResponseOrVoid;
diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -100,17 +100,18 @@ Cache::Match(const RequestOrUSVString& a
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequest request;
-  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer, aRv);
+  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer,
+                  IgnoreInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
@@ -128,17 +129,17 @@ Cache::MatchAll(const Optional<RequestOr
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequestOrVoid request;
   ToPCacheRequestOrVoid(request, aRequest, IgnoreBody, PassThroughReferrer,
-                        aRv);
+                        IgnoreInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
@@ -158,17 +159,18 @@ Cache::Add(const RequestOrUSVString& aRe
   }
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   AutoChildRequestList requests(this, 1);
-  requests.Add(aRequest, ReadBody, ExpandReferrer, aRv);
+  requests.Add(aRequest, ReadBody, ExpandReferrer, NetworkErrorOnInvalidScheme,
+               aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendAddAll(requestId, requests.SendAsRequestList());
 
@@ -181,24 +183,31 @@ Cache::AddAll(const Sequence<OwningReque
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
+  // If there is no work to do, then resolve immediately
+  if (aRequests.IsEmpty()) {
+    promise->MaybeResolve(JS::UndefinedHandleValue);
+    return promise.forget();
+  }
+
   AutoChildRequestList requests(this, aRequests.Length());
 
   for (uint32_t i = 0; i < aRequests.Length(); ++i) {
     if (!IsValidPutRequestMethod(aRequests[i], aRv)) {
       return nullptr;
     }
 
-    requests.Add(aRequests[i], ReadBody, ExpandReferrer, aRv);
+    requests.Add(aRequests[i], ReadBody, ExpandReferrer,
+                 NetworkErrorOnInvalidScheme, aRv);
     if (aRv.Failed()) {
       return nullptr;
     }
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   unused << mActor->SendAddAll(requestId, requests.SendAsRequestList());
@@ -218,17 +227,18 @@ Cache::Put(const RequestOrUSVString& aRe
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   AutoChildRequestResponse put(this);
 
-  put.Add(aRequest, ReadBody, PassThroughReferrer, aRv);
+  put.Add(aRequest, ReadBody, PassThroughReferrer, TypeErrorOnInvalidScheme,
+          aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   put.Add(aResponse, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
@@ -247,17 +257,18 @@ Cache::Delete(const RequestOrUSVString& 
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequest request;
-  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer, aRv);
+  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer,
+                  IgnoreInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
@@ -275,17 +286,17 @@ Cache::Keys(const Optional<RequestOrUSVS
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   PCacheRequestOrVoid request;
   ToPCacheRequestOrVoid(request, aRequest, IgnoreBody, PassThroughReferrer,
-                        aRv);
+                        IgnoreInvalidScheme, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
@@ -297,25 +308,20 @@ Cache::Keys(const Optional<RequestOrUSVS
 
 // static
 bool
 Cache::PrefEnabled(JSContext* aCx, JSObject* aObj)
 {
   using mozilla::dom::workers::WorkerPrivate;
   using mozilla::dom::workers::GetWorkerPrivateFromContext;
 
-  // TODO: return false if principal is invalid or private browsing (bug 1112134)
-
   // If we're on the main thread, then check the pref directly.
   if (NS_IsMainThread()) {
-    bool enabled;
-    nsresult rv = Preferences::GetBool("dom.caches.enabled", &enabled);
-    if (NS_FAILED(rv)) {
-      return false;
-    }
+    bool enabled = false;
+    Preferences::GetBool("dom.caches.enabled", &enabled);
     return enabled;
   }
 
   // Otherwise check the pref via the work private helper
   WorkerPrivate* workerPrivate = GetWorkerPrivateFromContext(aCx);
   if (!workerPrivate) {
     return false;
   }
@@ -493,18 +499,17 @@ Cache::~Cache()
   }
 }
 
 RequestId
 Cache::AddRequestPromise(Promise* aPromise, ErrorResult& aRv)
 {
   MOZ_ASSERT(aPromise);
 
-  nsRefPtr<Promise>* ref = mRequestPromises.AppendElement();
-  *ref = aPromise;
+  mRequestPromises.AppendElement(aPromise);
 
   // (Ab)use the promise pointer as our request ID.  This is a fast, thread-safe
   // way to get a unique ID for the promise to be resolved later.
   return reinterpret_cast<RequestId>(aPromise);
 }
 
 already_AddRefed<Promise>
 Cache::RemoveRequestPromise(RequestId aRequestId)
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -99,22 +99,22 @@ public:
   GetGlobalObject() const MOZ_OVERRIDE;
   const nsACString& Origin() const MOZ_OVERRIDE;
 
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
 #endif
 
 private:
-  virtual ~Cache();
+  ~Cache();
 
+  // TODO: Replace with actor-per-request model during refactor (bug 1110485)
   RequestId AddRequestPromise(Promise* aPromise, ErrorResult& aRv);
   already_AddRefed<Promise> RemoveRequestPromise(RequestId aRequestId);
 
-private:
   nsCOMPtr<nsIGlobalObject> mGlobal;
   const nsCString mOrigin;
   CacheChild* mActor;
   nsTArray<nsRefPtr<Promise>> mRequestPromises;
 
 public:
   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
   NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Cache)
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -191,17 +191,18 @@ CacheStorage::Match(const RequestOrUSVSt
       entry->mRequest.SetAsRequest() =
         &aRequest.GetAsRequest();
     }
 
     return promise.forget();
   }
 
   PCacheRequest request;
-  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer, aRv);
+  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer,
+                  IgnoreInvalidScheme, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     nsRefPtr<Promise> unused = RemoveRequestPromise(requestId);
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
@@ -379,17 +380,17 @@ CacheStorage::ActorCreated(PBackgroundCh
     Entry& entry = mPendingRequests[i];
     RequestId requestId = entry.mRequestId;
     switch(entry.mOp) {
       case OP_MATCH:
       {
         PCacheRequest request;
         ErrorResult rv;
         ToPCacheRequest(request, entry.mRequest, IgnoreBody,
-                        PassThroughReferrer, rv);
+                        PassThroughReferrer, IgnoreInvalidScheme, rv);
         if (NS_WARN_IF(rv.Failed())) {
           nsRefPtr<Promise> promise = RemoveRequestPromise(requestId);
           if (promise) {
             promise->MaybeReject(rv);
           }
           return;
         }
 
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -111,86 +111,97 @@ using mozilla::void_t;
 using mozilla::ipc::BackgroundChild;
 using mozilla::ipc::FileDescriptor;
 using mozilla::ipc::FileDescriptorSetChild;
 using mozilla::ipc::PFileDescriptorSetChild;
 using mozilla::ipc::PBackgroundChild;
 using mozilla::ipc::OptionalFileDescriptorSet;
 
 void
-TypeUtils::ToPCacheRequest(PCacheRequest& aOut,
-                           const RequestOrUSVString& aIn,
+TypeUtils::ToPCacheRequest(PCacheRequest& aOut, const RequestOrUSVString& aIn,
                            BodyAction aBodyAction,
-                           ReferrerAction aReferrerAction, ErrorResult& aRv)
+                           ReferrerAction aReferrerAction,
+                           SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   AutoJSAPI jsapi;
   jsapi.Init(GetGlobalObject());
   JSContext* cx = jsapi.cx();
   JS::Rooted<JSObject*> jsGlobal(cx, GetGlobalObject()->GetGlobalJSObject());
   JSAutoCompartment ac(cx, jsGlobal);
 
   GlobalObject global(cx, jsGlobal);
 
-  ToPCacheRequest(global, aOut, aIn, aBodyAction, aReferrerAction, aRv);
+  ToPCacheRequest(global, aOut, aIn, aBodyAction, aReferrerAction,
+                  aSchemeAction, aRv);
 }
 
 void
 TypeUtils::ToPCacheRequest(PCacheRequest& aOut,
                            const OwningRequestOrUSVString& aIn,
                            BodyAction aBodyAction,
-                           ReferrerAction aReferrerAction, ErrorResult& aRv)
+                           ReferrerAction aReferrerAction,
+                           SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   AutoJSAPI jsapi;
   jsapi.Init(GetGlobalObject());
   JSContext* cx = jsapi.cx();
   JS::Rooted<JSObject*> jsGlobal(cx, GetGlobalObject()->GetGlobalJSObject());
   JSAutoCompartment ac(cx, jsGlobal);
 
   GlobalObject global(cx, jsGlobal);
 
-  return ToPCacheRequest(global, aOut, aIn, aBodyAction, aReferrerAction, aRv);
+  return ToPCacheRequest(global, aOut, aIn, aBodyAction, aReferrerAction,
+                         aSchemeAction, aRv);
 }
 
 void
 TypeUtils::ToPCacheRequestOrVoid(PCacheRequestOrVoid& aOut,
                                  const Optional<RequestOrUSVString>& aIn,
                                  BodyAction aBodyAction,
                                  ReferrerAction aReferrerAction,
-                                 ErrorResult& aRv)
+                                 SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   AutoJSAPI jsapi;
   jsapi.Init(GetGlobalObject());
   JSContext* cx = jsapi.cx();
   JS::Rooted<JSObject*> jsGlobal(cx, GetGlobalObject()->GetGlobalJSObject());
   JSAutoCompartment ac(cx, jsGlobal);
 
   GlobalObject global(cx, jsGlobal);
 
   return ToPCacheRequestOrVoid(global, aOut, aIn, aBodyAction, aReferrerAction,
-                               aRv);
+                               aSchemeAction, aRv);
 }
 
 void
 TypeUtils::ToPCacheRequest(PCacheRequest& aOut, Request& aIn,
                            BodyAction aBodyAction,
-                           ReferrerAction aReferrerAction, ErrorResult& aRv)
+                           ReferrerAction aReferrerAction,
+                           SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   aIn.GetMethod(aOut.method());
   aIn.GetUrl(aOut.url());
 
   bool schemeValid;
   ProcessURL(aOut.url(), &schemeValid, &aOut.urlWithoutQuery(), aRv);
   if (aRv.Failed()) {
     return;
   }
-  // TODO: wrong scheme should trigger different behavior in Match vs Put, etc. (bug 1110462)
+
   if (!schemeValid) {
-    NS_NAMED_LITERAL_STRING(label, "Request");
-    aRv.ThrowTypeError(MSG_INVALID_URL_SCHEME, &label, &aOut.url());
-    return;
+    if (aSchemeAction == TypeErrorOnInvalidScheme) {
+      NS_NAMED_LITERAL_STRING(label, "Request");
+      aRv.ThrowTypeError(MSG_INVALID_URL_SCHEME, &label, &aOut.url());
+      return;
+    }
+
+    if (aSchemeAction == NetworkErrorOnInvalidScheme) {
+      aRv.Throw(NS_ERROR_DOM_NETWORK_ERR);
+      return;
+    }
   }
 
   nsRefPtr<InternalRequest> internalRequest = aIn.GetInternalRequest();
 
   if (aReferrerAction == ExpandReferrer &&
       internalRequest->ReferrerIsClient()) {
     nsAutoCString referrer;
     GetRequestReferrer(GetGlobalObject(), internalRequest, referrer);
@@ -230,75 +241,79 @@ TypeUtils::ToPCacheRequest(PCacheRequest
 }
 
 // static
 void
 TypeUtils::ToPCacheRequest(const GlobalObject& aGlobal,
                            PCacheRequest& aOut,
                            const RequestOrUSVString& aIn,
                            BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                           ErrorResult& aRv)
+                           SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   if (aIn.IsRequest()) {
-    ToPCacheRequest(aOut, aIn.GetAsRequest(), aBodyAction, aReferrerAction, aRv);
+    ToPCacheRequest(aOut, aIn.GetAsRequest(), aBodyAction, aReferrerAction,
+                    aSchemeAction, aRv);
     return;
   }
 
   RequestInit init;
   nsRefPtr<Request> request = Request::Constructor(aGlobal, aIn, init, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return;
   }
-  ToPCacheRequest(aOut, *request, aBodyAction, aReferrerAction, aRv);
+  ToPCacheRequest(aOut, *request, aBodyAction, aReferrerAction,
+                  aSchemeAction, aRv);
 }
 
 void
 TypeUtils::ToPCacheRequestOrVoid(const GlobalObject& aGlobal,
                                  PCacheRequestOrVoid& aOut,
                                  const Optional<RequestOrUSVString>& aIn,
                                  BodyAction aBodyAction,
                                  ReferrerAction aReferrerAction,
-                                 ErrorResult& aRv)
+                                 SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   if (!aIn.WasPassed()) {
     aOut = void_t();
     return;
   }
   PCacheRequest request;
   ToPCacheRequest(aGlobal, request, aIn.Value(), aBodyAction, aReferrerAction,
-                  aRv);
+                  aSchemeAction, aRv);
   if (aRv.Failed()) {
     return;
   }
   aOut = request;
 }
 
 void
 TypeUtils::ToPCacheRequest(const GlobalObject& aGlobal, PCacheRequest& aOut,
                            const OwningRequestOrUSVString& aIn,
                            BodyAction aBodyAction,
-                           ReferrerAction aReferrerAction, ErrorResult& aRv)
+                           ReferrerAction aReferrerAction,
+                           SchemeAction aSchemeAction, ErrorResult& aRv)
 {
   if (aIn.IsRequest()) {
     ToPCacheRequest(aOut, aIn.GetAsRequest(), aBodyAction, aReferrerAction,
-                    aRv);
+                    aSchemeAction, aRv);
     return;
   }
 
   RequestOrUSVString input;
   RequestInit init;
   nsString str;
   str.Assign(aIn.GetAsUSVString());
   input.SetAsUSVString().Rebind(str.Data(), str.Length());
 
   nsRefPtr<Request> request = Request::Constructor(aGlobal, input, init, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return;
   }
-  ToPCacheRequest(aOut, *request, aBodyAction, aReferrerAction, aRv);
+  ToPCacheRequest(aOut, *request, aBodyAction, aReferrerAction, aSchemeAction,
+                  aRv);
 }
 
 void
 TypeUtils::ToPCacheResponseWithoutBody(PCacheResponse& aOut,
                                        InternalResponse& aIn, ErrorResult& aRv)
 {
   aOut.type() = aIn.Type();
 
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -47,46 +47,54 @@ public:
   };
 
   enum ReferrerAction
   {
     PassThroughReferrer,
     ExpandReferrer
   };
 
+  enum SchemeAction
+  {
+    IgnoreInvalidScheme,
+    TypeErrorOnInvalidScheme,
+    NetworkErrorOnInvalidScheme
+  };
+
   virtual ~TypeUtils() { }
   virtual nsIGlobalObject* GetGlobalObject() const = 0;
   virtual const nsACString& Origin() const = 0;
 #ifdef DEBUG
   virtual void AssertOwningThread() const = 0;
 #else
   inline void AssertOwningThread() const { }
 #endif
 
   void
   ToPCacheRequest(PCacheRequest& aOut,
                   const RequestOrUSVString& aIn, BodyAction aBodyAction,
-                  ReferrerAction aReferrerAction, ErrorResult& aRv);
+                  ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+                  ErrorResult& aRv);
 
   void
   ToPCacheRequest(PCacheRequest& aOut,
                   const OwningRequestOrUSVString& aIn,
                   BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                  ErrorResult& aRv);
+                  SchemeAction aSchemeAction, ErrorResult& aRv);
 
   void
   ToPCacheRequestOrVoid(PCacheRequestOrVoid& aOut,
                         const Optional<RequestOrUSVString>& aIn,
-                        BodyAction aBodyAction,
-                        ReferrerAction aReferrerAction,
-                        ErrorResult& aRv);
+                        BodyAction aBodyAction, ReferrerAction aReferrerAction,
+                        SchemeAction aSchemeAction, ErrorResult& aRv);
 
   void
   ToPCacheRequest(PCacheRequest& aOut, Request& aIn, BodyAction aBodyAction,
-                  ReferrerAction aReferrerAction, ErrorResult& aRv);
+                  ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+                  ErrorResult& aRv);
 
   void
   ToPCacheResponseWithoutBody(PCacheResponse& aOut, InternalResponse& aIn,
                               ErrorResult& aRv);
 
   void
   ToPCacheResponse(PCacheResponse& aOut, Response& aIn, ErrorResult& aRv);
 
@@ -101,30 +109,31 @@ public:
 
   already_AddRefed<Request>
   ToRequest(const PCacheRequest& aIn);
 
 private:
   void
   ToPCacheRequest(const GlobalObject& aGlobal, PCacheRequest& aOut,
                   const RequestOrUSVString& aIn, BodyAction aBodyAction,
-                  ReferrerAction aReferrerAction, ErrorResult& aRv);
+                  ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+                  ErrorResult& aRv);
 
   void
   ToPCacheRequestOrVoid(const GlobalObject& aGlobal,
                         PCacheRequestOrVoid& aOut,
                         const Optional<RequestOrUSVString>& aIn,
                         BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                        ErrorResult& aRv);
+                        SchemeAction aSchemeAction, ErrorResult& aRv);
 
   void
   ToPCacheRequest(const GlobalObject& aGlobal, PCacheRequest& aOut,
                   const OwningRequestOrUSVString& aIn,
                   BodyAction aBodyAction, ReferrerAction aReferrerAction,
-                  ErrorResult& aRv);
+                  SchemeAction aSchemeAction, ErrorResult& aRv);
 
   void
   SerializeCacheStream(nsIInputStream* aStream, PCacheReadStreamOrVoid* aStreamOut,
                        ErrorResult& aRv);
 
   nsIThread* GetStreamThread();
 
   nsCOMPtr<nsIThread> mStreamThread;
