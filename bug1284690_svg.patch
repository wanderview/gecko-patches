# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d224fc999cb6accb208af0a105f14433375e2e77
Bug 1284690 Additional cleanup in DOMSVGLength cycle collection unlink. r=ehsan

diff --git a/dom/svg/DOMSVGLength.cpp b/dom/svg/DOMSVGLength.cpp
--- a/dom/svg/DOMSVGLength.cpp
+++ b/dom/svg/DOMSVGLength.cpp
@@ -21,27 +21,39 @@
 // See the architecture comment in DOMSVGAnimatedLengthList.h.
 
 namespace mozilla {
 
 static nsSVGAttrTearoffTable<nsSVGLength2, DOMSVGLength>
   sBaseSVGLengthTearOffTable,
   sAnimSVGLengthTearOffTable;
 
+void
+CleanupTableVal(bool aIsAnimValItem, nsSVGLength2* aVal)
+{
+  auto& table = aIsAnimValItem ? sAnimSVGLengthTearOffTable
+                               : sBaseSVGLengthTearOffTable;
+  table.RemoveTearoff(aVal);
+}
+
 // We could use NS_IMPL_CYCLE_COLLECTION(, except that in Unlink() we need to
 // clear our list's weak ref to us to be safe. (The other option would be to
 // not unlink and rely on the breaking of the other edges in the cycle, as
 // NS_SVG_VAL_IMPL_CYCLE_COLLECTION does.)
 NS_IMPL_CYCLE_COLLECTION_CLASS(DOMSVGLength)
 
 NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(DOMSVGLength)
   // We may not belong to a list, so we must null check tmp->mList.
   if (tmp->mList) {
     tmp->mList->mItems[tmp->mListIndex] = nullptr;
   }
+  if (tmp->mVal) {
+    CleanupTableVal(tmp->mIsAnimValItem, tmp->mVal);
+    tmp->mVal = nullptr;
+  }
 NS_IMPL_CYCLE_COLLECTION_UNLINK(mList)
 NS_IMPL_CYCLE_COLLECTION_UNLINK(mSVGElement)
 NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
 NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(DOMSVGLength)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mList)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mSVGElement)
@@ -145,18 +157,17 @@ DOMSVGLength::~DOMSVGLength()
   // Our mList's weak ref to us must be nulled out when we die. If GC has
   // unlinked us using the cycle collector code, then that has already
   // happened, and mList is null.
   if (mList) {
     mList->mItems[mListIndex] = nullptr;
   }
 
   if (mVal) {
-    auto& table = mIsAnimValItem ? sAnimSVGLengthTearOffTable : sBaseSVGLengthTearOffTable;
-    table.RemoveTearoff(mVal);
+    CleanupTableVal(mIsAnimValItem, mVal);
   }
 }
 
 already_AddRefed<DOMSVGLength>
 DOMSVGLength::GetTearOff(nsSVGLength2* aVal, nsSVGElement* aSVGElement,
                          bool aAnimVal)
 {
   auto& table = aAnimVal ? sAnimSVGLengthTearOffTable : sBaseSVGLengthTearOffTable;
@@ -168,16 +179,17 @@ DOMSVGLength::GetTearOff(nsSVGLength2* a
 
   return domLength.forget();
 }
 
 DOMSVGLength*
 DOMSVGLength::Copy()
 {
   NS_ASSERTION(HasOwner() || IsReflectingAttribute(), "unexpected caller");
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   DOMSVGLength *copy = new DOMSVGLength();
   uint16_t unit;
   float value;
   if (mVal) {
     unit = mVal->mSpecifiedUnitType;
     value = mIsAnimValItem ? mVal->mAnimVal : mVal->mBaseVal;
   } else {
     SVGLength &length = InternalItem();
@@ -186,16 +198,17 @@ DOMSVGLength::Copy()
   }
   copy->NewValueSpecifiedUnits(unit, value);
   return copy;
 }
 
 uint16_t
 DOMSVGLength::UnitType()
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mVal) {
     if (mIsAnimValItem) {
       mSVGElement->FlushAnimations();
     }
     return mVal->mSpecifiedUnitType;
   }
 
   if (mIsAnimValItem && HasOwner()) {
@@ -209,16 +222,17 @@ DOMSVGLength::GetUnitType(uint16_t* aUni
 {
   *aUnit = UnitType();
   return NS_OK;
 }
 
 float
 DOMSVGLength::GetValue(ErrorResult& aRv)
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mVal) {
     if (mIsAnimValItem) {
       mSVGElement->FlushAnimations();
       return mVal->GetAnimValue(mSVGElement);
     }
     return mVal->GetBaseValue(mSVGElement);
   }
 
@@ -247,16 +261,17 @@ DOMSVGLength::GetValue(float* aValue)
   ErrorResult rv;
   *aValue = GetValue(rv);
   return rv.StealNSResult();
 }
 
 void
 DOMSVGLength::SetValue(float aUserUnitValue, ErrorResult& aRv)
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mIsAnimValItem) {
     aRv.Throw(NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR);
     return;
   }
 
   if (mVal) {
     mVal->SetBaseValue(aUserUnitValue, mSVGElement, true);
     return;
@@ -301,16 +316,17 @@ DOMSVGLength::SetValue(float aUserUnitVa
   ErrorResult rv;
   SetValue(aUserUnitValue, rv);
   return rv.StealNSResult();
 }
 
 float
 DOMSVGLength::ValueInSpecifiedUnits()
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mVal) {
     if (mIsAnimValItem) {
       mSVGElement->FlushAnimations();
       return mVal->mAnimVal;
     }
     return mVal->mBaseVal;
   }
 
@@ -325,16 +341,17 @@ DOMSVGLength::GetValueInSpecifiedUnits(f
 {
   *aValue = ValueInSpecifiedUnits();
   return NS_OK;
 }
 
 void
 DOMSVGLength::SetValueInSpecifiedUnits(float aValue, ErrorResult& aRv)
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mIsAnimValItem) {
     aRv.Throw(NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR);
     return;
   }
 
   if (mVal) {
     mVal->SetBaseValueInSpecifiedUnits(aValue, mSVGElement, true);
     return;
@@ -361,16 +378,17 @@ DOMSVGLength::SetValueInSpecifiedUnits(f
   ErrorResult rv;
   SetValueInSpecifiedUnits(aValue, rv);
   return rv.StealNSResult();
 }
 
 void
 DOMSVGLength::SetValueAsString(const nsAString& aValue, ErrorResult& aRv)
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mIsAnimValItem) {
     aRv.Throw(NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR);
     return;
   }
 
   if (mVal) {
     aRv = mVal->SetBaseValueString(aValue, mSVGElement, true);
     return;
@@ -399,16 +417,17 @@ DOMSVGLength::SetValueAsString(const nsA
   ErrorResult rv;
   SetValueAsString(aValue, rv);
   return rv.StealNSResult();
 }
 
 NS_IMETHODIMP
 DOMSVGLength::GetValueAsString(nsAString& aValue)
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mVal) {
     if (mIsAnimValItem) {
       mSVGElement->FlushAnimations();
       mVal->GetAnimValueString(aValue);
     } else {
       mVal->GetBaseValueString(aValue);
     }
     return NS_OK;
@@ -424,16 +443,17 @@ DOMSVGLength::GetValueAsString(nsAString
   SVGLength(mValue, mUnit).GetValueAsString(aValue);
   return NS_OK;
 }
 
 void
 DOMSVGLength::NewValueSpecifiedUnits(uint16_t aUnit, float aValue,
                                      ErrorResult& aRv)
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mIsAnimValItem) {
     aRv.Throw(NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR);
     return;
   }
 
   if (mVal) {
     mVal->NewValueSpecifiedUnits(aUnit, aValue, mSVGElement);
     return;
@@ -466,16 +486,17 @@ DOMSVGLength::NewValueSpecifiedUnits(uin
   ErrorResult rv;
   NewValueSpecifiedUnits(aUnit, aValue, rv);
   return rv.StealNSResult();
 }
 
 void
 DOMSVGLength::ConvertToSpecifiedUnits(uint16_t aUnit, ErrorResult& aRv)
 {
+  MOZ_ASSERT_IF(mVal, mSVGElement);
   if (mIsAnimValItem) {
     aRv.Throw(NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR);
     return;
   }
 
   if (mVal) {
     mVal->ConvertToSpecifiedUnits(aUnit, mSVGElement);
     return;
