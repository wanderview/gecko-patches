# HG changeset patch
# Parent 1524a1c6474188da54e923ba6b313c171bfc6159
# User Ben Kelly <ben@wanderview.com>
Bug 1154325 P1 Add convenience routines to bind and get Blobs as strings. r=asuth


diff --git a/storage/public/mozIStorageBindingParams.idl b/storage/public/mozIStorageBindingParams.idl
--- a/storage/public/mozIStorageBindingParams.idl
+++ b/storage/public/mozIStorageBindingParams.idl
@@ -3,17 +3,17 @@
  * This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsISupports.idl"
 
 interface nsIVariant;
 
-[scriptable, uuid(7d8763ad-79d9-4674-ada1-37fd702af68c)]
+[scriptable, uuid(2d09f42f-966e-4663-b4b3-b0c8676bf2bf)]
 interface mozIStorageBindingParams : nsISupports {
   /**
    * Binds aValue to the parameter with the name aName.
    *
    * @param aName
    *        The name of the parameter to bind aValue to.
    * @param aValue
    *        The value to bind.
@@ -29,16 +29,21 @@ interface mozIStorageBindingParams : nsI
    [noscript] void bindInt32ByName(in AUTF8String aName,
                                    in long aValue);
    [noscript] void bindInt64ByName(in AUTF8String aName,
                                    in long long aValue);
    [noscript] void bindNullByName(in AUTF8String aName);
    void bindBlobByName(in AUTF8String aName,
                        [array, const, size_is(aValueSize)] in octet aValue,
                        in unsigned long aValueSize);
+
+   // Convenience routines for storing strings as blobs.
+   void bindStringAsBlobByName(in AUTF8String aName, in AString aValue);
+   void bindUTF8StringAsBlobByName(in AUTF8String aIndex, in AUTF8String aValue);
+
    // The function adopts the storage for the provided blob.  After calling
    // this function, mozStorage will ensure that NS_Free is called on the
    // underlying pointer.
    [noscript]
    void bindAdoptedBlobByName(in AUTF8String aName,
                               [array, size_is(aValueSize)] in octet aValue,
                               in unsigned long aValueSize);
 
@@ -61,16 +66,21 @@ interface mozIStorageBindingParams : nsI
    [noscript] void bindInt32ByIndex(in unsigned long aIndex,
                                     in long aValue);
    [noscript] void bindInt64ByIndex(in unsigned long aIndex,
                                     in long long aValue);
    [noscript] void bindNullByIndex(in unsigned long aIndex);
    void bindBlobByIndex(in unsigned long aIndex,
                         [array, const, size_is(aValueSize)] in octet aValue,
                         in unsigned long aValueSize);
+
+   // Convenience routines for storing strings as blobs.
+   void bindStringAsBlobByIndex(in unsigned long aIndex, in AString aValue);
+   void bindUTF8StringAsBlobByIndex(in unsigned long aIndex, in AUTF8String aValue);
+
    // The function adopts the storage for the provided blob.  After calling
    // this function, mozStorage will ensure that NS_Free is called on the
    // underlying pointer.
    [noscript]
    void bindAdoptedBlobByIndex(in unsigned long aIndex,
                                [array, size_is(aValueSize)] in octet aValue,
                                in unsigned long aValueSize);
 };
diff --git a/storage/public/mozIStorageStatement.idl b/storage/public/mozIStorageStatement.idl
--- a/storage/public/mozIStorageStatement.idl
+++ b/storage/public/mozIStorageStatement.idl
@@ -10,17 +10,17 @@
 %}
 
 [ptr] native octetPtr(uint8_t);
 
 /**
  * A SQL statement that can be used for both synchronous and asynchronous
  * purposes.
  */
-[scriptable, uuid(b3c4476e-c490-4e3b-9db1-e2d3a6f0287c)]
+[scriptable, uuid(5f567c35-6c32-4140-828c-683ea49cfd3a)]
 interface mozIStorageStatement : mozIStorageBaseStatement {
   /**
    * Create a clone of this statement, by initializing a new statement
    * with the same connection and same SQL statement as this one.  It
    * does not preserve statement state; that is, if a statement is
    * being executed when it is cloned, the new statement will not be
    * executing.
    */
@@ -202,16 +202,43 @@ interface mozIStorageStatement : mozISto
    * @param aIndex
    *        0-based colummn index.
    * @param[out] aDataSize
    *             The number of bytes in the blob.
    * @param[out] aData
    *             The contents of the BLOB.  This will be NULL if aDataSize == 0.
    */
   void getBlob(in unsigned long aIndex, out unsigned long aDataSize, [array,size_is(aDataSize)] out octet aData);
+
+  /**
+   * Retrieve the contents of a Blob column from the current result row as a
+   * string.
+   *
+   * @param aIndex
+   *        0-based colummn index.
+   * @return The value for the result Blob column interpreted as a String.
+   *         No encoding conversion is performed.
+   * @{
+   */
+  AString getBlobAsString(in unsigned long aIndex);
+  /** @} */
+
+  /**
+   * Retrieve the contents of a Blob column from the current result row as a
+   * UTF8 string.
+   *
+   * @param aIndex
+   *        0-based colummn index.
+   * @return The value for the result Blob column interpreted as a UTF8 String.
+   *         No encoding conversion is performed.
+   * @{
+   */
+  AUTF8String getBlobAsUTF8String(in unsigned long aIndex);
+  /** @} */
+
   /**
    * Check whether the given column in the current result row is NULL.
    *
    * @param aIndex
    *        0-based colummn index.
    * @return true if the value for the result column is null.
    */
   boolean getIsNull(in unsigned long aIndex);
diff --git a/storage/public/mozIStorageValueArray.idl b/storage/public/mozIStorageValueArray.idl
--- a/storage/public/mozIStorageValueArray.idl
+++ b/storage/public/mozIStorageValueArray.idl
@@ -9,17 +9,17 @@
 %}
 
 [ptr] native octetPtr(uint8_t);
 
 /**
  * mozIStorageValueArray wraps an array of SQL values, such as a single database
  * row.
  */
-[scriptable, uuid(07b5b93e-113c-4150-863c-d247b003a55d)]
+[scriptable, uuid(6e6306f4-ffa7-40f5-96ca-36159ce8f431)]
 interface mozIStorageValueArray : nsISupports {
   /**
    * These type values are returned by getTypeOfIndex
    * to indicate what type of value is present at
    * a given column.
    */
   const long VALUE_TYPE_NULL = 0;
   const long VALUE_TYPE_INTEGER = 1;
@@ -57,16 +57,18 @@ interface mozIStorageValueArray : nsISup
   long getInt32(in unsigned long aIndex);
   long long getInt64(in unsigned long aIndex);
   double getDouble(in unsigned long aIndex);
   AUTF8String getUTF8String(in unsigned long aIndex);
   AString getString(in unsigned long aIndex);
 
   // data will be NULL if dataSize = 0
   void getBlob(in unsigned long aIndex, out unsigned long aDataSize, [array,size_is(aDataSize)] out octet aData);
+  AString getBlobAsString(in unsigned long aIndex);
+  AUTF8String getBlobAsUTF8String(in unsigned long aIndex);
   boolean getIsNull(in unsigned long aIndex);
 
   /**
    * Returns a shared string pointer
    */
   [noscript] void getSharedUTF8String(in unsigned long aIndex, out unsigned long aLength, [shared,retval] out string aResult);
   [noscript] void getSharedString(in unsigned long aIndex, out unsigned long aLength, [shared,retval] out wstring aResult);
   [noscript] void getSharedBlob(in unsigned long aIndex, out unsigned long aLength, [shared,retval] out octetPtr aResult);
