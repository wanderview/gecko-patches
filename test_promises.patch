# HG changeset patch
# Parent ec1bcc54e357e5c4b53dd1e43e37f33b4f37dd50
# User Ben Kelly <ben@wanderview.com>
Make cache tests use proper promise chaining.


diff --git a/dom/tests/mochitest/cache/test_cache.js b/dom/tests/mochitest/cache/test_cache.js
--- a/dom/tests/mochitest/cache/test_cache.js
+++ b/dom/tests/mochitest/cache/test_cache.js
@@ -1,22 +1,22 @@
 ok(!!caches, 'caches object should be available on global');
 caches.create('snafu').then(function(createCache) {
   ok(!!createCache, 'cache object should be resolved from caches.create');
-  caches.get('snafu').then(function(getCache) {
-    ok(!!getCache, 'cache object should be resolved from caches.get');
-    caches.has('snafu').then(function(hasResult) {
-      ok(hasResult, 'caches.has() should resolve true');
-      caches.keys().then(function(keys) {
-        ok(!!keys, 'caches.keys() should resolve to a truthy value');
-        is(1, keys.length, 'caches.keys() should resolve to an array of length 1');
-        is(0, keys.indexOf('snafu'), 'caches.keys() should resolve to an array containing key');
-        caches.delete('snafu').then(function(deleteResult) {
-          ok(deleteResult, 'caches.delete() should resolve true');
-          caches.get('snafu').then(function(getMissingCache) {
-            is(undefined, getMissingCache, 'missing key should resolve to undefined cache');
-            workerTestDone();
-          });
-        });
-      });
-    });
-  });
+  return caches.get('snafu');
+}).then(function(getCache) {
+  ok(!!getCache, 'cache object should be resolved from caches.get');
+  return caches.has('snafu');
+}).then(function(hasResult) {
+  ok(hasResult, 'caches.has() should resolve true');
+  return caches.keys();
+}).then(function(keys) {
+  ok(!!keys, 'caches.keys() should resolve to a truthy value');
+  is(1, keys.length, 'caches.keys() should resolve to an array of length 1');
+  is(0, keys.indexOf('snafu'), 'caches.keys() should resolve to an array containing key');
+  return caches.delete('snafu');
+}).then(function(deleteResult) {
+  ok(deleteResult, 'caches.delete() should resolve true');
+  return caches.get('snafu');
+}).then(function(getMissingCache) {
+  is(undefined, getMissingCache, 'missing key should resolve to undefined cache');
+  workerTestDone();
 });
diff --git a/dom/tests/mochitest/cache/test_cache_frame.html b/dom/tests/mochitest/cache/test_cache_frame.html
--- a/dom/tests/mochitest/cache/test_cache_frame.html
+++ b/dom/tests/mochitest/cache/test_cache_frame.html
@@ -8,60 +8,62 @@
 <title>Test for SharedWorker</title>
 </head>
 <body>
 <script type="text/javascript">
   "use strict";
   addEventListener("message", function messageListener(evt) {
     removeEventListener("message", messageListener);
     var success = true;
+    var c = null
+    var request = new Request("http://example.com/hmm?q=foobar");
+    var response = new Response();
     success = success && !!caches;
     caches.create("foobar").then(function(createCache) {
       success = success && !!createCache;
-      caches.get("foobar").then(function(getCache) {
-        success = success && !!getCache;
-        var request = new Request("http://example.com/hmm?q=foobar");
-        var response = new Response();
-        getCache.put(request, response).then(function(putResponse) {
-          success = success && !!putResponse;
-          getCache.matchAll(request).then(function(matchAllResponses) {
-            success = success && !!matchAllResponses &&
-                      matchAllResponses.length === 1;
-            getCache.match(request).then(function(matchResponse) {
-              success = success && !!matchResponse;
-              var request2 = new Request("http://example.com/hmm?q=snafu");
-              getCache.match(request2, {ignoreSearch:true}).then(function(match2Response) {
-                success = success && !!match2Response;
-                getCache.delete(request).then(function(deleteResult) {
-                  success = success && deleteResult;
-                  getCache.matchAll(request).then(function(matchAll2Responses) {
-                    success = success && !!matchAll2Responses &&
-                              matchAll2Responses.length === 0;
-                    caches.has("foobar").then(function(hasResult) {
-                      success = success && hasResult;
-                      caches.keys().then(function(keys) {
-                        success = success && !!keys;
-                        success = success && keys.length === 1;
-                        success = success && keys.indexOf("foobar") === 0;
-                        caches.delete("foobar").then(function(deleteResult) {
-                          success = success && deleteResult;
-                          caches.get("foobar").then(function(getMissingCache) {
-                            success = success && getMissingCache === undefined;
-                            parent.postMessage({
-                              type: "result",
-                              success: success
-                            }, "*");
-                          });
-                        });
-                      });
-                    });
-                  });
-                });
-              });
-            });
-          });
-        });
-      });
+      return caches.get("foobar");
+    }).then(function(getCache) {
+      success = success && !!getCache;
+      c = getCache;
+      return c.put(request, response);
+    }).then(function(putResponse) {
+      success = success && !!putResponse;
+      return c.matchAll(request);
+    }).then(function(matchAllResponses) {
+      success = success && !!matchAllResponses &&
+                matchAllResponses.length === 1;
+      return c.match(request);
+    }).then(function(matchResponse) {
+      success = success && !!matchResponse;
+      var request2 = new Request("http://example.com/hmm?q=snafu");
+      return c.match(request2, {ignoreSearch:true});
+    }).then(function(match2Response) {
+      success = success && !!match2Response;
+      return c.delete(request);
+    }).then(function(deleteResult) {
+      success = success && deleteResult;
+      return c.matchAll(request);
+    }).then(function(matchAll2Responses) {
+      success = success && !!matchAll2Responses &&
+                matchAll2Responses.length === 0;
+      return caches.has("foobar");
+    }).then(function(hasResult) {
+      success = success && hasResult;
+      return caches.keys();
+    }).then(function(keys) {
+      success = success && !!keys;
+      success = success && keys.length === 1;
+      success = success && keys.indexOf("foobar") === 0;
+      return caches.delete("foobar");
+    }).then(function(deleteResult) {
+      success = success && deleteResult;
+      return caches.get("foobar");
+    }).then(function(getMissingCache) {
+      success = success && getMissingCache === undefined;
+      parent.postMessage({
+        type: "result",
+        success: success
+      }, "*");
     });
   });
 </script>
 </body>
 </html>
