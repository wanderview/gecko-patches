# HG changeset patch
# User Andrea Marchesini <amarchesini@mozilla.com>
# Parent  20a20793e94a0be43a61cd57b1a0fdaf4e7d1790
Bug 1128959 - Implement the WHATWG Streams spec - part 14 - cross-compartment tests, r?bz

diff --git a/dom/tests/mochitest/fetch/common_readableStreams.js b/dom/tests/mochitest/fetch/common_readableStreams.js
--- a/dom/tests/mochitest/fetch/common_readableStreams.js
+++ b/dom/tests/mochitest/fetch/common_readableStreams.js
@@ -1,166 +1,277 @@
+const SAME_COMPARTMENT = "same-compartment";
+const IFRAME_COMPARTMENT = "iframe-compartment";
 const BIG_BUFFER_SIZE = 1000000;
 
 function makeBuffer(size) {
   let buffer = new Uint8Array(size);
   buffer.fill(42);
 
   let value = 0;
   for (let i = 0; i < 1000000; i+= 1000) {
     buffer.set([++value % 255], i);
   }
 
   return buffer;
 }
 
-function test_nativeStream() {
+function apply_compartment(compartment, data) {
+  if (compartment == SAME_COMPARTMENT) {
+    self[data.func](data.args, self);
+    return;
+  }
+
+  if (compartment == IFRAME_COMPARTMENT) {
+    const iframe = document.querySelector("#iframe").contentWindow;
+    iframe.runTest.call(iframe, data);
+    return;
+  }
+
+  ok(false, "Invalid compartment value");
+}
+
+async function test_nativeStream(compartment) {
   info("test_nativeStream");
 
-  fetch('/').then(r => {
-    ok(r.body instanceof ReadableStream, "We have a ReadableStream");
+  let r = await fetch('/');
 
-    let a = r.clone();
-    ok(a.body instanceof ReadableStream, "We have a ReadableStream");
-
-    let b = a.clone();
-    ok(b.body instanceof ReadableStream, "We have a ReadableStream");
-
-    r.blob().then(b => {
-      ok(b instanceof Blob, "We have a blob");
-      return a.body.getReader().read();
-    }).then(d => {
-      ok(!d.done, "We have read something!");
-      return b.blob();
-    }).then(b => {
-      ok(b instanceof Blob, "We have a blob");
-    }).then(next);
-  });
+  apply_compartment(compartment,
+                    { func: "test_nativeStream_continue",
+                      args: r });
 }
 
-function test_nonNativeStream() {
+async function test_nativeStream_continue(r, that) {
+  that.ok(r.body instanceof that.ReadableStream, "We have a ReadableStream");
+
+  let a = r.clone();
+  that.ok(a instanceof that.Response, "We have a cloned Response");
+  that.ok(a.body instanceof that.ReadableStream, "We have a ReadableStream");
+
+  let b = a.clone();
+  that.ok(b instanceof that.Response, "We have a cloned Response");
+  that.ok(b.body instanceof that.ReadableStream, "We have a ReadableStream");
+
+  let blob = await r.blob();
+
+  that.ok(blob instanceof Blob, "We have a blob");
+  let d = await a.body.getReader().read();
+
+  that.ok(!d.done, "We have read something!");
+  blob = await b.blob();
+
+  that.ok(blob instanceof Blob, "We have a blob");
+
+  that.next();
+}
+
+async function test_nonNativeStream(compartment) {
   info("test_nonNativeStream");
 
   let buffer = makeBuffer(BIG_BUFFER_SIZE);
   info("Buffer size: " + buffer.byteLength);
 
   let r = new Response(new ReadableStream({start : controller => {
     controller.enqueue(buffer);
     controller.close();
   }}));
 
-  ok(r.body instanceof ReadableStream, "We have a ReadableStream");
+  apply_compartment(compartment,
+                    { func: "test_nonNativeStream_continue",
+                      args: { r, buffer } });
+}
 
-  let a = r.clone();
-  ok(a.body instanceof ReadableStream, "We have a ReadableStream");
+async function test_nonNativeStream_continue(data, that) {
+  that.ok(data.r.body instanceof that.ReadableStream, "We have a ReadableStream");
+
+  let a = data.r.clone();
+  that.ok(a instanceof that.Response, "We have a cloned Response");
+  that.ok(a.body instanceof that.ReadableStream, "We have a ReadableStream");
 
   let b = a.clone();
-  ok(b.body instanceof ReadableStream, "We have a ReadableStream");
+  that.ok(b instanceof that.Response, "We have a cloned Response");
+  that.ok(b.body instanceof that.ReadableStream, "We have a ReadableStream");
 
-  r.blob().then(b => {
-    ok(b instanceof Blob, "We have a blob");
-    return a.body.getReader().read();
-  }).then(d => {
-    ok(!d.done, "We have read something!");
-    return b.blob();
-  }).then(b => {
-    ok(b instanceof Blob, "We have a blob");
-    is(b.size, buffer.byteLength, "Blob size matches");
-  }).then(next);
+  let blob = await data.r.blob();
+
+  that.ok(blob instanceof Blob, "We have a blob");
+  let d = await a.body.getReader().read();
+
+  that.ok(!d.done, "We have read something!");
+  blob = await b.blob();
+
+  that.ok(blob instanceof Blob, "We have a blob");
+  that.is(blob.size, data.buffer.byteLength, "Blob size matches");
+
+  that.next();
 }
 
-function test_noUint8Array() {
+async function test_noUint8Array(compartment) {
   info("test_noUint8Array");
 
   let r = new Response(new ReadableStream({start : controller => {
     controller.enqueue('hello world!');
     controller.close();
   }}));
 
-  ok(r.body instanceof ReadableStream, "We have a ReadableStream");
+  apply_compartment(compartment,
+                    { func: "test_noUint8Array_continue",
+                      args: r });
+}
+
+async function test_noUint8Array_continue(r, that) {
+  that.ok(r.body instanceof that.ReadableStream, "We have a ReadableStream");
 
   r.blob().then(b => {
-    ok(false, "We cannot have a blob here!");
+    that.ok(false, "We cannot have a blob here!");
   }, () => {
-    ok(true, "We cannot have a blob here!");
-  }).then(next);
+    that.ok(true, "We cannot have a blob here!");
+  }).then(that.next);
 }
 
-function test_pendingStream() {
-  var r = new Response(new ReadableStream({start : controller => {
+async function test_pendingStream(compartment) {
+  let r = new Response(new ReadableStream({start : controller => {
     controller.enqueue(makeBuffer(BIG_BUFFER_SIZE));
     // Let's keep this controler open.
     self.ccc = controller;
   }}));
 
-  r.body.getReader().read().then(d => {
-    ok(!d.done, "We have read something!");
-    close();
-    next();
-  });
+  apply_compartment(compartment,
+                    { func: "test_pendingStream_continue",
+                      args: r });
 }
 
-async function test_nativeStream_cache() {
+async function test_pendingStream_continue(r, that) {
+  let d = await r.body.getReader().read();
+
+  that.ok(!d.done, "We have read something!");
+
+  if ("close" in that) {
+    that.close();
+  }
+
+  that.next();
+}
+
+async function test_nativeStream_cache(compartment) {
   info("test_nativeStream_cache");
 
   let origBody = '123456789abcdef';
   let url = '/nativeStream';
 
   let cache = await caches.open('nativeStream');
 
   info("Storing a body as a string");
   await cache.put(url, new Response(origBody));
 
-  info("Retrieving the stored value");
-  let cacheResponse = await cache.match(url);
+  apply_compartment(compartment,
+                    { func: "test_nativeStream_cache_continue",
+                      args: { caches, cache, url, origBody } });
+}
 
-  info("Converting the response to text");
+async function test_nativeStream_cache_continue(data, that) {
+  that.info("Retrieving the stored value");
+  let cacheResponse = await data.cache.match(data.url);
+
+  that.info("Converting the response to text");
   let cacheBody = await cacheResponse.text();
 
-  is(origBody, cacheBody, "Bodies match");
+  that.is(data.origBody, cacheBody, "Bodies match");
 
-  await caches.delete('nativeStream');
+  await data.caches.delete('nativeStream');
 
-  next();
+  that.next();
 };
 
-async function test_nonNativeStream_cache() {
+async function test_nonNativeStream_cache(compartment) {
   info("test_nonNativeStream_cache");
 
   let url = '/nonNativeStream';
 
   let cache = await caches.open('nonNativeStream');
   let buffer = makeBuffer(BIG_BUFFER_SIZE);
   info("Buffer size: " + buffer.byteLength);
 
   info("Storing a body as a string");
   let r = new Response(new ReadableStream({start : controller => {
     controller.enqueue(buffer);
     controller.close();
   }}));
 
-  await cache.put(url, r);
+  apply_compartment(compartment,
+                    { func: "test_nonNativeStream_cache_continue",
+                      args: { caches, cache, buffer, r } });
+}
 
-  info("Retrieving the stored value");
-  let cacheResponse = await cache.match(url);
+async function test_nonNativeStream_cache_continue(data, that) {
+  await data.cache.put(data.url, data.r);
 
-  info("Converting the response to text");
+  that.info("Retrieving the stored value");
+  let cacheResponse = await data.cache.match(data.url);
+
+  that.info("Converting the response to text");
   let cacheBody = await cacheResponse.arrayBuffer();
 
-  ok(cacheBody instanceof ArrayBuffer, "Body is an array buffer");
-  is(cacheBody.byteLength, BIG_BUFFER_SIZE, "Body length is correct");
+  that.ok(cacheBody instanceof that.ArrayBuffer, "Body is an array buffer");
+  that.is(cacheBody.byteLength, BIG_BUFFER_SIZE, "Body length is correct");
 
   let value = 0;
   for (let i = 0; i < 1000000; i+= 1000) {
-    is(new Uint8Array(cacheBody)[i], ++value % 255, "byte in position " + i + " is correct");
+    that.is(new Uint8Array(cacheBody)[i], ++value % 255, "byte in position " + i + " is correct");
   }
 
-  await caches.delete('nonNativeStream');
+  await data.caches.delete('nonNativeStream');
 
-  next();
+  that.next();
+};
+
+async function test_codeExecution(compartment) {
+  info("test_codeExecution");
+
+  let r = new Response(new ReadableStream({
+    start(c) {
+      controller = c
+    },
+    pull() {
+      console.log("pull called");
+    }
+  }));
+
+  apply_compartment(compartment,
+                    { func: "test_codeExecution_continue",
+                      args: r });
+}
+
+async function test_codeExecution_continue(r, that) {
+  function consoleListener() {
+    that.SpecialPowers.addObserver(this, "console-api-log-event");
+  }
+
+  var promise = new Promise(resolve => {
+    consoleListener.prototype  = {
+      observe: function(aSubject, aTopic, aData) {
+        that.ok(true, "Something has been received");
+        that.is(aTopic, "console-api-log-event");
+
+        var obj = aSubject.wrappedJSObject;
+        if (obj.arguments[0] && obj.arguments[0] === 'pull called') {
+          that.ok(true, "Message received!");
+          that.SpecialPowers.removeObserver(this, "console-api-log-event");
+          resolve();
+        }
+      }
+    }
+  });
+
+  var cl = new consoleListener();
+
+  r.body.getReader().read();
+  await promise;
+
+  that.next();
 };
 
 function workify(func) {
   info("Workifing " + func);
 
   let worker = new Worker('worker_readableStreams.js');
   worker.postMessage(func);
   worker.onmessage = function(e) {
diff --git a/dom/tests/mochitest/fetch/iframe_readableStreams.html b/dom/tests/mochitest/fetch/iframe_readableStreams.html
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/fetch/iframe_readableStreams.html
@@ -0,0 +1,8 @@
+<iframe src="iframe_readableStreams.html" id="iframe"></iframe>
+<script type="application/javascript" src="common_readableStreams.js"></script>
+<script>
+function runTest(data) {
+  const iframe = document.querySelector("#iframe").contentWindow;
+  self[data.func].call(iframe, data.args, parent);
+}
+</script>
diff --git a/dom/tests/mochitest/fetch/mochitest.ini b/dom/tests/mochitest/fetch/mochitest.ini
--- a/dom/tests/mochitest/fetch/mochitest.ini
+++ b/dom/tests/mochitest/fetch/mochitest.ini
@@ -26,16 +26,17 @@ support-files =
   sw_reroute.js
   empty.js
   empty.js^headers^
   worker_temporaryFileBlob.js
   common_temporaryFileBlob.js
   worker_fetch_controller.js
   common_readableStreams.js
   worker_readableStreams.js
+  iframe_readableStreams.html
   !/dom/xhr/tests/file_XHR_binary1.bin
   !/dom/xhr/tests/file_XHR_binary1.bin^headers^
   !/dom/xhr/tests/file_XHR_binary2.bin
   !/dom/xhr/tests/file_XHR_pass1.xml
   !/dom/xhr/tests/file_XHR_pass2.txt
   !/dom/xhr/tests/file_XHR_pass3.txt
   !/dom/xhr/tests/file_XHR_pass3.txt^headers^
   !/dom/xhr/tests/responseIdentical.sjs
diff --git a/dom/tests/mochitest/fetch/test_readableStreams.html b/dom/tests/mochitest/fetch/test_readableStreams.html
--- a/dom/tests/mochitest/fetch/test_readableStreams.html
+++ b/dom/tests/mochitest/fetch/test_readableStreams.html
@@ -3,44 +3,56 @@
 <head>
   <meta charset="utf-8">
   <title>Test for ReadableStreams and Fetch</title>
   <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
   <script type="application/javascript" src="common_readableStreams.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
 </head>
 <body>
+  <iframe src="iframe_readableStreams.html" id="iframe"></iframe>
   <script type="application/javascript">
 
 let tests = [
   function() {
     SpecialPowers.pushPrefEnv({
       "set": [["dom.caches.enabled", true],
               ["dom.caches.testing.enabled", true],
-              ["dom.quotaManager.testing", true]]
+              ["dom.quotaManager.testing", true],
+              ["dom.streams.enabled", true],
+              ["javascript.options.streams", true]]
     }, next);
   },
 
-  test_nativeStream,
+  function() { test_nativeStream(SAME_COMPARTMENT); },
+  function() { test_nativeStream(IFRAME_COMPARTMENT); },
   function() { workify('test_nativeStream'); },
 
-  test_nonNativeStream,
+  function() { test_nonNativeStream(SAME_COMPARTMENT); },
+  function() { test_nonNativeStream(IFRAME_COMPARTMENT); },
   function() { workify('test_nonNativeStream'); },
 
-  test_pendingStream,
+  function() { test_pendingStream(SAME_COMPARTMENT); },
+  function() { test_pendingStream(IFRAME_COMPARTMENT); },
   function() { workify('test_pendingStream'); },
 
-  test_noUint8Array,
+  function() { test_noUint8Array(SAME_COMPARTMENT); },
+  function() { test_noUint8Array(IFRAME_COMPARTMENT); },
   function() { workify('test_noUint8Array'); },
 
-  test_nativeStream_cache,
+  function() { test_nativeStream_cache(SAME_COMPARTMENT); },
+  function() { test_nativeStream_cache(IFRAME_COMPARTMENT); },
   function() { workify('test_nativeStream_cache'); },
 
-  test_nonNativeStream_cache,
+  function() { test_nonNativeStream_cache(SAME_COMPARTMENT); },
+  function() { test_nonNativeStream_cache(IFRAME_COMPARTMENT); },
   function() { workify('test_nonNativeStream_cache'); },
+
+  function() { test_codeExecution(SAME_COMPARTMENT); },
+  function() { test_codeExecution(IFRAME_COMPARTMENT); },
 ];
 
 function next() {
   if (!tests.length) {
     SimpleTest.finish();
     return;
   }
 
diff --git a/dom/tests/mochitest/fetch/worker_readableStreams.js b/dom/tests/mochitest/fetch/worker_readableStreams.js
--- a/dom/tests/mochitest/fetch/worker_readableStreams.js
+++ b/dom/tests/mochitest/fetch/worker_readableStreams.js
@@ -12,10 +12,10 @@ function is(a, b, message) {
   ok(a === b, message);
 }
 
 function next() {
   postMessage({type: 'done'});
 }
 
 onmessage = function(e) {
-  self[e.data]();
+  self[e.data](SAME_COMPARTMENT);
 }
