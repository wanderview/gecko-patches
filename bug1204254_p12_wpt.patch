# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  c17a8f786d9fab3858a3bbe6811f3616b38516e2
Bug 1204254 P12 Add a WPT test that verifies data streams through respondWith(). r=asuth

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -307188,16 +307188,21 @@
      {}
     ]
    ],
    "service-workers/service-worker/resources/fetch-event-respond-with-argument-worker.js": [
     [
      {}
     ]
    ],
+   "service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js": [
+    [
+     {}
+    ]
+   ],
    "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-iframe.html": [
     [
      {}
     ]
    ],
    "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-worker.js": [
     [
      {}
@@ -376686,16 +376691,22 @@
     ]
    ],
    "service-workers/service-worker/fetch-event-respond-with-argument.https.html": [
     [
      "/service-workers/service-worker/fetch-event-respond-with-argument.https.html",
      {}
     ]
    ],
+   "service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html": [
+    [
+     "/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html",
+     {}
+    ]
+   ],
    "service-workers/service-worker/fetch-event-respond-with-readable-stream.https.html": [
     [
      "/service-workers/service-worker/fetch-event-respond-with-readable-stream.https.html",
      {}
     ]
    ],
    "service-workers/service-worker/fetch-event-respond-with-response-body-with-invalid-chunk.https.html": [
     [
@@ -415068,17 +415079,17 @@
    "1ffa4ce083beb01cf54d1a5be155c0ae32376303",
    "testharness"
   ],
   "IndexedDB/idbobjectstore_createIndex6-event_order.htm": [
    "785af43d94dd7dbecec5278d33e9c3d4ba1f053c",
    "testharness"
   ],
   "IndexedDB/idbobjectstore_createIndex7-event_order.htm": [
-   "5adcbff25f20bc9e99390ea63dfdfb862a28a38f",
+   "8f7eb9bd63f40ed55cfc8c669dfffefacdb912f4",
    "testharness"
   ],
   "IndexedDB/idbobjectstore_createIndex8-valid_keys.htm": [
    "93265ff4ed812bf5df70a525b06c2de7ef432340",
    "testharness"
   ],
   "IndexedDB/idbobjectstore_createIndex9-emptyname.htm": [
    "2b63a4596f29a04940dc5e83952cff55e87cdbc4",
@@ -416520,41 +416531,41 @@
    "3feb39f2451afa624771437337c669865fac29b5",
    "testharness"
   ],
   "XMLHttpRequest/abort-after-timeout.htm": [
    "26252843e67111ee53079bb67619fccde700000d",
    "testharness"
   ],
   "XMLHttpRequest/abort-during-done.htm": [
-   "644e5580da6584fdddf285758d8f3221914ce433",
+   "f920658b70e4a51eb5b36d6cbd448d2dfc810f5c",
    "testharness"
   ],
   "XMLHttpRequest/abort-during-headers-received.htm": [
-   "eb133e195b982c35589d80dfd1d3a7d4591a473f",
+   "48c028b1b1a3e2adccbafa8c519329297f973e23",
    "testharness"
   ],
   "XMLHttpRequest/abort-during-loading.htm": [
-   "c0384f20416964d719d4504e3afd5e8a92f5b9ed",
+   "98e31e4b2a489543ee9914a75749bc958ef97fca",
    "testharness"
   ],
   "XMLHttpRequest/abort-during-open.htm": [
    "bc528083ac09ef3666eb07d294bc2b48dc142791",
    "testharness"
   ],
   "XMLHttpRequest/abort-during-open.js": [
-   "54d5deeaf004bd84d54ab5628f895e445edd92c9",
+   "f46bf95a38cc79fe499f4990457fcf1eaa193068",
    "support"
   ],
   "XMLHttpRequest/abort-during-open.worker.js": [
    "94180bce348fa9fd3826a8993d701936141b8b0b",
    "testharness"
   ],
   "XMLHttpRequest/abort-during-unsent.htm": [
-   "039927226e468af095bd731b7652c5e1662e4f28",
+   "5caf136ee37109ae482e44f71dbcd8bea2842b33",
    "testharness"
   ],
   "XMLHttpRequest/abort-during-upload.htm": [
    "76a704710cb535699ee4f9e66115fa62351f7a3e",
    "testharness"
   ],
   "XMLHttpRequest/abort-event-abort.htm": [
    "8afc5c9fe3534f452b91255fcdff35c4ab250ec7",
@@ -578680,17 +578691,17 @@
    "ad44e3f4ba132bfb4a522b14a4ff5356dbbbad14",
    "testharness"
   ],
   "cssom-view/offsetParent_element_test.html": [
    "b2261ec702116c211ab5ac6fbb53698dfe60a7be",
    "testharness"
   ],
   "cssom-view/offsetTopLeftInScrollableParent.html": [
-   "79b4a278f0e35646cfdffeebf8f0523e2772bc9b",
+   "82a6920db4d0be087e6ed621313ecf92e3e2ed68",
    "testharness"
   ],
   "cssom-view/resources/elementsFromPoint.js": [
    "0c31158817d4d6f9e59df0d2ebe0e41c6ce41bb5",
    "support"
   ],
   "cssom-view/resources/iframe1.html": [
    "ec93f617bdc7b0055d96c7b00ab7832cca1c1af0",
@@ -623655,16 +623666,20 @@
   "service-workers/service-worker/fetch-event-referrer-policy.https.html": [
    "48c31881c1933ae05cbd3d782754c5202c6b055c",
    "testharness"
   ],
   "service-workers/service-worker/fetch-event-respond-with-argument.https.html": [
    "ce7e7cf76aace24a92d455cdb6b54fc9048960e8",
    "testharness"
   ],
+  "service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html": [
+   "a991bc349147cb9dba6cdf60b4b8069a541b2d93",
+   "testharness"
+  ],
   "service-workers/service-worker/fetch-event-respond-with-readable-stream.https.html": [
    "cf31c2b1cba37a016dc9e9a3ddb2429a5d518052",
    "testharness"
   ],
   "service-workers/service-worker/fetch-event-respond-with-response-body-with-invalid-chunk.https.html": [
    "b488946d3d00fdcc17249b6b2270537be8bcfa59",
    "testharness"
   ],
@@ -624375,16 +624390,20 @@
   "service-workers/service-worker/resources/fetch-event-respond-with-argument-iframe.html": [
    "4a9d7e189909b5adfdd4d1c0ebddb7cd90fde159",
    "support"
   ],
   "service-workers/service-worker/resources/fetch-event-respond-with-argument-worker.js": [
    "b58b92a145a89f71c414de5e837c1db026beb1d6",
    "support"
   ],
+  "service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js": [
+   "6b18c112d86f04b05f139ba9bf9bc83b7941f0e1",
+   "support"
+  ],
   "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-iframe.html": [
    "16fe2d0f84bb7898f7a89182e24001b3bc64775e",
    "support"
   ],
   "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-worker.js": [
    "7f120661c9b24647f33dc41c36610ad3a1afef6a",
    "support"
   ],
@@ -631228,21 +631247,21 @@
    "c9dcf7c17010e5495007e000b33aeb4dc89f92b7",
    "testharness"
   ],
   "web-animations/interfaces/KeyframeEffect/iterationComposite.html": [
    "2ed50cdb27335345015d8b13c64ef86c67048757",
    "testharness"
   ],
   "web-animations/interfaces/KeyframeEffect/processing-a-keyframes-argument-001.html": [
-   "bc2ddd24f482292a2175ddd94c62293a962cf4af",
+   "83e58d986208b6cbc51e4124a2b17269a26e0520",
    "testharness"
   ],
   "web-animations/interfaces/KeyframeEffect/processing-a-keyframes-argument-002.html": [
-   "120984a06a0d22ca9d008e144a4f8e9f29a9721b",
+   "38b350320a08cc2a9ae4449944eea427bfbe6f9d",
    "testharness"
   ],
   "web-animations/interfaces/KeyframeEffect/setKeyframes.html": [
    "2982bb6f57bb52c6e4e0483e4e47b22868a6010d",
    "testharness"
   ],
   "web-animations/interfaces/KeyframeEffect/setTarget.html": [
    "8c75e6605a134c96e261e5383414b7e15b32d121",
diff --git a/testing/web-platform/tests/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html b/testing/web-platform/tests/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html
@@ -0,0 +1,46 @@
+<!DOCTYPE html>
+<meta charset="utf-8">
+<title>respondWith streams data to an intercepted fetch()</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<script>
+'use strict';
+
+const WORKER =
+  'resources/fetch-event-respond-with-partial-stream-worker.js';
+const SCOPE =
+  'resources/fetch-event-respond-with-partial-stream-iframe.html';
+
+promise_test(async t => {
+  let reg = await service_worker_unregister_and_register(t, WORKER, SCOPE)
+  add_completion_callback(() => reg.unregister());
+
+  await wait_for_state(t, reg.installing, 'activated');
+
+  let frame = await with_iframe(SCOPE);
+  t.add_cleanup(_ => frame.remove());
+
+  let response = await frame.contentWindow.fetch('partial-stream.txt');
+
+  let reader = response.body.getReader();
+  let chunk = await reader.read();
+
+  let decoder = new TextDecoder();
+
+  assert_false(chunk.done, 'partial body stream should not be closed yet');
+
+  // Note, the spec may allow some re-buffering between the service worker
+  // and the outer intercepted fetch.  We could relax this exact chunk value
+  // match if necessary.  The goal, though, is to ensure the outer fetch is
+  // not completely blocked until the service worker body is closed.
+  assert_equals(decoder.decode(chunk.value), 'partial-stream-content',
+                'the chunk provided by the service worker should be passed to ' +
+                'the intercepted fetch');
+
+  reg.active.postMessage('done');
+
+  await reader.closed;
+
+  }, 'respondWith() streams data to an intercepted fetch()');
+</script>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js b/testing/web-platform/tests/service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js
@@ -0,0 +1,28 @@
+let waitUntilResolve;
+
+let bodyController;
+
+self.addEventListener('message', evt => {
+  if (evt.data === 'done') {
+    bodyController.close();
+    waitUntilResolve();
+  }
+});
+
+self.addEventListener('fetch', evt => {
+  if (!evt.request.url.includes('partial-stream.txt')) {
+    return;
+  }
+
+  evt.waitUntil(new Promise(resolve => waitUntilResolve = resolve));
+
+  let body = new ReadableStream({
+    start: controller => {
+      let encoder = new TextEncoder();
+      controller.enqueue(encoder.encode('partial-stream-content'));
+      bodyController = controller;
+    },
+  });
+
+  evt.respondWith(new Response(body));
+});
