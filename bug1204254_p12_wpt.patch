# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  67c6b9a8b81eb4d7eced2034d93441e0e4ed243a
Bug 1204254 P12 Add a WPT test that verifies data streams through respondWith(). r=asuth

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -307205,16 +307205,21 @@
      {}
     ]
    ],
    "service-workers/service-worker/resources/fetch-event-respond-with-argument-worker.js": [
     [
      {}
     ]
    ],
+   "service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js": [
+    [
+     {}
+    ]
+   ],
    "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-iframe.html": [
     [
      {}
     ]
    ],
    "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-worker.js": [
     [
      {}
@@ -376709,16 +376714,22 @@
     ]
    ],
    "service-workers/service-worker/fetch-event-respond-with-argument.https.html": [
     [
      "/service-workers/service-worker/fetch-event-respond-with-argument.https.html",
      {}
     ]
    ],
+   "service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html": [
+    [
+     "/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html",
+     {}
+    ]
+   ],
    "service-workers/service-worker/fetch-event-respond-with-readable-stream.https.html": [
     [
      "/service-workers/service-worker/fetch-event-respond-with-readable-stream.https.html",
      {}
     ]
    ],
    "service-workers/service-worker/fetch-event-respond-with-response-body-with-invalid-chunk.https.html": [
     [
@@ -601247,17 +601258,17 @@
    "75ee03ce8de0f532c4d8379ea9dfaa171a2faa51",
    "support"
   ],
   "html/syntax/parsing/contains.json": [
    "30c5ad775f196a6b41f7df9326eea775846f7ade",
    "support"
   ],
   "html/syntax/parsing/empty-doctype-ids.html": [
-   "79b4a278f0e35646cfdffeebf8f0523e2772bc9b",
+   "9fa4f9bdc3bdfc2241a9aec3180b94a32af91385",
    "testharness"
   ],
   "html/syntax/parsing/foreign_content_001.html": [
    "a2739f24051f77c9fdab26f68218fa1fd6e2c1d3",
    "support"
   ],
   "html/syntax/parsing/foreign_content_003.html": [
    "cf1d6d1318d25f59655e0d0dec08bcab82955e8a",
@@ -623690,16 +623701,20 @@
   "service-workers/service-worker/fetch-event-referrer-policy.https.html": [
    "48c31881c1933ae05cbd3d782754c5202c6b055c",
    "testharness"
   ],
   "service-workers/service-worker/fetch-event-respond-with-argument.https.html": [
    "ce7e7cf76aace24a92d455cdb6b54fc9048960e8",
    "testharness"
   ],
+  "service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html": [
+   "bc41bbf057c7a7f431e4a705727bbe201ca83796",
+   "testharness"
+  ],
   "service-workers/service-worker/fetch-event-respond-with-readable-stream.https.html": [
    "cf31c2b1cba37a016dc9e9a3ddb2429a5d518052",
    "testharness"
   ],
   "service-workers/service-worker/fetch-event-respond-with-response-body-with-invalid-chunk.https.html": [
    "b488946d3d00fdcc17249b6b2270537be8bcfa59",
    "testharness"
   ],
@@ -624410,16 +624425,20 @@
   "service-workers/service-worker/resources/fetch-event-respond-with-argument-iframe.html": [
    "4a9d7e189909b5adfdd4d1c0ebddb7cd90fde159",
    "support"
   ],
   "service-workers/service-worker/resources/fetch-event-respond-with-argument-worker.js": [
    "b58b92a145a89f71c414de5e837c1db026beb1d6",
    "support"
   ],
+  "service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js": [
+   "6054d723ad0d0d310b02841b696d2357e7137398",
+   "support"
+  ],
   "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-iframe.html": [
    "16fe2d0f84bb7898f7a89182e24001b3bc64775e",
    "support"
   ],
   "service-workers/service-worker/resources/fetch-event-respond-with-readable-stream-worker.js": [
    "7f120661c9b24647f33dc41c36610ad3a1afef6a",
    "support"
   ],
diff --git a/testing/web-platform/tests/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html b/testing/web-platform/tests/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/fetch-event-respond-with-partial-stream.https.html
@@ -0,0 +1,46 @@
+<!DOCTYPE html>
+<meta charset="utf-8">
+<title>respondWith streams data to an intercepted fetch()</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<script>
+'use strict';
+
+const WORKER =
+  'resources/fetch-event-respond-with-partial-stream-worker.js';
+const SCOPE =
+  'resources/fetch-event-respond-with-partial-stream-iframe.html';
+
+promise_test(async t => {
+  let reg = await service_worker_unregister_and_register(t, WORKER, SCOPE)
+  add_completion_callback(() => reg.unregister());
+
+  await wait_for_state(t, reg.installing, 'activated');
+
+  let frame = await with_iframe(SCOPE);
+  t.add_cleanup(_ => frame.remove());
+
+  let response = await frame.contentWindow.fetch('partial-stream.txt');
+
+  let reader = response.body.getReader();
+  let chunk = await reader.read();
+
+  let decoder = new TextDecoder();
+
+  assert_false(chunk.done, 'partial body stream should not be closed yet');
+
+  // Note, the spec may allow some re-buffering between the service worker
+  // and the outer intercepted fetch.  We could relax this exact chunk value
+  // match if necessary.  The goal, though, is to ensure the outer fetch is
+  // not completely blocked until the service worker body is closed.
+  assert_equals(decoder.decode(chunk.value), 'partial-stream-content',
+                'the chunk provided by the service worker should be passed to ' +
+                'the intercepted fetch');
+
+  reg.active.postMessage('done');
+
+  await reader.closed;
+
+  }, 'respondWith() streams data to an intercepted fetch()');
+</script>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js b/testing/web-platform/tests/service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/fetch-event-respond-with-partial-stream-worker.js
@@ -0,0 +1,28 @@
+let waitUntilResolve;
+
+let bodyController;
+
+self.addEventListener('message', evt => {
+  if (evt.data === 'done') {
+    bodyController.close();
+    waitUntilResolve();
+  }
+});
+
+self.addEventListener('fetch', evt => {
+  if (!evt.request.url.includes('partial-stream.txt')) {
+    return;
+  }
+
+  evt.waitUntil(new Promise(resolve => waitUntilResolve = resolve));
+
+  let body = new ReadableStream({
+    start: controller => {
+      let encoder = new TextEncoder();
+      controller.enqueue(encoder.encode('partial-stream-content'));
+      bodyController = controller;
+    },
+  });
+
+  evt.respondWith(new Response(body));
+});
