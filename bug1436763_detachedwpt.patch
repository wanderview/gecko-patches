# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  3ee38289dac8838fe848f7234d75f3cef5d3dbc7
Bug 1436763 Fix detached-context.https.html to not timeout due to promise reaction callbacks not firing for detached globals. r=catalinb

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -545676,17 +545676,17 @@
    "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "support"
   ],
   "html/browsers/origin/cross-origin-objects/cross-origin-objects-on-new-window.html": [
    "604c6ee2bd78187a600dd28e03b60caf89580cfe",
    "testharness"
   ],
   "html/browsers/origin/cross-origin-objects/cross-origin-objects.html": [
-   "8fe0ecd10bcc148d1e49668025e4515b70540f89",
+   "5a5a86a7f989232a78a89e07e5678a1eeb8d4d6d",
    "testharness"
   ],
   "html/browsers/origin/cross-origin-objects/frame-with-then.html": [
    "9b840a201cb4577466b018b254ed045dbae15fe2",
    "support"
   ],
   "html/browsers/origin/cross-origin-objects/frame.html": [
    "5a1cb46a66f64b3f2631f077f872a6bf9b1d47c8",
@@ -583024,17 +583024,17 @@
    "9d1971d9b5dcb52a14a0d2313065e27766c0489a",
    "testharness"
   ],
   "service-workers/service-worker/activation-after-registration.https.html": [
    "913c58ba58de077b82d0ec9cc21258610b26fe97",
    "testharness"
   ],
   "service-workers/service-worker/activation.https.html": [
-   "cdd7cd200ff4ec3df61c257305953b3a1f369ab8",
+   "b7a9ca969b4122f1b9adc973c60044a6ab2a2a95",
    "testharness"
   ],
   "service-workers/service-worker/active.https.html": [
    "974fc8372db8f06f87919d35be48f922166d6652",
    "testharness"
   ],
   "service-workers/service-worker/appcache-ordering-main.https.html": [
    "a71f51cde17f9d209750877dfbe1bacd26412ab3",
@@ -583120,17 +583120,17 @@
    "58f111365f21648036d4dc503e6c1cc5aed399b7",
    "testharness"
   ],
   "service-workers/service-worker/controller-on-reload.https.html": [
    "8402c159967bb6e91903adc52e7d68c8d2443a72",
    "testharness"
   ],
   "service-workers/service-worker/detached-context.https.html": [
-   "c7645323ba0753f35beaef90836631ca16f64d3a",
+   "a4e96edc51927eb29873b0c97a7232f71ae43378",
    "testharness"
   ],
   "service-workers/service-worker/extendable-event-async-waituntil.https.html": [
    "d69e6d84a24ec77077cd1264c2946c578d379fd5",
    "testharness"
   ],
   "service-workers/service-worker/extendable-event-waituntil.https.html": [
    "401235c18e1594c7248b22eb6881d54801de9809",
@@ -584504,17 +584504,17 @@
    "fa547a180b73a5422d52c1702c9d1e43b1083f9c",
    "support"
   ],
   "service-workers/service-worker/resources/success.py": [
    "628bc36bef749e1a2ffda104f71a17acee69b13b",
    "support"
   ],
   "service-workers/service-worker/resources/test-helpers.sub.js": [
-   "55acaa1edd73a39a834e1a1ee0952f47a03e3c78",
+   "fee1648c02422cd2607b008b9a1ef0834385c69c",
    "support"
   ],
   "service-workers/service-worker/resources/testharness-helpers.js": [
    "15f29256ea90b9c4f91411e570d5dd1979ff73b2",
    "support"
   ],
   "service-workers/service-worker/resources/unregister-controller-page.html": [
    "feae7f538da58d45e38f6f26da5ce6af0c91857f",
@@ -592244,29 +592244,29 @@
    "d589b53f0096893600e696b43ec19ca84e5ee2ab",
    "wdspec"
   ],
   "webdriver/tests/actions/key_shortcuts.py": [
    "dbe27dd0b1625169fc8cc2055f8fb49d5a4a78d2",
    "wdspec"
   ],
   "webdriver/tests/actions/modifier_click.py": [
-   "56df38086ef05cd8bff1437038efb598ab63f1e3",
+   "88a384182fdd9df1515b9d8cfda8f56aed138ec7",
    "wdspec"
   ],
   "webdriver/tests/actions/mouse.py": [
-   "2fb4c47335f144a2dd6f16db4c20239116f20fed",
+   "edad7693fcd01b418821942edb870191db64ea41",
    "wdspec"
   ],
   "webdriver/tests/actions/mouse_dblclick.py": [
-   "932b053eef5e052d53ab2007540428d68b758ad4",
+   "f6afcb8c0fa017d58a9fcdd3cc474e0c8fd52db5",
    "wdspec"
   ],
   "webdriver/tests/actions/pointer_origin.py": [
-   "da2a9f21018582c8cd52d206d172841f71fd19f3",
+   "a9a99d58daec7719ee53ed758f566ccceb582f65",
    "wdspec"
   ],
   "webdriver/tests/actions/sequence.py": [
    "d43caf0f8607a76c3baed7806664b686bde21fda",
    "wdspec"
   ],
   "webdriver/tests/actions/special_keys.py": [
    "64eb2401664b71d68f7b53e236a947eec6d651cc",
@@ -592276,25 +592276,25 @@
    "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "support"
   ],
   "webdriver/tests/actions/support/keys.py": [
    "528ab8473914c14f9671d89b8a888d30162714ec",
    "support"
   ],
   "webdriver/tests/actions/support/mouse.py": [
-   "208a1c4fbc0d5c542d17de7f6474d477ce1feb45",
+   "bc7da107e5b897105dfa7405aa57cba7355854dc",
    "support"
   ],
   "webdriver/tests/actions/support/refine.py": [
    "0d244bffe67ef57be68aad99f1cbc7440ff80e27",
    "support"
   ],
   "webdriver/tests/actions/support/test_actions_wdspec.html": [
-   "34f99c46ac9c52e5902477c26a3d16a89a29235a",
+   "95203777fcc012ab64465287737a89a4ba2c31dc",
    "support"
   ],
   "webdriver/tests/conftest.py": [
    "c812269d034c9ca1b8c4f136dd5d0cea52f4d0f0",
    "support"
   ],
   "webdriver/tests/contexts/json_serialize_windowproxy.py": [
    "d29c82c48b3bd1e2b07c40798a774eb77d6178a5",
diff --git a/testing/web-platform/tests/service-workers/service-worker/activation.https.html b/testing/web-platform/tests/service-workers/service-worker/activation.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/activation.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/activation.https.html
@@ -1,34 +1,16 @@
 <!DOCTYPE html>
 <meta charset="utf-8">
 <title>service worker: activation</title>
 <script src="/resources/testharness.js"></script>
 <script src="/resources/testharnessreport.js"></script>
 <script src="resources/test-helpers.sub.js"></script>
 <body>
 <script>
-// Registers, waits for activation, then unregisters on a dummy scope.
-//
-// This helper can be used in tests that assert that activation doesn't happen.
-// It would not be sufficient to check the .waiting/.active properties once,
-// since activation could be scheduled and just hasn't happened yet. Since this
-// helper shows that activation of another registration completed, we can be
-// sure that activation really will not happen.
-function wait_for_activation_on_dummy_scope(t) {
-  var dummy_scope = 'resources/there/is/no/there/there';
-  var registration;
-  return navigator.serviceWorker.register('resources/empty-worker.js',
-      { scope: dummy_scope })
-    .then(r => {
-        registration = r;
-        return wait_for_state(t, registration.installing, 'activated');
-      })
-    .then(() => registration.unregister());
-}
 // Returns {registration, iframe}, where |registration| has an active and
 // waiting worker. The active worker controls |iframe| and has an inflight
 // message event that can be finished by calling
 // |registration.active.postMessage('go')|.
 function setup_activation_test(t, scope, worker_url) {
   var registration;
   var iframe;
   return navigator.serviceWorker.getRegistration(scope)
diff --git a/testing/web-platform/tests/service-workers/service-worker/detached-context.https.html b/testing/web-platform/tests/service-workers/service-worker/detached-context.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/detached-context.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/detached-context.https.html
@@ -11,16 +11,17 @@
 // spec. See https://github.com/w3c/ServiceWorker/issues/1221
 
 promise_test(t => {
     const url = 'resources/blank.html';
     const scope_for_iframe = 'removed-registration'
     const scope_for_main = 'resources/' + scope_for_iframe;
     const script = 'resources/empty-worker.js';
     let frame;
+    let resolvedCount = 0;
 
     return service_worker_unregister(t, scope_for_main)
       .then(() => {
           return with_iframe(url);
         })
       .then(f => {
           frame = f;
           return navigator.serviceWorker.register(script,
@@ -36,19 +37,33 @@ promise_test(t => {
         })
       .then(r => {
           frame.remove();
           assert_equals(r.installing, null);
           assert_equals(r.waiting, null);
           assert_equals(r.active.state, 'activated');
           assert_equals(r.scope, normalizeURL(scope_for_main));
           r.onupdatefound = () => { /* empty */ };
-          return Promise.all([
-              promise_rejects(t, 'InvalidStateError', r.unregister()),
-              promise_rejects(t, 'InvalidStateError', r.update())]);
+
+          // We want to verify that unregister() and update() do not
+          // resolve on a detached registration.  We can't check for
+          // an explicit rejection, though, because not all browsers
+          // fire rejection callbacks on detached promises.  Instead
+          // we wait for a dummy scope to install, activate, and
+          // unregister before declaring that the promises did not
+          // resolve.
+          r.unregister().then(() => resolvedCount += 1,
+                              () => {});
+          r.update().then(() => resolvedCount += 1,
+                          () => {});
+          return wait_for_activation_on_dummy_scope(t);
+        })
+      .then(() => {
+          assert_equals(resolvedCount, 0,
+                        'methods called on a detached registration should not resolve');
         })
   }, 'accessing a ServiceWorkerRegistration from a removed iframe');
 
 promise_test(t => {
     const script = 'resources/empty-worker.js';
     const scope = 'resources/scope/serviceworker-from-detached';
 
     return service_worker_unregister_and_register(t, script, scope)
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/test-helpers.sub.js b/testing/web-platform/tests/service-workers/service-worker/resources/test-helpers.sub.js
--- a/testing/web-platform/tests/service-workers/service-worker/resources/test-helpers.sub.js
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/test-helpers.sub.js
@@ -252,8 +252,22 @@ function with_sandboxed_iframe(url, sand
   return new Promise(function(resolve) {
       var frame = document.createElement('iframe');
       frame.sandbox = sandbox;
       frame.src = url;
       frame.onload = function() { resolve(frame); };
       document.body.appendChild(frame);
     });
 }
+
+// Registers, waits for activation, then unregisters on a dummy scope.
+//
+// This can be used to wait for a period of time needed to register,
+// activate, and then unregister a service worker.  When checking that
+// certain behavior does *NOT* happen, this is preferable to using an
+// arbitrary delay.
+async function wait_for_activation_on_dummy_scope(t) {
+  const script = 'resources/empty-worker.js';
+  const scope = 'resources/there/is/no/there/there?' + Date.now();
+  let registration = await navigator.serviceWorker.register(script, { scope });
+  await wait_for_state(t, registration.installing, 'activated');
+  await registration.unregister();
+}
