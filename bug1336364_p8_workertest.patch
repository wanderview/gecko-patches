# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  9e29d5a4a2c83da0b740f4f1476bdfb66880c1e6
Bug 1336364 P8 Expand test_third_party_iframes.html to verify worker scripts are intercepted. r=asuth

diff --git a/dom/workers/test/serviceworkers/mochitest.ini b/dom/workers/test/serviceworkers/mochitest.ini
--- a/dom/workers/test/serviceworkers/mochitest.ini
+++ b/dom/workers/test/serviceworkers/mochitest.ini
@@ -175,16 +175,17 @@ support-files =
   strict_mode_warning.js
   skip_waiting_installed_worker.js
   skip_waiting_scope/index.html
   thirdparty/iframe1.html
   thirdparty/iframe2.html
   thirdparty/register.html
   thirdparty/unregister.html
   thirdparty/sw.js
+  thirdparty/worker.js
   register_https.html
   gzip_redirect_worker.js
   sw_clients/navigator.html
   eval_worker.js
   test_eval_allowed.html^headers^
   opaque_intercept_worker.js
   notify_loaded.js
   test_request_context.js
diff --git a/dom/workers/test/serviceworkers/test_third_party_iframes.html b/dom/workers/test/serviceworkers/test_third_party_iframes.html
--- a/dom/workers/test/serviceworkers/test_third_party_iframes.html
+++ b/dom/workers/test/serviceworkers/test_third_party_iframes.html
@@ -91,19 +91,23 @@ function testShouldIntercept(policy, don
     }, {
       status: "registrationdone",
       next: function() {
         iframe.addEventListener("load", testIframeLoaded);
         iframe.src = origin + basePath + "iframe1.html";
       }
     }, {
       status: "networkresponse",
+    }, {
+      status: "worker-networkresponse",
       next: loadThirdPartyIframe
     }, {
       status: "swresponse",
+    }, {
+      status: "worker-swresponse",
       next: function() {
         iframe.src = thirdPartyOrigin + basePath + "unregister.html";
       }
     }, {
       status: "controlled",
     }, {
       status: "unregistrationdone",
       next: function() {
@@ -124,19 +128,23 @@ function testShouldNotRegister(policy, d
     runTest([{
       status: "registrationfailed",
       next: function() {
         iframe.addEventListener("load", testIframeLoaded);
         iframe.src = origin + basePath + "iframe1.html";
       }
     }, {
       status: "networkresponse",
+    }, {
+      status: "worker-networkresponse",
       next: loadThirdPartyIframe
     }, {
       status: "networkresponse",
+    }, {
+      status: "worker-networkresponse",
       next: function() {
         window.onmessage = null;
         ok(true, "Test finished successfully");
         done();
       }
     }]);
   });
 }
@@ -157,19 +165,23 @@ function testShouldNotIntercept(policy, 
         SpecialPowers.pushPrefEnv({"set": [
             ["network.cookie.cookieBehavior", policy],
           ]}, function() {
             iframe.src = origin + basePath + "iframe1.html";
           });
       }
     }, {
       status: "networkresponse",
+    }, {
+      status: "worker-networkresponse",
       next: loadThirdPartyIframe
     }, {
       status: "networkresponse",
+    }, {
+      status: "worker-networkresponse",
       next: function() {
         iframe.src = thirdPartyOrigin + basePath + "unregister.html";
       }
     }, {
       status: "uncontrolled",
     }, {
       status: "getregistrationfailed",
       next: function() {
diff --git a/dom/workers/test/serviceworkers/thirdparty/iframe1.html b/dom/workers/test/serviceworkers/thirdparty/iframe1.html
--- a/dom/workers/test/serviceworkers/thirdparty/iframe1.html
+++ b/dom/workers/test/serviceworkers/thirdparty/iframe1.html
@@ -12,16 +12,18 @@
       let message = eval(event.data);
 
       dump("got message " + JSON.stringify(message) + "\n");
       if (message.source == "parent") {
         document.getElementById("iframe2").src = message.href;
       }
       else if (message.source == "iframe") {
         parent.postMessage(event.data, "*");
+      } else if (message.source == "worker") {
+        parent.postMessage(event.data, "*");
       }
     }
   </script>
 
 </head>
 
 <body onload="window.addEventListener('message', messageListener, false);">
   <iframe id="iframe2"></iframe>
diff --git a/dom/workers/test/serviceworkers/thirdparty/iframe2.html b/dom/workers/test/serviceworkers/thirdparty/iframe2.html
--- a/dom/workers/test/serviceworkers/thirdparty/iframe2.html
+++ b/dom/workers/test/serviceworkers/thirdparty/iframe2.html
@@ -1,7 +1,14 @@
 <!DOCTYPE html>
 <script>
   window.parent.postMessage({
     source: "iframe",
     status: "networkresponse"
   }, "*");
+  var w = new Worker('worker.js');
+  w.onmessage = function(evt) {
+    window.parent.postMessage({
+      source: 'worker',
+      status: evt.data,
+    }, '*');
+  };
 </script>
diff --git a/dom/workers/test/serviceworkers/thirdparty/sw.js b/dom/workers/test/serviceworkers/thirdparty/sw.js
--- a/dom/workers/test/serviceworkers/thirdparty/sw.js
+++ b/dom/workers/test/serviceworkers/thirdparty/sw.js
@@ -1,14 +1,29 @@
 self.addEventListener("fetch", function(event) {
   dump("fetch " + event.request.url + "\n");
-  if (event.request.url.indexOf("iframe2.html") >= 0) {
+  if (event.request.url.includes("iframe2.html")) {
     var body =
       "<script>" +
         "window.parent.postMessage({" +
           "source: 'iframe', status: 'swresponse'" +
         "}, '*');" +
+        "var w = new Worker('worker.js');" +
+        "w.onmessage = function(evt) {" +
+          "window.parent.postMessage({" +
+            "source: 'worker'," +
+            "status: evt.data," +
+          "}, '*');" +
+      "};" +
       "</script>";
     event.respondWith(new Response(body, {
       headers: {'Content-Type': 'text/html'}
     }));
+    return;
+  }
+  if (event.request.url.includes("worker.js")) {
+    var body = "self.postMessage('worker-swresponse');";
+    event.respondWith(new Response(body, {
+      headers: {'Content-Type': 'application/javascript'}
+    }));
+    return;
   }
 });
diff --git a/dom/workers/test/serviceworkers/thirdparty/worker.js b/dom/workers/test/serviceworkers/thirdparty/worker.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/serviceworkers/thirdparty/worker.js
@@ -0,0 +1,1 @@
+self.postMessage('worker-networkresponse');
