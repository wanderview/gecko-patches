# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  11f902e26694243a0aef8f578179a3cc29bcf2f7

diff --git a/js/src/builtin/ReadableStream.cpp b/js/src/builtin/ReadableStream.cpp
--- a/js/src/builtin/ReadableStream.cpp
+++ b/js/src/builtin/ReadableStream.cpp
@@ -70,30 +70,37 @@ ReadableStreamConstructor(JSContext* cx,
     RootedValue ctorFun(cx);
     if (!GlobalObject::getIntrinsicValue(cx, cx->global(), cx->runtime()->commonNames->ReadableStream,
                                          &ctorFun))
     {
         return false;
     }
     MOZ_ASSERT(ctorFun.toObject().is<JSFunction>());
 
-    InvokeArgs invokeArgs(cx);
-    if (!invokeArgs.init(args.length() >= 2 ? 2 : args.length()))
-        return false;
-    invokeArgs.setCallee(ctorFun);
-    invokeArgs.setThis(ObjectValue(*readableStream));
+    if (!ctorFun.toObject().as<JSFunction>().isConstructor())
+      ctorFun.toObject().as<JSFunction>().setIsConstructor();
+
+    ConstructArgs constructArgs(cx);
+    if (!constructArgs.init(args.length()))
+      return false;
+
     if (args.length() >= 1)
-      invokeArgs[0].set(args.get(0));
+      constructArgs[0].set(args.get(0));
     if (args.length() >= 2)
-      invokeArgs[1].set(args.get(1));
+      constructArgs[1].set(args.get(1));
 
-    if (!Call(cx, ctorFun, readableStream, invokeArgs, args.rval()))
+    fprintf(stderr, "### ### ReadableStreamConstructor() calling Call()\n");
+
+    RootedObject res(cx);
+    if (!Construct(cx, ctorFun, constructArgs, ctorFun, &res))
         return false;
 
-    args.rval().setObject(*readableStream);
+    fprintf(stderr, "### ### ReadableStreamConstructor() got true!\n");
+
+    args.rval().setObject(*res);
     return true;
 }
 
 bool
 ReadableStreamControllerConstructor(JSContext* cx, unsigned argc, Value* vp)
 {
   CallArgs args = CallArgsFromVp(argc, vp);
 
diff --git a/js/src/builtin/ReadableStream.js b/js/src/builtin/ReadableStream.js
--- a/js/src/builtin/ReadableStream.js
+++ b/js/src/builtin/ReadableStream.js
@@ -1,14 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Streams spec, 3.2.3.
 function ReadableStream(underlyingSource, {size, highWaterMark} = {}) {
+  dump('### ### ReadableStream() js!\n');
   if (!IsObject(this) || !IsReadableStream(this)) {
     ThrowTypeError(JSMSG_INCOMPATIBLE_PROTO, "ReadableStream", "ctor", typeof this);
   }
   if (underlyingSource === undefined) {
     underlyingSource = {};
   }
   if (highWaterMark === undefined) {
     highWaterMark = 1;
