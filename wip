# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  133b89da57e1e4bb431a53c0284476d38e1e0cb2

diff --git a/js/src/builtin/ReadableStream.js b/js/src/builtin/ReadableStream.js
--- a/js/src/builtin/ReadableStream.js
+++ b/js/src/builtin/ReadableStream.js
@@ -386,24 +386,28 @@ function EnqueueInReadableStream(stream,
 
 // Streams spec, 3.5.5. ErrorReadableStream ( stream, e )
 function ErrorReadableStream(stream, e) {
   assert(UnsafeGetInt32FromReservedSlot(stream, READABLESTREAM_STATE_SLOT) === READABLESTREAM_READABLE_STATE, "stream@[[state]] is \"readable\"");
   UnsafeSetReservedSlot(stream, READABLESTREAM_QUEUE_SLOT, new List());
   UnsafeSetReservedSlot(stream, READABLESTREAM_STORED_ERROR_SLOT, e);
   UnsafeSetReservedSlot(stream, READABLESTREAM_STATE_SLOT, READABLESTREAM_ERRORED_STATE);
   let reader = UnsafeGetReservedSlot(stream, READABLESTREAM_READER_SLOT);
-  if (reader === undefined) {
+  if (reader === undefined || !IsObject(reader) || !IsReadableStreamReader(reader)) {
     return;
   }
+  DumpMessage('### ### before readRequests');
   readRequests = UnsafeGetObjectFromReservedSlot(reader, READABLESTREAMREADER_READ_REQUESTS_SLOT);
+  DumpMessage('### ### after readRequests');
   for (let i = 0; i < readRequests.length; i++) {
+    DumpMessage('### ### readRequests loop ' + i);
     readRequestDeferred = readRequests[i];
     callFunction(readRequestDeferred.reject, undefined, e);
   }
+  DumpMessage('### ### after readRequests loop');
   UnsafeSetReservedSlot(reader, READABLESTREAMREADER_READ_REQUESTS_SLOT, new List());
   let deferred = UnsafeGetReservedSlot(reader, READABLESTREAMREADER_CLOSED_DEFERRED_SLOT);
   UnsafeSetReservedSlot(reader, READABLESTREAMREADER_CLOSED_DEFERRED_SLOT, undefined);
   callFunction(deferred.reject, undefined, e);
 }
 
 // Streams spec, 3.5.6. FinishClosingReadableStream ( stream )
 function FinishClosingReadableStream(stream) {
diff --git a/js/src/vm/GlobalObject.h b/js/src/vm/GlobalObject.h
--- a/js/src/vm/GlobalObject.h
+++ b/js/src/vm/GlobalObject.h
@@ -686,17 +686,17 @@ class GlobalObject : public NativeObject
     }
 
     static bool addIntrinsicValue(JSContext* cx, Handle<GlobalObject*> global,
                                   HandlePropertyName name, HandleValue value);
 
     static bool setIntrinsicValue(JSContext* cx, Handle<GlobalObject*> global,
                                   HandlePropertyName name, HandleValue value)
     {
-        //MOZ_ASSERT(cx->runtime()->isSelfHostingGlobal(global));
+        MOZ_ASSERT(cx->runtime()->isSelfHostingGlobal(global));
         RootedObject holder(cx, GlobalObject::getIntrinsicsHolder(cx, global));
         if (!holder)
             return false;
         return SetProperty(cx, holder, name, value);
     }
 
     static bool getSelfHostedFunction(JSContext* cx, Handle<GlobalObject*> global,
                                       HandlePropertyName selfHostedName, HandleAtom name,
diff --git a/testing/web-platform/tests/streams/readable-streams/bad-underlying-sources.js b/testing/web-platform/tests/streams/readable-streams/bad-underlying-sources.js
--- a/testing/web-platform/tests/streams/readable-streams/bad-underlying-sources.js
+++ b/testing/web-platform/tests/streams/readable-streams/bad-underlying-sources.js
@@ -1,15 +1,16 @@
 'use strict';
 
 if (self.importScripts) {
   self.importScripts('/resources/testharness.js');
 }
 
 
+/*
 test(() => {
 
   const theError = new Error('a unique string');
 
   assert_throws(theError, () => {
     new ReadableStream({
       get start() {
         throw theError;
@@ -28,32 +29,34 @@ test(() => {
     new ReadableStream({
       start() {
         throw theError;
       }
     });
   }, 'constructing the stream should re-throw the error');
 
 }, 'Underlying source start: throwing method');
+*/
 
 
 promise_test(t => {
 
   const theError = new Error('a unique string');
   const rs = new ReadableStream({
     get pull() {
       throw theError;
     }
   });
 
   return promise_rejects(t, theError, rs.getReader().closed);
 
 }, 'Underlying source: throwing pull getter (initial pull)');
 
 
+/*
 promise_test(t => {
 
   const theError = new Error('a unique string');
   const rs = new ReadableStream({
     pull() {
       throw theError;
     }
   });
@@ -374,10 +377,11 @@ promise_test(() => {
 
   return closed.catch(e => {
     assert_true(startCalled);
     assert_equals(e, firstError, 'closed should reject with the first error');
   });
 
 }, 'Underlying source: calling error and returning a rejected promise from pull should cause the stream to error ' +
    'with the first error');
+*/
 
 done();
