# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  6764bc656c1d146962d53710d734c2ac87c2306f

diff --git a/dom/workers/test/serviceworkers/claim_while_installing/import.js b/dom/workers/test/serviceworkers/claim_while_installing/import.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/serviceworkers/claim_while_installing/import.js
@@ -0,0 +1,31 @@
+var activated = false;
+
+addEventListener('install', function(evt) {
+  dump('### ### [' + version + '] install event\n');
+  evt.waitUntil(new Promise(function(resolve) {
+    setTimeout(resolve, 2000);
+  }));
+});
+
+addEventListener('activate', function(evt) {
+  dump('### ### [' + version + '] activate event\n');
+  activated = true;
+});
+
+addEventListener('fetch', function(evt) {
+  dump('### ### [' + version + '] fetch event\n');
+  evt.respondWith(new Response(''));
+});
+
+self.registration.addEventListener('updatefound', function(evt) {
+  dump('### ### [' + version + '] updatefound event\n');
+  if (activated) {
+    evt.waitUntil(new Promise(function(resolve) {
+      setTimeout(function() {
+        dump('### ### [' + version + '] calling clients.claim()\n');
+        clients.claim();
+        resolve();
+      }, 1000);
+    }));
+  }
+});
diff --git a/dom/workers/test/serviceworkers/claim_while_installing/sw.sjs b/dom/workers/test/serviceworkers/claim_while_installing/sw.sjs
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/serviceworkers/claim_while_installing/sw.sjs
@@ -0,0 +1,5 @@
+function handleRequest(request, response) {
+  response.setHeader("Content-Type", "application/javascript", false);
+  response.setHeader('Cache-Control', 'max-age=0');
+  response.write('var version = ' + Date.now() + '; importScripts("import.js");');
+}
diff --git a/dom/workers/test/serviceworkers/mochitest.ini b/dom/workers/test/serviceworkers/mochitest.ini
--- a/dom/workers/test/serviceworkers/mochitest.ini
+++ b/dom/workers/test/serviceworkers/mochitest.ini
@@ -193,16 +193,17 @@ support-files =
   redirect_post.sjs
   xslt_worker.js
   xslt/*
   unresolved_fetch_worker.js
   header_checker.sjs
   openWindow_worker.js
   redirect.sjs
   open_window/client.html
+  claim_while_installing/*
 
 [test_app_protocol.html]
 skip-if = release_build || (e10s && debug && os == 'win')
 [test_bug1151916.html]
 skip-if = e10s && debug && os == 'win'
 [test_claim.html]
 skip-if = e10s && debug && os == 'win'
 [test_claim_fetch.html]
@@ -359,8 +360,9 @@ skip-if = e10s && debug && os == 'win'
 [test_csp_upgrade-insecure_intercept.html]
 [test_serviceworker_header.html]
 [test_openWindow.html]
 skip-if = toolkit == "android" || toolkit == "gonk" || (e10s && debug && os == 'win')
 [test_imagecache.html]
 [test_imagecache_max_age.html]
 [test_importscript_mixedcontent.html]
 tags = mcb
+[test_claim_while_installing.html]
diff --git a/dom/workers/test/serviceworkers/test_claim_while_installing.html b/dom/workers/test/serviceworkers/test_claim_while_installing.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/serviceworkers/test_claim_while_installing.html
@@ -0,0 +1,82 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug 1130684 - Test service worker clients.claim oninstall</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none"></div>
+<pre id="test"></pre>
+<script class="testbody" type="text/javascript">
+  var registration;
+  var frame;
+
+  function register() {
+    return navigator.serviceWorker.register("claim_while_installing/sw.sjs")
+      .then((swr) => registration = swr);
+  }
+
+  function waitForActivated() {
+    var worker = registration.active || registration.waiting || registration.installing;
+    return new Promise(function(resolve) {
+      if (worker.state === 'activated') {
+        return resolve();
+      }
+      worker.addEventListener('statechange', function onStateChange(evt) {
+        dump('### ### statechange to ' + worker.state + '\n');
+        if (worker.state === 'activated') {
+          worker.removeEventListener('statechange', onStateChange);
+          resolve();
+        }
+      });
+    });
+  }
+
+  function withFrame() {
+    return new Promise(function(resolve) {
+      var f = document.createElement('iframe');
+      f.src = 'claim_while_installing/dummy.html';
+      f.onload = function() { resolve(f); };
+      document.body.appendChild(f);
+    });
+  }
+
+  function unregister() {
+    return registration.unregister().then(function(result) {
+      ok(result, "Unregister should return true.");
+    });
+  }
+
+  function runTest() {
+    register()
+      .then(waitForActivated)
+      .then(withFrame)
+      .then(function(f) {
+        frame = f;
+      });
+      /*
+      .then(unregister)
+      .catch(function(e) {
+        ok(false, "Some test failed with error " + e);
+      }).then(SimpleTest.finish);
+      */
+  }
+
+  SimpleTest.waitForExplicitFinish();
+  SpecialPowers.pushPrefEnv({"set": [
+    ["dom.serviceWorkers.exemptFromPerDomainMax", true],
+    ["dom.serviceWorkers.interception.enabled", true],
+    ["dom.serviceWorkers.enabled", true],
+    ["dom.serviceWorkers.testing.enabled", true]
+  ]}, runTest);
+</script>
+</pre>
+</body>
+</html>
+
