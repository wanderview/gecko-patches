# HG changeset patch
# Parent c65f9cbbe632cbf2bb003d44dd5d88c384685a1c
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 032 assorted small issues I missed in previous patches


diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -35,17 +35,21 @@ DBSchema::CreateSchema(mozIStorageConnec
   nsAutoCString pragmas(
 #if defined(MOZ_WIDGET_ANDROID) || defined(MOZ_WIDGET_GONK)
     // Switch the journaling mode to TRUNCATE to avoid changing the directory
     // structure at the conclusion of every transaction for devices with slower
     // file systems.
     "PRAGMA journal_mode = TRUNCATE; "
 #endif
     "PRAGMA foreign_keys = ON; "
-    "PRAGMA encoding = 'UTF-16'; "
+
+    // Note, the default encoding of UTF-8 is preferred.  mozStorage does all
+    // the work necessary to convert UTF-16 nsString values for us.  We don't
+    // need ordering and the binary equality operations are correct.  So, do
+    // NOT set PRAGMA encoding to UTF-16.
   );
 
   nsresult rv = aConn->ExecuteSimpleSQL(pragmas);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   int32_t schemaVersion;
   rv = aConn->GetSchemaVersion(&schemaVersion);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
diff --git a/dom/cache/FileUtils.cpp b/dom/cache/FileUtils.cpp
--- a/dom/cache/FileUtils.cpp
+++ b/dom/cache/FileUtils.cpp
@@ -229,20 +229,25 @@ FileUtils::BodyDeleteFiles(nsIFile* aBas
                       getter_AddRefs(finalFile));
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
     rv = finalFile->Remove(false /* recursive */);
     if (rv == NS_ERROR_FILE_NOT_FOUND) {
       NS_WARNING("Cache body file already deleted. Ignoring.");
       continue;
     }
+#if DEBUG
+    // Only treat file deletion as a hard failure in DEBUG builds.  Users
+    // can unfortunately hit this on windows if anti-virus is scanning files,
+    // etc.
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+#endif
   }
 
-  return rv;
+  return NS_OK;
 }
 
 // static
 nsresult
 FileUtils::BodyIdToFile(nsIFile* aBaseDir, const nsID& aId,
                         BodyFileType aType, nsIFile** aBodyFileOut)
 {
   MOZ_ASSERT(aBaseDir);
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -231,18 +231,16 @@ private:
     if (!sFactory) {
       // We cannot use ClearOnShutdown() here because we're not on the main
       // thread.  Instead, we delete sFactory in Factory::Remove() after the
       // last manager is removed.  ShutdownObserver ensures this happens
       // before shutdown.
       sFactory = new Factory();
     }
 
-    MOZ_ASSERT(sFactory);
-
     // Never return sFactory to code outside Factory.  We need to delete it
     // out from under ourselves just before we return from Remove().  This
     // would be (even more) dangerous if other code had a pointer to the
     // factory itself.
   }
 
   // Singleton created on demand and deleted when last Manager is cleared
   // in Remove().
diff --git a/dom/cache/ManagerId.cpp b/dom/cache/ManagerId.cpp
--- a/dom/cache/ManagerId.cpp
+++ b/dom/cache/ManagerId.cpp
@@ -78,16 +78,14 @@ ManagerId::~ManagerId()
 
   // Otherwise we need to proxy to main thread to do the release
 
   // The PBackground worker thread shouldn't be running after the main thread
   // is stopped.  So main thread is guaranteed to exist here.
   nsCOMPtr<nsIThread> mainThread = do_GetMainThread();
   MOZ_ASSERT(mainThread);
 
-  nsIPrincipal* principal;
-  mPrincipal.forget(&principal);
-  NS_ProxyRelease(mainThread, principal);
+  NS_ProxyRelease(mainThread, mPrincipal.forget().take());
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/PrincipalVerifier.cpp b/dom/cache/PrincipalVerifier.cpp
--- a/dom/cache/PrincipalVerifier.cpp
+++ b/dom/cache/PrincipalVerifier.cpp
@@ -87,19 +87,17 @@ PrincipalVerifier::~PrincipalVerifier()
 
   // Otherwise we need to proxy to main thread to do the release
 
   // The PBackground worker thread shouldn't be running after the main thread
   // is stopped.  So main thread is guaranteed to exist here.
   nsCOMPtr<nsIThread> mainThread = do_GetMainThread();
   MOZ_ASSERT(mainThread);
 
-  ContentParent* actor;
-  mActor.forget(&actor);
-  NS_ProxyRelease(mainThread, ToSupports(actor));
+  NS_ProxyRelease(mainThread, ToSupports(mActor.forget().take()));
 }
 
 NS_IMETHODIMP
 PrincipalVerifier::Run()
 {
   // Executed twice.  First, on the main thread and then back on the
   // originating thread.
 
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -35,16 +35,17 @@ using mozilla::ErrorResult;
 // they require going to the main thread.
 static void
 ProcessURL(nsAString& aUrl, bool* aSchemeValidOut,
            nsAString* aUrlWithoutQueryOut, ErrorResult& aRv)
 {
   NS_ConvertUTF16toUTF8 flatURL(aUrl);
   const char* url = flatURL.get();
 
+  // off the main thread URL parsing using nsStdURLParser.
   nsCOMPtr<nsIURLParser> urlParser = new nsStdURLParser();
 
   uint32_t pathPos;
   int32_t pathLen;
   uint32_t schemePos;
   int32_t schemeLen;
   nsresult rv = urlParser->ParseURL(url, flatURL.Length(),
                                     &schemePos, &schemeLen,
