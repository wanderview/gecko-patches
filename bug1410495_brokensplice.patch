# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  0d1e55d87931fe70ec1d007e886bcd58015ff770
Bug 1410495 Don't use splice(2) in OS.File.Copy() if _BROKEN_SPLICE is defined during build. r=ted

diff --git a/dom/system/OSFileConstants.cpp b/dom/system/OSFileConstants.cpp
--- a/dom/system/OSFileConstants.cpp
+++ b/dom/system/OSFileConstants.cpp
@@ -721,16 +721,20 @@ static const dom::ConstantSpec gLibcProp
    { "_DARWIN_FEATURE_64_BIT_INODE", JS::Int32Value(1) },
 #endif // defined(_DARWIN_FEATURE_64_BIT_INODE)
 
   // Similar feature for Linux
 #if defined(_STAT_VER)
   INT_CONSTANT(_STAT_VER),
 #endif // defined(_STAT_VER)
 
+#if defined(_BROKEN_SPLICE)
+   { "_BROKEN_SPLICE", JS::Int32Value(1) },
+#endif
+
   PROP_END
 };
 
 
 #if defined(XP_WIN)
 /**
  * The properties defined in windows.h.
  *
diff --git a/toolkit/components/osfile/modules/osfile_unix_back.jsm b/toolkit/components/osfile/modules/osfile_unix_back.jsm
--- a/toolkit/components/osfile/modules/osfile_unix_back.jsm
+++ b/toolkit/components/osfile/modules/osfile_unix_back.jsm
@@ -456,22 +456,24 @@
        libc.declareLazyFFI(SysFile, "rename",
                                "rename", ctypes.default_abi,
                     /* return*/ Type.negativeone_or_nothing, Type.path, Type.path);
 
        libc.declareLazyFFI(SysFile, "rmdir",
                                "rmdir", ctypes.default_abi,
                     /* return*/ Type.int, Type.path);
 
-       libc.declareLazyFFI(SysFile, "splice",
-                               "splice", ctypes.default_abi,
-                    /* return*/ Type.long, Type.fd,
-                    /* off_in*/ Type.off_t.in_ptr,
-                    /* fd_out*/ Type.fd,
-                    /* off_out*/Type.off_t.in_ptr, Type.size_t, Type.unsigned_int); // Linux/Android-specific
+       if (!Const._BROKEN_SPLICE) {
+         libc.declareLazyFFI(SysFile, "splice",
+                                 "splice", ctypes.default_abi,
+                      /* return*/ Type.long, Type.fd,
+                      /* off_in*/ Type.off_t.in_ptr,
+                      /* fd_out*/ Type.fd,
+                      /* off_out*/Type.off_t.in_ptr, Type.size_t, Type.unsigned_int); // Linux/Android-specific
+       }
 
        libc.declareLazyFFI(SysFile, "statfs",
                                "statfs", ctypes.default_abi,
                     /* return*/ Type.negativeone_or_nothing, Type.path, Type.statvfs.out_ptr); // Android,B2G
 
        libc.declareLazyFFI(SysFile, "statvfs",
                                "statvfs", ctypes.default_abi,
                     /* return*/ Type.negativeone_or_nothing, Type.path, Type.statvfs.out_ptr); // Other platforms
