# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  db765f1f1cfa874adc8f206492e99996f653cb98
Bug 1397128 P2 Split StreamList::Add() instead separate Add() and SetStream() methods. r=asuth

diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -543,17 +543,18 @@ public:
       return rv;
     }
 
     nsCOMPtr<nsIInputStream> stream;
     rv = BodyOpen(aQuotaInfo, aDBDir, mResponse.mBodyId, getter_AddRefs(stream));
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
     if (NS_WARN_IF(!stream)) { return NS_ERROR_FILE_NOT_FOUND; }
 
-    mStreamList->Add(mResponse.mBodyId, stream);
+    mStreamList->Add(mResponse.mBodyId);
+    mStreamList->SetStream(mResponse.mBodyId, Move(stream));
 
     return rv;
   }
 
   virtual void
   Complete(Listener* aListener, ErrorResult&& aRv) override
   {
     if (!mFoundResponse) {
@@ -609,17 +610,18 @@ public:
       }
 
       nsCOMPtr<nsIInputStream> stream;
       rv = BodyOpen(aQuotaInfo, aDBDir, mSavedResponses[i].mBodyId,
                     getter_AddRefs(stream));
       if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
       if (NS_WARN_IF(!stream)) { return NS_ERROR_FILE_NOT_FOUND; }
 
-      mStreamList->Add(mSavedResponses[i].mBodyId, stream);
+      mStreamList->Add(mSavedResponses[i].mBodyId);
+      mStreamList->SetStream(mSavedResponses[i].mBodyId, Move(stream));
     }
 
     return rv;
   }
 
   virtual void
   Complete(Listener* aListener, ErrorResult&& aRv) override
   {
@@ -1157,17 +1159,18 @@ public:
       }
 
       nsCOMPtr<nsIInputStream> stream;
       rv = BodyOpen(aQuotaInfo, aDBDir, mSavedRequests[i].mBodyId,
                     getter_AddRefs(stream));
       if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
       if (NS_WARN_IF(!stream)) { return NS_ERROR_FILE_NOT_FOUND; }
 
-      mStreamList->Add(mSavedRequests[i].mBodyId, stream);
+      mStreamList->Add(mSavedRequests[i].mBodyId);
+      mStreamList->SetStream(mSavedRequests[i].mBodyId, Move(stream));
     }
 
     return rv;
   }
 
   virtual void
   Complete(Listener* aListener, ErrorResult&& aRv) override
   {
@@ -1221,17 +1224,18 @@ public:
     }
 
     nsCOMPtr<nsIInputStream> stream;
     rv = BodyOpen(aQuotaInfo, aDBDir, mSavedResponse.mBodyId,
                   getter_AddRefs(stream));
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
     if (NS_WARN_IF(!stream)) { return NS_ERROR_FILE_NOT_FOUND; }
 
-    mStreamList->Add(mSavedResponse.mBodyId, stream);
+    mStreamList->Add(mSavedResponse.mBodyId);
+    mStreamList->SetStream(mSavedResponse.mBodyId, Move(stream));
 
     return rv;
   }
 
   virtual void
   Complete(Listener* aListener, ErrorResult&& aRv) override
   {
     if (!mFoundResponse) {
diff --git a/dom/cache/StreamList.cpp b/dom/cache/StreamList.cpp
--- a/dom/cache/StreamList.cpp
+++ b/dom/cache/StreamList.cpp
@@ -65,25 +65,36 @@ StreamList::Activate(CacheId aCacheId)
   mManager->AddStreamList(this);
 
   for (uint32_t i = 0; i < mList.Length(); ++i) {
     mManager->AddRefBodyId(mList[i].mId);
   }
 }
 
 void
-StreamList::Add(const nsID& aId, nsIInputStream* aStream)
+StreamList::Add(const nsID& aId)
 {
   // All streams should be added on IO thread before we set the stream
   // control on the owning IPC thread.
   MOZ_DIAGNOSTIC_ASSERT(!mStreamControl);
+  mList.AppendElement(Entry(aId));
+}
+
+void
+StreamList::SetStream(const nsID& aId, nsCOMPtr<nsIInputStream>&& aStream)
+{
   MOZ_DIAGNOSTIC_ASSERT(aStream);
-  Entry* entry = mList.AppendElement();
-  entry->mId = aId;
-  entry->mStream = aStream;
+  for (uint32_t i = 0; i < mList.Length(); ++i) {
+    if (mList[i].mId == aId) {
+      MOZ_DIAGNOSTIC_ASSERT(!mList[i].mStream);
+      mList[i].mStream = Move(aStream);
+      return;
+    }
+  }
+  MOZ_ASSERT_UNREACHABLE("Add() must be called before SetStream().");
 }
 
 already_AddRefed<nsIInputStream>
 StreamList::Extract(const nsID& aId)
 {
   NS_ASSERT_OWNINGTHREAD(StreamList);
   for (uint32_t i = 0; i < mList.Length(); ++i) {
     if (mList[i].mId == aId) {
diff --git a/dom/cache/StreamList.h b/dom/cache/StreamList.h
--- a/dom/cache/StreamList.h
+++ b/dom/cache/StreamList.h
@@ -26,32 +26,37 @@ class StreamList final : public Context:
 public:
   StreamList(Manager* aManager, Context* aContext);
 
   void SetStreamControl(CacheStreamControlParent* aStreamControl);
   void RemoveStreamControl(CacheStreamControlParent* aStreamControl);
 
   void Activate(CacheId aCacheId);
 
-  void Add(const nsID& aId, nsIInputStream* aStream);
+  void Add(const nsID& aId);
+  void SetStream(const nsID& aId, nsCOMPtr<nsIInputStream>&& aStream);
   already_AddRefed<nsIInputStream> Extract(const nsID& aId);
 
   void NoteClosed(const nsID& aId);
   void NoteClosedAll();
   void Close(const nsID& aId);
   void CloseAll();
 
   // Context::Activity methods
   virtual void Cancel() override;
   virtual bool MatchesCacheId(CacheId aCacheId) const override;
 
 private:
   ~StreamList();
   struct Entry
   {
+    explicit Entry(const nsID& aId)
+      : mId(aId)
+    {}
+
     nsID mId;
     nsCOMPtr<nsIInputStream> mStream;
   };
   RefPtr<Manager> mManager;
   RefPtr<Context> mContext;
   CacheId mCacheId;
   CacheStreamControlParent* mStreamControl;
   nsTArray<Entry> mList;
