# HG changeset patch
# Parent 2ad3d25cb639a35f8aa3fff7e4127a5203e079be
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 030 rebase to latest mozilla-central


diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -77,20 +77,18 @@ using mozilla::dom::workers::WorkerPriva
 NS_IMPL_CYCLE_COLLECTING_ADDREF(mozilla::dom::cache::Cache);
 NS_IMPL_CYCLE_COLLECTING_RELEASE(mozilla::dom::cache::Cache);
 NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Cache, mGlobal, mRequestPromises)
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Cache)
   NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
 NS_INTERFACE_MAP_END
 
-Cache::Cache(nsIGlobalObject* aGlobal, const nsACString& aOrigin,
-             PCacheChild* aActor)
+Cache::Cache(nsIGlobalObject* aGlobal, PCacheChild* aActor)
   : mGlobal(aGlobal)
-  , mOrigin(aOrigin)
   , mActor(static_cast<CacheChild*>(aActor))
 {
   MOZ_ASSERT(mActor);
   mActor->SetListener(this);
 }
 
 already_AddRefed<Promise>
 Cache::Match(const RequestOrUSVString& aRequest,
@@ -464,22 +462,16 @@ Cache::RecvKeysResponse(RequestId aReque
 }
 
 nsIGlobalObject*
 Cache::GetGlobalObject() const
 {
   return mGlobal;
 }
 
-const nsACString&
-Cache::Origin() const
-{
-  return mOrigin;
-}
-
 #ifdef DEBUG
 void
 Cache::AssertOwningThread() const
 {
   NS_ASSERT_OWNINGTHREAD(Cache);
 }
 #endif
 
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -44,18 +44,17 @@ class PCacheResponse;
 class PCacheResponseOrVoid;
 class PCacheStreamControlChild;
 
 class Cache MOZ_FINAL : public nsISupports
                       , public nsWrapperCache
                       , public TypeUtils
 {
 public:
-  Cache(nsIGlobalObject* aGlobal, const nsACString& aOrigin,
-        PCacheChild* aActor);
+  Cache(nsIGlobalObject* aGlobal, PCacheChild* aActor);
 
   // webidl interface methods
   already_AddRefed<Promise>
   Match(const RequestOrUSVString& aRequest, const CacheQueryOptions& aOptions,
         ErrorResult& aRv);
   already_AddRefed<Promise>
   MatchAll(const Optional<RequestOrUSVString>& aRequest,
            const CacheQueryOptions& aOptions, ErrorResult& aRv);
@@ -92,31 +91,29 @@ public:
   void RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
                           bool aSuccess);
   void RecvKeysResponse(RequestId aRequestId, nsresult aRv,
                         const nsTArray<PCacheRequest>& aRequests);
 
   // TypeUtils methods
   virtual nsIGlobalObject*
   GetGlobalObject() const MOZ_OVERRIDE;
-  const nsACString& Origin() const MOZ_OVERRIDE;
 
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
 #endif
 
 private:
   ~Cache();
 
   // TODO: Replace with actor-per-request model during refactor (bug 1110485)
   RequestId AddRequestPromise(Promise* aPromise, ErrorResult& aRv);
   already_AddRefed<Promise> RemoveRequestPromise(RequestId aRequestId);
 
   nsCOMPtr<nsIGlobalObject> mGlobal;
-  const nsCString mOrigin;
   CacheChild* mActor;
   nsTArray<nsRefPtr<Promise>> mRequestPromises;
 
 public:
   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
   NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Cache)
 };
 
diff --git a/dom/cache/CacheChild.cpp b/dom/cache/CacheChild.cpp
--- a/dom/cache/CacheChild.cpp
+++ b/dom/cache/CacheChild.cpp
@@ -61,17 +61,17 @@ CacheChild::RecvMatchResponse(const Requ
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvMatchResponse(requestId, aRv, aResponse);
   return true;
 }
 
 bool
 CacheChild::RecvMatchAllResponse(const RequestId& requestId, const nsresult& aRv,
-                                 const nsTArray<PCacheResponse>& responses)
+                                 nsTArray<PCacheResponse>&& responses)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvMatchAllResponse(requestId, aRv, responses);
   return true;
 }
 
 bool
@@ -99,17 +99,17 @@ CacheChild::RecvDeleteResponse(const Req
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvDeleteResponse(requestId, aRv, result);
   return true;
 }
 
 bool
 CacheChild::RecvKeysResponse(const RequestId& requestId, const nsresult& aRv,
-                             const nsTArray<PCacheRequest>& requests)
+                             nsTArray<PCacheRequest>&& requests)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvKeysResponse(requestId, aRv, requests);
   return true;
 }
 
 } // namespace cache
diff --git a/dom/cache/CacheChild.h b/dom/cache/CacheChild.h
--- a/dom/cache/CacheChild.h
+++ b/dom/cache/CacheChild.h
@@ -32,29 +32,29 @@ public:
   virtual void
   ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
 
   virtual bool
   RecvMatchResponse(const RequestId& requestId, const nsresult& aRv,
                     const PCacheResponseOrVoid& aResponse) MOZ_OVERRIDE;
   virtual bool
   RecvMatchAllResponse(const RequestId& requestId, const nsresult& aRv,
-                       const nsTArray<PCacheResponse>& responses) MOZ_OVERRIDE;
+                       nsTArray<PCacheResponse>&& responses) MOZ_OVERRIDE;
   virtual bool
   RecvAddAllResponse(const RequestId& requestId,
                      const nsresult& aRv) MOZ_OVERRIDE;
   virtual bool
   RecvPutResponse(const RequestId& aRequestId,
                   const nsresult& aRv) MOZ_OVERRIDE;
   virtual bool
   RecvDeleteResponse(const RequestId& requestId, const nsresult& aRv,
                      const bool& result) MOZ_OVERRIDE;
   virtual bool
   RecvKeysResponse(const RequestId& requestId, const nsresult& aRv,
-                   const nsTArray<PCacheRequest>& requests) MOZ_OVERRIDE;
+                   nsTArray<PCacheRequest>&& requests) MOZ_OVERRIDE;
 
 private:
   // Use a weak ref so actor does not hold DOM object alive past content use.
   // The Cache object must call ClearListener() to null this before its
   // destroyed.
   Cache* MOZ_NON_OWNING_REF mListener;
 
   NS_DECL_OWNINGTHREAD
diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -74,17 +74,17 @@ CacheParent::RecvMatchAll(const RequestI
 {
   MOZ_ASSERT(mManager);
   mManager->CacheMatchAll(this, aRequestId, mCacheId, aRequest, aParams);
   return true;
 }
 
 bool
 CacheParent::RecvAddAll(const RequestId& aRequestId,
-                        const nsTArray<PCacheRequest>& aRequests)
+                        nsTArray<PCacheRequest>&& aRequests)
 {
   nsAutoTArray<nsCOMPtr<nsIInputStream>, 256> requestStreams;
   requestStreams.SetCapacity(aRequests.Length());
 
   for (uint32_t i = 0; i < aRequests.Length(); ++i) {
     requestStreams.AppendElement(DeserializeCacheStream(aRequests[i].body()));
   }
 
diff --git a/dom/cache/CacheParent.h b/dom/cache/CacheParent.h
--- a/dom/cache/CacheParent.h
+++ b/dom/cache/CacheParent.h
@@ -37,17 +37,17 @@ public:
   virtual bool
   RecvMatch(const RequestId& aRequestId, const PCacheRequest& aRequest,
             const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool
   RecvMatchAll(const RequestId& aRequestId, const PCacheRequestOrVoid& aRequest,
                const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool
   RecvAddAll(const RequestId& aRequestId,
-             const nsTArray<PCacheRequest>& aRequests) MOZ_OVERRIDE;
+             nsTArray<PCacheRequest>&& aRequests) MOZ_OVERRIDE;
   virtual bool
   RecvPut(const RequestId& aRequestId, const CacheRequestResponse& aPut);
   virtual bool
   RecvDelete(const RequestId& aRequestId, const PCacheRequest& aRequest,
              const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool
   RecvKeys(const RequestId& aRequestId, const PCacheRequestOrVoid& aRequest,
            const PCacheQueryParams& aParams) MOZ_OVERRIDE;
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -78,31 +78,24 @@ CacheStorage::CreateOnMainThread(Namespa
   bool unknownAppId = false;
   aPrincipal->GetUnknownAppId(&unknownAppId);
   if (unknownAppId) {
     NS_WARNING("CacheStorage not supported on principal with unknown appId.");
     aRv.Throw(NS_ERROR_FAILURE);
     return nullptr;
   }
 
-  nsAutoCString origin;
-  rv = aPrincipal->GetOrigin(getter_Copies(origin));
-  if (NS_WARN_IF(NS_FAILED(rv))) {
-    aRv.Throw(rv);
-    return nullptr;
-  }
-
   PrincipalInfo principalInfo;
   rv = PrincipalToPrincipalInfo(aPrincipal, &principalInfo);
   if (NS_WARN_IF(NS_FAILED(rv))) {
     aRv.Throw(rv);
     return nullptr;
   }
 
-  nsRefPtr<CacheStorage> ref = new CacheStorage(aNamespace, aGlobal, origin,
+  nsRefPtr<CacheStorage> ref = new CacheStorage(aNamespace, aGlobal,
                                                 principalInfo);
   return ref.forget();
 }
 
 // static
 already_AddRefed<CacheStorage>
 CacheStorage::CreateOnWorker(Namespace aNamespace,
                              nsIGlobalObject* aGlobal,
@@ -123,30 +116,26 @@ CacheStorage::CreateOnWorker(Namespace a
   if (principalInfo.type() == PrincipalInfo::TContentPrincipalInfo &&
       principalInfo.get_ContentPrincipalInfo().appId() ==
       nsIScriptSecurityManager::UNKNOWN_APP_ID) {
     NS_WARNING("CacheStorage not supported on principal with unknown appId.");
     aRv.Throw(NS_ERROR_FAILURE);
     return nullptr;
   }
 
-  NS_ConvertUTF16toUTF8 origin(aWorkerPrivate->GetLocationInfo().mOrigin);
-
-  nsRefPtr<CacheStorage> ref = new CacheStorage(aNamespace, aGlobal, origin,
+  nsRefPtr<CacheStorage> ref = new CacheStorage(aNamespace, aGlobal,
                                                 principalInfo);
   return ref.forget();
 }
 
 CacheStorage::CacheStorage(Namespace aNamespace,
                            nsIGlobalObject* aGlobal,
-                           const nsACString& aOrigin,
                            const PrincipalInfo& aPrincipalInfo)
   : mNamespace(aNamespace)
   , mGlobal(aGlobal)
-  , mOrigin(aOrigin)
   , mPrincipalInfo(MakeUnique<PrincipalInfo>(aPrincipalInfo))
   , mActor(nullptr)
   , mFailedActor(false)
 {
   MOZ_ASSERT(mGlobal);
 
   // If the PBackground actor is already initialized then we can
   // immediately use it
@@ -445,17 +434,17 @@ CacheStorage::RecvOpenResponse(RequestId
     return;
   }
 
   if (!aActor) {
     promise->MaybeReject(NS_ERROR_DOM_INVALID_ACCESS_ERR);
     return;
   }
 
-  nsRefPtr<Cache> cache = new Cache(mGlobal, mOrigin, aActor);
+  nsRefPtr<Cache> cache = new Cache(mGlobal, aActor);
   promise->MaybeResolve(cache);
 }
 
 void
 CacheStorage::RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
                                  bool aSuccess)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
@@ -487,22 +476,16 @@ CacheStorage::RecvKeysResponse(RequestId
 }
 
 nsIGlobalObject*
 CacheStorage::GetGlobalObject() const
 {
   return mGlobal;
 }
 
-const nsACString&
-CacheStorage::Origin() const
-{
-  return mOrigin;
-}
-
 #ifdef DEBUG
 void
 CacheStorage::AssertOwningThread() const
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 }
 #endif
 
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -85,37 +85,34 @@ public:
   void RecvOpenResponse(RequestId aRequestId, nsresult aRv,
                         PCacheChild* aActor);
   void RecvDeleteResponse(RequestId aRequestId, nsresult aRv, bool aSuccess);
   void RecvKeysResponse(RequestId aRequestId, nsresult aRv,
                         const nsTArray<nsString>& aKeys);
 
   // TypeUtils method
   virtual nsIGlobalObject* GetGlobalObject() const MOZ_OVERRIDE;
-  virtual const nsACString& Origin() const MOZ_OVERRIDE;
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
 #endif
 
 private:
   CacheStorage(Namespace aNamespace, nsIGlobalObject* aGlobal,
-               const nsACString& aOrigin,
                const mozilla::ipc::PrincipalInfo& aPrincipalInfo);
   ~CacheStorage();
 
   void MaybeRunPendingRequests();
 
   RequestId AddRequestPromise(Promise* aPromise, ErrorResult& aRv);
   already_AddRefed<Promise> RemoveRequestPromise(RequestId aRequestId);
 
   // Would like to use CacheInitData here, but we cannot because
   // its an IPC struct which breaks webidl by including windows.h.
   const Namespace mNamespace;
   nsCOMPtr<nsIGlobalObject> mGlobal;
-  const nsCString mOrigin;
   UniquePtr<mozilla::ipc::PrincipalInfo> mPrincipalInfo;
   CacheStorageChild* mActor;
   nsTArray<nsRefPtr<Promise>> mRequestPromises;
 
   enum Op
   {
     OP_MATCH,
     OP_HAS,
diff --git a/dom/cache/CacheStorageChild.cpp b/dom/cache/CacheStorageChild.cpp
--- a/dom/cache/CacheStorageChild.cpp
+++ b/dom/cache/CacheStorageChild.cpp
@@ -88,17 +88,17 @@ CacheStorageChild::RecvDeleteResponse(co
   MOZ_ASSERT(mListener);
   mListener->RecvDeleteResponse(aRequestId, aRv, aResult);
   return true;
 }
 
 bool
 CacheStorageChild::RecvKeysResponse(const RequestId& aRequestId,
                                     const nsresult& aRv,
-                                    const nsTArray<nsString>& aKeys)
+                                    nsTArray<nsString>&& aKeys)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(mListener);
   mListener->RecvKeysResponse(aRequestId, aRv, aKeys);
   return true;
 }
 
 } // namespace cache
diff --git a/dom/cache/CacheStorageChild.h b/dom/cache/CacheStorageChild.h
--- a/dom/cache/CacheStorageChild.h
+++ b/dom/cache/CacheStorageChild.h
@@ -40,17 +40,17 @@ public:
   virtual bool RecvOpenResponse(const cache::RequestId& aRequestId,
                                 const nsresult& aRv,
                                 PCacheChild* aActor) MOZ_OVERRIDE;
   virtual bool RecvDeleteResponse(const cache::RequestId& aRequestId,
                                   const nsresult& aRv,
                                   const bool& aResult) MOZ_OVERRIDE;
   virtual bool RecvKeysResponse(const cache::RequestId& aRequestId,
                                 const nsresult& aRv,
-                                const nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
+                                nsTArray<nsString>&& aKeys) MOZ_OVERRIDE;
 
 private:
   // Use a weak ref so actor does not hold DOM object alive past content use.
   // The CacheStorage object must call ClearListener() to null this before its
   // destroyed.
   CacheStorage* MOZ_NON_OWNING_REF mListener;
 
   NS_DECL_OWNINGTHREAD
diff --git a/dom/cache/CacheStorageParent.h b/dom/cache/CacheStorageParent.h
--- a/dom/cache/CacheStorageParent.h
+++ b/dom/cache/CacheStorageParent.h
@@ -23,17 +23,17 @@ class CacheStreamControlParent;
 class ManagerId;
 
 class CacheStorageParent MOZ_FINAL : public PCacheStorageParent
                                    , public PrincipalVerifier::Listener
                                    , public Manager::Listener
 {
 public:
   CacheStorageParent(PBackgroundParent* aManagingActor, Namespace aNamespace,
-                     const ipc::PrincipalInfo& aPrincipalInfo);
+                     const mozilla::ipc::PrincipalInfo& aPrincipalInfo);
   virtual ~CacheStorageParent();
 
   // PCacheStorageParent methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvMatch(const RequestId& aRequestId,
                          const PCacheRequest& aRequest,
                          const PCacheQueryParams& aParams) MOZ_OVERRIDE;
   virtual bool RecvHas(const RequestId& aRequestId,
diff --git a/dom/cache/DBSchema.h b/dom/cache/DBSchema.h
--- a/dom/cache/DBSchema.h
+++ b/dom/cache/DBSchema.h
@@ -122,18 +122,18 @@ private:
   static nsresult BindListParamsToQuery(mozIStorageStatement* aState,
                                         const nsTArray<EntryId>& aEntryIdList,
                                         uint32_t aPos, int32_t aLen);
   static nsresult BindId(mozIStorageStatement* aState, uint32_t aPos,
                          const nsID* aId);
   static nsresult ExtractId(mozIStorageStatement* aState, uint32_t aPos,
                             nsID* aIdOut);
 
-  DBSchema() MOZ_DELETE;
-  ~DBSchema() MOZ_DELETE;
+  DBSchema() = delete;
+  ~DBSchema() = delete;
 
   static const int32_t kLatestSchemaVersion;
   static const int32_t kMaxEntriesPerStatement;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/FetchPut.cpp b/dom/cache/FetchPut.cpp
--- a/dom/cache/FetchPut.cpp
+++ b/dom/cache/FetchPut.cpp
@@ -193,16 +193,24 @@ void
 FetchPut::DoFetchOnMainThread()
 {
   MOZ_ASSERT(NS_IsMainThread());
 
   nsRefPtr<ManagerId> managerId = mManager->GetManagerId();
   nsCOMPtr<nsIPrincipal> principal = managerId->Principal();
   mPendingCount = mStateList.Length();
 
+  nsCOMPtr<nsILoadGroup> loadGroup;
+  nsresult rv = NS_NewLoadGroup(getter_AddRefs(loadGroup), principal);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    MaybeSetError(rv);
+    MaybeCompleteOnMainThread();
+    return;
+  }
+
   for (uint32_t i = 0; i < mStateList.Length(); ++i) {
     nsRefPtr<InternalRequest> internalRequest =
       ToInternalRequest(mStateList[i].mPCacheRequest);
 
     // If there is a stream we must clone it so that its still available
     // to store in the cache later;
     if (mStateList[i].mRequestStream) {
       internalRequest->SetBody(mStateList[i].mRequestStream);
@@ -211,20 +219,21 @@ FetchPut::DoFetchOnMainThread()
       // The copy construction clone above can change the source stream,
       // so get it back out to use when we put this in the cache.
       internalRequest->GetBody(getter_AddRefs(mStateList[i].mRequestStream));
 
       internalRequest = clone;
     }
 
     nsRefPtr<FetchDriver> fetchDriver = new FetchDriver(internalRequest,
-                                                        principal);
+                                                        principal,
+                                                        loadGroup);
 
     mStateList[i].mFetchObserver = new FetchObserver(this);
-    nsresult rv = fetchDriver->Fetch(mStateList[i].mFetchObserver);
+    rv = fetchDriver->Fetch(mStateList[i].mFetchObserver);
     if (NS_WARN_IF(NS_FAILED(rv))) {
       MaybeSetError(rv);
       mStateList[i].mFetchObserver = nullptr;
       mPendingCount -= 1;
       continue;
     }
   }
 
@@ -424,23 +433,16 @@ FetchPut::MaybeNotifyListener()
 }
 
 nsIGlobalObject*
 FetchPut::GetGlobalObject() const
 {
   MOZ_CRASH("No global object in parent-size FetchPut operation!");
 }
 
-const nsACString&
-FetchPut::Origin() const
-{
-  nsRefPtr<ManagerId> managerId = mManager->GetManagerId();
-  return managerId->Origin();
-}
-
 #ifdef DEBUG
 void
 FetchPut::AssertOwningThread() const
 {
   MOZ_ASSERT(mInitiatingThread == NS_GetCurrentThread());
 }
 #endif
 
diff --git a/dom/cache/FetchPut.h b/dom/cache/FetchPut.h
--- a/dom/cache/FetchPut.h
+++ b/dom/cache/FetchPut.h
@@ -92,17 +92,16 @@ private:
                              const nsTArray<CacheRequestResponse>& aPutList);
   virtual void OnCachePutAll(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
 
   void MaybeSetError(nsresult aRv);
   void MaybeNotifyListener();
 
   // TypeUtils methods
   virtual nsIGlobalObject* GetGlobalObject() const MOZ_OVERRIDE;
-  virtual const nsACString& Origin() const MOZ_OVERRIDE;
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
 #endif
 
   Listener* mListener;
   nsRefPtr<Manager> mManager;
   const RequestId mRequestId;
   const CacheId mCacheId;
diff --git a/dom/cache/FileUtils.h b/dom/cache/FileUtils.h
--- a/dom/cache/FileUtils.h
+++ b/dom/cache/FileUtils.h
@@ -53,17 +53,17 @@ public:
   static nsresult
   BodyDeleteFiles(nsIFile* aBaseDir, const nsTArray<nsID>& aIdList);
 
 private:
   static nsresult
   BodyIdToFile(nsIFile* aBaseDir, const nsID& aId, BodyFileType aType,
                nsIFile** aBodyFileOut);
 
-  FileUtils() MOZ_DELETE;
-  ~FileUtils() MOZ_DELETE;
+  FileUtils() = delete;
+  ~FileUtils() = delete;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_FileUtils_h
diff --git a/dom/cache/ManagerId.h b/dom/cache/ManagerId.h
--- a/dom/cache/ManagerId.h
+++ b/dom/cache/ManagerId.h
@@ -54,18 +54,18 @@ public:
             mInBrowserElement < aOther.mInBrowserElement);
   }
 
 private:
   ManagerId(nsIPrincipal* aPrincipal, const nsACString& aOrigin,
             uint32_t aAppId, bool aInBrowserElement);
   ~ManagerId();
 
-  ManagerId(const ManagerId&) MOZ_DELETE;
-  ManagerId& operator=(const ManagerId&) MOZ_DELETE;
+  ManagerId(const ManagerId&) = delete;
+  ManagerId& operator=(const ManagerId&) = delete;
 
   // only accessible on main thread
   nsCOMPtr<nsIPrincipal> mPrincipal;
 
   // immutable to allow threadsfe access
   const nsCString mOrigin;
   const uint32_t mAppId;
   const bool mInBrowserElement;
diff --git a/dom/cache/PrincipalVerifier.h b/dom/cache/PrincipalVerifier.h
--- a/dom/cache/PrincipalVerifier.h
+++ b/dom/cache/PrincipalVerifier.h
@@ -31,42 +31,42 @@ public:
   class Listener
   {
   public:
     ~Listener() { }
     virtual void OnPrincipalVerified(nsresult aRv, ManagerId* aManagerId) = 0;
   };
 
   static nsresult
-  CreateAndDispatch(Listener* aListener, ipc::PBackgroundParent* aActor,
-                    const ipc::PrincipalInfo& aPrincipalInfo,
+  CreateAndDispatch(Listener* aListener, mozilla::ipc::PBackgroundParent* aActor,
+                    const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
                     PrincipalVerifier** aVerifierOut);
 
   // The Listener must call ClearListener() when OnPrincipalVerified() is
   // called or when the Listener is destroyed.
   void ClearListener();
 
 private:
-  PrincipalVerifier(Listener* aListener, ipc::PBackgroundParent* aActor,
-                    const ipc::PrincipalInfo& aPrincipalInfo);
+  PrincipalVerifier(Listener* aListener, mozilla::ipc::PBackgroundParent* aActor,
+                    const mozilla::ipc::PrincipalInfo& aPrincipalInfo);
   virtual ~PrincipalVerifier();
 
   void VerifyOnMainThread();
   void CompleteOnInitiatingThread();
 
   void DispatchToInitiatingThread(nsresult aRv);
 
   // Weak reference cleared by ClearListener()
   Listener* mListener;
 
   // set in originating thread at construction, but must be accessed and
   // released on main thread
   nsRefPtr<ContentParent> mActor;
 
-  const ipc::PrincipalInfo mPrincipalInfo;
+  const mozilla::ipc::PrincipalInfo mPrincipalInfo;
   nsCOMPtr<nsIThread> mInitiatingThread;
   nsresult mResult;
   nsRefPtr<ManagerId> mManagerId;
 
 public:
   NS_DECL_NSIRUNNABLE
 };
 
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -196,24 +196,20 @@ TypeUtils::ToPCacheRequest(PCacheRequest
     if (aSchemeAction == NetworkErrorOnInvalidScheme) {
       aRv.Throw(NS_ERROR_DOM_NETWORK_ERR);
       return;
     }
   }
 
   nsRefPtr<InternalRequest> internalRequest = aIn.GetInternalRequest();
 
-  if (aReferrerAction == ExpandReferrer &&
-      internalRequest->ReferrerIsClient()) {
-    nsAutoCString referrer;
-    GetRequestReferrer(GetGlobalObject(), internalRequest, referrer);
-    aOut.referrer() = NS_ConvertUTF8toUTF16(referrer);
-  } else {
-    aIn.GetReferrer(aOut.referrer());
+  if (aReferrerAction == ExpandReferrer) {
+    UpdateRequestReferrer(GetGlobalObject(), internalRequest);
   }
+  aIn.GetReferrer(aOut.referrer());
 
   nsRefPtr<InternalHeaders> headers = aIn.GetInternalHeaders();
   MOZ_ASSERT(headers);
   headers->GetPHeaders(aOut.headers());
   aOut.headersGuard() = headers->Guard();
   aOut.mode() = aIn.Mode();
   aOut.credentials() = aIn.Credentials();
   aOut.context() = internalRequest->GetContext();
@@ -429,22 +425,19 @@ TypeUtils::ToResponse(const PCacheRespon
   return ref.forget();
 }
 
 already_AddRefed<InternalRequest>
 TypeUtils::ToInternalRequest(const PCacheRequest& aIn)
 {
   nsRefPtr<InternalRequest> internalRequest = new InternalRequest();
 
-  // TODO: Should not set origin on Request as it won't be valid for SystemPrincipal (bug 1110475)
-  internalRequest->SetOrigin(Origin());
-
   internalRequest->SetMethod(aIn.method());
   internalRequest->SetURL(NS_ConvertUTF16toUTF8(aIn.url()));
-  internalRequest->SetReferrer(NS_ConvertUTF16toUTF8(aIn.referrer()));
+  internalRequest->SetReferrer(aIn.referrer());
   internalRequest->SetMode(aIn.mode());
   internalRequest->SetCredentialsMode(aIn.credentials());
   internalRequest->SetContext(aIn.context());
 
   nsRefPtr<InternalHeaders> internalHeaders =
     new InternalHeaders(aIn.headers(), aIn.headersGuard());
   ErrorResult result;
   internalRequest->Headers()->SetGuard(aIn.headersGuard(), result);
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -56,17 +56,16 @@ public:
   {
     IgnoreInvalidScheme,
     TypeErrorOnInvalidScheme,
     NetworkErrorOnInvalidScheme
   };
 
   ~TypeUtils() { }
   virtual nsIGlobalObject* GetGlobalObject() const = 0;
-  virtual const nsACString& Origin() const = 0;
 #ifdef DEBUG
   virtual void AssertOwningThread() const = 0;
 #else
   inline void AssertOwningThread() const { }
 #endif
 
   void
   ToPCacheRequest(PCacheRequest& aOut,
