# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  fa71d12f1dde444c4edb09b377c01a97ac74668d
Bug 1231211 P19 Make DevToolsUtils.newChannelForURL() set the loadingNode so that the SW controller is set on the channel. r=jryans

diff --git a/devtools/shared/DevToolsUtils.js b/devtools/shared/DevToolsUtils.js
--- a/devtools/shared/DevToolsUtils.js
+++ b/devtools/shared/DevToolsUtils.js
@@ -664,30 +664,42 @@ function newChannelForURL(url, { policy,
     // scheme to see if it helps.
     uri = Services.io.newURI("file://" + url);
   }
   let channelOptions = {
     contentPolicyType: policy,
     securityFlags: securityFlags,
     uri: uri
   };
-  let prin = principal;
-  if (!prin) {
-    let oa = {};
-    if (window) {
-      oa = window.document.nodePrincipal.originAttributes;
-    }
-    prin = Services.scriptSecurityManager
-                   .createCodebasePrincipal(uri, oa);
-  }
-  // contentPolicyType is required when specifying a principal
+
+  // Ensure that we have some contentPolicyType type set if one was
+  // not provided.
   if (!channelOptions.contentPolicyType) {
     channelOptions.contentPolicyType = Ci.nsIContentPolicy.TYPE_OTHER;
   }
-  channelOptions.loadingPrincipal = prin;
+
+  // If a window is provided, always use it's document as the loadingNode.
+  // This will provide the correct principal, origin attributes, service
+  // worker controller, etc.
+  if (window) {
+    channelOptions.loadingNode = window.document;
+  } else {
+    // If a window is not provided, then we must set a loading principal.
+
+    // If the caller did not provide a principal, then we use the URI
+    // to create one.  Note, it's not clear what use cases require this
+    // and it may not be correct.
+    let prin = principal;
+    if (!prin) {
+      prin = Services.scriptSecurityManager
+                     .createCodebasePrincipal(uri, {});
+    }
+
+    channelOptions.loadingPrincipal = prin;
+  }
 
   try {
     return NetUtil.newChannel(channelOptions);
   } catch (e) {
     // In xpcshell tests on Windows, nsExternalProtocolHandler::NewChannel()
     // can throw NS_ERROR_UNKNOWN_PROTOCOL if the external protocol isn't
     // supported by Windows, so we also need to handle the exception here if
     // parsing the URL above doesn't throw.
