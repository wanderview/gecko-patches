# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  08ee74db16bae7755509327834fbf5190d2696ee
Bug 1191943 P2 Copy service worker timing information across redirects. r=asuth

diff --git a/netwerk/protocol/http/HttpBaseChannel.cpp b/netwerk/protocol/http/HttpBaseChannel.cpp
--- a/netwerk/protocol/http/HttpBaseChannel.cpp
+++ b/netwerk/protocol/http/HttpBaseChannel.cpp
@@ -3643,16 +3643,26 @@ HttpBaseChannel::SetupReplacementChannel
     // TYPE_DOCUMENT loads don't have a loadingPrincipal, so we can't set
     // AllRedirectsPassTimingAllowCheck on them.
     if (loadInfo && loadInfo->GetExternalContentPolicyType() != nsIContentPolicy::TYPE_DOCUMENT) {
       nsCOMPtr<nsIPrincipal> principal = loadInfo->LoadingPrincipal();
       newTimedChannel->SetAllRedirectsPassTimingAllowCheck(
         mAllRedirectsPassTimingAllowCheck &&
         oldTimedChannel->TimingAllowCheck(principal));
     }
+
+    // Propagate service worker measurements across redirects.  The
+    // PeformanceResourceTiming.workerStart API expects to see the
+    // worker start time after a redirect.
+    newTimedChannel->SetLaunchServiceWorkerStart(mLaunchServiceWorkerStart);
+    newTimedChannel->SetLaunchServiceWorkerEnd(mLaunchServiceWorkerEnd);
+    newTimedChannel->SetDispatchFetchEventStart(mDispatchFetchEventStart);
+    newTimedChannel->SetDispatchFetchEventEnd(mDispatchFetchEventEnd);
+    newTimedChannel->SetHandleFetchEventStart(mHandleFetchEventStart);
+    newTimedChannel->SetHandleFetchEventEnd(mHandleFetchEventEnd);
   }
 
   // Pass the preferred alt-data type on to the new channel.
   nsCOMPtr<nsICacheInfoChannel> cacheInfoChan(do_QueryInterface(newChannel));
   if (cacheInfoChan) {
     cacheInfoChan->PreferAlternativeDataType(mPreferredCachedAltDataType);
   }
 
diff --git a/netwerk/protocol/http/nsHttpChannel.cpp b/netwerk/protocol/http/nsHttpChannel.cpp
--- a/netwerk/protocol/http/nsHttpChannel.cpp
+++ b/netwerk/protocol/http/nsHttpChannel.cpp
@@ -5658,28 +5658,16 @@ nsHttpChannel::SetupReplacementChannel(n
       nsLoadFlags loadFlags = nsIRequest::LOAD_NORMAL;
       rv = newChannel->GetLoadFlags(&loadFlags);
       NS_ENSURE_SUCCESS(rv, rv);
       loadFlags |= nsIChannel::LOAD_BYPASS_SERVICE_WORKER;
       rv = newChannel->SetLoadFlags(loadFlags);
       NS_ENSURE_SUCCESS(rv, rv);
     }
 
-    if (redirectFlags & nsIChannelEventSink::REDIRECT_INTERNAL) {
-      nsCOMPtr<nsITimedChannel> timedChannel = do_QueryInterface(newChannel);
-      if (timedChannel) {
-        timedChannel->SetLaunchServiceWorkerStart(mLaunchServiceWorkerStart);
-        timedChannel->SetLaunchServiceWorkerEnd(mLaunchServiceWorkerEnd);
-        timedChannel->SetDispatchFetchEventStart(mDispatchFetchEventStart);
-        timedChannel->SetDispatchFetchEventEnd(mDispatchFetchEventEnd);
-        timedChannel->SetHandleFetchEventStart(mHandleFetchEventStart);
-        timedChannel->SetHandleFetchEventEnd(mHandleFetchEventEnd);
-      }
-    }
-
     return NS_OK;
 }
 
 nsresult
 nsHttpChannel::AsyncProcessRedirection(uint32_t redirectType)
 {
     LOG(("nsHttpChannel::AsyncProcessRedirection [this=%p type=%u]\n",
         this, redirectType));
