# HG changeset patch
# Parent 0f545d9504faf8f38ce23bd53f3b6b90204f12ab
# User Ben Kelly <ben@wanderview.com>
Bug 1165119 Remove corrupt morgue directories polluting nightly profiles. r=janv

diff --git a/dom/quota/QuotaManager.cpp b/dom/quota/QuotaManager.cpp
--- a/dom/quota/QuotaManager.cpp
+++ b/dom/quota/QuotaManager.cpp
@@ -2010,16 +2010,47 @@ QuotaManager::InitializeRepository(Persi
   }
   if (NS_WARN_IF(NS_FAILED(rv))) {
     return rv;
   }
 
   return NS_OK;
 }
 
+namespace {
+
+// The Cache API was creating top level morgue directories by accident for
+// a short time in nightly.  This unfortunately prevents all storage from
+// working.  So recover these profiles by removing these corrupt directories.
+// This should be removed at some point in the future.
+bool
+MaybeRemoveCorruptDirectory(const nsAString& aLeafName, nsIFile* aDir)
+{
+#ifdef NIGHTLY_BUILD
+  MOZ_ASSERT(aDir);
+
+  if (aLeafName != NS_LITERAL_STRING("morgue")) {
+    return false;
+  }
+
+  NS_WARNING("QuotaManager removing corrupt morgue directory!");
+
+  nsresult rv = aDir->Remove(true /* recursive */);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    return false;
+  }
+
+  return true;
+#else
+  return false
+#endif // NIGHTLY_BUILD
+}
+
+} // anonymous namespace
+
 nsresult
 QuotaManager::InitializeOrigin(PersistenceType aPersistenceType,
                                const nsACString& aGroup,
                                const nsACString& aOrigin,
                                bool aIsApp,
                                int64_t aAccessTime,
                                nsIFile* aDirectory)
 {
@@ -2067,16 +2098,20 @@ QuotaManager::InitializeOrigin(Persisten
     rv = file->IsDirectory(&isDirectory);
     NS_ENSURE_SUCCESS(rv, rv);
 
     if (!isDirectory) {
       NS_WARNING("Unknown file found!");
       return NS_ERROR_UNEXPECTED;
     }
 
+    if (MaybeRemoveCorruptDirectory(leafName, file)) {
+      continue;
+    }
+
     Client::Type clientType;
     rv = Client::TypeFromText(leafName, clientType);
     if (NS_FAILED(rv)) {
       NS_WARNING("Unknown directory found!");
       return NS_ERROR_UNEXPECTED;
     }
 
     rv = mClients[clientType]->InitOrigin(aPersistenceType, aGroup, aOrigin,
@@ -4168,16 +4203,20 @@ AsyncUsageRunnable::AddToUsage(QuotaMana
         NS_ENSURE_SUCCESS(rv, rv);
 
         if (!isDirectory) {
           NS_WARNING("Unknown file found!");
           return NS_ERROR_UNEXPECTED;
         }
       }
 
+      if (MaybeRemoveCorruptDirectory(leafName, file)) {
+        continue;
+      }
+
       Client::Type clientType;
       rv = Client::TypeFromText(leafName, clientType);
       if (NS_FAILED(rv)) {
         NS_WARNING("Unknown directory found!");
         if (!initialized) {
           return NS_ERROR_UNEXPECTED;
         }
         continue;
