# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  226c85ae3d3c3e6c04c6c4d0547a989170147a59
Bug 1336364 P3 Restrict service worker interception for more cookie policies. r=asuth

diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -14972,16 +14972,22 @@ nsDocShell::ShouldPrepareForIntercept(ns
     return NS_OK;
   }
 
   if (mSandboxFlags) {
     // If we're sandboxed, don't intercept.
     return NS_OK;
   }
 
+  uint32_t cookieBehavior = nsContentUtils::CookiesBehavior();
+  if (cookieBehavior == nsICookieService::BEHAVIOR_REJECT) {
+    // If cookies are disabled, don't intercept.
+    return NS_OK;
+  }
+
   RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
   if (!swm) {
     return NS_OK;
   }
 
   if (!aIsNonSubresourceRequest) {
     nsCOMPtr<nsIDocument> doc = GetDocument();
     if (!doc) {
@@ -14992,17 +14998,19 @@ nsDocShell::ShouldPrepareForIntercept(ns
     *aShouldIntercept = swm->IsControlled(doc, rv);
     if (NS_WARN_IF(rv.Failed())) {
       return rv.StealNSResult();
     }
 
     return NS_OK;
   }
 
-  if (nsContentUtils::CookiesBehavior() == nsICookieService::BEHAVIOR_REJECT_FOREIGN) {
+  // If the user has set a cookie policy that restricts cookies, then
+  // avoid intercepting 3rd party iframes.
+  if (cookieBehavior != nsICookieService::BEHAVIOR_ACCEPT) {
     nsCOMPtr<nsIDocShellTreeItem> parent;
     GetSameTypeParent(getter_AddRefs(parent));
     nsCOMPtr<nsPIDOMWindowOuter> parentWindow = parent ? parent->GetWindow()
                                                        : nullptr;
     if (parentWindow) {
       nsresult rv = NS_OK;
       nsCOMPtr<mozIThirdPartyUtil> thirdPartyUtil =
         do_GetService(THIRDPARTYUTIL_CONTRACTID, &rv);
diff --git a/dom/workers/test/serviceworkers/test_third_party_iframes.html b/dom/workers/test/serviceworkers/test_third_party_iframes.html
--- a/dom/workers/test/serviceworkers/test_third_party_iframes.html
+++ b/dom/workers/test/serviceworkers/test_third_party_iframes.html
@@ -155,21 +155,21 @@ let steps = [() => {
   ]}, next);
 }, () => {
   testShouldNotIntercept(next);
 }, () => {
   SpecialPowers.pushPrefEnv({"set": [
     ["network.cookie.cookieBehavior", COOKIE_BEHAVIOR_REJECT]
   ]}, next);
 }, () => {
-  testShouldIntercept(next);
+  testShouldNotIntercept(next);
 }, () => {
   SpecialPowers.pushPrefEnv({"set": [
     ["network.cookie.cookieBehavior", COOKIE_BEHAVIOR_LIMITFOREIGN]
   ]}, next);
 }, () => {
-  testShouldIntercept(next);
+  testShouldNotIntercept(next);
 }];
 
 </script>
 </pre>
 </body>
 </html>
