# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  fcd35e10fa17d9fd11d92be48ae9698c2a900f1c
Bug 1206346 Widen the fuzzy timer duration check in performance-timeline.https.html. r=jdm

diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/performance-timeline-worker.js b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/performance-timeline-worker.js
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/performance-timeline-worker.js
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/performance-timeline-worker.js
@@ -1,34 +1,45 @@
 importScripts('/resources/testharness.js');
 
 promise_test(function(test) {
     var durationMsec = 100;
+    // There are limits to our accuracy here.  Timers may fire up to a
+    // millisecond early due to platform-dependent rounding.  In addition
+    // the performance API introduces some rounding as well to prevent
+    // timing attacks.
+    var accuracy = 1.5;
+    var dateStart;
     return new Promise(function(resolve) {
+        dateStart = Date.now();
         performance.mark('startMark');
         setTimeout(resolve, durationMsec);
       }).then(function() {
           performance.mark('endMark');
+          var dateEnd = Date.now();
           performance.measure('measure', 'startMark', 'endMark');
           var startMark = performance.getEntriesByName('startMark')[0];
           var endMark = performance.getEntriesByName('endMark')[0];
           var measure = performance.getEntriesByType('measure')[0];
           assert_equals(measure.startTime, startMark.startTime);
           assert_approx_equals(endMark.startTime - startMark.startTime,
                                measure.duration, 0.001);
-          //XXXnsm: Timers aren't always precise. on treeherder sometimes the
-          //measured duration is like 99.5 something. Let's just measure the
-          //ballpark.
-          assert_greater_than(measure.duration, durationMsec - 1);
+          assert_greater_than(measure.duration, durationMsec - accuracy);
           assert_equals(performance.getEntriesByType('mark').length, 2);
           assert_equals(performance.getEntriesByType('measure').length, 1);
           performance.clearMarks('startMark');
           performance.clearMeasures('measure');
           assert_equals(performance.getEntriesByType('mark').length, 1);
           assert_equals(performance.getEntriesByType('measure').length, 0);
+
+          // Performance API's fuzzy resolution means its measured duration
+          // can round to a slightly different value compared to Date.now()
+          // measurements.
+          var dateDuration = dateEnd - dateStart;
+          assert_approx_equals(Math.round(measure.duration), dateDuration, 1);
       });
   }, 'User Timing');
 
 promise_test(function(test) {
     return fetch('dummy.txt')
       .then(function(resp) {
           return resp.text();
         })
