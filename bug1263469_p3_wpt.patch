# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  83258181c694804f46d6cc9e0cf704dfadebebba
Bug 1263469 P3 Test FetchEvent.request.cache value on reload in wpt test. r=ehsan

diff --git a/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html b/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/fetch-event.https.html
@@ -435,30 +435,46 @@ async_test(function(t) {
     ];
     service_worker_unregister_and_register(t, worker, scope)
       .then(function(reg) {
           return wait_for_state(t, reg.installing, 'activated');
         })
       .then(function() { return with_iframe(scope); })
       .then(function(f) {
           frame = f;
+          assert_equals(frame.contentWindow.document.body.textContent, 'default');
           var tests = cacheTypes.map(function(type) {
-            return new Promise(function(resolve) {
+            return new Promise(function(resolve, reject) {
                 return frame.contentWindow.fetch(scope + '=' + type,
                                                  {cache: type})
                   .then(function(response) { return response.text(); })
                   .then(function(response_text) {
                       var expected = (type === undefined) ? 'default' : type;
                       assert_equals(response_text, expected,
                                     'Service Worker should respond to fetch with the correct type');
                     })
-                  .then(resolve);
+                  .then(resolve)
+                  .catch(reject);
               });
           });
-          return Promise.all(tests);
+        })
+      .then(function() {
+          return new Promise(function(resolve, reject) {
+            frame.addEventListener('load', function onLoad() {
+              frame.removeEventListener('load', onLoad);
+              try {
+                assert_equals(frame.contentWindow.document.body.textContent,
+                              'no-cache');
+                resolve();
+              } catch (e) {
+                reject(e);
+              }
+            });
+            frame.contentWindow.location.reload();
+          });
         })
       .then(function() {
           frame.remove();
           return service_worker_unregister_and_done(t, scope);
         })
       .catch(unreached_rejection(t));
   }, 'Service Worker responds to fetch event with the correct cache types');
 
