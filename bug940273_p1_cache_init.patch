# HG changeset patch
# Parent 8c4d1526ad2ed5181a999ac520f8d7bd43b949e1
# User Ben Kelly <ben@wanderview.com>
Bug 940273 Part 1 Cache webidl and stubs

diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -164,16 +164,25 @@ DOMInterfaces = {
 'BluetoothDevice': {
     'nativeType': 'mozilla::dom::bluetooth::BluetoothDevice',
 },
 
 'BluetoothManager': {
     'nativeType': 'mozilla::dom::bluetooth::BluetoothManager',
 },
 
+'Cache': [{
+    'headerFile': 'mozilla/dom/Cache.h',
+    'nativeType': 'mozilla::dom::Cache'
+}, {
+    'headerFile': 'mozilla/dom/Cache.h',
+    'nativeType': 'mozilla::dom::Cache',
+    'workers': True,
+}],
+
 'CameraCapabilities': {
     'nativeType': 'mozilla::dom::CameraCapabilities',
     'headerFile': 'DOMCameraCapabilities.h'
 },
 
 'CameraControl': {
     'nativeType': 'mozilla::nsDOMCameraControl',
     'headerFile': 'DOMCameraControl.h',
diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/Cache.cpp
@@ -0,0 +1,90 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Cache.h"
+
+namespace mozilla {
+namespace dom {
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Cache);
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Cache);
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(Cache)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Cache)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+/* static */
+already_AddRefed<Cache>
+Cache::Constructor(const GlobalObject& aGlobal, ErrorResult& rv)
+{
+  nsRefPtr<Cache> cache = new Cache(aGlobal.GetAsSupports());
+  return cache.forget();
+}
+
+already_AddRefed<Promise>
+Cache::Match(const RequestOrString& aRequest, const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::MatchAll(const RequestOrString& aRequest, const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Add(const Sequence<OwningRequestOrString>& aRequests)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Put(const RequestOrString& aRequest, const Response& aResponse)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Delete(const RequestOrString& aRequest, const QueryParams& aParams)
+{
+  MOZ_CRASH("not implemented");
+}
+
+already_AddRefed<Promise>
+Cache::Each(JSContext* aContext, CacheIterationCallback& aCallback,
+            const Optional<JS::Handle<JSObject*>>& aThis)
+{
+  MOZ_CRASH("not implemented");
+}
+
+nsISupports*
+Cache::GetParentObject() const
+{
+  return mOwner;
+}
+
+JSObject*
+Cache::WrapObject(JSContext* aContext)
+{
+  return CacheBinding_workers::Wrap(aContext, this);
+}
+
+Cache::Cache(nsISupports* aOwner)
+: mOwner(aOwner)
+{
+  MOZ_ASSERT(aOwner);
+  SetIsDOMBinding();
+}
+
+Cache::~Cache()
+{
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/Cache.h
@@ -0,0 +1,58 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Cache_h
+#define mozilla_dom_Cache_h
+
+#include "mozilla/dom/CacheBinding.h"
+#include "nsISupportsImpl.h"
+#include "nsWrapperCache.h"
+
+namespace mozilla {
+namespace dom {
+
+class Promise;
+
+class Cache MOZ_FINAL : public nsISupports
+                      , public nsWrapperCache
+{
+public:
+  // webidl interface methods
+  static already_AddRefed<Cache> Constructor(const GlobalObject& aGlobal,
+                                             ErrorResult& rv);
+
+  already_AddRefed<Promise> Match(const RequestOrString& aRequest,
+                                  const QueryParams& aParams);
+  already_AddRefed<Promise> MatchAll(const RequestOrString& aRequest,
+                                     const QueryParams& aParams);
+  already_AddRefed<Promise> Add(const Sequence<OwningRequestOrString>& aRequests);
+  already_AddRefed<Promise> Put(const RequestOrString& aRequest,
+                                const Response& aResponse);
+  already_AddRefed<Promise> Delete(const RequestOrString& aRequest,
+                                   const QueryParams& aParams);
+  already_AddRefed<Promise> Each(JSContext* aContext,
+                                 CacheIterationCallback& aCallback,
+                                 const Optional<JS::Handle<JSObject*>>& aThis);
+
+  // binding methods
+  virtual nsISupports* GetParentObject() const MOZ_OVERRIDE;
+  virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
+
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Cache)
+
+private:
+  Cache(nsISupports* aOwner);
+  virtual ~Cache();
+
+private:
+  nsISupports* mOwner;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Cache_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/cache/moz.build
@@ -0,0 +1,17 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+EXPORTS.mozilla.dom += [
+    'Cache.h',
+]
+
+UNIFIED_SOURCES += [
+    'Cache.cpp',
+]
+
+FAIL_ON_WARNINGS = True
+
+FINAL_LIBRARY = 'gklayout'
diff --git a/dom/moz.build b/dom/moz.build
--- a/dom/moz.build
+++ b/dom/moz.build
@@ -33,16 +33,17 @@ interfaces = [
 ]
 
 PARALLEL_DIRS += ['interfaces/' + i for i in interfaces]
 
 PARALLEL_DIRS += [
     'animation',
     'apps',
     'base',
+    'cache',
     'activities',
     'archivereader',
     'bindings',
     'battery',
     'browser-element',
     'contacts',
     'crypto',
     'phonenumberutils',
diff --git a/dom/webidl/Cache.webidl b/dom/webidl/Cache.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Cache.webidl
@@ -0,0 +1,40 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html
+ *
+ */
+
+// XXX: Implement real ScalarValueString
+typedef DOMString ScalarValueString;
+
+[Constructor,
+ // Exposed=Window,Worker
+ Pref="dom.serviceWorkers.enabled"]
+interface Cache {
+  // Promise<Response>
+  Promise match((Request or ScalarValueString) request,
+                optional QueryParams params);
+  // Promise<sequence<Response>>
+  Promise matchAll((Request or ScalarValueString) request,
+                   optional QueryParams params);
+  Promise add((Request or ScalarValueString)... requests);
+  Promise put((Request or ScalarValueString) request, Response response);
+  Promise delete((Request or ScalarValueString) request,
+                 optional QueryParams params);
+  Promise each(CacheIterationCallback callback, optional object thisArg);
+};
+
+dictionary QueryParams {
+  boolean ignoreSearch;
+  boolean ignoreMethod;
+  boolean ignoreVary;
+  boolean prefixMatch;
+};
+
+callback CacheIterationCallback = void (Response value,
+                                        (Request or ScalarValueString) key,
+                                        Cache map);
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -37,16 +37,17 @@ WEBIDL_FILES = [
     'AudioProcessingEvent.webidl',
     'AudioStreamTrack.webidl',
     'BarProp.webidl',
     'BatteryManager.webidl',
     'BeforeUnloadEvent.webidl',
     'BiquadFilterNode.webidl',
     'Blob.webidl',
     'BrowserElementDictionaries.webidl',
+    'Cache.webidl',
     'CallsList.webidl',
     'CameraCapabilities.webidl',
     'CameraControl.webidl',
     'CameraManager.webidl',
     'CanvasRenderingContext2D.webidl',
     'CaretPosition.webidl',
     'CDATASection.webidl',
     'ChannelMergerNode.webidl',
diff --git a/dom/workers/RegisterBindings.cpp b/dom/workers/RegisterBindings.cpp
--- a/dom/workers/RegisterBindings.cpp
+++ b/dom/workers/RegisterBindings.cpp
@@ -6,16 +6,17 @@
 #include "WorkerPrivate.h"
 #include "ChromeWorkerScope.h"
 #include "File.h"
 #include "RuntimeService.h"
 
 #include "jsapi.h"
 #include "js/OldDebugAPI.h"
 #include "mozilla/dom/BindingUtils.h"
+#include "mozilla/dom/CacheBinding.h"
 #include "mozilla/dom/ConsoleBinding.h"
 #include "mozilla/dom/DOMExceptionBinding.h"
 #include "mozilla/dom/EventBinding.h"
 #include "mozilla/dom/EventHandlerBinding.h"
 #include "mozilla/dom/EventTargetBinding.h"
 #include "mozilla/dom/FileReaderSyncBinding.h"
 #include "mozilla/dom/ImageData.h"
 #include "mozilla/dom/ImageDataBinding.h"
@@ -81,17 +82,18 @@ WorkerPrivate::RegisterBindings(JSContex
     return false;
   }
 
   // FIXME(nsm): When landing flip this.
   // Init ServiceWorker specific APIs.
   if (true) {
     if (!HeaderMapBinding_workers::GetConstructorObject(aCx, aGlobal) ||
         !RequestBinding_workers::GetConstructorObject(aCx, aGlobal) ||
-        !ResponseBinding_workers::GetConstructorObject(aCx, aGlobal)) {
+        !ResponseBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !CacheBinding_workers::GetConstructorObject(aCx, aGlobal)) {
       return nullptr;
     }
   }
 
   if (!JS_DefineProfilingFunctions(aCx, aGlobal)) {
     return false;
   }
 
