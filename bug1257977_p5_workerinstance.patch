# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  b0b2ce06d026afa9453ad1df984918fcaeb1f85d
Bug 1257977 P5 Make worker registration DOM instances register with the registration info. r=jdm

diff --git a/dom/workers/ServiceWorkerRegistration.cpp b/dom/workers/ServiceWorkerRegistration.cpp
--- a/dom/workers/ServiceWorkerRegistration.cpp
+++ b/dom/workers/ServiceWorkerRegistration.cpp
@@ -798,21 +798,23 @@ ServiceWorkerRegistrationMainThread::Get
   return ret.forget();
 
   #endif /* ! MOZ_SIMPLEPUSH */
 }
 
 ////////////////////////////////////////////////////
 // Worker Thread implementation
 class WorkerListener final : public ServiceWorkerRegistrationListener
+                           , public ServiceWorkerRegistrationInfo::Instance
 {
   // Accessed on the main thread.
   WorkerPrivate* mWorkerPrivate;
   nsString mScope;
   bool mListeningForEvents;
+  nsMainThreadPtrHandle<ServiceWorkerRegistrationInfo> mRegistrationInfo;
 
   // Accessed on the worker thread.
   ServiceWorkerRegistrationWorkerThread* mRegistration;
 
 public:
   NS_INLINE_DECL_THREADSAFE_REFCOUNTING(WorkerListener, override)
 
   WorkerListener(WorkerPrivate* aWorkerPrivate,
@@ -830,30 +832,44 @@ public:
 
   void
   StartListeningForEvents()
   {
     AssertIsOnMainThread();
     MOZ_ASSERT(!mListeningForEvents);
     MOZ_ASSERT(mWorkerPrivate);
     RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
-    if (swm) {
-      // FIXME(nsm): Maybe the function shouldn't take an explicit scope.
-      swm->AddRegistrationEventListener(mScope, this);
-      mListeningForEvents = true;
+    if (!swm) {
+      return;
     }
+
+    // FIXME(nsm): Maybe the function shouldn't take an explicit scope.
+    swm->AddRegistrationEventListener(mScope, this);
+    mListeningForEvents = true;
+
+    RefPtr<ServiceWorkerRegistrationInfo> info =
+      swm->GetRegistration(mWorkerPrivate->GetPrincipal(),
+                           NS_ConvertUTF16toUTF8(mScope));
+
+    mRegistrationInfo =
+      new nsMainThreadPtrHolder<ServiceWorkerRegistrationInfo>(info);
+
+    mRegistrationInfo->AddInstance(this);
   }
 
   void
   StopListeningForEvents()
   {
     AssertIsOnMainThread();
 
     MOZ_ASSERT(mListeningForEvents);
 
+    mRegistrationInfo->RemoveInstance(this);
+    mRegistrationInfo = nullptr;
+
     RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
 
     // We aren't going to need this anymore and we shouldn't hold on since the
     // worker will go away soon.
     mWorkerPrivate = nullptr;
 
     if (swm) {
       // FIXME(nsm): Maybe the function shouldn't take an explicit scope.
