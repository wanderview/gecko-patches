# HG changeset patch
# Parent a061b3dc524ec14d96bd26fef80cf25e87931f4c
# User Ben Kelly <ben@wanderview.com>
Bug 1029620 P6 Test new fetch Headers DOM object.

diff --git a/dom/tests/mochitest/fetch/mochitest.ini b/dom/tests/mochitest/fetch/mochitest.ini
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/fetch/mochitest.ini
@@ -0,0 +1,1 @@
+[test_headers.html]
diff --git a/dom/tests/mochitest/fetch/moz.build b/dom/tests/mochitest/fetch/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/fetch/moz.build
@@ -0,0 +1,7 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+MOCHITEST_MANIFESTS += ['mochitest.ini']
diff --git a/dom/tests/mochitest/fetch/test_headers.html b/dom/tests/mochitest/fetch/test_headers.html
new file mode 100644
--- /dev/null
+++ b/dom/tests/mochitest/fetch/test_headers.html
@@ -0,0 +1,336 @@
+<!-- Any copyright is dedicated to the Public Domain.
+   - http://creativecommons.org/publicdomain/zero/1.0/ -->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Test Fetch Headers - Basic</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<script class="testbody" type="text/javascript">
+SimpleTest.waitForExplicitFinish();
+
+//
+// Utility functions
+//
+
+function shouldThrow(func, expected, msg) {
+  var err;
+  try {
+    func();
+  } catch(e) {
+    err = e;
+  } finally {
+    ok(err instanceof expected, msg);
+  }
+}
+
+function arrayEquals(actual, expected, msg) {
+  if (actual === expected) {
+    return;
+  }
+
+  var diff = actual.length !== expected.length;
+
+  for (var i = 0, n = actual.length; !diff && i < n; ++i) {
+    diff = actual[i] !== expected[i];
+  }
+
+  ok(!diff, msg);
+  if (diff) {
+    is(actual, expected, msg);
+  }
+}
+
+function checkHas(headers, name, msg) {
+  function doCheckHas(n) {
+    return headers.has(n);
+  }
+  return _checkHas(doCheckHas, headers, name, msg);
+}
+
+function checkNotHas(headers, name, msg) {
+  function doCheckNotHas(n) {
+    return !headers.has(n);
+  }
+  return _checkHas(doCheckNotHas, headers, name, msg);
+}
+
+function _checkHas(func, headers, name, msg) {
+  ok(func(name), msg);
+  ok(func(name.toLowerCase()), msg)
+  ok(func(name.toUpperCase()), msg)
+}
+
+function checkGet(headers, name, expected, msg) {
+  is(headers.get(name), expected, msg);
+  is(headers.get(name.toLowerCase()), expected, msg);
+  is(headers.get(name.toUpperCase()), expected, msg);
+}
+
+function checkGetAll(headers, name, expected, msg) {
+  arrayEquals(headers.getAll(name), expected, msg);
+  arrayEquals(headers.getAll(name.toLowerCase()), expected, msg);
+  arrayEquals(headers.getAll(name.toUpperCase()), expected, msg);
+}
+
+//
+// Test Cases
+//
+
+function TestCoreBehavior(headers, name) {
+  var start = headers.getAll(name);
+
+  headers.append(name, "bar");
+
+  var expectedFirst = (start.length ? start[0] : "bar");
+
+  checkHas(headers, name, "Has the header");
+  checkGet(headers, name, expectedFirst, "Retrieve first header for name");
+  checkGetAll(headers, name, start.concat(["bar"]), "Retrieve all headers for name");
+
+  headers.append(name, "baz");
+  checkHas(headers, name, "Has the header");
+  checkGet(headers, name, expectedFirst, "Retrieve first header for name");
+  checkGetAll(headers, name, start.concat(["bar","baz"]), "Retrieve all headers for name");
+
+  headers.set(name, "snafu");
+  checkHas(headers, name, "Has the header after set");
+  checkGet(headers, name, "snafu", "Retrieve first header after set");
+  checkGetAll(headers, name, ["snafu"], "Retrieve all headers after set");
+
+  headers.delete(name.toUpperCase());
+  checkNotHas(headers, name, "Does not have the header after delete");
+  checkGet(headers, name, undefined, "Retrieve first header after delete");
+  checkGetAll(headers, name, [], "Retrieve all headers after delete");
+
+  // should be ok to delete non-existent name
+  headers.delete(name);
+
+  shouldThrow(function() {
+    headers.append("foo,", "bam");
+  }, TypeError, "Append invalid header name should throw TypeError.");
+
+  shouldThrow(function() {
+    headers.append(name, "bam\n");
+  }, TypeError, "Append invalid header value should throw TypeError.");
+
+  shouldThrow(function() {
+    headers.append(name, "bam\n\r");
+  }, TypeError, "Append invalid header value should throw TypeError.");
+
+  ok(!headers.guard, "guard should be undefined in content");
+}
+
+function TestEmptyHeaders() {
+  is(typeof Headers, "function", "Headers global constructor exists.");
+  var headers = new Headers();
+  ok(headers, "Constructed empty Headers object");
+  TestCoreBehavior(headers, "foo");
+}
+
+function TestFilledHeaders() {
+  var source = new Headers();
+  var filled = new Headers(source);
+  ok(filled, "Fill header from empty header");
+  TestCoreBehavior(filled, "foo");
+
+  source = new Headers();
+  source.append("abc", "123");
+  source.append("def", "456");
+  source.append("def", "789");
+
+  filled = new Headers(source);
+  checkGetAll(filled, "abc", source.getAll("abc"), "Single value header list matches");
+  checkGetAll(filled, "def", source.getAll("def"), "Multiple value header list matches");
+  TestCoreBehavior(filled, "def");
+
+  filled = new Headers({
+    "zxy": "987",
+    "xwv": "654",
+    "uts": "321"
+  });
+  checkGetAll(filled, "zxy", ["987"], "Has first object filled key");
+  checkGetAll(filled, "xwv", ["654"], "Has second object filled key");
+  checkGetAll(filled, "uts", ["321"], "Has third object filled key");
+  TestCoreBehavior(filled, "xwv");
+
+  filled = new Headers([
+    ["zxy", "987"],
+    ["xwv", "654"],
+    ["uts", "321"]
+  ]);
+  checkGetAll(filled, "zxy", ["987"], "Has first sequence filled key");
+  checkGetAll(filled, "xwv", ["654"], "Has second sequence filled key");
+  checkGetAll(filled, "uts", ["321"], "Has third sequence filled key");
+  TestCoreBehavior(filled, "xwv");
+
+  shouldThrow(function() {
+    filled = new Headers([
+      ["zxy", "987", "654"],
+      ["uts", "321"]
+    ]);
+  }, TypeError, "Fill with non-tuple sequence should throw TypeError.");
+
+  shouldThrow(function() {
+    filled = new Headers([
+      ["zxy"],
+      ["uts", "321"]
+    ]);
+  }, TypeError, "Fill with non-tuple sequence should throw TypeError.");
+}
+
+function TestRequestHeaders() {
+  is(typeof Headers, "function", "Headers global constructor exists.");
+  var headers = new Headers();
+  ok(headers, "Constructed empty Headers object");
+  SpecialPowers.wrap(headers).guard = "request";
+  TestCoreBehavior(headers, "foo");
+  var forbidden = [
+    "Accept-Charset",
+    "Accept-Encoding",
+    "Access-Control-Request-Headers",
+    "Access-Control-Request-Method",
+    "Connection",
+    "Content-Length",
+    "Cookie",
+    "Cookie2",
+    "Date",
+    "DNT",
+    "Expect",
+    "Host",
+    "Keep-Alive",
+    "Origin",
+    "Referer",
+    "TE",
+    "Trailer",
+    "Transfer-Encoding",
+    "Upgrade",
+    "User-Agent",
+    "Via",
+    "Proxy-Authorization",
+    "Proxy-blarg",
+    "Proxy-",
+    "Sec-foo",
+    "Sec-"
+  ];
+
+  for (var i = 0, n = forbidden.length; i < n; ++i) {
+    var name = forbidden[i];
+    headers.append(name, "hmm");
+    checkNotHas(headers, name, "Should not be able to append " + name + " to request headers");
+    headers.set(name, "hmm");
+    checkNotHas(headers, name, "Should not be able to set " + name + " on request headers");
+  }
+}
+
+function TestRequestNoCorsHeaders() {
+  is(typeof Headers, "function", "Headers global constructor exists.");
+  var headers = new Headers();
+  ok(headers, "Constructed empty Headers object");
+  SpecialPowers.wrap(headers).guard = "request-no-cors";
+
+  headers.append("foo", "bar");
+  checkNotHas(headers, "foo", "Should not be able to append arbitrary headers to request-no-cors headers.");
+  headers.set("foo", "bar");
+  checkNotHas(headers, "foo", "Should not be able to set arbitrary headers on request-no-cors headers.");
+
+  var simpleNames = [
+    "Accept",
+    "Accept-Language",
+    "Content-Language"
+  ];
+
+  var simpleContentTypes = [
+    "application/x-www-form-urlencoded",
+    "multipart/form-data",
+    "text/plain",
+    "application/x-www-form-urlencoded; charset=utf-8",
+    "multipart/form-data; charset=utf-8",
+    "text/plain; charset=utf-8"
+  ];
+
+  for (var i = 0, n = simpleNames.length; i < n; ++i) {
+    var name = simpleNames[i];
+    headers.append(name, "hmm");
+    checkHas(headers, name, "Should be able to append " + name + " to request-no-cors headers");
+    headers.set(name, "hmm");
+    checkHas(headers, name, "Should be able to set " + name + " on request-no-cors headers");
+  }
+
+  for (var i = 0, n = simpleContentTypes.length; i < n; ++i) {
+    var value = simpleContentTypes[i];
+    headers.append("Content-Type", value);
+    checkHas(headers, "Content-Type", "Should be able to append " + value + " Content-Type to request-no-cors headers");
+    headers.delete("Content-Type");
+    headers.set("Content-Type", value);
+    checkHas(headers, "Content-Type", "Should be able to set " + value + " Content-Type on request-no-cors headers");
+  }
+}
+
+function TestResponseHeaders() {
+  is(typeof Headers, "function", "Headers global constructor exists.");
+  var headers = new Headers();
+  ok(headers, "Constructed empty Headers object");
+  SpecialPowers.wrap(headers).guard = "response";
+  TestCoreBehavior(headers, "foo");
+  var forbidden = [
+    "Set-Cookie",
+    "Set-Cookie2"
+  ];
+
+  for (var i = 0, n = forbidden.length; i < n; ++i) {
+    var name = forbidden[i];
+    headers.append(name, "hmm");
+    checkNotHas(headers, name, "Should not be able to append " + name + " to response headers");
+    headers.set(name, "hmm");
+    checkNotHas(headers, name, "Should not be able to set " + name + " on response headers");
+  }
+}
+
+function TestImmutableHeaders() {
+  is(typeof Headers, "function", "Headers global constructor exists.");
+  var headers = new Headers();
+  ok(headers, "Constructed empty Headers object");
+  TestCoreBehavior(headers, "foo");
+  headers.append("foo", "atleastone");
+
+  SpecialPowers.wrap(headers).guard = "immutable";
+
+  shouldThrow(function() {
+    headers.append("foo", "wat");
+  }, TypeError, "Should not be able to append to immutable headers");
+
+  shouldThrow(function() {
+    headers.set("foo", "wat");
+  }, TypeError, "Should not be able to set immutable headers");
+
+  shouldThrow(function() {
+    headers.delete("foo");
+  }, TypeError, "Should not be able to delete immutable headers");
+
+  checkHas(headers, "foo", "Should be able to check immutable headers");
+  ok(headers.get("foo"), "Should be able to get immutable headers");
+  ok(headers.getAll("foo").length, "Should be able to get all immutable headers");
+}
+
+//
+// Driver
+//
+
+SpecialPowers.pushPrefEnv({"set": [
+  ["dom.fetch.enabled", true]
+]}, function() {
+  TestEmptyHeaders();
+  TestFilledHeaders();
+  TestRequestHeaders();
+  TestRequestNoCorsHeaders();
+  TestResponseHeaders();
+  TestImmutableHeaders();
+
+  SimpleTest.finish();
+});
+</script>
+</body>
+</html>
diff --git a/dom/tests/mochitest/moz.build b/dom/tests/mochitest/moz.build
--- a/dom/tests/mochitest/moz.build
+++ b/dom/tests/mochitest/moz.build
@@ -4,16 +4,17 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'dom-level0',
     'ajax',
     'beacon',
     'bugs',
+    'fetch',
     'general',
     'geolocation',
     'localstorage',
     'orientation',
     'sessionstorage',
     'storageevent',
     'notification',
     'webcomponents',
diff --git a/dom/workers/test/fetch/mochitest.ini b/dom/workers/test/fetch/mochitest.ini
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/mochitest.ini
@@ -0,0 +1,5 @@
+[DEFAULT]
+support-files =
+  worker_interfaces.js
+
+[test_interfaces.html]
diff --git a/dom/workers/test/fetch/moz.build b/dom/workers/test/fetch/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/moz.build
@@ -0,0 +1,7 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+MOCHITEST_MANIFESTS += ['mochitest.ini']
diff --git a/dom/workers/test/fetch/test_interfaces.html b/dom/workers/test/fetch/test_interfaces.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/test_interfaces.html
@@ -0,0 +1,47 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug 995484 - Test fetch API interfaces</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none"></div>
+<pre id="test"></pre>
+<script class="testbody" type="text/javascript">
+
+  function checkEnabled() {
+    var worker = new Worker("worker_interfaces.js");
+    worker.onmessage = function(event) {
+
+      if (event.data.type == 'finish') {
+        SimpleTest.finish();
+      } else if (event.data.type == 'status') {
+        ok(event.data.status, event.data.msg);
+      }
+    }
+
+    worker.onerror = function(event) {
+      ok(false, "Worker had an error: " + event.data);
+      SimpleTest.finish();
+    };
+
+    worker.postMessage(true);
+  }
+
+  SimpleTest.waitForExplicitFinish();
+
+  SpecialPowers.pushPrefEnv({"set": [
+    ["dom.fetch.enabled", true]
+  ]}, function() {
+    checkEnabled();
+  });
+</script>
+</pre>
+</body>
+</html>
diff --git a/dom/workers/test/fetch/worker_interfaces.js b/dom/workers/test/fetch/worker_interfaces.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/worker_interfaces.js
@@ -0,0 +1,19 @@
+function ok(a, msg) {
+  dump("OK: " + !!a + "  =>  " + a + " " + msg + "\n");
+  postMessage({type: 'status', status: !!a, msg: a + ": " + msg });
+}
+
+function is(a, b, msg) {
+  dump("IS: " + (a===b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a === b, msg: a + " === " + b + ": " + msg });
+}
+
+function isnot(a, b, msg) {
+  dump("ISNOT: " + (a!==b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a !== b, msg: a + " !== " + b + ": " + msg });
+}
+
+onmessage = function() {
+  ok(typeof Headers === "function", "Headers should be defined");
+  postMessage({ type: 'finish' });
+}
diff --git a/dom/workers/test/moz.build b/dom/workers/test/moz.build
--- a/dom/workers/test/moz.build
+++ b/dom/workers/test/moz.build
@@ -1,16 +1,17 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'extensions',
+    'fetch',
     'serviceworkers',
 ]
 
 MOCHITEST_MANIFESTS += ['mochitest.ini']
 
 MOCHITEST_CHROME_MANIFESTS += ['chrome.ini']
 
 XPCSHELL_TESTS_MANIFESTS += ['xpcshell/xpcshell.ini']
