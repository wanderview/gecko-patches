# HG changeset patch
# Parent 14f4ad0769633599b529d4f87004fd97d2de539d
# User Ben Kelly <ben@wanderview.com>
Replace CacheStorage Get+Create with Open per spec change.


diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -114,47 +114,16 @@ CacheStorage::Match(const RequestOrScala
   TypeUtils::ToPCacheQueryParams(params, aParams);
 
   unused << mActor->SendMatch(requestId, request, params);
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
-CacheStorage::Get(const nsAString& aKey, ErrorResult& aRv)
-{
-  NS_ASSERT_OWNINGTHREAD(CacheStorage);
-
-  nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
-  if (!promise) {
-    return nullptr;
-  }
-
-  if (mFailedActor) {
-    promise->MaybeReject(NS_ERROR_UNEXPECTED);
-    return promise.forget();
-  }
-
-  RequestId requestId = AddRequestPromise(promise, aRv);
-
-  if (!mActor) {
-    Entry* entry = mPendingRequests.AppendElement();
-    entry->mRequestId = requestId;
-    entry->mOp = OP_GET;
-    entry->mKey = aKey;
-
-    return promise.forget();
-  }
-
-  unused << mActor->SendGet(requestId, nsString(aKey));
-
-  return promise.forget();
-}
-
-already_AddRefed<Promise>
 CacheStorage::Has(const nsAString& aKey, ErrorResult& aRv)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
@@ -176,17 +145,17 @@ CacheStorage::Has(const nsAString& aKey,
   }
 
   unused << mActor->SendHas(requestId, nsString(aKey));
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
-CacheStorage::Create(const nsAString& aKey, ErrorResult& aRv)
+CacheStorage::Open(const nsAString& aKey, ErrorResult& aRv)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
@@ -195,23 +164,23 @@ CacheStorage::Create(const nsAString& aK
     return promise.forget();
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
   if (!mActor) {
     Entry* entry = mPendingRequests.AppendElement();
     entry->mRequestId = requestId;
-    entry->mOp = OP_CREATE;
+    entry->mOp = OP_OPEN;
     entry->mKey = aKey;
 
     return promise.forget();
   }
 
-  unused << mActor->SendCreate(requestId, nsString(aKey));
+  unused << mActor->SendOpen(requestId, nsString(aKey));
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 CacheStorage::Delete(const nsAString& aKey, ErrorResult& aRv)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
@@ -325,24 +294,21 @@ CacheStorage::ActorCreated(PBackgroundCh
         TypeUtils::ToPCacheRequest(request, entry.mRequest);
 
         PCacheQueryParams params;
         TypeUtils::ToPCacheQueryParams(params, entry.mParams);
 
         unused << mActor->SendMatch(requestId, request, params);
         break;
       }
-      case OP_GET:
-        unused << mActor->SendGet(requestId, entry.mKey);
-        break;
       case OP_HAS:
         unused << mActor->SendHas(requestId, entry.mKey);
         break;
-      case OP_CREATE:
-        unused << mActor->SendCreate(requestId, entry.mKey);
+      case OP_OPEN:
+        unused << mActor->SendOpen(requestId, entry.mKey);
         break;
       case OP_DELETE:
         unused << mActor->SendDelete(requestId, entry.mKey);
         break;
       case OP_KEYS:
         unused << mActor->SendKeys(requestId);
         break;
     }
@@ -402,45 +368,16 @@ CacheStorage::RecvMatchResponse(RequestI
   }
 
   nsRefPtr<Response> response = TypeUtils::ToResponse(mGlobal, aResponse,
                                                       aStreamControl);
   promise->MaybeResolve(response);
 }
 
 void
-CacheStorage::RecvGetResponse(RequestId aRequestId, nsresult aRv,
-                              PCacheChild* aActor)
-{
-  NS_ASSERT_OWNINGTHREAD(CacheStorage);
-
-  nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
-  if (NS_WARN_IF(!promise)) {
-    if (aActor) {
-      PCacheChild::Send__delete__(aActor);
-    }
-    return;
-  }
-
-  if (NS_FAILED(aRv)) {
-    promise->MaybeReject(aRv);
-    return;
-  }
-
-  if (!aActor) {
-    promise->MaybeResolve(JS::UndefinedHandleValue);
-    return;
-  }
-
-  nsRefPtr<Cache> cache = new Cache(mOwner, mGlobal, mOrigin, mBaseDomain,
-                                    aActor);
-  promise->MaybeResolve(cache);
-}
-
-void
 CacheStorage::RecvHasResponse(RequestId aRequestId, nsresult aRv, bool aSuccess)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 
   nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
   if (NS_WARN_IF(!promise)) {
     return;
   }
@@ -450,18 +387,18 @@ CacheStorage::RecvHasResponse(RequestId 
     return;
 
   }
 
   promise->MaybeResolve(aSuccess);
 }
 
 void
-CacheStorage::RecvCreateResponse(RequestId aRequestId, nsresult aRv,
-                                 PCacheChild* aActor)
+CacheStorage::RecvOpenResponse(RequestId aRequestId, nsresult aRv,
+                               PCacheChild* aActor)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 
   nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
   if (NS_WARN_IF(!promise)) {
     if (aActor) {
       PCacheChild::Send__delete__(aActor);
     }
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -46,19 +46,18 @@ class CacheStorage MOZ_FINAL : public ns
 public:
   CacheStorage(Namespace aNamespace, nsISupports* aOwner,
                nsIGlobalObject* aGlobal, const nsACString& aOrigin,
                const nsACString& aBaseDomain);
 
   // webidl interface methods
   already_AddRefed<Promise> Match(const RequestOrScalarValueString& aRequest,
                                   const QueryParams& aParams, ErrorResult& aRv);
-  already_AddRefed<Promise> Get(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Has(const nsAString& aKey, ErrorResult& aRv);
-  already_AddRefed<Promise> Create(const nsAString& aKey, ErrorResult& aRv);
+  already_AddRefed<Promise> Open(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Delete(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Keys(ErrorResult& aRv);
 
   // binding methods
   static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
 
   virtual nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
@@ -67,22 +66,20 @@ public:
   virtual void ActorCreated(PBackgroundChild* aActor) MOZ_OVERRIDE;
   virtual void ActorFailed() MOZ_OVERRIDE;
 
   // CacheStorageChildListener methods
   virtual void ActorDestroy(mozilla::ipc::IProtocol& aActor) MOZ_OVERRIDE;
   virtual void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
                            const PCacheResponseOrVoid& aResponse,
                            PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
-  virtual void RecvGetResponse(RequestId aRequestId, nsresult aRv,
-                               PCacheChild* aActor) MOZ_OVERRIDE;
   virtual void RecvHasResponse(RequestId aRequestId, nsresult aRv,
                                bool aSuccess) MOZ_OVERRIDE;
-  virtual void RecvCreateResponse(RequestId aRequestId, nsresult aRv,
-                                  PCacheChild* aActor) MOZ_OVERRIDE;
+  virtual void RecvOpenResponse(RequestId aRequestId, nsresult aRv,
+                                PCacheChild* aActor) MOZ_OVERRIDE;
   virtual void RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
                                   bool aSuccess) MOZ_OVERRIDE;
   virtual void RecvKeysResponse(RequestId aRequestId, nsresult aRv,
                                 const nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
 
 private:
   virtual ~CacheStorage();
 
@@ -95,19 +92,18 @@ private:
   const nsCString mOrigin;
   const nsCString mBaseDomain;
   CacheStorageChild* mActor;
   nsTArray<nsRefPtr<Promise>> mRequestPromises;
 
   enum Op
   {
     OP_MATCH,
-    OP_GET,
     OP_HAS,
-    OP_CREATE,
+    OP_OPEN,
     OP_DELETE,
     OP_KEYS
   };
 
   struct Entry
   {
     Entry() { }
     ~Entry() { }
diff --git a/dom/cache/CacheStorageChild.cpp b/dom/cache/CacheStorageChild.cpp
--- a/dom/cache/CacheStorageChild.cpp
+++ b/dom/cache/CacheStorageChild.cpp
@@ -39,42 +39,32 @@ CacheStorageChild::RecvMatchResponse(con
                                      PCacheStreamControlChild* aStreamControl)
 {
   MOZ_ASSERT(mListener);
   mListener->RecvMatchResponse(aRequestId, aRv, aResponseOrVoid, aStreamControl);
   return true;
 }
 
 bool
-CacheStorageChild::RecvGetResponse(const RequestId& aRequestId,
-                                   const nsresult& aRv,
-                                   PCacheChild* aActor)
-{
-  MOZ_ASSERT(mListener);
-  mListener->RecvGetResponse(aRequestId, aRv, aActor);
-  return true;
-}
-
-bool
 CacheStorageChild::RecvHasResponse(const RequestId& aRequestId,
                                    const nsresult& aRv,
                                    const bool& aSuccess)
 {
   MOZ_ASSERT(mListener);
   mListener->RecvHasResponse(aRequestId, aRv, aSuccess);
   return true;
 }
 
 bool
-CacheStorageChild::RecvCreateResponse(const RequestId& aRequestId,
-                                      const nsresult& aRv,
-                                      PCacheChild* aActor)
+CacheStorageChild::RecvOpenResponse(const RequestId& aRequestId,
+                                    const nsresult& aRv,
+                                    PCacheChild* aActor)
 {
   MOZ_ASSERT(mListener);
-  mListener->RecvCreateResponse(aRequestId, aRv, aActor);
+  mListener->RecvOpenResponse(aRequestId, aRv, aActor);
   return true;
 }
 
 bool
 CacheStorageChild::RecvDeleteResponse(const RequestId& aRequestId,
                                       const nsresult& aRv,
                                       const bool& aResult)
 {
diff --git a/dom/cache/CacheStorageChild.h b/dom/cache/CacheStorageChild.h
--- a/dom/cache/CacheStorageChild.h
+++ b/dom/cache/CacheStorageChild.h
@@ -22,25 +22,22 @@ class CacheStorageChild MOZ_FINAL : publ
 public:
   CacheStorageChild(CacheStorageChildListener& aListener);
   virtual ~CacheStorageChild();
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvMatchResponse(const RequestId& requestId,
                              const nsresult& aRv,
                              const PCacheResponseOrVoid& response,
                              PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
-  virtual bool RecvGetResponse(const cache::RequestId& aRequestId,
-                               const nsresult& aRv,
-                               PCacheChild* aActor) MOZ_OVERRIDE;
   virtual bool RecvHasResponse(const cache::RequestId& aRequestId,
                                const nsresult& aRv,
                                const bool& aSuccess) MOZ_OVERRIDE;
-  virtual bool RecvCreateResponse(const cache::RequestId& aRequestId,
-                                  const nsresult& aRv,
-                                  PCacheChild* aActor) MOZ_OVERRIDE;
+  virtual bool RecvOpenResponse(const cache::RequestId& aRequestId,
+                                const nsresult& aRv,
+                                PCacheChild* aActor) MOZ_OVERRIDE;
   virtual bool RecvDeleteResponse(const cache::RequestId& aRequestId,
                                   const nsresult& aRv,
                                   const bool& aResult) MOZ_OVERRIDE;
   virtual bool RecvKeysResponse(const cache::RequestId& aRequestId,
                                 const nsresult& aRv,
                                 const nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
 
   void ClearListener();
diff --git a/dom/cache/CacheStorageChildListener.h b/dom/cache/CacheStorageChildListener.h
--- a/dom/cache/CacheStorageChildListener.h
+++ b/dom/cache/CacheStorageChildListener.h
@@ -29,22 +29,20 @@ class PCacheStreamControlChild;
 class CacheStorageChildListener
 {
 public:
   virtual ~CacheStorageChildListener() { }
   virtual void ActorDestroy(mozilla::ipc::IProtocol& aActor)=0;
   virtual void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
                                  const PCacheResponseOrVoid& aResponse,
                                  PCacheStreamControlChild* aStreamControl)=0;
-  virtual void RecvGetResponse(cache::RequestId aRequestId,
-                               nsresult aRv, PCacheChild* aActor)=0;
   virtual void RecvHasResponse(cache::RequestId aRequestId, nsresult aRv,
                                bool aSuccess)=0;
-  virtual void RecvCreateResponse(cache::RequestId aRequestId, nsresult aRv,
-                                  PCacheChild* aActor)=0;
+  virtual void RecvOpenResponse(cache::RequestId aRequestId, nsresult aRv,
+                                PCacheChild* aActor)=0;
   virtual void RecvDeleteResponse(cache::RequestId aRequestId, nsresult aRv,
                                   bool aSuccess)=0;
   virtual void RecvKeysResponse(cache::RequestId aRequestId, nsresult aRv,
                                 const nsTArray<nsString>& aKeys)=0;
 };
 
 } // namespace cache
 } // namespace dom
diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -57,34 +57,27 @@ CacheStorageParent::RecvMatch(const Requ
                               const PCacheRequest& aRequest,
                               const PCacheQueryParams& aParams)
 {
   mManager->StorageMatch(this, aRequestId, mNamespace, aRequest, aParams);
   return true;
 }
 
 bool
-CacheStorageParent::RecvGet(const RequestId& aRequestId, const nsString& aKey)
-{
-  mManager->StorageGet(this, aRequestId, mNamespace, aKey);
-  return true;
-}
-
-bool
 CacheStorageParent::RecvHas(const RequestId& aRequestId, const nsString& aKey)
 {
   mManager->StorageHas(this, aRequestId, mNamespace, aKey);
   return true;
 }
 
 bool
-CacheStorageParent::RecvCreate(const RequestId& aRequestId,
+CacheStorageParent::RecvOpen(const RequestId& aRequestId,
                                const nsString& aKey)
 {
-  mManager->StorageCreate(this, aRequestId, mNamespace, aKey);
+  mManager->StorageOpen(this, aRequestId, mNamespace, aKey);
   return true;
 }
 
 bool
 CacheStorageParent::RecvDelete(const RequestId& aRequestId,
                                const nsString& aKey)
 {
   mManager->StorageDelete(this, aRequestId, mNamespace, aKey);
@@ -126,50 +119,35 @@ CacheStorageParent::OnStorageMatch(Reque
 
   responseOrVoid = aSavedResponse->mValue;
   responseOrVoid.get_PCacheResponse().body() = readStream;
 
   unused << SendMatchResponse(aRequestId, aRv, responseOrVoid, streamControl);
 }
 
 void
-CacheStorageParent::OnStorageGet(RequestId aRequestId, nsresult aRv,
-                                 bool aCacheFound, CacheId aCacheId)
-{
-  if (NS_FAILED(aRv) || !aCacheFound) {
-    unused << SendGetResponse(aRequestId, aRv, nullptr);
-    return;
-  }
-
-  CacheParent* actor = new CacheParent(mOrigin, mBaseDomain, aCacheId);
-  PCacheParent* base = Manager()->SendPCacheConstructor(actor);
-  actor = static_cast<CacheParent*>(base);
-  unused << SendGetResponse(aRequestId, aRv, actor);
-}
-
-void
 CacheStorageParent::OnStorageHas(RequestId aRequestId, nsresult aRv,
                                  bool aCacheFound)
 {
   unused << SendHasResponse(aRequestId, aRv, aCacheFound);
 }
 
 void
-CacheStorageParent::OnStorageCreate(RequestId aRequestId, nsresult aRv,
-                                    CacheId aCacheId)
+CacheStorageParent::OnStorageOpen(RequestId aRequestId, nsresult aRv,
+                                  CacheId aCacheId)
 {
   if (NS_FAILED(aRv)) {
-    unused << SendCreateResponse(aRequestId, aRv, nullptr);
+    unused << SendOpenResponse(aRequestId, aRv, nullptr);
     return;
   }
 
   CacheParent* actor = new CacheParent(mOrigin, mBaseDomain, aCacheId);
   PCacheParent* base = Manager()->SendPCacheConstructor(actor);
   actor = static_cast<CacheParent*>(base);
-  unused << SendCreateResponse(aRequestId, aRv, actor);
+  unused << SendOpenResponse(aRequestId, aRv, actor);
 }
 
 void
 CacheStorageParent::OnStorageDelete(RequestId aRequestId, nsresult aRv,
                                     bool aCacheDeleted)
 {
   unused << SendDeleteResponse(aRequestId, aRv, aCacheDeleted);
 }
diff --git a/dom/cache/CacheStorageParent.h b/dom/cache/CacheStorageParent.h
--- a/dom/cache/CacheStorageParent.h
+++ b/dom/cache/CacheStorageParent.h
@@ -25,37 +25,32 @@ public:
                      const nsACString& mBaseDomain);
   virtual ~CacheStorageParent();
 
   // PCacheStorageParent methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvMatch(const RequestId& aRequestId,
                          const PCacheRequest& aRequest,
                          const PCacheQueryParams& aParams) MOZ_OVERRIDE;
-  virtual bool RecvGet(const RequestId& aRequestId,
-                       const nsString& aKey) MOZ_OVERRIDE;
   virtual bool RecvHas(const RequestId& aRequestId,
                        const nsString& aKey) MOZ_OVERRIDE;
-  virtual bool RecvCreate(const RequestId& aRequestId,
-                          const nsString& aKey) MOZ_OVERRIDE;
+  virtual bool RecvOpen(const RequestId& aRequestId,
+                        const nsString& aKey) MOZ_OVERRIDE;
   virtual bool RecvDelete(const RequestId& aRequestId,
                           const nsString& aKey) MOZ_OVERRIDE;
   virtual bool RecvKeys(const RequestId& aRequestId) MOZ_OVERRIDE;
 
   // Manager::Listener methods
   virtual void OnStorageMatch(RequestId aRequestId, nsresult aRv,
                               const SavedResponse* aResponse,
                               Manager::StreamList* aStreamList) MOZ_OVERRIDE;
-  virtual void OnStorageGet(RequestId aRequestId, nsresult aRv,
-                            bool aCacheFound,
-                            CacheId aCacheId) MOZ_OVERRIDE;
   virtual void OnStorageHas(RequestId aRequestId, nsresult aRv,
                             bool aCacheFound) MOZ_OVERRIDE;
-  virtual void OnStorageCreate(RequestId aRequestId, nsresult aRv,
-                               CacheId aCacheId) MOZ_OVERRIDE;
+  virtual void OnStorageOpen(RequestId aRequestId, nsresult aRv,
+                             CacheId aCacheId) MOZ_OVERRIDE;
   virtual void OnStorageDelete(RequestId aRequestId, nsresult aRv,
                                bool aCacheDeleted) MOZ_OVERRIDE;
   virtual void OnStorageKeys(RequestId aRequestId, nsresult aRv,
                              const nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
 
 private:
   Manager::StreamControl*
   SerializeReadStream(Manager::StreamControl *aStreamControl, const nsID& aId,
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -842,109 +842,99 @@ protected:
   const Namespace mNamespace;
   const PCacheRequest mRequest;
   const PCacheQueryParams mParams;
   nsRefPtr<StreamList> mStreamList;
   bool mFoundResponse;
   SavedResponse mSavedResponse;
 };
 
-class Manager::StorageGetAction : public Manager::BaseAction
+class Manager::StorageHasAction : public Manager::BaseAction
 {
 public:
-  StorageGetAction(Manager* aManager, ListenerId aListenerId,
+  StorageHasAction(Manager* aManager, ListenerId aListenerId,
                    RequestId aRequestId, Namespace aNamespace,
                    const nsAString& aKey)
     : BaseAction(aManager, aListenerId, aRequestId)
     , mNamespace(aNamespace)
     , mKey(aKey)
     , mCacheFound(false)
-    , mCacheId(0)
   { }
 
   virtual nsresult
   RunSyncWithDBOnTarget(nsIFile* aDBDir,
                         mozIStorageConnection* aConn) MOZ_OVERRIDE
   {
+    CacheId cacheId;
     return DBSchema::StorageGetCacheId(aConn, mNamespace, mKey,
-                                       &mCacheFound, &mCacheId);
+                                       &mCacheFound, &cacheId);
   }
 
   virtual void
   Complete(Listener* aListener, nsresult aRv) MOZ_OVERRIDE
   {
-    aListener->OnStorageGet(mRequestId, aRv, mCacheFound, mCacheId);
-  }
-
-protected:
-  virtual ~StorageGetAction() { }
-  const Namespace mNamespace;
-  const nsString mKey;
-  bool mCacheFound;
-  CacheId mCacheId;
-};
-
-class Manager::StorageHasAction MOZ_FINAL : public Manager::StorageGetAction
-{
-public:
-  StorageHasAction(Manager* aManager, ListenerId aListenerId,
-                   RequestId aRequestId, Namespace aNamespace,
-                   const nsAString& aKey)
-    : StorageGetAction(aManager, aListenerId, aRequestId, aNamespace, aKey)
-  { }
-
-  virtual void
-  Complete(Listener* aListener, nsresult aRv) MOZ_OVERRIDE
-  {
     aListener->OnStorageHas(mRequestId, aRv, mCacheFound);
   }
 
-private:
+protected:
   virtual ~StorageHasAction() { }
+  const Namespace mNamespace;
+  const nsString mKey;
+  bool mCacheFound;
 };
 
-class Manager::StorageCreateAction MOZ_FINAL : public Manager::BaseAction
+class Manager::StorageOpenAction MOZ_FINAL : public Manager::BaseAction
 {
 public:
-  StorageCreateAction(Manager* aManager, ListenerId aListenerId,
-                      RequestId aRequestId, Namespace aNamespace,
-                      const nsAString& aKey)
+  StorageOpenAction(Manager* aManager, ListenerId aListenerId,
+                    RequestId aRequestId, Namespace aNamespace,
+                    const nsAString& aKey)
     : BaseAction(aManager, aListenerId, aRequestId)
     , mNamespace(aNamespace)
     , mKey(aKey)
     , mCacheId(0)
   { }
 
   virtual nsresult
   RunSyncWithDBOnTarget(nsIFile* aDBDir,
                         mozIStorageConnection* aConn) MOZ_OVERRIDE
   {
+    // Look for existing cache
+    bool cacheFound;
+    nsresult rv = DBSchema::StorageGetCacheId(aConn, mNamespace, mKey,
+                                              &cacheFound, &mCacheId);
+    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+    if (cacheFound) {
+      return rv;
+    }
+
+    // Cache does not exist, create it instead
     mozStorageTransaction trans(aConn, false,
                                 mozIStorageConnection::TRANSACTION_IMMEDIATE);
 
-    nsresult rv = DBSchema::CreateCache(aConn, &mCacheId);
+    rv = DBSchema::CreateCache(aConn, &mCacheId);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
     rv = DBSchema::StoragePutCache(aConn, mNamespace, mKey, mCacheId);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
     rv = trans.Commit();
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
     return rv;
   }
 
   virtual void
   Complete(Listener* aListener, nsresult aRv) MOZ_OVERRIDE
   {
-    aListener->OnStorageCreate(mRequestId, aRv, mCacheId);
+    aListener->OnStorageOpen(mRequestId, aRv, mCacheId);
   }
 
 private:
-  virtual ~StorageCreateAction() { }
+  virtual ~StorageOpenAction() { }
   const Namespace mNamespace;
   const nsString mKey;
   CacheId mCacheId;
 };
 
 class Manager::StorageDeleteAction MOZ_FINAL : public Manager::BaseAction
 {
 public:
@@ -1364,33 +1354,16 @@ Manager::StorageMatch(Listener* aListene
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new StorageMatchAction(this, listenerId, aRequestId,
                                                    aNamespace, aRequest,
                                                    aParams, streamList);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
-Manager::StorageGet(Listener* aListener, RequestId aRequestId,
-                    Namespace aNamespace, const nsAString& aKey)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager);
-  MOZ_ASSERT(aListener);
-  if (mShuttingDown) {
-    aListener->OnStorageGet(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
-                            false, 0);
-    return;
-  }
-  ListenerId listenerId = SaveListener(aListener);
-  nsRefPtr<Action> action = new StorageGetAction(this, listenerId, aRequestId,
-                                                 aNamespace, aKey);
-  CurrentContext()->Dispatch(mIOThread, action);
-}
-
-void
 Manager::StorageHas(Listener* aListener, RequestId aRequestId,
                     Namespace aNamespace, const nsAString& aKey)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
     aListener->OnStorageHas(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
                             false);
@@ -1398,28 +1371,28 @@ Manager::StorageHas(Listener* aListener,
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new StorageHasAction(this, listenerId, aRequestId,
                                                  aNamespace, aKey);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
-Manager::StorageCreate(Listener* aListener, RequestId aRequestId,
-                       Namespace aNamespace, const nsAString& aKey)
+Manager::StorageOpen(Listener* aListener, RequestId aRequestId,
+                     Namespace aNamespace, const nsAString& aKey)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
-    aListener->OnStorageCreate(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN, 0);
+    aListener->OnStorageOpen(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN, 0);
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
-  nsRefPtr<Action> action = new StorageCreateAction(this, listenerId, aRequestId,
-                                                    aNamespace, aKey);
+  nsRefPtr<Action> action = new StorageOpenAction(this, listenerId, aRequestId,
+                                                  aNamespace, aKey);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::StorageDelete(Listener* aListener, RequestId aRequestId,
                        Namespace aNamespace, const nsAString& aKey)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -100,22 +100,20 @@ public:
                                bool aSuccess) { }
     virtual void OnCacheKeys(RequestId aRequestId, nsresult aRv,
                              const nsTArray<SavedRequest>& aSavedRequests,
                              StreamList* aStreamList) { }
 
     virtual void OnStorageMatch(RequestId aRequestId, nsresult aRv,
                                 const SavedResponse* aResponse,
                                 StreamList* aStreamList) { }
-    virtual void OnStorageGet(RequestId aRequestId, nsresult aRv,
-                              bool aCacheFound, CacheId aCacheId) { }
     virtual void OnStorageHas(RequestId aRequestId, nsresult aRv,
                               bool aCacheFound) { }
-    virtual void OnStorageCreate(RequestId aRequestId, nsresult aRv,
-                                 CacheId aCacheId) { }
+    virtual void OnStorageOpen(RequestId aRequestId, nsresult aRv,
+                               CacheId aCacheId) { }
     virtual void OnStorageDelete(RequestId aRequestId, nsresult aRv,
                                  bool aCacheDeleted) { }
     virtual void OnStorageKeys(RequestId aRequestId, nsresult aRv,
                                const nsTArray<nsString>& aKeys) { }
   };
 
   static already_AddRefed<Manager> ForOrigin(const nsACString& aOrigin,
                                              const nsACString& aBaseDomain);
@@ -144,22 +142,20 @@ public:
                    const PCacheQueryParams& aParams);
   void CacheKeys(Listener* aListener, RequestId aRequestId,
                  CacheId aCacheId, const PCacheRequestOrVoid& aRequestOrVoid,
                  const PCacheQueryParams& aParams);
 
   void StorageMatch(Listener* aListener, RequestId aRequestId,
                     Namespace aNamespace, const PCacheRequest& aRequest,
                     const PCacheQueryParams& aParams);
-  void StorageGet(Listener* aListener, RequestId aRequestId,
-                  Namespace aNamespace, const nsAString& aKey);
   void StorageHas(Listener* aListener, RequestId aRequestId,
                   Namespace aNamespace, const nsAString& aKey);
-  void StorageCreate(Listener* aListener, RequestId aRequestId,
-                     Namespace aNamespace, const nsAString& aKey);
+  void StorageOpen(Listener* aListener, RequestId aRequestId,
+                   Namespace aNamespace, const nsAString& aKey);
   void StorageDelete(Listener* aListener, RequestId aRequestId,
                      Namespace aNamespace, const nsAString& aKey);
   void StorageKeys(Listener* aListener, RequestId aRequestId,
                    Namespace aNamespace);
 
   const nsCString& Origin() const { return mOrigin; }
   const nsCString& BaseDomain() const { return mBaseDomain; }
 
@@ -174,19 +170,18 @@ private:
 
   class CacheMatchAction;
   class CacheMatchAllAction;
   class CachePutAction;
   class CacheDeleteAction;
   class CacheKeysAction;
 
   class StorageMatchAction;
-  class StorageGetAction;
   class StorageHasAction;
-  class StorageCreateAction;
+  class StorageOpenAction;
   class StorageDeleteAction;
   class StorageKeysAction;
 
   typedef uintptr_t ListenerId;
 
   Manager(const nsACString& aOrigin, const nsACString& aBaseDomain);
   ~Manager();
   Context* CurrentContext();
diff --git a/dom/cache/PCacheStorage.ipdl b/dom/cache/PCacheStorage.ipdl
--- a/dom/cache/PCacheStorage.ipdl
+++ b/dom/cache/PCacheStorage.ipdl
@@ -18,29 +18,27 @@ namespace cache {
 
 protocol PCacheStorage
 {
   manager PBackground;
 
 parent:
   Match(RequestId aRequestId, PCacheRequest aRequest,
         PCacheQueryParams aParams);
-  Get(RequestId aRequestId, nsString aKey);
   Has(RequestId aRequestId, nsString aKey);
-  Create(RequestId aRequestId, nsString aKey);
+  Open(RequestId aRequestId, nsString aKey);
   Delete(RequestId aRequestId, nsString aKey);
   Keys(RequestId aRequestId);
 
 child:
   MatchResponse(RequestId aRequestId, nsresult aRv,
                 PCacheResponseOrVoid aResponseOrVoid,
                 nullable PCacheStreamControl aStreamControl);
-  GetResponse(RequestId aRequestId, nsresult aRv, nullable PCache aActor);
   HasResponse(RequestId aRequestId, nsresult aRv, bool aSuccess);
-  CreateResponse(RequestId aRequestId, nsresult aRv, nullable PCache aActor);
+  OpenResponse(RequestId aRequestId, nsresult aRv, nullable PCache aActor);
   DeleteResponse(RequestId aRequestId, nsresult aRv, bool aSuccess);
   KeysResponse(RequestId aRequestId, nsresult aRv, nsString[] aKeys);
 
 both:
   __delete__();
 };
 
 } // namespace cache
diff --git a/dom/tests/mochitest/cache/test_cache.js b/dom/tests/mochitest/cache/test_cache.js
--- a/dom/tests/mochitest/cache/test_cache.js
+++ b/dom/tests/mochitest/cache/test_cache.js
@@ -1,22 +1,19 @@
 ok(!!caches, 'caches object should be available on global');
-caches.create('snafu').then(function(createCache) {
-  ok(!!createCache, 'cache object should be resolved from caches.create');
-  return caches.get('snafu');
-}).then(function(getCache) {
-  ok(!!getCache, 'cache object should be resolved from caches.get');
+caches.open('snafu').then(function(openCache) {
+  ok(!!openCache, 'cache object should be resolved from caches.open');
   return caches.has('snafu');
 }).then(function(hasResult) {
   ok(hasResult, 'caches.has() should resolve true');
   return caches.keys();
 }).then(function(keys) {
   ok(!!keys, 'caches.keys() should resolve to a truthy value');
   is(1, keys.length, 'caches.keys() should resolve to an array of length 1');
   is(0, keys.indexOf('snafu'), 'caches.keys() should resolve to an array containing key');
   return caches.delete('snafu');
 }).then(function(deleteResult) {
   ok(deleteResult, 'caches.delete() should resolve true');
-  return caches.get('snafu');
-}).then(function(getMissingCache) {
-  is(undefined, getMissingCache, 'missing key should resolve to undefined cache');
+  return caches.has('snafu');
+}).then(function(hasMissingCache) {
+  ok(!hasMissingCache, 'missing key should return false from has');
   workerTestDone();
 });
diff --git a/dom/tests/mochitest/cache/test_cache_frame.html b/dom/tests/mochitest/cache/test_cache_frame.html
--- a/dom/tests/mochitest/cache/test_cache_frame.html
+++ b/dom/tests/mochitest/cache/test_cache_frame.html
@@ -12,22 +12,19 @@
   "use strict";
   addEventListener("message", function messageListener(evt) {
     removeEventListener("message", messageListener);
     var success = true;
     var c = null
     var request = new Request("http://example.com/hmm?q=foobar");
     var response = new Response();
     success = success && !!caches;
-    caches.create("foobar").then(function(createCache) {
-      success = success && !!createCache;
-      return caches.get("foobar");
-    }).then(function(getCache) {
-      success = success && !!getCache;
-      c = getCache;
+    caches.open("foobar").then(function(openCache) {
+      success = success && !!openCache;
+      c = openCache;
       return c.put(request, response);
     }).then(function(putResponse) {
       success = success && !!putResponse;
       return c.keys(request);
     }).then(function(keys) {
       success = success && !!keys;
       success = success && keys.length === 1;
       return c.keys();
@@ -68,19 +65,19 @@
       return caches.keys();
     }).then(function(keys) {
       success = success && !!keys;
       success = success && keys.length === 1;
       success = success && keys.indexOf("foobar") === 0;
       return caches.delete("foobar");
     }).then(function(deleteResult) {
       success = success && deleteResult;
-      return caches.get("foobar");
-    }).then(function(getMissingCache) {
-      success = success && getMissingCache === undefined;
+      return caches.has("foobar");
+    }).then(function(hasMissingCache) {
+      success = success && !hasMissingCache;
       parent.postMessage({
         type: "result",
         success: success
       }, "*");
     });
   });
 </script>
 </body>
diff --git a/dom/webidl/CacheStorage.webidl b/dom/webidl/CacheStorage.webidl
--- a/dom/webidl/CacheStorage.webidl
+++ b/dom/webidl/CacheStorage.webidl
@@ -8,14 +8,13 @@
  *
  */
 
 [Exposed=(Window,Worker),
  Func="mozilla::dom::cache::CacheStorage::PrefEnabled"]
 interface CacheStorage {
    [Throws] Promise<Response> match((Request or ScalarValueString) request,
                                     optional QueryParams params);
-   [Throws] Promise<Cache> get(DOMString cacheName);
    [Throws] Promise<boolean> has(DOMString cacheName);
-   [Throws] Promise<Cache> create(DOMString cacheName);
+   [Throws] Promise<Cache> open(DOMString cacheName);
    [Throws] Promise<boolean> delete(DOMString cacheName);
    [Throws] Promise<sequence<DOMString>> keys();
 };
