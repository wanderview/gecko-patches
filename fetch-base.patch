# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  f46f56f0e6a18b61844b15aba0db73c9a0346585

diff --git a/dom/fetch/Request.cpp b/dom/fetch/Request.cpp
--- a/dom/fetch/Request.cpp
+++ b/dom/fetch/Request.cpp
@@ -314,17 +314,18 @@ Request::Constructor(const GlobalObject&
   } else {
     // aInput is USVString.
     // We need to get url before we create a InternalRequest.
     nsAutoString input;
     input.Assign(aInput.GetAsUSVString());
     nsAutoString requestURL;
     nsCString fragment;
     if (NS_IsMainThread()) {
-      nsIDocument* doc = GetEntryDocument();
+      nsCOMPtr<nsPIDOMWindowInner> inner(do_QueryInterface(global));
+      nsIDocument* doc = inner ? inner->GetExtantDoc() : nullptr;
       if (doc) {
         GetRequestURLFromDocument(doc, input, requestURL, fragment, aRv);
       } else {
         // If we don't have a document, we must assume that this is a full URL.
         GetRequestURLFromChrome(input, requestURL, fragment, aRv);
       }
     } else {
       GetRequestURLFromWorker(aGlobal, input, requestURL, fragment, aRv);
@@ -363,17 +364,18 @@ Request::Constructor(const GlobalObject&
   }
   if (aInit.mReferrer.WasPassed()) {
     const nsString& referrer = aInit.mReferrer.Value();
     if (referrer.IsEmpty()) {
       request->SetReferrer(NS_LITERAL_STRING(""));
     } else {
       nsAutoString referrerURL;
       if (NS_IsMainThread()) {
-        nsIDocument* doc = GetEntryDocument();
+        nsCOMPtr<nsPIDOMWindowInner> inner(do_QueryInterface(global));
+        nsIDocument* doc = inner ? inner->GetExtantDoc() : nullptr;
         nsCOMPtr<nsIURI> uri;
         if (doc) {
           uri = ParseURLFromDocument(doc, referrer, aRv);
         } else {
           // If we don't have a document, we must assume that this is a full URL.
           uri = ParseURLFromChrome(referrer, aRv);
         }
         if (NS_WARN_IF(aRv.Failed())) {
diff --git a/dom/fetch/Response.cpp b/dom/fetch/Response.cpp
--- a/dom/fetch/Response.cpp
+++ b/dom/fetch/Response.cpp
@@ -95,17 +95,18 @@ Response::Error(const GlobalObject& aGlo
 /* static */ already_AddRefed<Response>
 Response::Redirect(const GlobalObject& aGlobal, const nsAString& aUrl,
                    uint16_t aStatus, ErrorResult& aRv)
 {
   nsAutoString parsedURL;
 
   if (NS_IsMainThread()) {
     nsCOMPtr<nsIURI> baseURI;
-    nsIDocument* doc = GetEntryDocument();
+    nsCOMPtr<nsPIDOMWindowInner> inner(do_QueryInterface(aGlobal.GetAsSupports()));
+    nsIDocument* doc = inner ? inner->GetExtantDoc() : nullptr;
     if (doc) {
       baseURI = doc->GetBaseURI();
     }
     nsCOMPtr<nsIURI> resolvedURI;
     aRv = NS_NewURI(getter_AddRefs(resolvedURI), aUrl, nullptr, baseURI);
     if (NS_WARN_IF(aRv.Failed())) {
       return nullptr;
     }
diff --git a/testing/web-platform/meta/fetch/api/request/multi-globals/url-parsing.html.ini b/testing/web-platform/meta/fetch/api/request/multi-globals/url-parsing.html.ini
deleted file mode 100644
--- a/testing/web-platform/meta/fetch/api/request/multi-globals/url-parsing.html.ini
+++ /dev/null
@@ -1,4 +0,0 @@
-[url-parsing.html]
-  [should parse the URL relative to the current settings object]
-    expected: FAIL
-
diff --git a/testing/web-platform/meta/fetch/api/response/multi-globals/url-parsing.html.ini b/testing/web-platform/meta/fetch/api/response/multi-globals/url-parsing.html.ini
deleted file mode 100644
--- a/testing/web-platform/meta/fetch/api/response/multi-globals/url-parsing.html.ini
+++ /dev/null
@@ -1,4 +0,0 @@
-[url-parsing.html]
-  [should parse the redirect Location URL relative to the current settings object]
-    expected: FAIL
-
diff --git a/testing/web-platform/meta/service-workers/service-worker/claim-fetch.https.html.ini b/testing/web-platform/meta/service-workers/service-worker/claim-fetch.https.html.ini
deleted file mode 100644
--- a/testing/web-platform/meta/service-workers/service-worker/claim-fetch.https.html.ini
+++ /dev/null
@@ -1,4 +0,0 @@
-[claim-fetch.https.html]
-  [fetch() should be intercepted after the client is claimed.]
-    expected: FAIL
-
