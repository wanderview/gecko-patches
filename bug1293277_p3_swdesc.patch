# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  bf6b0dd2d84042a12590fdbf12f2164fa814abd4
Bug 1293277 P3 Add a ServiceWorkerDescriptor type to represent a thread-safe snapshot of a ServiceWorkerInfo. r=baku

diff --git a/dom/workers/IPCServiceWorkerDescriptor.ipdlh b/dom/workers/IPCServiceWorkerDescriptor.ipdlh
new file mode 100644
--- /dev/null
+++ b/dom/workers/IPCServiceWorkerDescriptor.ipdlh
@@ -0,0 +1,24 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+include PBackgroundSharedTypes;
+
+using ServiceWorkerState from "mozilla/dom/ServiceWorkerIPCUtils.h";
+
+namespace mozilla {
+namespace dom {
+
+// IPC type with enough information to create a ServiceWorker DOM object
+// in a child process.  Note that the state may be slightly out-of-sync
+// with the parent and should be updated dynamically if necessary.
+struct IPCServiceWorkerDescriptor
+{
+  uint64_t id;
+  PrincipalInfo principalInfo;
+  nsCString scope;
+  ServiceWorkerState state;
+};
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/workers/ServiceWorkerDescriptor.cpp b/dom/workers/ServiceWorkerDescriptor.cpp
new file mode 100644
--- /dev/null
+++ b/dom/workers/ServiceWorkerDescriptor.cpp
@@ -0,0 +1,107 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ServiceWorkerDescriptor.h"
+#include "mozilla/dom/IPCServiceWorkerDescriptor.h"
+#include "mozilla/dom/ServiceWorkerBinding.h"
+#include "mozilla/ipc/PBackgroundSharedTypes.h"
+
+namespace mozilla {
+namespace dom {
+
+ServiceWorkerDescriptor::ServiceWorkerDescriptor()
+  : mData(MakeUnique<IPCServiceWorkerDescriptor>())
+{
+}
+
+ServiceWorkerDescriptor::ServiceWorkerDescriptor(uint64_t aId,
+                                                 const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
+                                                 const nsACString& aScope,
+                                                 ServiceWorkerState aState)
+  : mData(MakeUnique<IPCServiceWorkerDescriptor>(aId, aPrincipalInfo,
+                                                 nsCString(aScope), aState))
+{
+}
+
+ServiceWorkerDescriptor::ServiceWorkerDescriptor(const IPCServiceWorkerDescriptor& aDescriptor)
+  : mData(MakeUnique<IPCServiceWorkerDescriptor>(aDescriptor))
+{
+}
+
+ServiceWorkerDescriptor::ServiceWorkerDescriptor(const ServiceWorkerDescriptor& aRight)
+{
+  operator=(aRight);
+}
+
+ServiceWorkerDescriptor&
+ServiceWorkerDescriptor::operator=(const ServiceWorkerDescriptor& aRight)
+{
+  mData.reset();
+  mData = MakeUnique<IPCServiceWorkerDescriptor>(*aRight.mData);
+  return *this;
+}
+
+ServiceWorkerDescriptor::ServiceWorkerDescriptor(ServiceWorkerDescriptor&& aRight)
+  : mData(Move(aRight.mData))
+{
+}
+
+ServiceWorkerDescriptor&
+ServiceWorkerDescriptor::operator=(ServiceWorkerDescriptor&& aRight)
+{
+  mData.reset();
+  mData = Move(aRight.mData);
+  return *this;
+}
+
+ServiceWorkerDescriptor::~ServiceWorkerDescriptor()
+{
+}
+
+bool
+ServiceWorkerDescriptor::operator==(const ServiceWorkerDescriptor& aRight) const
+{
+  return *mData == *aRight.mData;
+}
+
+uint64_t
+ServiceWorkerDescriptor::Id() const
+{
+  return mData->id();
+}
+
+const mozilla::ipc::PrincipalInfo&
+ServiceWorkerDescriptor::PrincipalInfo() const
+{
+  return mData->principalInfo();
+}
+
+const nsCString&
+ServiceWorkerDescriptor::Scope() const
+{
+  return mData->scope();
+}
+
+ServiceWorkerState
+ServiceWorkerDescriptor::State() const
+{
+  return mData->state();
+}
+
+void
+ServiceWorkerDescriptor::SetState(ServiceWorkerState aState)
+{
+  mData->state() = aState;
+}
+
+const IPCServiceWorkerDescriptor&
+ServiceWorkerDescriptor::ToIPC() const
+{
+  return *mData;
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/workers/ServiceWorkerDescriptor.h b/dom/workers/ServiceWorkerDescriptor.h
new file mode 100644
--- /dev/null
+++ b/dom/workers/ServiceWorkerDescriptor.h
@@ -0,0 +1,79 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#ifndef _mozilla_dom_ServiceWorkerDescriptor_h
+#define _mozilla_dom_ServiceWorkerDescriptor_h
+
+namespace mozilla {
+
+namespace ipc {
+class PrincipalInfo;
+} // namespace ipc
+
+namespace dom {
+
+class IPCServiceWorkerDescriptor;
+enum class ServiceWorkerState : uint8_t;
+
+// This class represents a snapshot of a particular ServiceWorkerInfo object.
+// It is threadsafe and can be transferred across processes.  This is useful
+// because most of its values are immutable and can be relied upon to be
+// accurate. Currently the only variable field is the ServiceWorkerState.
+class ServiceWorkerDescriptor final
+{
+  // This class is largely a wrapper wround an IPDL generated struct.  We
+  // need the wrapper class since IPDL generated code includes windows.h
+  // which is in turn incompatible with bindings code.
+  UniquePtr<IPCServiceWorkerDescriptor> mData;
+
+public:
+  ServiceWorkerDescriptor();
+
+  ServiceWorkerDescriptor(uint64_t aId,
+                          const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
+                          const nsACString& aScope,
+                          ServiceWorkerState aState);
+
+  explicit ServiceWorkerDescriptor(const IPCServiceWorkerDescriptor& aDescriptor);
+
+  ServiceWorkerDescriptor(const ServiceWorkerDescriptor& aRight);
+
+  ServiceWorkerDescriptor&
+  operator=(const ServiceWorkerDescriptor& aRight);
+
+  ServiceWorkerDescriptor(ServiceWorkerDescriptor&& aRight);
+
+  ServiceWorkerDescriptor&
+  operator=(ServiceWorkerDescriptor&& aRight);
+
+  ~ServiceWorkerDescriptor();
+
+  bool
+  operator==(const ServiceWorkerDescriptor& aRight) const;
+
+  uint64_t
+  Id() const;
+
+  const mozilla::ipc::PrincipalInfo&
+  PrincipalInfo() const;
+
+  const nsCString&
+  Scope() const;
+
+  ServiceWorkerState
+  State() const;
+
+  void
+  SetState(ServiceWorkerState aState);
+
+  // Expose the underlying IPC type so that it can be passed via IPC.
+  const IPCServiceWorkerDescriptor&
+  ToIPC() const;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // _mozilla_dom_ServiceWorkerDescriptor_h
diff --git a/dom/workers/ServiceWorkerIPCUtils.h b/dom/workers/ServiceWorkerIPCUtils.h
new file mode 100644
--- /dev/null
+++ b/dom/workers/ServiceWorkerIPCUtils.h
@@ -0,0 +1,23 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#ifndef _mozilla_dom_ServiceWorkerIPCUtils_h
+#define _mozilla_dom_ServiceWorkerIPCUtils_h
+
+#include "ipc/IPCMessageUtils.h"
+#include "mozilla/dom/ServiceWorkerBinding.h"
+
+namespace IPC {
+
+  template<>
+  struct ParamTraits<mozilla::dom::ServiceWorkerState> :
+    public ContiguousEnumSerializer<mozilla::dom::ServiceWorkerState,
+                                    mozilla::dom::ServiceWorkerState::Parsed,
+                                    mozilla::dom::ServiceWorkerState::EndGuard_>
+  {};
+
+} // namespace IPC
+
+#endif // _mozilla_dom_ServiceWorkerIPCUtils_h
diff --git a/dom/workers/moz.build b/dom/workers/moz.build
--- a/dom/workers/moz.build
+++ b/dom/workers/moz.build
@@ -7,17 +7,19 @@
 with Files("**"):
     BUG_COMPONENT = ("Core", "DOM: Workers")
 
 # Public stuff.
 EXPORTS.mozilla.dom += [
     'FileReaderSync.h',
     'ServiceWorkerCommon.h',
     'ServiceWorkerContainer.h',
+    'ServiceWorkerDescriptor.h',
     'ServiceWorkerEvents.h',
+    'ServiceWorkerIPCUtils.h',
     'ServiceWorkerRegistrar.h',
     'ServiceWorkerRegistration.h',
     'WorkerLocation.h',
     'WorkerNavigator.h',
     'WorkerPrefs.h',
     'WorkerPrivate.h',
     'WorkerRunnable.h',
     'WorkerScope.h',
@@ -56,16 +58,17 @@ UNIFIED_SOURCES += [
     'Principal.cpp',
     'RegisterBindings.cpp',
     'RuntimeService.cpp',
     'ScriptLoader.cpp',
     'ServiceWorker.cpp',
     'ServiceWorkerClient.cpp',
     'ServiceWorkerClients.cpp',
     'ServiceWorkerContainer.cpp',
+    'ServiceWorkerDescriptor.cpp',
     'ServiceWorkerEvents.cpp',
     'ServiceWorkerInfo.cpp',
     'ServiceWorkerJob.cpp',
     'ServiceWorkerJobQueue.cpp',
     'ServiceWorkerManager.cpp',
     'ServiceWorkerManagerChild.cpp',
     'ServiceWorkerManagerParent.cpp',
     'ServiceWorkerManagerService.cpp',
@@ -88,16 +91,17 @@ UNIFIED_SOURCES += [
     'WorkerNavigator.cpp',
     'WorkerPrivate.cpp',
     'WorkerRunnable.cpp',
     'WorkerScope.cpp',
     'WorkerThread.cpp',
 ]
 
 IPDL_SOURCES += [
+    'IPCServiceWorkerDescriptor.ipdlh',
     'PServiceWorkerManager.ipdl',
     'PServiceWorkerUpdater.ipdl',
     'ServiceWorkerRegistrarTypes.ipdlh',
 ]
 
 LOCAL_INCLUDES += [
     '../base',
     '../system',
