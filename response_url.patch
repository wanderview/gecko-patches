# HG changeset patch
# Parent 9dba77835bb63a629f2139c306c2d121dc268a3b
# User Ben Kelly <ben@wanderview.com>
Store Response url in cache.


diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -124,16 +124,17 @@ ToPCacheRequest(PCacheRequest& aOut,
   }
   ToPCacheRequest(aOut, *request);
 }
 
 static void
 ToPCacheResponse(PCacheResponse& aOut, const Response& aIn)
 {
   aOut.type() = aIn.Type();
+  aIn.GetUrl(aOut.url());
   aOut.status() = aIn.Status();
   aIn.GetStatusText(aOut.statusText());
   nsRefPtr<Headers> headers = aIn.Headers_();
   MOZ_ASSERT(headers);
   headers->GetPHeaders(aOut.headers());
 }
 
 static void
diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -66,16 +66,17 @@ DBSchema::CreateSchema(mozIStorageConnec
         "id INTEGER NOT NULL PRIMARY KEY, "
         "request_method TEXT NOT NULL, "
         "request_url TEXT NOT NULL, "
         "request_url_no_query TEXT NOT NULL, "
         "request_mode INTEGER NOT NULL, "
         "request_credentials INTEGER NOT NULL, "
         "request_body_id TEXT NULL, "
         "response_type INTEGER NOT NULL, "
+        "response_url TEXT NOT NULL, "
         "response_status INTEGER NOT NULL, "
         "response_status_text TEXT NOT NULL, "
         "response_body_id TEXT NOT NULL, "
         "cache_id INTEGER NOT NULL REFERENCES caches(id) ON DELETE CASCADE"
       ");"
     ));
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
@@ -764,21 +765,22 @@ DBSchema::InsertEntry(mozIStorageConnect
     "INSERT INTO entries ("
       "request_method, "
       "request_url, "
       "request_url_no_query, "
       "request_mode, "
       "request_credentials, "
       "request_body_id, "
       "response_type, "
+      "response_url, "
       "response_status, "
       "response_status_text, "
       "response_body_id, "
       "cache_id "
-    ") VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11)"
+    ") VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12)"
   ), getter_AddRefs(state));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->BindUTF8StringParameter(0, aRequest.method());
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->BindStringParameter(1, aRequest.url());
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
@@ -794,26 +796,29 @@ DBSchema::InsertEntry(mozIStorageConnect
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = BindId(state, 5, aRequestBodyId);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->BindInt32Parameter(6, static_cast<int32_t>(aResponse.type()));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  rv = state->BindInt32Parameter(7, aResponse.status());
+  rv = state->BindStringParameter(7, aResponse.url());
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  rv = state->BindUTF8StringParameter(8, aResponse.statusText());
+  rv = state->BindInt32Parameter(8, aResponse.status());
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  rv = BindId(state, 9, aResponseBodyId);
+  rv = state->BindUTF8StringParameter(9, aResponse.statusText());
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  rv = state->BindInt32Parameter(10, aCacheId);
+  rv = BindId(state, 10, aResponseBodyId);
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
+  rv = state->BindInt32Parameter(11, aCacheId);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->Execute();
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = aConn->CreateStatement(NS_LITERAL_CSTRING(
     "SELECT last_insert_rowid()"
   ), getter_AddRefs(state));
@@ -888,16 +893,17 @@ DBSchema::ReadResponse(mozIStorageConnec
 {
   MOZ_ASSERT(aConn);
   MOZ_ASSERT(aSavedResponseOut);
 
   nsCOMPtr<mozIStorageStatement> state;
   nsresult rv = aConn->CreateStatement(NS_LITERAL_CSTRING(
     "SELECT "
       "response_type, "
+      "response_url, "
       "response_status, "
       "response_status_text, "
       "response_body_id "
     "FROM entries "
     "WHERE id=?1;"
   ), getter_AddRefs(state));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
@@ -916,23 +922,26 @@ DBSchema::ReadResponse(mozIStorageConnec
   int32_t status;
   rv = state->GetInt32(1, &status);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   aSavedResponseOut->mValue.status() = status;
 
   rv = state->GetUTF8String(2, aSavedResponseOut->mValue.statusText());
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
+  rv = state->GetString(3, aSavedResponseOut->mValue.url());
+  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+
   bool nullBody;
-  rv = state->GetIsNull(3, &nullBody);
+  rv = state->GetIsNull(4, &nullBody);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   aSavedResponseOut->mHasBodyId = !nullBody;
 
   if (aSavedResponseOut->mHasBodyId) {
-    rv = ExtractId(state, 3, &aSavedResponseOut->mBodyId);
+    rv = ExtractId(state, 4, &aSavedResponseOut->mBodyId);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
 
   rv = aConn->CreateStatement(NS_LITERAL_CSTRING(
     "SELECT "
       "name, "
       "value "
     "FROM response_headers "
diff --git a/dom/cache/PCacheResponse.ipdlh b/dom/cache/PCacheResponse.ipdlh
--- a/dom/cache/PCacheResponse.ipdlh
+++ b/dom/cache/PCacheResponse.ipdlh
@@ -9,16 +9,17 @@ using mozilla::void_t from "ipc/IPCMessa
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 struct PCacheResponse
 {
   ResponseType type;
+  nsString url;
   uint32_t status;
   nsCString statusText;
   PHeadersEntry[] headers;
 };
 
 union PCacheResponseOrVoid
 {
   void_t;
diff --git a/dom/fetch/Response.h b/dom/fetch/Response.h
--- a/dom/fetch/Response.h
+++ b/dom/fetch/Response.h
@@ -37,19 +37,19 @@ public:
 
   ResponseType
   Type() const
   {
     return mInternalResponse->Type();
   }
 
   void
-  GetUrl(DOMString& aUrl) const
+  GetUrl(nsAString& aUrl) const
   {
-    aUrl.AsAString() = NS_ConvertUTF8toUTF16(mInternalResponse->GetUrl());
+    aUrl = NS_ConvertUTF8toUTF16(mInternalResponse->GetUrl());
   }
 
 
   // Undo X11 macro brain damage
   #ifdef Status
   #undef Status
   #endif
 
