# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  a954eed3774da9fa1b0c3c2d9dc1c61adf55cce0

diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -42,16 +42,17 @@ const uint64_t kInvalidUpdateFoundId = 0
 ServiceWorkerRegistration::ServiceWorkerRegistration(nsIGlobalObject* aGlobal,
                                                      const ServiceWorkerRegistrationDescriptor& aDescriptor,
                                                      ServiceWorkerRegistration::Inner* aInner)
   : DOMEventTargetHelper(aGlobal)
   , mDescriptor(aDescriptor)
   , mInner(aInner)
   , mScheduledUpdateFoundId(kInvalidUpdateFoundId)
   , mDispatchedUpdateFoundId(kInvalidUpdateFoundId)
+  , mPendingUpdatePromises(0)
 {
   MOZ_DIAGNOSTIC_ASSERT(mInner);
 
   KeepAliveIfHasListenersFor(NS_LITERAL_STRING("updatefound"));
 
   UpdateState(mDescriptor);
   mInner->SetServiceWorkerRegistration(this);
 }
@@ -195,28 +196,32 @@ ServiceWorkerRegistration::Update(ErrorR
 
   RefPtr<Promise> outer = Promise::Create(global, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return nullptr;
   }
 
   RefPtr<ServiceWorkerRegistration> self = this;
 
+  mPendingUpdatePromises += 1;
+
   mInner->Update(
     [outer, self](const ServiceWorkerRegistrationDescriptor& aDesc) {
+      auto scopeExit = MakeScopeExit([&] { self->UpdatePromiseSettled(); });
       nsIGlobalObject* global = self->GetParentObject();
       MOZ_DIAGNOSTIC_ASSERT(global);
       RefPtr<ServiceWorkerRegistration> ref =
         global->GetOrCreateServiceWorkerRegistration(aDesc);
       if (!ref) {
         outer->MaybeReject(NS_ERROR_DOM_INVALID_STATE_ERR);
         return;
       }
       outer->MaybeResolve(ref);
-    }, [outer] (ErrorResult& aRv) {
+    }, [outer, self] (ErrorResult& aRv) {
+      auto scopeExit = MakeScopeExit([&] { self->UpdatePromiseSettled(); });
       outer->MaybeReject(aRv);
     });
 
   return outer.forget();
 }
 
 already_AddRefed<Promise>
 ServiceWorkerRegistration::Unregister(ErrorResult& aRv)
@@ -356,16 +361,20 @@ ServiceWorkerRegistration::MaybeSchedule
                      mDispatchedUpdateFoundId != newId;
 
   if (!updateFound) {
     return;
   }
 
   mScheduledUpdateFoundId = newId;
 
+  if (mPendingUpdatePromises > 0) {
+    return;
+  }
+
   nsIGlobalObject* global = GetParentObject();
   NS_ENSURE_TRUE_VOID(global);
 
   nsCOMPtr<nsIRunnable> r = NewCancelableRunnableMethod(
     "ServiceWorkerRegistration::MaybeDispatchUpdateFound",
     this,
     &ServiceWorkerRegistration::MaybeDispatchUpdateFound);
 
@@ -384,16 +393,38 @@ ServiceWorkerRegistration::MaybeDispatch
     return;
   }
 
   mDispatchedUpdateFoundId = scheduledId;
   DispatchTrustedEvent(NS_LITERAL_STRING("updatefound"));
 }
 
 void
+ServiceWorkerRegistration::UpdatePromiseSettled()
+{
+  MOZ_DIAGNOSTIC_ASSERT(mPendingUpdatePromises > 0);
+  mPendingUpdatePromises -= 1;
+  if (mPendingUpdatePromises > 0 ||
+      mScheduledUpdateFoundId == kInvalidUpdateFoundId) {
+    return;
+  }
+
+  nsIGlobalObject* global = GetParentObject();
+  NS_ENSURE_TRUE_VOID(global);
+
+  nsCOMPtr<nsIRunnable> r = NewCancelableRunnableMethod(
+    "ServiceWorkerRegistration::MaybeDispatchUpdateFound",
+    this,
+    &ServiceWorkerRegistration::MaybeDispatchUpdateFound);
+
+  Unused << global->EventTargetFor(TaskCategory::Other)->Dispatch(
+    r.forget(), NS_DISPATCH_NORMAL);
+}
+
+void
 ServiceWorkerRegistration::UpdateStateInternal(const Maybe<ServiceWorkerDescriptor>& aInstalling,
                                                const Maybe<ServiceWorkerDescriptor>& aWaiting,
                                                const Maybe<ServiceWorkerDescriptor>& aActive)
 {
   // Do this immediately as it may flush an already pending updatefound
   // event.  In that case we want to fire the pending event before
   // modifying any of the registration properties.
   MaybeScheduleUpdateFound(aInstalling);
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -132,26 +132,30 @@ private:
                       const Maybe<ServiceWorkerDescriptor>& aActive);
 
   void
   MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor);
 
   void
   MaybeDispatchUpdateFound();
 
+  void
+  UpdatePromiseSettled();
+
   ServiceWorkerRegistrationDescriptor mDescriptor;
   RefPtr<Inner> mInner;
 
   RefPtr<ServiceWorker> mInstallingWorker;
   RefPtr<ServiceWorker> mWaitingWorker;
   RefPtr<ServiceWorker> mActiveWorker;
   RefPtr<PushManager> mPushManager;
 
   uint64_t mScheduledUpdateFoundId;
   uint64_t mDispatchedUpdateFoundId;
+  uint32_t mPendingUpdatePromises;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(ServiceWorkerRegistration, NS_DOM_SERVICEWORKERREGISTRATION_IID)
 
 } // namespace dom
 } // namespace mozilla
 
 #endif /* mozilla_dom_ServiceWorkerRegistration_h */
