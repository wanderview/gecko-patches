# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  395c27a4f82acccf90a00722436c056844370da9
Bug 1466681 P1 Make ServiceWorkerContainer::Inner::Register() use callbacks instead of MozPromise. r=asuth

diff --git a/dom/serviceworkers/ServiceWorkerContainer.cpp b/dom/serviceworkers/ServiceWorkerContainer.cpp
--- a/dom/serviceworkers/ServiceWorkerContainer.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainer.cpp
@@ -72,24 +72,26 @@ ServiceWorkerContainer::Create(nsIGlobal
   return ref.forget();
 }
 
 ServiceWorkerContainer::ServiceWorkerContainer(nsIGlobalObject* aGlobal,
                                                already_AddRefed<ServiceWorkerContainer::Inner> aInner)
   : DOMEventTargetHelper(aGlobal)
   , mInner(aInner)
 {
+  mInner->AddContainer(this);
   Maybe<ServiceWorkerDescriptor> controller = aGlobal->GetController();
   if (controller.isSome()) {
     mControllerWorker = aGlobal->GetOrCreateServiceWorker(controller.ref());
   }
 }
 
 ServiceWorkerContainer::~ServiceWorkerContainer()
 {
+  mInner->RemoveContainer(this);
 }
 
 void
 ServiceWorkerContainer::DisconnectFromOwner()
 {
   mControllerWorker = nullptr;
   mReadyPromise = nullptr;
   DOMEventTargetHelper::DisconnectFromOwner();
@@ -353,37 +355,32 @@ ServiceWorkerContainer::Register(const n
   window->NoteCalledRegisterForServiceWorkerScope(cleanedScopeURL);
 
   RefPtr<Promise> outer = Promise::Create(global, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   RefPtr<ServiceWorkerContainer> self = this;
-  RefPtr<DOMMozPromiseRequestHolder<ServiceWorkerRegistrationPromise>> holder =
-    new DOMMozPromiseRequestHolder<ServiceWorkerRegistrationPromise>(global);
 
-  mInner->Register(clientInfo.ref(), cleanedScopeURL, cleanedScriptURL,
-                   aOptions.mUpdateViaCache)->Then(
-    global->EventTargetFor(TaskCategory::Other), __func__,
-    [self, outer, holder] (const ServiceWorkerRegistrationDescriptor& aDesc) {
-      holder->Complete();
+  mInner->Register(
+    clientInfo.ref(), cleanedScopeURL, cleanedScriptURL, aOptions.mUpdateViaCache,
+    [self, outer] (const ServiceWorkerRegistrationDescriptor& aDesc) {
       ErrorResult rv;
       nsIGlobalObject* global = self->GetGlobalIfValid(rv);
       if (rv.Failed()) {
         outer->MaybeReject(rv);
         return;
       }
       RefPtr<ServiceWorkerRegistration> reg =
         global->GetOrCreateServiceWorkerRegistration(aDesc);
       outer->MaybeResolve(reg);
-    }, [self, outer, holder] (const CopyableErrorResult& aRv) {
-      holder->Complete();
-      outer->MaybeReject(CopyableErrorResult(aRv));
-    })->Track(*holder);
+    }, [outer] (ErrorResult& aRv) {
+      outer->MaybeReject(aRv);
+    });
 
   return outer.forget();
 }
 
 already_AddRefed<ServiceWorker>
 ServiceWorkerContainer::GetController()
 {
   RefPtr<ServiceWorker> ref = mControllerWorker;
diff --git a/dom/serviceworkers/ServiceWorkerContainer.h b/dom/serviceworkers/ServiceWorkerContainer.h
--- a/dom/serviceworkers/ServiceWorkerContainer.h
+++ b/dom/serviceworkers/ServiceWorkerContainer.h
@@ -21,21 +21,29 @@ class ServiceWorker;
 
 // Lightweight serviceWorker APIs collection.
 class ServiceWorkerContainer final : public DOMEventTargetHelper
 {
 public:
   class Inner
   {
   public:
-    virtual RefPtr<ServiceWorkerRegistrationPromise>
+    virtual void
+    AddContainer(ServiceWorkerContainer* aOuter) = 0;
+
+    virtual void
+    RemoveContainer(ServiceWorkerContainer* aOuter) = 0;
+
+    virtual void
     Register(const ClientInfo& aClientInfo,
              const nsACString& aScopeURL,
              const nsACString& aScriptURL,
-             ServiceWorkerUpdateViaCache aUpdateViaCache) const = 0;
+             ServiceWorkerUpdateViaCache aUpdateViaCache,
+             ServiceWorkerRegistrationCallback&& aSuccessCB,
+             ServiceWorkerFailureCallback&& aFailureCB) const = 0;
 
     virtual RefPtr<ServiceWorkerRegistrationPromise>
     GetRegistration(const ClientInfo& aClientInfo,
                     const nsACString& aURL) const = 0;
 
     virtual RefPtr<ServiceWorkerRegistrationListPromise>
     GetRegistrations(const ClientInfo& aClientInfo) const = 0;
 
diff --git a/dom/serviceworkers/ServiceWorkerContainerImpl.cpp b/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
--- a/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainerImpl.cpp
@@ -4,29 +4,76 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorkerContainerImpl.h"
 
 namespace mozilla {
 namespace dom {
 
-RefPtr<ServiceWorkerRegistrationPromise>
+ServiceWorkerContainerImpl::~ServiceWorkerContainerImpl()
+{
+  MOZ_DIAGNOSTIC_ASSERT(!mOuter);
+}
+
+ServiceWorkerContainerImpl::ServiceWorkerContainerImpl()
+  : mOuter(nullptr)
+{
+}
+
+void
+ServiceWorkerContainerImpl::AddContainer(ServiceWorkerContainer* aOuter)
+{
+  MOZ_DIAGNOSTIC_ASSERT(aOuter);
+  MOZ_DIAGNOSTIC_ASSERT(!mOuter);
+  mOuter = aOuter;
+}
+
+void
+ServiceWorkerContainerImpl::RemoveContainer(ServiceWorkerContainer* aOuter)
+{
+  MOZ_DIAGNOSTIC_ASSERT(aOuter);
+  MOZ_DIAGNOSTIC_ASSERT(mOuter == aOuter);
+  mOuter = nullptr;
+}
+
+void
 ServiceWorkerContainerImpl::Register(const ClientInfo& aClientInfo,
                                      const nsACString& aScopeURL,
                                      const nsACString& aScriptURL,
-                                     ServiceWorkerUpdateViaCache aUpdateViaCache) const
+                                     ServiceWorkerUpdateViaCache aUpdateViaCache,
+                                     ServiceWorkerRegistrationCallback&& aSuccessCB,
+                                     ServiceWorkerFailureCallback&& aFailureCB) const
 {
+  MOZ_DIAGNOSTIC_ASSERT(mOuter);
+
+  nsIGlobalObject* global = mOuter->GetParentObject();
+  if (NS_WARN_IF(!global)) {
+    aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
+    return;
+  }
+
   RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
   if (NS_WARN_IF(!swm)) {
-    return ServiceWorkerRegistrationPromise::CreateAndReject(NS_ERROR_DOM_INVALID_STATE_ERR,
-                                                             __func__);
+    aFailureCB(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
+    return;
   }
 
-  return swm->Register(aClientInfo, aScopeURL, aScriptURL, aUpdateViaCache);
+  auto holder =
+    MakeRefPtr<DOMMozPromiseRequestHolder<ServiceWorkerRegistrationPromise>>(global);
+
+  swm->Register(aClientInfo, aScopeURL, aScriptURL, aUpdateViaCache)->Then(
+    global->EventTargetFor(TaskCategory::Other), __func__,
+    [successCB = std::move(aSuccessCB), holder] (const ServiceWorkerRegistrationDescriptor& aDescriptor) {
+      holder->Complete();
+      successCB(aDescriptor);
+    }, [failureCB = std::move(aFailureCB), holder] (const CopyableErrorResult& aResult) {
+      holder->Complete();
+      failureCB(CopyableErrorResult(aResult));
+    })->Track(*holder);
 }
 
 RefPtr<ServiceWorkerRegistrationPromise>
 ServiceWorkerContainerImpl::GetRegistration(const ClientInfo& aClientInfo,
                                             const nsACString& aURL) const
 {
   RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
   if (NS_WARN_IF(!swm)) {
diff --git a/dom/serviceworkers/ServiceWorkerContainerImpl.h b/dom/serviceworkers/ServiceWorkerContainerImpl.h
--- a/dom/serviceworkers/ServiceWorkerContainerImpl.h
+++ b/dom/serviceworkers/ServiceWorkerContainerImpl.h
@@ -10,26 +10,36 @@
 #include "ServiceWorkerContainer.h"
 
 namespace mozilla {
 namespace dom {
 
 // Lightweight serviceWorker APIs collection.
 class ServiceWorkerContainerImpl final : public ServiceWorkerContainer::Inner
 {
-  ~ServiceWorkerContainerImpl() = default;
+  ServiceWorkerContainer* mOuter;
+
+  ~ServiceWorkerContainerImpl();
 
 public:
-  ServiceWorkerContainerImpl() = default;
+  ServiceWorkerContainerImpl();
+
+  void
+  AddContainer(ServiceWorkerContainer* aOuter) override;
 
-  RefPtr<ServiceWorkerRegistrationPromise>
+  void
+  RemoveContainer(ServiceWorkerContainer* aOuter) override;
+
+  void
   Register(const ClientInfo& aClientInfo,
            const nsACString& aScopeURL,
            const nsACString& aScriptURL,
-           ServiceWorkerUpdateViaCache aUpdateViaCache) const override;
+           ServiceWorkerUpdateViaCache aUpdateViaCache,
+           ServiceWorkerRegistrationCallback&& aSuccessCB,
+           ServiceWorkerFailureCallback&& aFailureCB) const override;
 
   RefPtr<ServiceWorkerRegistrationPromise>
   GetRegistration(const ClientInfo& aClientInfo,
                   const nsACString& aURL) const override;
 
   RefPtr<ServiceWorkerRegistrationListPromise>
   GetRegistrations(const ClientInfo& aClientInfo) const override;
 
diff --git a/dom/serviceworkers/ServiceWorkerUtils.h b/dom/serviceworkers/ServiceWorkerUtils.h
--- a/dom/serviceworkers/ServiceWorkerUtils.h
+++ b/dom/serviceworkers/ServiceWorkerUtils.h
@@ -20,16 +20,22 @@ class ServiceWorkerRegistrationData;
 class ServiceWorkerRegistrationDescriptor;
 
 typedef MozPromise<ServiceWorkerRegistrationDescriptor, CopyableErrorResult, false>
         ServiceWorkerRegistrationPromise;
 
 typedef MozPromise<nsTArray<ServiceWorkerRegistrationDescriptor>, CopyableErrorResult, false>
         ServiceWorkerRegistrationListPromise;
 
+typedef std::function<void (const ServiceWorkerRegistrationDescriptor&)>
+        ServiceWorkerRegistrationCallback;
+
+typedef std::function<void (ErrorResult&)>
+        ServiceWorkerFailureCallback;
+
 bool
 ServiceWorkerParentInterceptEnabled();
 
 bool
 ServiceWorkerRegistrationDataIsValid(const ServiceWorkerRegistrationData& aData);
 
 nsresult
 ServiceWorkerScopeAndScriptAreValid(const ClientInfo& aClientInfo,
