# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  79f25e5880335d0a2c982577c9a411adb25087f2
Bug 1471706 P2 Maintain a version list of ServiceWorkerRegistrationInfo state changes. r=mrbkap

diff --git a/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
@@ -65,17 +65,17 @@ ServiceWorkerRegistrationMainThread::Sta
 
   RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
   NS_ENSURE_TRUE_VOID(swm);
 
   mInfo = swm->GetRegistration(mDescriptor.PrincipalInfo(),
                                mDescriptor.Scope());
   NS_ENSURE_TRUE_VOID(mInfo);
 
-  mInfo->AddInstance(this);
+  mInfo->AddInstance(this, mDescriptor);
   mListeningForEvents = true;
 }
 
 void
 ServiceWorkerRegistrationMainThread::StopListeningForEvents()
 {
   MOZ_ASSERT(NS_IsMainThread());
   if (!mListeningForEvents) {
@@ -668,17 +668,17 @@ public:
 
     RefPtr<ServiceWorkerRegistrationInfo> info =
       swm->GetRegistration(mDescriptor.PrincipalInfo(), mDescriptor.Scope());
     NS_ENSURE_TRUE_VOID(info);
 
     mInfo = new nsMainThreadPtrHolder<ServiceWorkerRegistrationInfo>(
       "WorkerListener::mInfo", info);
 
-    mInfo->AddInstance(this);
+    mInfo->AddInstance(this, mDescriptor);
     mListeningForEvents = true;
   }
 
   void
   StopListeningForEvents()
   {
     MOZ_ASSERT(NS_IsMainThread());
 
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp b/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
@@ -111,20 +111,39 @@ ServiceWorkerRegistrationInfo::ServiceWo
 {}
 
 ServiceWorkerRegistrationInfo::~ServiceWorkerRegistrationInfo()
 {
   MOZ_DIAGNOSTIC_ASSERT(!IsControllingClients());
 }
 
 void
-ServiceWorkerRegistrationInfo::AddInstance(ServiceWorkerRegistrationListener* aInstance)
+ServiceWorkerRegistrationInfo::AddInstance(ServiceWorkerRegistrationListener* aInstance,
+                                           const ServiceWorkerRegistrationDescriptor& aDescriptor)
 {
   MOZ_DIAGNOSTIC_ASSERT(aInstance);
   MOZ_ASSERT(!mInstanceList.Contains(aInstance));
+  MOZ_DIAGNOSTIC_ASSERT(aDescriptor.Id() == mDescriptor.Id());
+  MOZ_DIAGNOSTIC_ASSERT(aDescriptor.PrincipalInfo() == mDescriptor.PrincipalInfo());
+  MOZ_DIAGNOSTIC_ASSERT(aDescriptor.Scope() == mDescriptor.Scope());
+  MOZ_DIAGNOSTIC_ASSERT(aDescriptor.Version() <= mDescriptor.Version());
+  uint64_t lastVersion = aDescriptor.Version();
+  for (auto& entry : mVersionList) {
+    if (lastVersion > entry->mDescriptor.Version()) {
+      continue;
+    }
+    lastVersion = entry->mDescriptor.Version();
+    aInstance->UpdateState(entry->mDescriptor);
+  }
+  // Note, the mDescriptor may be contained in the version list.  Since the
+  // version list is aged out, though, it may also not be in the version list.
+  // So always check for the mDescriptor update here.
+  if (lastVersion < mDescriptor.Version()) {
+    aInstance->UpdateState(mDescriptor);
+  }
   mInstanceList.AppendElement(aInstance);
 }
 
 void
 ServiceWorkerRegistrationInfo::RemoveInstance(ServiceWorkerRegistrationListener* aInstance)
 {
   MOZ_DIAGNOSTIC_ASSERT(aInstance);
   DebugOnly<bool> removed = mInstanceList.RemoveElement(aInstance);
@@ -433,16 +452,28 @@ ServiceWorkerRegistrationInfo::UpdateReg
   UpdateRegistrationState(mDescriptor.UpdateViaCache());
 }
 
 void
 ServiceWorkerRegistrationInfo::UpdateRegistrationState(ServiceWorkerUpdateViaCache aUpdateViaCache)
 {
   MOZ_ASSERT(NS_IsMainThread());
 
+  TimeStamp oldest = TimeStamp::Now() - TimeDuration::FromSeconds(30);
+  if (!mVersionList.IsEmpty() && mVersionList[0]->mTimeStamp < oldest) {
+    nsTArray<UniquePtr<VersionEntry>> list;
+    mVersionList.SwapElements(list);
+    for (auto& entry : list) {
+      if (entry->mTimeStamp >= oldest) {
+        mVersionList.AppendElement(std::move(entry));
+      }
+    }
+  }
+  mVersionList.AppendElement(MakeUnique<VersionEntry>(mDescriptor));
+
   // We are going to modify the descriptor, so increase its version number.
   mDescriptor.SetVersion(GetNextVersion());
 
   // Note, this also sets the new version number on the ServiceWorkerInfo
   // objects before we copy over their updated descriptors.
   mDescriptor.SetWorkers(mInstallingWorker, mWaitingWorker, mActiveWorker);
 
   mDescriptor.SetUpdateViaCache(aUpdateViaCache);
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationInfo.h b/dom/serviceworkers/ServiceWorkerRegistrationInfo.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationInfo.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationInfo.h
@@ -21,16 +21,29 @@ class ServiceWorkerRegistrationListener;
 class ServiceWorkerRegistrationInfo final
   : public nsIServiceWorkerRegistrationInfo
 {
   nsCOMPtr<nsIPrincipal> mPrincipal;
   ServiceWorkerRegistrationDescriptor mDescriptor;
   nsTArray<nsCOMPtr<nsIServiceWorkerRegistrationInfoListener>> mListeners;
   nsTObserverArray<ServiceWorkerRegistrationListener*> mInstanceList;
 
+  struct VersionEntry
+  {
+    const ServiceWorkerRegistrationDescriptor mDescriptor;
+    TimeStamp mTimeStamp;
+
+    explicit VersionEntry(const ServiceWorkerRegistrationDescriptor& aDescriptor)
+      : mDescriptor(aDescriptor)
+      , mTimeStamp(TimeStamp::Now())
+    {
+    }
+  };
+  nsTArray<UniquePtr<VersionEntry>> mVersionList;
+
   uint32_t mControlledClientsCounter;
   uint32_t mDelayMultiplier;
 
   enum
   {
     NoUpdate,
     NeedTimeCheckAndUpdate,
     NeedUpdate
@@ -60,17 +73,18 @@ public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSISERVICEWORKERREGISTRATIONINFO
 
   ServiceWorkerRegistrationInfo(const nsACString& aScope,
                                 nsIPrincipal* aPrincipal,
                                 ServiceWorkerUpdateViaCache aUpdateViaCache);
 
   void
-  AddInstance(ServiceWorkerRegistrationListener* aInstance);
+  AddInstance(ServiceWorkerRegistrationListener* aInstance,
+              const ServiceWorkerRegistrationDescriptor& aDescriptor);
 
   void
   RemoveInstance(ServiceWorkerRegistrationListener* aInstance);
 
   const nsCString&
   Scope() const;
 
   nsIPrincipal*
