# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  1dd78ae0ac3644d1af4e863d806218a49803d0c4
Bug 1459209 P13 Propagate ServiceWorkerRegistration updatefound events from the parent across IPC to the child. r=baku

diff --git a/dom/serviceworkers/PServiceWorkerRegistration.ipdl b/dom/serviceworkers/PServiceWorkerRegistration.ipdl
--- a/dom/serviceworkers/PServiceWorkerRegistration.ipdl
+++ b/dom/serviceworkers/PServiceWorkerRegistration.ipdl
@@ -16,12 +16,14 @@ protocol PServiceWorkerRegistration
 parent:
   async Teardown();
 
   async Unregister() returns (bool aSuccess, CopyableErrorResult aRv);
   async Update() returns (IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult aResult);
 
 child:
   async __delete__();
+
+  async UpdateFound();
 };
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
--- a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
@@ -152,10 +152,18 @@ RemoteServiceWorkerRegistrationImpl::Rev
   MOZ_DIAGNOSTIC_ASSERT(mActor);
   MOZ_DIAGNOSTIC_ASSERT(mActor == aActor);
   mActor->RevokeOwner(this);
   mActor = nullptr;
 
   mShutdown = true;
 }
 
+void
+RemoteServiceWorkerRegistrationImpl::UpdateFound()
+{
+  if (mOuter) {
+    mOuter->DispatchTrustedEvent(NS_LITERAL_STRING("updatefound"));
+  }
+}
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
--- a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
@@ -41,15 +41,18 @@ class RemoteServiceWorkerRegistrationImp
              ServiceWorkerFailureCallback&& aFailureCB) override;
 
 public:
   explicit RemoteServiceWorkerRegistrationImpl(const ServiceWorkerRegistrationDescriptor& aDescriptor);
 
   void
   RevokeActor(ServiceWorkerRegistrationChild* aActor);
 
+  void
+  UpdateFound();
+
   NS_INLINE_DECL_REFCOUNTING(RemoteServiceWorkerRegistrationImpl, override)
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_remoteserviceworkerregistrationimpl_h__
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp b/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
@@ -20,16 +20,25 @@ ServiceWorkerRegistrationChild::ActorDes
   }
 
   if (mOwner) {
     mOwner->RevokeActor(this);
     MOZ_DIAGNOSTIC_ASSERT(!mOwner);
   }
 }
 
+IPCResult
+ServiceWorkerRegistrationChild::RecvUpdateFound()
+{
+  if (mOwner) {
+    mOwner->UpdateFound();
+  }
+  return IPC_OK();
+}
+
 void
 ServiceWorkerRegistrationChild::WorkerShuttingDown()
 {
   MaybeStartTeardown();
 }
 
 ServiceWorkerRegistrationChild::ServiceWorkerRegistrationChild(WorkerHolderToken* aWorkerHolderToken)
   : mWorkerHolderToken(aWorkerHolderToken)
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationChild.h b/dom/serviceworkers/ServiceWorkerRegistrationChild.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationChild.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationChild.h
@@ -21,16 +21,19 @@ class ServiceWorkerRegistrationChild fin
   RefPtr<WorkerHolderToken> mWorkerHolderToken;
   RemoteServiceWorkerRegistrationImpl* mOwner;
   bool mTeardownStarted;
 
   // PServiceWorkerRegistrationChild
   void
   ActorDestroy(ActorDestroyReason aReason) override;
 
+  mozilla::ipc::IPCResult
+  RecvUpdateFound() override;
+
   // WorkerHolderToken::Listener
   void
   WorkerShuttingDown() override;
 
 public:
   explicit ServiceWorkerRegistrationChild(WorkerHolderToken* aWorkerHolderToken);
   ~ServiceWorkerRegistrationChild() = default;
 
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp b/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
@@ -34,17 +34,17 @@ ServiceWorkerRegistrationProxy::MaybeShu
 
 void
 ServiceWorkerRegistrationProxy::UpdateFoundOnBGThread()
 {
   AssertIsOnBackgroundThread();
   if (!mActor) {
     return;
   }
-  // TODO: send update found
+  Unused << mActor->SendUpdateFound();
 }
 
 void
 ServiceWorkerRegistrationProxy::UpdateStateOnBGThread(const ServiceWorkerRegistrationDescriptor& aDescriptor)
 {
   AssertIsOnBackgroundThread();
   if (!mActor) {
     return;
