# HG changeset patch
# Parent f12d886d0faa07e1bb7db83681e7614c7ec349f8
# User Ben Kelly <ben@wanderview.com>

diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -22,41 +22,41 @@ NS_INTERFACE_MAP_END
 already_AddRefed<Cache>
 Cache::Constructor(const GlobalObject& aGlobal, ErrorResult& rv)
 {
   nsRefPtr<Cache> cache = new Cache(aGlobal.GetAsSupports());
   return cache.forget();
 }
 
 already_AddRefed<Promise>
-Cache::Match(const RequestOrString& aRequest, const QueryParams& aParams)
+Cache::Match(const RequestOrScalarValueString& aRequest, const QueryParams& aParams)
 {
   MOZ_CRASH("not implemented");
 }
 
 already_AddRefed<Promise>
-Cache::MatchAll(const RequestOrString& aRequest, const QueryParams& aParams)
+Cache::MatchAll(const RequestOrScalarValueString& aRequest, const QueryParams& aParams)
 {
   MOZ_CRASH("not implemented");
 }
 
 already_AddRefed<Promise>
-Cache::Add(const Sequence<OwningRequestOrString>& aRequests)
+Cache::Add(const Sequence<OwningRequestOrScalarValueString>& aRequests)
 {
   MOZ_CRASH("not implemented");
 }
 
 already_AddRefed<Promise>
-Cache::Put(const RequestOrString& aRequest, const Response& aResponse)
+Cache::Put(const RequestOrScalarValueString& aRequest, const Response& aResponse)
 {
   MOZ_CRASH("not implemented");
 }
 
 already_AddRefed<Promise>
-Cache::Delete(const RequestOrString& aRequest, const QueryParams& aParams)
+Cache::Delete(const RequestOrScalarValueString& aRequest, const QueryParams& aParams)
 {
   MOZ_CRASH("not implemented");
 }
 
 already_AddRefed<Promise>
 Cache::Each(JSContext* aContext, CacheIterationCallback& aCallback,
             const Optional<JS::Handle<JSObject*>>& aThis)
 {
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -19,24 +19,24 @@ class Promise;
 class Cache MOZ_FINAL : public nsISupports
                       , public nsWrapperCache
 {
 public:
   // webidl interface methods
   static already_AddRefed<Cache> Constructor(const GlobalObject& aGlobal,
                                              ErrorResult& rv);
 
-  already_AddRefed<Promise> Match(const RequestOrString& aRequest,
+  already_AddRefed<Promise> Match(const RequestOrScalarValueString& aRequest,
                                   const QueryParams& aParams);
-  already_AddRefed<Promise> MatchAll(const RequestOrString& aRequest,
+  already_AddRefed<Promise> MatchAll(const RequestOrScalarValueString& aRequest,
                                      const QueryParams& aParams);
-  already_AddRefed<Promise> Add(const Sequence<OwningRequestOrString>& aRequests);
-  already_AddRefed<Promise> Put(const RequestOrString& aRequest,
+  already_AddRefed<Promise> Add(const Sequence<OwningRequestOrScalarValueString>& aRequests);
+  already_AddRefed<Promise> Put(const RequestOrScalarValueString& aRequest,
                                 const Response& aResponse);
-  already_AddRefed<Promise> Delete(const RequestOrString& aRequest,
+  already_AddRefed<Promise> Delete(const RequestOrScalarValueString& aRequest,
                                    const QueryParams& aParams);
   already_AddRefed<Promise> Each(JSContext* aContext,
                                  CacheIterationCallback& aCallback,
                                  const Optional<JS::Handle<JSObject*>>& aThis);
 
   // binding methods
   virtual nsISupports* GetParentObject() const MOZ_OVERRIDE;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
diff --git a/dom/webidl/Cache.webidl b/dom/webidl/Cache.webidl
--- a/dom/webidl/Cache.webidl
+++ b/dom/webidl/Cache.webidl
@@ -4,17 +4,17 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/.
  *
  * The origin of this IDL file is
  * http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html
  *
  */
 
 // XXX: Implement real ScalarValueString
-typedef DOMString ScalarValueString;
+//typedef DOMString ScalarValueString;
 
 [Constructor,
  // Exposed=Window,Worker
  Pref="dom.serviceWorkers.enabled"]
 interface Cache {
   // Promise<Response>
   Promise match((Request or ScalarValueString) request,
                 optional QueryParams params);
