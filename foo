# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  6a57623242db68a0399c34d44815365640c0c82d

diff --git a/dom/clients/manager/ClientIPCTypes.ipdlh b/dom/clients/manager/ClientIPCTypes.ipdlh
--- a/dom/clients/manager/ClientIPCTypes.ipdlh
+++ b/dom/clients/manager/ClientIPCTypes.ipdlh
@@ -123,16 +123,20 @@ union ClientOpConstructorArgs
   ClientGetInfoAndStateArgs;
 };
 
 struct ClientList
 {
   ClientInfoAndState[] values;
 };
 
+struct ClientNavigateOpConstructorArgs
+{
+};
+
 union ClientOpResult
 {
   nsresult;
   ClientState;
   ClientInfoAndState;
   ClientList;
 };
 
diff --git a/dom/clients/manager/ClientManagerChild.cpp b/dom/clients/manager/ClientManagerChild.cpp
--- a/dom/clients/manager/ClientManagerChild.cpp
+++ b/dom/clients/manager/ClientManagerChild.cpp
@@ -54,16 +54,38 @@ ClientManagerChild::AllocPClientManagerO
 
 bool
 ClientManagerChild::DeallocPClientManagerOpChild(PClientManagerOpChild* aActor)
 {
   delete aActor;
   return true;
 }
 
+PClientNavigateOpChild*
+ClientManagerChild::AllocPClientNavigateOpChild(const ClientNavigateOpConstructorArgs& aArgs)
+{
+  // TODO
+  return nullptr;
+}
+
+bool
+ClientManagerChild::DeallocPClientNavigateOpChild(PClientNavigateOpChild* aActor)
+{
+  // TODO
+  return true;
+}
+
+mozilla::ipc::IPCResult
+ClientManagerChild::RecvPClientNavigateOpConstructor(PClientNavigateOpChild* aActor,
+                                   const ClientNavigateOpConstructorArgs& aArgs)
+{
+  // TODO
+  return IPC_OK();
+}
+
 PClientSourceChild*
 ClientManagerChild::AllocPClientSourceChild(const ClientSourceConstructorArgs& aArgs)
 {
   return new ClientSourceChild(aArgs);
 }
 
 bool
 ClientManagerChild::DeallocPClientSourceChild(PClientSourceChild* aActor)
diff --git a/dom/clients/manager/ClientManagerChild.h b/dom/clients/manager/ClientManagerChild.h
--- a/dom/clients/manager/ClientManagerChild.h
+++ b/dom/clients/manager/ClientManagerChild.h
@@ -37,16 +37,26 @@ class ClientManagerChild final : public 
   DeallocPClientHandleChild(PClientHandleChild* aActor) override;
 
   PClientManagerOpChild*
   AllocPClientManagerOpChild(const ClientOpConstructorArgs& aArgs) override;
 
   bool
   DeallocPClientManagerOpChild(PClientManagerOpChild* aActor) override;
 
+  PClientNavigateOpChild*
+  AllocPClientNavigateOpChild(const ClientNavigateOpConstructorArgs& aArgs) override;
+
+  bool
+  DeallocPClientNavigateOpChild(PClientNavigateOpChild* aActor) override;
+
+  mozilla::ipc::IPCResult
+  RecvPClientNavigateOpConstructor(PClientNavigateOpChild* aActor,
+                                   const ClientNavigateOpConstructorArgs& aArgs) override;
+
   PClientSourceChild*
   AllocPClientSourceChild(const ClientSourceConstructorArgs& aArgs) override;
 
   bool
   DeallocPClientSourceChild(PClientSourceChild* aActor) override;
 
   // WorkerHolderToken::Listener interface
   void
diff --git a/dom/clients/manager/ClientManagerParent.cpp b/dom/clients/manager/ClientManagerParent.cpp
--- a/dom/clients/manager/ClientManagerParent.cpp
+++ b/dom/clients/manager/ClientManagerParent.cpp
@@ -68,16 +68,30 @@ IPCResult
 ClientManagerParent::RecvPClientManagerOpConstructor(PClientManagerOpParent* aActor,
                                                      const ClientOpConstructorArgs& aArgs)
 {
   ClientManagerOpParent* actor = static_cast<ClientManagerOpParent*>(aActor);
   actor->Init(aArgs);
   return IPC_OK();
 }
 
+PClientNavigateOpParent*
+ClientManagerParent::AllocPClientNavigateOpParent(const ClientNavigateOpConstructorArgs& aArgs)
+{
+  // TODO
+  return nullptr;
+}
+
+bool
+ClientManagerParent::DeallocPClientNavigateOpParent(PClientNavigateOpParent* aActor)
+{
+  // TODO
+  return true;
+}
+
 PClientSourceParent*
 ClientManagerParent::AllocPClientSourceParent(const ClientSourceConstructorArgs& aArgs)
 {
   return new ClientSourceParent(aArgs);
 }
 
 bool
 ClientManagerParent::DeallocPClientSourceParent(PClientSourceParent* aActor)
diff --git a/dom/clients/manager/ClientManagerParent.h b/dom/clients/manager/ClientManagerParent.h
--- a/dom/clients/manager/ClientManagerParent.h
+++ b/dom/clients/manager/ClientManagerParent.h
@@ -39,16 +39,22 @@ class ClientManagerParent final : public
 
   bool
   DeallocPClientManagerOpParent(PClientManagerOpParent* aActor) override;
 
   mozilla::ipc::IPCResult
   RecvPClientManagerOpConstructor(PClientManagerOpParent* aActor,
                                  const ClientOpConstructorArgs& aArgs) override;
 
+  PClientNavigateOpParent*
+  AllocPClientNavigateOpParent(const ClientNavigateOpConstructorArgs& aArgs) override;
+
+  bool
+  DeallocPClientNavigateOpParent(PClientNavigateOpParent* aActor) override;
+
   PClientSourceParent*
   AllocPClientSourceParent(const ClientSourceConstructorArgs& aArgs) override;
 
   bool
   DeallocPClientSourceParent(PClientSourceParent* aActor) override;
 
 public:
   ClientManagerParent();
diff --git a/dom/clients/manager/PClientManager.ipdl b/dom/clients/manager/PClientManager.ipdl
--- a/dom/clients/manager/PClientManager.ipdl
+++ b/dom/clients/manager/PClientManager.ipdl
@@ -1,34 +1,38 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 include protocol PBackground;
 include protocol PClientHandle;
 include protocol PClientManagerOp;
+include protocol PClientNavigateOp;
 include protocol PClientSource;
 include ClientIPCTypes;
 
 namespace mozilla {
 namespace dom {
 
 sync protocol PClientManager
 {
   manager PBackground;
 
   manages PClientHandle;
   manages PClientManagerOp;
+  manages PClientNavigateOp;
   manages PClientSource;
 
 parent:
   async Teardown();
 
   async PClientHandle(ClientInfo aClientInfo);
   async PClientManagerOp(ClientOpConstructorArgs aArgs);
   async PClientSource(ClientSourceConstructorArgs aArgs);
 
 child:
+  async PClientNavigateOp(ClientNavigateOpConstructorArgs aArgs);
+
   async __delete__();
 };
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/clients/manager/PClientNavigateOp.ipdl b/dom/clients/manager/PClientNavigateOp.ipdl
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/PClientNavigateOp.ipdl
@@ -0,0 +1,20 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+include protocol PClientManager;
+include ClientIPCTypes;
+
+namespace mozilla {
+namespace dom {
+
+protocol PClientNavigateOp
+{
+  manager PClientManager;
+
+parent:
+  async __delete__(ClientOpResult aResult);
+};
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/clients/manager/moz.build b/dom/clients/manager/moz.build
--- a/dom/clients/manager/moz.build
+++ b/dom/clients/manager/moz.build
@@ -37,16 +37,17 @@ UNIFIED_SOURCES += [
 ]
 
 IPDL_SOURCES += [
   'ClientIPCTypes.ipdlh',
   'PClientHandle.ipdl',
   'PClientHandleOp.ipdl',
   'PClientManager.ipdl',
   'PClientManagerOp.ipdl',
+  'PClientNavigateOp.ipdl',
   'PClientSource.ipdl',
   'PClientSourceOp.ipdl',
 ]
 
 include('/ipc/chromium/chromium-config.mozbuild')
 
 LOCAL_INCLUDES += [
   '/dom/base',
