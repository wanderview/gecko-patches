# HG changeset patch
# Parent 8126346814e33d0036530ba7d801aca6d68fd2d5
# User Ben Kelly <ben@wanderview.com>
Fix w3c Cache match tests to expect fragment to be ignored.


diff --git a/testing/web-platform/tests/cache/resources/cache-match-worker.js b/testing/web-platform/tests/cache/resources/cache-match-worker.js
--- a/testing/web-platform/tests/cache/resources/cache-match-worker.js
+++ b/testing/web-platform/tests/cache/resources/cache-match-worker.js
@@ -38,16 +38,21 @@ var simple_entries = {
     response: new Response('')
   },
 
   cat_with_fragment: {
     request: new Request('http://example.com/cat#mouse'),
     response: new Response('')
   },
 
+  cat_num_lives: {
+    request: new Request('http://example.com/cat?lives=9'),
+    response: new Response('')
+  },
+
   cat_in_the_hat: {
     request: new Request('http://example.com/cat/in/the/hat'),
     response: new Response('')
   }
 };
 
 // A set of Request/Response pairs to be used with prepopulated_cache_test().
 // These contain a mix of test cases that use Vary headers.
@@ -196,17 +201,16 @@ prepopulated_cache_test(simple_entries, 
 
 prepopulated_cache_test(simple_entries, function(cache) {
     return cache.matchAll(simple_entries.cat.request)
       .then(function(result) {
           assert_array_equivalent(
             result,
             [
               simple_entries.cat.response,
-              simple_entries.cat_with_fragment.response
             ],
             'Cache.matchAll should ignore URL hash.');
         });
   }, 'Cache.matchAll with request containing hash');
 
 prepopulated_cache_test(simple_entries, function(cache) {
     return cache.matchAll('http')
       .then(function(result) {
@@ -220,17 +224,17 @@ prepopulated_cache_test(simple_entries, 
 prepopulated_cache_test(simple_entries, function(cache) {
     return cache.matchAll('http://example.com/cat',
                           {prefixMatch: true})
       .then(function(result) {
           assert_array_equivalent(
             result,
             [
               simple_entries.cat.response,
-              simple_entries.cat_with_fragment.response,
+              simple_entries.cat_num_lives.response,
               simple_entries.cat_in_the_hat.response
             ],
             'Cache.matchAll should honor prefixMatch.');
         });
   }, 'Cache.matchAll with prefixMatch option');
 
 prepopulated_cache_test(simple_entries, function(cache) {
     return cache.matchAll('http://example.com/cat/',
