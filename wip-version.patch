# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  732607683e83bb53e84c2431c403d2487f961d79

diff --git a/dom/serviceworkers/IPCServiceWorkerDescriptor.ipdlh b/dom/serviceworkers/IPCServiceWorkerDescriptor.ipdlh
--- a/dom/serviceworkers/IPCServiceWorkerDescriptor.ipdlh
+++ b/dom/serviceworkers/IPCServiceWorkerDescriptor.ipdlh
@@ -11,16 +11,17 @@ namespace dom {
 
 // IPC type with enough information to create a ServiceWorker DOM object
 // in a child process.  Note that the state may be slightly out-of-sync
 // with the parent and should be updated dynamically if necessary.
 struct IPCServiceWorkerDescriptor
 {
   uint64_t id;
   uint64_t registrationId;
+  uint64_t registrationVersion;
   PrincipalInfo principalInfo;
   nsCString scope;
   nsCString scriptURL;
   ServiceWorkerState state;
 };
 
 union OptionalIPCServiceWorkerDescriptor
 {
diff --git a/dom/serviceworkers/IPCServiceWorkerRegistrationDescriptor.ipdlh b/dom/serviceworkers/IPCServiceWorkerRegistrationDescriptor.ipdlh
--- a/dom/serviceworkers/IPCServiceWorkerRegistrationDescriptor.ipdlh
+++ b/dom/serviceworkers/IPCServiceWorkerRegistrationDescriptor.ipdlh
@@ -12,16 +12,17 @@ namespace mozilla {
 namespace dom {
 
 // IPC type with enough information to create a ServiceWorker DOM object
 // in a child process.  Note that the state may be slightly out-of-sync
 // with the parent and should be updated dynamically if necessary.
 struct IPCServiceWorkerRegistrationDescriptor
 {
   uint64_t id;
+  uint64_t version;
 
   // These values should match the principal and scope in each
   // associated worker.  It may be possible to optimize in the future,
   // but for now we duplicate the information here to ensure correctness.
   // Its possible we may need to reference a registration before the
   // worker is installed yet, etc.
   PrincipalInfo principalInfo;
   nsCString scope;
diff --git a/dom/serviceworkers/ServiceWorkerDescriptor.cpp b/dom/serviceworkers/ServiceWorkerDescriptor.cpp
--- a/dom/serviceworkers/ServiceWorkerDescriptor.cpp
+++ b/dom/serviceworkers/ServiceWorkerDescriptor.cpp
@@ -12,39 +12,43 @@
 namespace mozilla {
 namespace dom {
 
 using mozilla::ipc::PrincipalInfo;
 using mozilla::ipc::PrincipalInfoToPrincipal;
 
 ServiceWorkerDescriptor::ServiceWorkerDescriptor(uint64_t aId,
                                                  uint64_t aRegistrationId,
+                                                 uint64_t aRegistrationVersion,
                                                  nsIPrincipal* aPrincipal,
                                                  const nsACString& aScope,
                                                  const nsACString& aScriptURL,
                                                  ServiceWorkerState aState)
   : mData(MakeUnique<IPCServiceWorkerDescriptor>())
 {
   MOZ_ALWAYS_SUCCEEDS(
     PrincipalToPrincipalInfo(aPrincipal, &mData->principalInfo()));
 
   mData->id() = aId;
   mData->registrationId() = aRegistrationId;
+  mData->registrationVersion() = aRegistrationVersion;
   mData->scope() = aScope;
   mData->scriptURL() = aScriptURL;
   mData->state() = aState;
 }
 
 ServiceWorkerDescriptor::ServiceWorkerDescriptor(uint64_t aId,
                                                  uint64_t aRegistrationId,
+                                                 uint64_t aRegistrationVersion,
                                                  const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
                                                  const nsACString& aScope,
                                                  const nsACString& aScriptURL,
                                                  ServiceWorkerState aState)
   : mData(MakeUnique<IPCServiceWorkerDescriptor>(aId, aRegistrationId,
+                                                 aRegistrationVersion,
                                                  aPrincipalInfo,
                                                  nsCString(aScriptURL),
                                                  nsCString(aScope), aState))
 {
 }
 
 ServiceWorkerDescriptor::ServiceWorkerDescriptor(const IPCServiceWorkerDescriptor& aDescriptor)
   : mData(MakeUnique<IPCServiceWorkerDescriptor>(aDescriptor))
@@ -97,16 +101,22 @@ ServiceWorkerDescriptor::Id() const
 }
 
 uint64_t
 ServiceWorkerDescriptor::RegistrationId() const
 {
   return mData->registrationId();
 }
 
+uint64_t
+ServiceWorkerDescriptor::RegistrationVersion() const
+{
+  return mData->registrationVersion();
+}
+
 const mozilla::ipc::PrincipalInfo&
 ServiceWorkerDescriptor::PrincipalInfo() const
 {
   return mData->principalInfo();
 }
 
 nsCOMPtr<nsIPrincipal>
 ServiceWorkerDescriptor::GetPrincipal() const
@@ -135,16 +145,23 @@ ServiceWorkerDescriptor::State() const
 }
 
 void
 ServiceWorkerDescriptor::SetState(ServiceWorkerState aState)
 {
   mData->state() = aState;
 }
 
+void
+ServiceWorkerDescriptor::SetRegistrationVersion(uint64_t aVersion)
+{
+  MOZ_DIAGNOSTIC_ASSERT(aVersion > mDescriptor.registrationVersion());
+  mData->registrationVersion() = aVersion;
+}
+
 bool
 ServiceWorkerDescriptor::Matches(const ServiceWorkerDescriptor& aDescriptor) const
 {
   return Id() == aDescriptor.Id() &&
          Scope() == aDescriptor.Scope() &&
          ScriptURL() == aDescriptor.ScriptURL() &&
          PrincipalInfo() == aDescriptor.PrincipalInfo();
 }
diff --git a/dom/serviceworkers/ServiceWorkerDescriptor.h b/dom/serviceworkers/ServiceWorkerDescriptor.h
--- a/dom/serviceworkers/ServiceWorkerDescriptor.h
+++ b/dom/serviceworkers/ServiceWorkerDescriptor.h
@@ -67,16 +67,19 @@ public:
   operator==(const ServiceWorkerDescriptor& aRight) const;
 
   uint64_t
   Id() const;
 
   uint64_t
   RegistrationId() const;
 
+  uint64_t
+  RegistrationVersion() const;
+
   const mozilla::ipc::PrincipalInfo&
   PrincipalInfo() const;
 
   nsCOMPtr<nsIPrincipal>
   GetPrincipal() const;
 
   const nsCString&
   Scope() const;
@@ -85,16 +88,19 @@ public:
   ScriptURL() const;
 
   ServiceWorkerState
   State() const;
 
   void
   SetState(ServiceWorkerState aState);
 
+  void
+  SetRegistrationVersion(uint64_t aVersion);
+
   // Try to determine if two workers match each other.  This is less strict
   // than an operator==() call since it ignores mutable values like State().
   bool
   Matches(const ServiceWorkerDescriptor& aDescriptor) const;
 
   // Expose the underlying IPC type so that it can be passed via IPC.
   const IPCServiceWorkerDescriptor&
   ToIPC() const;
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp
@@ -27,38 +27,42 @@ ServiceWorkerRegistrationDescriptor::New
   } else if (mData->active().type() != OptionalIPCServiceWorkerDescriptor::Tvoid_t) {
     result.emplace(mData->active().get_IPCServiceWorkerDescriptor());
   }
   return Move(result);
 }
 
 ServiceWorkerRegistrationDescriptor::ServiceWorkerRegistrationDescriptor(
                                     uint64_t aId,
+                                    uint64_t aVersion,
                                     nsIPrincipal* aPrincipal,
                                     const nsACString& aScope,
                                     ServiceWorkerUpdateViaCache aUpdateViaCache)
   : mData(MakeUnique<IPCServiceWorkerRegistrationDescriptor>())
 {
   MOZ_ALWAYS_SUCCEEDS(
     PrincipalToPrincipalInfo(aPrincipal, &mData->principalInfo()));
 
   mData->id() = aId;
+  mData->version() = aVersion;
   mData->scope() = aScope;
   mData->updateViaCache() = aUpdateViaCache;
   mData->installing() = void_t();
   mData->waiting() = void_t();
   mData->active() = void_t();
 }
 
 ServiceWorkerRegistrationDescriptor::ServiceWorkerRegistrationDescriptor(
                                     uint64_t aId,
+                                    uint64_t aVersion,
                                     const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
                                     const nsACString& aScope,
                                     ServiceWorkerUpdateViaCache aUpdateViaCache)
   : mData(MakeUnique<IPCServiceWorkerRegistrationDescriptor>(aId,
+                                                             aVersion,
                                                              aPrincipalInfo,
                                                              nsCString(aScope),
                                                              aUpdateViaCache,
                                                              void_t(),
                                                              void_t(),
                                                              void_t()))
 {
 }
@@ -122,16 +126,22 @@ ServiceWorkerRegistrationDescriptor::ope
 }
 
 uint64_t
 ServiceWorkerRegistrationDescriptor::Id() const
 {
   return mData->id();
 }
 
+uint64_t
+ServiceWorkerRegistrationDescriptor::Version() const
+{
+  return mData->version();
+}
+
 ServiceWorkerUpdateViaCache
 ServiceWorkerRegistrationDescriptor::UpdateViaCache() const
 {
   return mData->updateViaCache();
 }
 
 const mozilla::ipc::PrincipalInfo&
 ServiceWorkerRegistrationDescriptor::PrincipalInfo() const
@@ -291,16 +301,23 @@ ServiceWorkerRegistrationDescriptor::Set
                                                 const OptionalIPCServiceWorkerDescriptor& aActive)
 {
   mData->installing() = aInstalling;
   mData->waiting() = aWaiting;
   mData->active() = aActive;
   MOZ_DIAGNOSTIC_ASSERT(IsValid());
 }
 
+void
+ServiceWorkerRegistrationVersion::SetVersion(uint64_t aVersion)
+{
+  MOZ_DIAGNOSTIC_ASSERT(aVersion > mData->version());
+  mData->version() = aVersion;
+}
+
 const IPCServiceWorkerRegistrationDescriptor&
 ServiceWorkerRegistrationDescriptor::ToIPC() const
 {
   return *mData;
 }
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h
@@ -33,21 +33,23 @@ class ServiceWorkerRegistrationDescripto
   // which is in turn incompatible with bindings code.
   UniquePtr<IPCServiceWorkerRegistrationDescriptor> mData;
 
   Maybe<IPCServiceWorkerDescriptor>
   NewestInternal() const;
 
 public:
   ServiceWorkerRegistrationDescriptor(uint64_t aId,
+                                      uint64_t aVersion,
                                       nsIPrincipal* aPrincipal,
                                       const nsACString& aScope,
                                       ServiceWorkerUpdateViaCache aUpdateViaCache);
 
   ServiceWorkerRegistrationDescriptor(uint64_t aId,
+                                      uint64_t aVersion,
                                       const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
                                       const nsACString& aScope,
                                       ServiceWorkerUpdateViaCache aUpdateViaCache);
 
   explicit ServiceWorkerRegistrationDescriptor(const IPCServiceWorkerRegistrationDescriptor& aDescriptor);
 
   ServiceWorkerRegistrationDescriptor(const ServiceWorkerRegistrationDescriptor& aRight);
 
@@ -65,16 +67,19 @@ public:
   operator==(const ServiceWorkerRegistrationDescriptor& aRight) const;
 
   bool
   operator!=(const ServiceWorkerRegistrationDescriptor& aRight) const;
 
   uint64_t
   Id() const;
 
+  uint64_t
+  Version() const;
+
   ServiceWorkerUpdateViaCache
   UpdateViaCache() const;
 
   const mozilla::ipc::PrincipalInfo&
   PrincipalInfo() const;
 
   nsCOMPtr<nsIPrincipal>
   GetPrincipal() const;
@@ -108,16 +113,19 @@ public:
              ServiceWorkerInfo* aWaiting,
              ServiceWorkerInfo* aActive);
 
   void
   SetWorkers(const OptionalIPCServiceWorkerDescriptor& aInstalling,
              const OptionalIPCServiceWorkerDescriptor& aWaiting,
              const OptionalIPCServiceWorkerDescriptor& aActive);
 
+  void
+  SetVersion(uint64_t aVersion);
+
   // Expose the underlying IPC type so that it can be passed via IPC.
   const IPCServiceWorkerRegistrationDescriptor&
   ToIPC() const;
 };
 
 } // namespace dom
 } // namespace mozilla
 
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp b/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
@@ -744,10 +744,19 @@ ServiceWorkerRegistrationInfo::GetUpdate
 uint64_t
 ServiceWorkerRegistrationInfo::GetNextId()
 {
   MOZ_ASSERT(NS_IsMainThread());
   static uint64_t sNextId = 0;
   return ++sNextId;
 }
 
+// static
+uint64_t
+ServiceWorkerRegistrationInfo::GetNextVersion()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  static uint64_t sNextVersion = 0;
+  return ++sNextVersion;
+}
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationInfo.h b/dom/serviceworkers/ServiceWorkerRegistrationInfo.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationInfo.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationInfo.h
@@ -238,14 +238,17 @@ private:
   // Note, this doesn't necessarily need to be in sync with the DOM registration objects, but
   // it does need to be called in the same task that changed |mInstallingWorker|,
   // |mWaitingWorker| or |mActiveWorker|.
   void
   NotifyChromeRegistrationListeners();
 
   static uint64_t
   GetNextId();
+
+  static uint64_t
+  GetNextVersion();
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_serviceworkerregistrationinfo_h
