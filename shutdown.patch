# HG changeset patch
# Parent 14097418960c369025b3ab293bc01be5af065564
# User Ben Kelly <ben@wanderview.com>
Implement clean shutdown for Cache.


diff --git a/dom/cache/ShutdownObserver.cpp b/dom/cache/ShutdownObserver.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/ShutdownObserver.cpp
@@ -0,0 +1,98 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/cache/ShutdownObserver.h"
+#include "mozilla/ipc/BackgroundParent.h"
+#include "nsThreadUtils.h"
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+NS_IMPL_ISUPPORTS(mozilla::dom::cache::ShutdownObserver, nsIObserver);
+
+// static
+ShutdownObserver*
+ShutdownObserver::Instance()
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
+  static ShutdownObserver* instance = nullptr;
+
+  if (!instance) {
+    instance = new ShutdownObserver();
+  }
+
+  return instance;
+}
+
+void
+ShutdownObserver::AddOrigin(const nsACString& aOrigin)
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
+  nsCOMPtr<nsIRunnable> runnable =
+    NS_NewRunnableMethodWithArg<nsCString>(this,
+                                           &ShutdownObserver::AddOriginOnMainThread,
+                                           nsCString(aOrigin));
+
+  DebugOnly<nsresult> rv =
+    NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
+
+  MOZ_ASSERT(NS_SUCCEEDED(rv));
+}
+
+void
+ShutdownObserver::RemoveOrigin(const nsACString& aOrigin)
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
+  nsCOMPtr<nsIRunnable> runnable =
+    NS_NewRunnableMethodWithArg<nsCString>(this,
+                                           &ShutdownObserver::RemoveOriginOnMainThread,
+                                           nsCString(aOrigin));
+
+  DebugOnly<nsresult> rv =
+    NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
+
+  MOZ_ASSERT(NS_SUCCEEDED(rv));
+}
+
+ShutdownObserver::ShutdownObserver()
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+}
+
+ShutdownObserver::~ShutdownObserver()
+{
+  MOZ_ASSERT_UNREACHABLE("singleton should never be deleted");
+}
+
+void
+ShutdownObserver::AddOriginOnMainThread(const nsACString& aOrigin)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+}
+
+void
+ShutdownObserver::RemoveOriginOnMainThread(const nsACString& aOrigin)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+}
+
+NS_IMETHODIMP
+ShutdownObserver::Observe(nsISupports* aSubject, const char* aTopic,
+                          const char16_t* aData)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  // TODO: handle profile-before-change
+  return NS_OK;
+}
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/ShutdownObserver.h b/dom/cache/ShutdownObserver.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/ShutdownObserver.h
@@ -0,0 +1,41 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_ShutdownObserver_h
+#define mozilla_dom_cache_ShutdownObserver_h
+
+#include "mozilla/Attributes.h"
+#include "nsIObserver.h"
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+class ShutdownObserver MOZ_FINAL : public nsIObserver
+{
+public:
+  static ShutdownObserver* Instance();
+
+  void AddOrigin(const nsACString& aOrigin);
+  void RemoveOrigin(const nsACString& aOrigin);
+
+private:
+  void AddOriginOnMainThread(const nsACString& aOrigin);
+  void RemoveOriginOnMainThread(const nsACString& aOrigin);
+
+  ShutdownObserver();
+  virtual ~ShutdownObserver();
+
+public:
+  NS_DECL_THREADSAFE_ISUPPORTS
+  NS_DECL_NSIOBSERVER
+};
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_ShutdownObserver_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -20,16 +20,17 @@ EXPORTS.mozilla.dom.cache += [
     'Context.h',
     'DBAction.h',
     'DBSchema.h',
     'FileUtils.h',
     'IPCUtils.h',
     'Manager.h',
     'ReadStream.h',
     'SavedTypes.h',
+    'ShutdownObserver.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
 SOURCES += [
     'Action.cpp',
     'Cache.cpp',
     'CacheChild.cpp',
@@ -41,16 +42,17 @@ SOURCES += [
     'CacheStreamControlChild.cpp',
     'CacheStreamControlParent.cpp',
     'Context.cpp',
     'DBAction.cpp',
     'DBSchema.cpp',
     'FileUtils.cpp',
     'Manager.cpp',
     'ReadStream.cpp',
+    'ShutdownObserver.cpp',
     'TypeUtils.cpp',
 ]
 
 IPDL_SOURCES += [
     'PCache.ipdl',
     'PCacheStorage.ipdl',
     'PCacheStreamControl.ipdl',
     'PCacheTypes.ipdlh',
