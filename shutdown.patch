# HG changeset patch
# Parent 14097418960c369025b3ab293bc01be5af065564
# User Ben Kelly <ben@wanderview.com>
Implement clean shutdown for Cache.

diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -86,28 +86,37 @@ public:
     return *sFactory;
   }
 
   already_AddRefed<Manager> GetOrCreate(const nsACString& aOrigin,
                                         const nsACString& aBaseDomain)
   {
     mozilla::ipc::AssertIsOnBackgroundThread();
 
+    nsRefPtr<Manager> ref = Get(aOrigin);
+    if (!ref) {
+      ref = new Manager(aOrigin, aBaseDomain);
+      mManagerList.AppendElement(ref);
+    }
+
+    return ref.forget();
+  }
+
+  already_AddRefed<Manager> Get(const nsACString& aOrigin)
+  {
+    mozilla::ipc::AssertIsOnBackgroundThread();
+
     for (uint32_t i = 0; i < mManagerList.Length(); ++i) {
       if (mManagerList[i]->Origin() == aOrigin) {
         nsRefPtr<Manager> ref = mManagerList[i];
         return ref.forget();
       }
     }
 
-    nsRefPtr<Manager> ref = new Manager(aOrigin, aBaseDomain);
-
-    mManagerList.AppendElement(ref);
-
-    return ref.forget();
+    return nullptr;
   }
 
   void Remove(Manager* aManager)
   {
     mozilla::ipc::AssertIsOnBackgroundThread();
     MOZ_ASSERT(aManager);
 
     for (uint32_t i = 0; i < mManagerList.Length(); ++i) {
@@ -1144,16 +1153,24 @@ Manager::StreamList::~StreamList()
 // static
 already_AddRefed<Manager>
 Manager::ForOrigin(const nsACString& aOrigin, const nsACString& aBaseDomain)
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
   return Factory::Instance().GetOrCreate(aOrigin, aBaseDomain);
 }
 
+// static
+already_AddRefed<Manager>
+Manager::ForExistingOrigin(const nsACString& aOrigin)
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+  return Factory::Instance().Get(aOrigin);
+}
+
 void
 Manager::RemoveListener(Listener* aListener)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   mListeners.RemoveElement(aListener);
 }
 
 void
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -114,16 +114,17 @@ public:
     virtual void OnStorageDelete(RequestId aRequestId, nsresult aRv,
                                  bool aCacheDeleted) { }
     virtual void OnStorageKeys(RequestId aRequestId, nsresult aRv,
                                const nsTArray<nsString>& aKeys) { }
   };
 
   static already_AddRefed<Manager> ForOrigin(const nsACString& aOrigin,
                                              const nsACString& aBaseDomain);
+  static already_AddRefed<Manager> ForExistingOrigin(const nsACString& aOrigin);
 
   void RemoveListener(Listener* aListener);
   void AddRefCacheId(CacheId aCacheId);
   void ReleaseCacheId(CacheId aCacheId);
   uint32_t GetCacheIdRefCount(CacheId aCacheId);
   void Shutdown();
 
   // TODO: consider moving CacheId up in the argument lists below
diff --git a/dom/cache/ShutdownObserver.cpp b/dom/cache/ShutdownObserver.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/ShutdownObserver.cpp
@@ -0,0 +1,152 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/cache/ShutdownObserver.h"
+
+#include "mozilla/dom/cache/Manager.h"
+#include "mozilla/ipc/BackgroundParent.h"
+#include "nsThreadUtils.h"
+
+namespace {
+
+static nsRefPtr<mozilla::dom::cache::ShutdownObserver> sInstance = nullptr;
+
+} // anonymous namespace
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+NS_IMPL_ISUPPORTS(mozilla::dom::cache::ShutdownObserver, nsIObserver);
+
+// static
+ShutdownObserver*
+ShutdownObserver::Instance()
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
+  if (!sInstance) {
+    sInstance = new ShutdownObserver();
+  }
+
+  return sInstance;
+}
+
+nsresult
+ShutdownObserver::AddOrigin(const nsACString& aOrigin)
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
+  if (mShuttingDown) {
+    return NS_ERROR_ILLEGAL_DURING_SHUTDOWN;
+  }
+
+  nsCOMPtr<nsIRunnable> runnable =
+    NS_NewRunnableMethodWithArg<nsCString>(this,
+                                           &ShutdownObserver::AddOriginOnMainThread,
+                                           nsCString(aOrigin));
+
+  DebugOnly<nsresult> rv =
+    NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
+
+  MOZ_ASSERT(NS_SUCCEEDED(rv));
+
+  return NS_OK;
+}
+
+void
+ShutdownObserver::RemoveOrigin(const nsACString& aOrigin)
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
+  nsCOMPtr<nsIRunnable> runnable =
+    NS_NewRunnableMethodWithArg<nsCString>(this,
+                                           &ShutdownObserver::RemoveOriginOnMainThread,
+                                           nsCString(aOrigin));
+
+  DebugOnly<nsresult> rv =
+    NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
+
+  MOZ_ASSERT(NS_SUCCEEDED(rv));
+}
+
+ShutdownObserver::ShutdownObserver()
+  : mShuttingDown(false)
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+}
+
+ShutdownObserver::~ShutdownObserver()
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+}
+
+void
+ShutdownObserver::AddOriginOnMainThread(const nsACString& aOrigin)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  if (!mOrigins.Contains(aOrigin)) {
+    mOrigins.AppendElement(aOrigin);
+
+    if (mOrigins.Length() == 1) {
+      // TODO: register observer on first origin
+    }
+  }
+}
+
+void
+ShutdownObserver::RemoveOriginOnMainThread(const nsACString& aOrigin)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  mOrigins.RemoveElement(aOrigin);
+
+  if (mOrigins.Length() == 0) {
+    // TODO: de-register observer on last origin
+  }
+}
+
+void
+ShutdownObserver::DoShutdown(const nsTArray<nsCString>& aOrigins)
+{
+  mozilla::ipc::AssertIsOnBackgroundThread();
+
+  mShuttingDown = true;
+
+  for (uint32_t i = 0; i < aOrigins.Length(); ++i) {
+    nsRefPtr<Manager> manager = Manager::ForExistingOrigin(aOrigins[i]);
+    if (manager) {
+      manager->Shutdown();
+    }
+  }
+}
+
+NS_IMETHODIMP
+ShutdownObserver::Observe(nsISupports* aSubject, const char* aTopic,
+                          const char16_t* aData)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  if (!strcmp(aTopic, "profile-before-change")) {
+    // TODO: Send shutdown notification to origins
+
+    while (!mOrigins.IsEmpty()) {
+      if (!NS_ProcessNextEvent()) {
+        NS_WARNING("Something bad happened!");
+        break;
+      }
+    }
+
+    // TODO: schedule runnable to clear singleton ref on background thread
+  }
+
+  return NS_OK;
+}
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/ShutdownObserver.h b/dom/cache/ShutdownObserver.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/ShutdownObserver.h
@@ -0,0 +1,51 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_ShutdownObserver_h
+#define mozilla_dom_cache_ShutdownObserver_h
+
+#include "mozilla/Attributes.h"
+#include "nsIObserver.h"
+#include "nsString.h"
+#include "nsTArray.h"
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+class ShutdownObserver MOZ_FINAL : public nsIObserver
+{
+public:
+  static ShutdownObserver* Instance();
+
+  nsresult AddOrigin(const nsACString& aOrigin);
+  void RemoveOrigin(const nsACString& aOrigin);
+
+private:
+  void AddOriginOnMainThread(const nsACString& aOrigin);
+  void RemoveOriginOnMainThread(const nsACString& aOrigin);
+
+  void DoShutdown(const nsTArray<nsCString>& aOrigins);
+
+  ShutdownObserver();
+  virtual ~ShutdownObserver();
+
+  // main thread only
+  nsTArray<nsCString> mOrigins;
+
+  // PBackground thread only
+  bool mShuttingDown;
+
+public:
+  NS_DECL_THREADSAFE_ISUPPORTS
+  NS_DECL_NSIOBSERVER
+};
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_ShutdownObserver_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -20,16 +20,17 @@ EXPORTS.mozilla.dom.cache += [
     'Context.h',
     'DBAction.h',
     'DBSchema.h',
     'FileUtils.h',
     'IPCUtils.h',
     'Manager.h',
     'ReadStream.h',
     'SavedTypes.h',
+    'ShutdownObserver.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
 SOURCES += [
     'Action.cpp',
     'Cache.cpp',
     'CacheChild.cpp',
@@ -41,16 +42,17 @@ SOURCES += [
     'CacheStreamControlChild.cpp',
     'CacheStreamControlParent.cpp',
     'Context.cpp',
     'DBAction.cpp',
     'DBSchema.cpp',
     'FileUtils.cpp',
     'Manager.cpp',
     'ReadStream.cpp',
+    'ShutdownObserver.cpp',
     'TypeUtils.cpp',
 ]
 
 IPDL_SOURCES += [
     'PCache.ipdl',
     'PCacheStorage.ipdl',
     'PCacheStreamControl.ipdl',
     'PCacheTypes.ipdlh',
