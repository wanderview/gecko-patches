# HG changeset patch
# Parent 21cb38524f42115921932a42f1ff4a403669ed58
# User Ben Kelly <ben@wanderview.com>
Bug 1073231 Implement Request and Response Clone() methods. r=nsm r=baku


diff --git a/dom/fetch/InternalResponse.cpp b/dom/fetch/InternalResponse.cpp
--- a/dom/fetch/InternalResponse.cpp
+++ b/dom/fetch/InternalResponse.cpp
@@ -3,39 +3,62 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "InternalResponse.h"
 
 #include "nsIDOMFile.h"
 
 #include "mozilla/dom/InternalHeaders.h"
+#include "nsStreamUtils.h"
 
 namespace mozilla {
 namespace dom {
 
 InternalResponse::InternalResponse(uint16_t aStatus, const nsACString& aStatusText)
   : mType(ResponseType::Default)
   , mStatus(aStatus)
   , mStatusText(aStatusText)
   , mHeaders(new InternalHeaders(HeadersGuardEnum::Response))
 {
 }
 
 // Headers are not copied since BasicResponse and CORSResponse both need custom
 // header handling.
-InternalResponse::InternalResponse(const InternalResponse& aOther)
+InternalResponse::InternalResponse(InternalResponse& aOther)
   : mType(aOther.mType)
   , mTerminationReason(aOther.mTerminationReason)
   , mURL(aOther.mURL)
   , mStatus(aOther.mStatus)
   , mStatusText(aOther.mStatusText)
-  , mBody(aOther.mBody)
   , mContentType(aOther.mContentType)
 {
+  if (!aOther.mBody) {
+    return;
+  }
+
+  nsCOMPtr<nsIInputStream> clone;
+  nsCOMPtr<nsIInputStream> replacement;
+
+  nsresult rv = NS_CloneInputStream(aOther.mBody, getter_AddRefs(clone),
+                                    getter_AddRefs(replacement));
+  if (NS_WARN_IF(NS_FAILED(rv))) { return; }
+
+  if (replacement) {
+    aOther.mBody.swap(replacement);
+  }
+  mBody.swap(clone);
+}
+
+already_AddRefed<InternalResponse>
+InternalResponse::Clone()
+{
+  nsRefPtr<InternalResponse> ir = new InternalResponse(*this);
+  ir->mHeaders = new InternalHeaders(*mHeaders);
+  return ir.forget();
 }
 
 // static
 already_AddRefed<InternalResponse>
 InternalResponse::BasicResponse(InternalResponse* aInner)
 {
   MOZ_ASSERT(aInner);
   nsRefPtr<InternalResponse> basic = new InternalResponse(*aInner);
diff --git a/dom/fetch/InternalResponse.h b/dom/fetch/InternalResponse.h
--- a/dom/fetch/InternalResponse.h
+++ b/dom/fetch/InternalResponse.h
@@ -20,16 +20,18 @@ class InternalResponse MOZ_FINAL
 {
   friend class FetchDriver;
 
 public:
   NS_INLINE_DECL_THREADSAFE_REFCOUNTING(InternalResponse)
 
   InternalResponse(uint16_t aStatus, const nsACString& aStatusText);
 
+  already_AddRefed<InternalResponse> Clone();
+
   static already_AddRefed<InternalResponse>
   NetworkError()
   {
     nsRefPtr<InternalResponse> response = new InternalResponse(0, EmptyCString());
     response->mType = ResponseType::Error;
     return response.forget();
   }
 
@@ -110,17 +112,17 @@ public:
   }
 
 private:
   ~InternalResponse()
   { }
 
   // Used to create filtered responses.
   // Does not copy headers.
-  explicit InternalResponse(const InternalResponse& aOther);
+  explicit InternalResponse(InternalResponse& aOther);
 
   ResponseType mType;
   nsCString mTerminationReason;
   nsCString mURL;
   const uint16_t mStatus;
   const nsCString mStatusText;
   nsRefPtr<InternalHeaders> mHeaders;
   nsCOMPtr<nsIInputStream> mBody;
