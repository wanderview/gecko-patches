# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  fd878c46a51a4e0a90cf38393cff2f8103cdb4b1

diff --git a/dom/clients/api/Client.cpp b/dom/clients/api/Client.cpp
--- a/dom/clients/api/Client.cpp
+++ b/dom/clients/api/Client.cpp
@@ -1,17 +1,16 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "Client.h"
 
-#include "mozilla/dom/ClientBinding.h"
 #include "mozilla/dom/ClientHandle.h"
 #include "mozilla/dom/ClientManager.h"
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/WorkerPrivate.h"
 #include "mozilla/dom/WorkerScope.h"
 #include "nsIGlobalObject.h"
 
 namespace mozilla {
@@ -34,17 +33,17 @@ Client::~Client()
 {
 }
 
 void
 Client::EnsureHandle()
 {
   NS_ASSERT_OWNINGTHREAD(Client);
   if (!mHandle) {
-    mHandle = ClientManager::CreateHandle(ClientInfo(mData.info()));
+    mHandle = ClientManager::CreateHandle(ClientInfo(mData->info()));
   }
 }
 
 // TODO: unify this with code in Clients
 nsresult
 Client::GetEndPoint(ClientEndPoint& aEndPointOut)
 {
   nsCOMPtr<nsPIDOMWindowInner> window = do_QueryInterface(mGlobal);
@@ -68,78 +67,78 @@ Client::GetEndPoint(ClientEndPoint& aEnd
     }
   }
 
   return NS_ERROR_DOM_INVALID_STATE_ERR;
 }
 
 Client::Client(nsIGlobalObject* aGlobal, const ClientInfoAndState& aData)
   : mGlobal(aGlobal)
-  , mData(aData)
+  , mData(MakeUnique<ClientInfoAndState>(aData))
 {
   MOZ_DIAGNOSTIC_ASSERT(mGlobal);
 }
 
 TimeStamp
 Client::CreationTime() const
 {
-  return mData.info().creationTime();
+  return mData->info().creationTime();
 }
 
 TimeStamp
 Client::LastFocusTime() const
 {
-  if (mData.info().type() != ClientType::Window) {
+  if (mData->info().type() != ClientType::Window) {
     return TimeStamp();
   }
-  return mData.state().get_ClientWindowState().lastFocusTime();
+  return mData->state().get_ClientWindowState().lastFocusTime();
 }
 
 JSObject*
 Client::WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto)
 {
-  if (mData.info().type() == ClientType::Window) {
+  if (mData->info().type() == ClientType::Window) {
     return WindowClientBinding::Wrap(aCx, this, aGivenProto);
   }
   return ClientBinding::Wrap(aCx, this, aGivenProto);
 }
 
 nsIGlobalObject*
 Client::GetParentObject() const
 {
   return mGlobal;
 }
 
 void
 Client::GetUrl(nsAString& aUrlOut) const
 {
-  CopyUTF8toUTF16(mData.info().url(), aUrlOut);
+  CopyUTF8toUTF16(mData->info().url(), aUrlOut);
 }
 
 void
 Client::GetId(nsAString& aIdOut) const
 {
   char buf[NSID_LENGTH];
-  mData.info().id().ToProvidedString(buf);
+  mData->info().id().ToProvidedString(buf);
   NS_ConvertASCIItoUTF16 uuid(buf);
 
   // Remove {} and the null terminator
   aIdOut.Assign(Substring(uuid, 1, NSID_LENGTH - 3));
 }
 
 ClientType
 Client::Type() const
 {
-  return mData.info().type();
+  return mData->info().type();
 }
 
 FrameType
 Client::GetFrameType() const
 {
-  return mData.info().frameType();
+  return mData->info().frameType();
 }
 
 void
 Client::PostMessage(JSContext* aCx, JS::Handle<JS::Value> aMessage,
                     const Sequence<JSObject*>& aTransferable,
                     ErrorResult& aRv)
 {
   JS::Rooted<JS::Value> transferable(aCx, JS::UndefinedValue());
@@ -163,23 +162,23 @@ Client::PostMessage(JSContext* aCx, JS::
 
   EnsureHandle();
   RefPtr<GenericPromise> p = mHandle->PostMessage(data, endpoint);
 }
 
 VisibilityState
 Client::GetVisibilityState() const
 {
-  return mData.state().get_ClientWindowState().visibilityState();
+  return mData->state().get_ClientWindowState().visibilityState();
 }
 
 bool
 Client::Focused() const
 {
-  return mData.state().get_ClientWindowState().focused();
+  return mData->state().get_ClientWindowState().focused();
 }
 
 already_AddRefed<Promise>
 Client::Focus(ErrorResult& aRv)
 {
   RefPtr<Promise> outerPromise = Promise::Create(mGlobal, aRv);
   if (aRv.Failed()) {
     return outerPromise.forget();
@@ -203,17 +202,17 @@ Client::Focus(ErrorResult& aRv)
   EnsureHandle();
 
   RefPtr<Client> self = this;
 
   RefPtr<ClientStatePromise> innerPromise = mHandle->Focus();
   innerPromise->Then(AbstractThread::GetCurrent(), __func__,
     [self, outerPromise] (const ClientState& aResult) {
       RefPtr<Client> newClient =
-        new Client(self->mGlobal, ClientInfoAndState(self->mData.info(), aResult));
+        new Client(self->mGlobal, ClientInfoAndState(self->mData->info(), aResult));
       outerPromise->MaybeResolve(newClient);
     }, [self, outerPromise] (nsresult aResult) {
       outerPromise->MaybeReject(aResult);
     });
 
   return outerPromise.forget();
 }
 
@@ -237,17 +236,17 @@ Client::Navigate(const nsAString& aURL, 
     WorkerPrivate* workerPrivate = GetCurrentThreadWorkerPrivate();
     if (workerPrivate) {
       baseURL = workerPrivate->GetLocationInfo().mHref;
     }
   }
 
   RefPtr<Client> self = this;
 
-  ClientNavigateArgs args(mData.info(), NS_ConvertUTF16toUTF8(aURL), baseURL);
+  ClientNavigateArgs args(mData->info(), NS_ConvertUTF16toUTF8(aURL), baseURL);
 
   RefPtr<ClientOpPromise> innerPromise = ClientManager::Navigate(args);
 
   innerPromise->Then(AbstractThread::GetCurrent(), __func__,
     [self, outerPromise] (const ClientOpResult& aResult) {
       if (aResult.type() != ClientOpResult::TClientInfoAndState) {
         outerPromise->MaybeResolve(JS::NullHandleValue);
         return;
diff --git a/dom/clients/api/Client.h b/dom/clients/api/Client.h
--- a/dom/clients/api/Client.h
+++ b/dom/clients/api/Client.h
@@ -1,38 +1,41 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #ifndef _mozilla_dom_Client_h
 #define _mozilla_dom_Client_h
 
-#include "mozilla/dom/ClientIPCTypes.h"
+#include "mozilla/dom/ClientBinding.h"
 #include "nsCOMPtr.h"
 #include "nsISupports.h"
 #include "nsWrapperCache.h"
 
 class nsIGlobalObject;
 
 namespace mozilla {
 
 class ErrorResult;
 
 namespace dom {
 
+class ClientEndPoint;
 class ClientHandle;
+class ClientInfoAndState;
 class Promise;
+
 template <typename t> class Sequence;
 
 class Client final : public nsISupports
                    , public nsWrapperCache
 {
   nsCOMPtr<nsIGlobalObject> mGlobal;
-  const ClientInfoAndState mData;
+  UniquePtr<ClientInfoAndState> mData;
   RefPtr<ClientHandle> mHandle;
 
   ~Client();
 
   void
   EnsureHandle();
 
   nsresult
diff --git a/dom/clients/manager/ClientInfo.h b/dom/clients/manager/ClientInfo.h
--- a/dom/clients/manager/ClientInfo.h
+++ b/dom/clients/manager/ClientInfo.h
@@ -14,17 +14,17 @@ namespace mozilla {
 namespace ipc {
 class PrincipalInfo;
 } // namespace ipc
 
 namespace dom {
 
 class IPCClientInfo;
 
-struct ClientInfo
+class ClientInfo final
 {
   UniquePtr<IPCClientInfo> mData;
 
 public:
   ClientInfo(const nsID& aId,
              ClientType aType,
              const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
              const TimeStamp& aCreationTime);
diff --git a/dom/workers/ServiceWorkerDescriptor.h b/dom/workers/ServiceWorkerDescriptor.h
--- a/dom/workers/ServiceWorkerDescriptor.h
+++ b/dom/workers/ServiceWorkerDescriptor.h
@@ -12,17 +12,17 @@ namespace ipc {
 class PrincipalInfo;
 } // namespace ipc
 
 namespace dom {
 
 class IPCServiceWorkerDescriptor;
 enum class ServiceWorkerState : uint8_t;
 
-struct ServiceWorkerDescriptor
+class ServiceWorkerDescriptor final
 {
   UniquePtr<IPCServiceWorkerDescriptor> mData;
 
 public:
   ServiceWorkerDescriptor();
 
   ServiceWorkerDescriptor(uint64_t aId,
                           const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
diff --git a/dom/workers/ServiceWorkerPrivate.cpp b/dom/workers/ServiceWorkerPrivate.cpp
--- a/dom/workers/ServiceWorkerPrivate.cpp
+++ b/dom/workers/ServiceWorkerPrivate.cpp
@@ -19,16 +19,17 @@
 #include "nsProxyRelease.h"
 #include "nsQueryObject.h"
 #include "nsStreamUtils.h"
 #include "nsStringStream.h"
 #include "WorkerRunnable.h"
 #include "WorkerScope.h"
 #include "mozilla/Assertions.h"
 #include "mozilla/dom/Client.h"
+#include "mozilla/dom/ClientIPCTypes.h"
 #include "mozilla/dom/FetchUtil.h"
 #include "mozilla/dom/IndexedDatabaseManager.h"
 #include "mozilla/dom/InternalHeaders.h"
 #include "mozilla/dom/NotificationEvent.h"
 #include "mozilla/dom/PromiseNativeHandler.h"
 #include "mozilla/dom/PushEventBinding.h"
 #include "mozilla/dom/RequestBinding.h"
 #include "mozilla/Unused.h"
