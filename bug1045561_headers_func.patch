# HG changeset patch
# Parent 8b75c1e3063bdd21645a1a0d2369cc637efba12e
# User Ben Kelly <ben@wanderview.com>
Bug 1045561 Use a WebIDL Func attribute to conditionally enable Fetch Headers. r=ehsan

diff --git a/dom/fetch/Headers.cpp b/dom/fetch/Headers.cpp
--- a/dom/fetch/Headers.cpp
+++ b/dom/fetch/Headers.cpp
@@ -3,16 +3,18 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/Headers.h"
 
 #include "mozilla/ErrorResult.h"
 #include "mozilla/dom/UnionTypes.h"
+#include "mozilla/dom/WorkerPrivate.h"
+#include "mozilla/Preferences.h"
 
 #include "nsCharSeparatedTokenizer.h"
 #include "nsContentUtils.h"
 #include "nsDOMString.h"
 #include "nsNetUtil.h"
 #include "nsPIDOMWindow.h"
 #include "nsReadableUtils.h"
 
@@ -24,16 +26,42 @@ NS_IMPL_CYCLE_COLLECTING_RELEASE(Headers
 NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Headers, mOwner)
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Headers)
   NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
   NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
 // static
+bool
+Headers::PrefEnabled(JSContext* aCx, JSObject* aObj)
+{
+  using mozilla::dom::workers::WorkerPrivate;
+  using mozilla::dom::workers::GetWorkerPrivateFromContext;
+
+  if (NS_IsMainThread()) {
+    static bool sPrefCacheInit = false;
+    static bool sPrefEnabled = false;
+    if (sPrefCacheInit) {
+      return sPrefEnabled;
+    }
+    Preferences::AddBoolVarCache(&sPrefEnabled, "dom.fetch.enabled");
+    sPrefCacheInit = true;
+    return sPrefEnabled;
+  }
+
+  WorkerPrivate* workerPrivate = GetWorkerPrivateFromContext(aCx);
+  if (!workerPrivate) {
+    return false;
+  }
+
+  return workerPrivate->DOMFetchEnabled();
+}
+
+// static
 already_AddRefed<Headers>
 Headers::Constructor(const GlobalObject& aGlobal,
                      const Optional<HeadersOrByteStringSequenceSequenceOrByteStringMozMap>& aInit,
                      ErrorResult& aRv)
 {
   nsRefPtr<Headers> headers = new Headers(aGlobal.GetAsSupports());
 
   if (!aInit.WasPassed()) {
diff --git a/dom/fetch/Headers.h b/dom/fetch/Headers.h
--- a/dom/fetch/Headers.h
+++ b/dom/fetch/Headers.h
@@ -49,16 +49,18 @@ private:
 public:
   explicit Headers(nsISupports* aOwner, HeadersGuardEnum aGuard = HeadersGuardEnum::None)
     : mOwner(aOwner)
     , mGuard(aGuard)
   {
     SetIsDOMBinding();
   }
 
+  static bool PrefEnabled(JSContext* cx, JSObject* obj);
+
   static already_AddRefed<Headers>
   Constructor(const GlobalObject& aGlobal,
               const Optional<HeadersOrByteStringSequenceSequenceOrByteStringMozMap>& aInit,
               ErrorResult& aRv);
 
   void Append(const nsACString& aName, const nsACString& aValue,
               ErrorResult& aRv);
   void Delete(const nsACString& aName, ErrorResult& aRv);
diff --git a/dom/fetch/moz.build b/dom/fetch/moz.build
--- a/dom/fetch/moz.build
+++ b/dom/fetch/moz.build
@@ -7,11 +7,15 @@
 EXPORTS.mozilla.dom += [
     'Headers.h',
 ]
 
 UNIFIED_SOURCES += [
     'Headers.cpp',
 ]
 
+LOCAL_INCLUDES += [
+    '../workers',
+]
+
 FAIL_ON_WARNINGS = True
 MSVC_ENABLE_PGO = True
 FINAL_LIBRARY = 'xul'
diff --git a/dom/webidl/Headers.webidl b/dom/webidl/Headers.webidl
--- a/dom/webidl/Headers.webidl
+++ b/dom/webidl/Headers.webidl
@@ -15,17 +15,17 @@ enum HeadersGuardEnum {
   "request",
   "request-no-cors",
   "response",
   "immutable"
 };
 
 [Constructor(optional HeadersInit init),
  // FIXME: Exposed=Window,Worker,
- Pref="dom.fetch.enabled"]
+ Func="mozilla::dom::Headers::PrefEnabled"]
 interface Headers {
   [Throws] void append(ByteString name, ByteString value);
   [Throws] void delete(ByteString name);
   [Throws] ByteString? get(ByteString name);
   [Throws] sequence<ByteString> getAll(ByteString name);
   [Throws] boolean has(ByteString name);
   [Throws] void set(ByteString name, ByteString value);
 
diff --git a/dom/workers/RegisterBindings.cpp b/dom/workers/RegisterBindings.cpp
--- a/dom/workers/RegisterBindings.cpp
+++ b/dom/workers/RegisterBindings.cpp
@@ -59,36 +59,32 @@ WorkerPrivate::RegisterBindings(JSContex
     return false;
   }
 
   // Init other paris-bindings.
   if (!ConsoleBinding::GetConstructorObject(aCx, aGlobal) ||
       !DOMExceptionBinding::GetConstructorObject(aCx, aGlobal) ||
       !EventBinding::GetConstructorObject(aCx, aGlobal) ||
       !FileReaderSyncBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+      (HeadersBinding::ConstructorEnabled(aCx, aGlobal) &&
+       !HeadersBinding::GetConstructorObject(aCx, aGlobal)) ||
       !ImageDataBinding::GetConstructorObject(aCx, aGlobal) ||
       !MessageEventBinding::GetConstructorObject(aCx, aGlobal) ||
       !MessagePortBinding::GetConstructorObject(aCx, aGlobal) ||
       !PromiseBinding::GetConstructorObject(aCx, aGlobal) ||
       !TextDecoderBinding::GetConstructorObject(aCx, aGlobal) ||
       !TextEncoderBinding::GetConstructorObject(aCx, aGlobal) ||
       !XMLHttpRequestBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !XMLHttpRequestUploadBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !URLBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !URLSearchParamsBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerLocationBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !WorkerNavigatorBinding_workers::GetConstructorObject(aCx, aGlobal)) {
     return false;
   }
 
-  if (DOMFetchEnabled()) {
-    if (!HeadersBinding::GetConstructorObject(aCx, aGlobal)) {
-      return false;
-    }
-  }
-
   if (!JS_DefineProfilingFunctions(aCx, aGlobal)) {
     return false;
   }
 
   return true;
 }
