
# HG changeset patch
# User Andrea Marchesini <amarchesini@mozilla.com>
# Date 1476278104 -7200
# Node ID 5b64ff660e21c792feffc903631f62bd44751f08
# Parent  5758ad60c4d870c01e45f38bed03f721b4944122
Bug 1308667 - WorkerPrivate::QueueRunnable can be used by any parent thread; assertion fixed, r=bkelly

diff --git a/dom/url/tests/test_worker_url.html b/dom/url/tests/test_worker_url.html
--- a/dom/url/tests/test_worker_url.html
+++ b/dom/url/tests/test_worker_url.html
@@ -13,17 +13,17 @@
 <p id="display"></p>
 <div id="content" style="display: none"></div>
 <pre id="test"></pre>
 <script class="testbody" type="text/javascript">
 
   var worker = new Worker("url_worker.js");
 
   worker.onmessage = function(event) {
-    is(event.target, worker);
+    is(event.target, worker, "Correct worker");
 
     if (event.data.type == 'finish') {
       runTest();
     } else if (event.data.type == 'status') {
       ok(event.data.status, event.data.msg);
     } else if (event.data.type == 'url') {
       var xhr = new XMLHttpRequest();
       xhr.open('GET', event.data.url, false);
@@ -32,17 +32,17 @@
           ok(true, "Blob readable!");
         }
       }
       xhr.send();
     }
   };
 
   worker.onerror = function(event) {
-    is(event.target, worker);
+    is(event.target, worker, "Correct worker");
     ok(false, "Worker had an error: " + event.message);
     SimpleTest.finish();
   };
 
   var tests = [
     function() { worker.postMessage(0); },
     function() { worker.postMessage(1); }
   ];
diff --git a/dom/workers/WorkerPrivate.cpp b/dom/workers/WorkerPrivate.cpp
--- a/dom/workers/WorkerPrivate.cpp
+++ b/dom/workers/WorkerPrivate.cpp
@@ -2663,17 +2663,16 @@ WorkerPrivateParent<Derived>::Thaw(nsPID
     }
   }
 
   EnableDebugger();
 
   // Execute queued runnables before waking up the worker, otherwise the worker
   // could post new messages before we run those that have been queued.
   if (!IsParentWindowPaused() && !mQueuedRunnables.IsEmpty()) {
-    AssertIsOnMainThread();
     MOZ_ASSERT(IsDedicatedWorker());
 
     nsTArray<nsCOMPtr<nsIRunnable>> runnables;
     mQueuedRunnables.SwapElements(runnables);
 
     for (uint32_t index = 0; index < runnables.Length(); index++) {
       runnables[index]->Run();
     }
@@ -2715,17 +2714,16 @@ WorkerPrivateParent<Derived>::ParentWind
     if (mParentStatus >= Terminating) {
       return;
     }
   }
 
   // Execute queued runnables before waking up, otherwise the worker could post
   // new messages before we run those that have been queued.
   if (!IsFrozen() && !mQueuedRunnables.IsEmpty()) {
-    AssertIsOnMainThread();
     MOZ_ASSERT(IsDedicatedWorker());
 
     nsTArray<nsCOMPtr<nsIRunnable>> runnables;
     mQueuedRunnables.SwapElements(runnables);
 
     for (uint32_t index = 0; index < runnables.Length(); index++) {
       runnables[index]->Run();
     }
diff --git a/dom/workers/WorkerPrivate.h b/dom/workers/WorkerPrivate.h
--- a/dom/workers/WorkerPrivate.h
+++ b/dom/workers/WorkerPrivate.h
@@ -414,17 +414,17 @@ public:
                                 uint32_t aFlags);
 
   void
   WorkerScriptLoaded();
 
   void
   QueueRunnable(nsIRunnable* aRunnable)
   {
-    AssertIsOnMainThread();
+    AssertIsOnParentThread();
     mQueuedRunnables.AppendElement(aRunnable);
   }
 
   WorkerPrivate*
   GetParent() const
   {
     return mParent;
   }

