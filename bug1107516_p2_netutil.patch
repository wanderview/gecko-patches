# HG changeset patch
# Parent 13faa7dee13dc56d41a48ef1874c966aba2cea0d
# User Ben Kelly <ben@wanderview.com>
Bug 1107516 P2 Add nsILoadGroup helpers to nsNetUtil.h.

diff --git a/netwerk/base/public/nsNetUtil.h b/netwerk/base/public/nsNetUtil.h
--- a/netwerk/base/public/nsNetUtil.h
+++ b/netwerk/base/public/nsNetUtil.h
@@ -902,16 +902,27 @@ NS_NewLoadGroup(nsILoadGroup      **resu
         if (NS_SUCCEEDED(rv)) {
             *result = nullptr;
             group.swap(*result);
         }
     }
     return rv;
 }
 
+// Create a new nsILoadGroup that will match the given principal.  Also,
+// if a base load group is provided, populate the nsILoadContext of the
+// new group with information for the existing context.
+nsresult
+NS_NewLoadGroup(nsILoadGroup** aResult, nsIPrincipal* aPrincipal,
+                nsILoadGroup* aBaseLoadGroup = nullptr);
+
+bool
+NS_LoadGroupMatchesPrincipal(nsILoadGroup* aLoadGroup,
+                             nsIPrincipal* aPrincipal);
+
 inline nsresult
 NS_NewDownloader(nsIStreamListener   **result,
                  nsIDownloadObserver  *observer,
                  nsIFile              *downloadLocation = nullptr)
 {
     nsresult rv;
     nsCOMPtr<nsIDownloader> downloader =
         do_CreateInstance(NS_DOWNLOADER_CONTRACTID, &rv);
diff --git a/netwerk/base/src/nsNetUtil.cpp b/netwerk/base/src/nsNetUtil.cpp
--- a/netwerk/base/src/nsNetUtil.cpp
+++ b/netwerk/base/src/nsNetUtil.cpp
@@ -1,18 +1,83 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 /* vim:set ts=4 sw=4 sts=4 et cin: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "mozilla/LoadContext.h"
 #include "nsNetUtil.h"
 #include "nsHttp.h"
 
 bool NS_IsReasonableHTTPHeaderValue(const nsACString& aValue)
 {
   return mozilla::net::nsHttp::IsReasonableHeaderValue(aValue);
 }
 
 bool NS_IsValidHTTPToken(const nsACString& aToken)
 {
   return mozilla::net::nsHttp::IsValidToken(aToken);
 }
+
+nsresult
+NS_NewLoadGroup(nsILoadGroup** aResult, nsIPrincipal* aPrincipal,
+                nsILoadGroup* aBaseLoadGroup)
+{
+    using mozilla::LoadContext;
+    nsresult rv;
+
+    nsCOMPtr<nsILoadContext> baseLoadContext;
+    if (aBaseLoadGroup) {
+        nsCOMPtr<nsIInterfaceRequestor> cb;
+        rv = aBaseLoadGroup->GetNotificationCallbacks(getter_AddRefs(cb));
+        NS_ENSURE_SUCCESS(rv, rv);
+
+        baseLoadContext = do_QueryInterface(cb);
+    }
+
+    nsCOMPtr<nsILoadGroup> group =
+        do_CreateInstance(NS_LOADGROUP_CONTRACTID, &rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    nsRefPtr<LoadContext> loadContext = new LoadContext(aPrincipal,
+                                                        baseLoadContext);
+    rv = group->SetNotificationCallbacks(loadContext);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    group.forget(aResult);
+    return rv;
+}
+
+bool
+NS_LoadGroupMatchesPrincipal(nsILoadGroup* aLoadGroup,
+                             nsIPrincipal* aPrincipal)
+{
+    if (!aLoadGroup || !aPrincipal) {
+        return false;
+    }
+
+    nsCOMPtr<nsIInterfaceRequestor> callbacks;
+    nsresult rv =
+        aLoadGroup->GetNotificationCallbacks(getter_AddRefs(callbacks));
+    NS_ENSURE_SUCCESS(rv, false);
+
+    nsCOMPtr<nsILoadContext> loadContext = do_QueryInterface(callbacks);
+    NS_ENSURE_TRUE(loadContext, false);
+
+    // Verify load context appId and browser flag match the principal
+    uint32_t contextAppId;
+    bool contextInBrowserElement;
+    rv = loadContext->GetAppId(&contextAppId);
+    NS_ENSURE_SUCCESS(rv, false);
+    rv = loadContext->GetIsInBrowserElement(&contextInBrowserElement);
+    NS_ENSURE_SUCCESS(rv, false);
+
+    uint32_t principalAppId;
+    bool principalInBrowserElement;
+    rv = aPrincipal->GetAppId(&principalAppId);
+    NS_ENSURE_SUCCESS(rv, false);
+    rv = aPrincipal->GetIsInBrowserElement(&principalInBrowserElement);
+    NS_ENSURE_SUCCESS(rv, false);
+
+    return contextAppId == principalAppId &&
+           contextInBrowserElement == principalInBrowserElement;
+}
