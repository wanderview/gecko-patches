# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  39709c77f47ca213b1622b3bd58803ccb8f25635
Bug 1351935 P2 Fix client.navigate() WPT test to support cross-origin navigations. r=smaug

diff --git a/testing/web-platform/tests/service-workers/service-worker/client-navigate.https.html b/testing/web-platform/tests/service-workers/service-worker/client-navigate.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/client-navigate.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/client-navigate.https.html
@@ -97,16 +97,41 @@
       .then(___ => with_iframe(scope))
       .then(f => {
         frame = f;
         controller = frame.contentWindow.navigator.serviceWorker.controller;
         fetch_tests_from_worker(controller);
         return wait_for_message()
       })
       .then(({id}) => clientId = id)
+      .then(___ => run_test(controller, clientId, "test_client_navigate_cross_origin"))
+      .then(({result, url}) => {
+        assert_equals(result, "test_client_navigate_cross_origin");
+        assert_equals(url, "");
+        assert_throws(null, function() { return frame.contentWindow.location.href });
+      })
+      .catch(unreached_rejection(t))
+      .then(___ => service_worker_unregister(t, scope));
+  }, "Frame location should not be accessible after cross-origin navigation");
+
+  promise_test(function(t) {
+    var worker = "resources/client-navigate-worker.js";
+    var scope = "resources/client-navigate-frame.html";
+    var controller, frame, clientId;
+
+    return service_worker_unregister_and_register(t, worker, scope)
+      .then(reg => wait_for_state(t, reg.installing, "activated"))
+      .then(___ => with_iframe(scope))
+      .then(f => {
+        frame = f;
+        controller = frame.contentWindow.navigator.serviceWorker.controller;
+        fetch_tests_from_worker(controller);
+        return wait_for_message()
+      })
+      .then(({id}) => clientId = id)
       .then(___ => run_test(controller, clientId, "test_client_navigate_failure"))
       .then(({result, url}) => {
         assert_equals(result, "test_client_navigate_failure");
         assert_equals(
           frame.contentWindow.location.href,
           new URL("resources/client-navigate-frame.html",
                   location).toString());
         frame.contentWindow.document.body.style = "background-color: green"
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/client-navigate-worker.js b/testing/web-platform/tests/service-workers/service-worker/resources/client-navigate-worker.js
--- a/testing/web-platform/tests/service-workers/service-worker/resources/client-navigate-worker.js
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/client-navigate-worker.js
@@ -35,29 +35,37 @@ self.onmessage = function(e) {
       return self.clients.get(clientId)
                  .then(client => client.navigate("client-navigated-frame.html"))
                  .then(client => {
                    clientUrl = client.url;
                    assert_true(client instanceof WindowClient);
                  })
                  .catch(unreached_rejection(t));
     }, "Return value should be instance of WindowClient");
-  } else if (test === "test_client_navigate_failure") {
+  } else if (test === "test_client_navigate_cross_origin") {
     promise_test(function(t) {
+      this.add_cleanup(() => port.postMessage(pass(test, clientUrl)));
+      var path = new URL('client-navigated-frame.html', self.location.href).pathname;
+      var url = get_host_info()['HTTPS_REMOTE_ORIGIN'] + path;
       return self.clients.get(clientId)
-                 .then(client => assert_promise_rejects(client.navigate("http://example.com")))
+                 .then(client => client.navigate(url))
+                 .then(client => {
+                   clientUrl = (client && client.url) || "";
+                   assert_equals(client, null,
+                                 'cross-origin navigate resolves with null');
+                 })
                  .catch(unreached_rejection(t));
-    }, "Navigating to different origin should reject");
-
+    }, "Navigating to different origin should resolve with null");
+  } else if (test === "test_client_navigate_failure") {
     promise_test(function(t) {
       this.add_cleanup(function() { port.postMessage(pass(test, "")); });
       return self.clients.get(clientId)
                  .then(client => promise_rejects(t, new TypeError(), client.navigate("about:blank")))
                  .catch(unreached_rejection(t));
-    }, "Navigating to about:blank should reject with TypeError")
+    }, "Navigating to about:blank should reject with TypeError");
   } else if (test === "test_client_navigate_redirect") {
     var host_info = get_host_info();
     var url = new URL(host_info['HTTPS_REMOTE_ORIGIN']).toString() +
               new URL("client-navigated-frame.html", location).pathname.substring(1);
     promise_test(function(t) {
       this.add_cleanup(() => port.postMessage(pass(test, clientUrl)));
       return self.clients.get(clientId)
                  .then(client => client.navigate("redirect.py?Redirect=" + url))
