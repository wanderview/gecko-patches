# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  1dbe350b57b17ec1ce2887441b79c6f51b429378
Bug 1245724 P2 Test that service workers do not intercept plugin network requests. r=ehsan

diff --git a/dom/workers/test/serviceworkers/fetch/plugin/plugins.html b/dom/workers/test/serviceworkers/fetch/plugin/plugins.html
--- a/dom/workers/test/serviceworkers/fetch/plugin/plugins.html
+++ b/dom/workers/test/serviceworkers/fetch/plugin/plugins.html
@@ -1,43 +1,71 @@
 <!DOCTYPE html>
+<!-- Only imported to keep plugin-utils.js happy.  -->
+<script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+<script type="application/javascript" src="/tests/dom/plugins/test/mochitest/plugin-utils.js"></script>
 <script>
-  var obj, embed;
+  var obj, embed, plugin;
 
+  // Override ok() and is() to proxy tests back to parent window
   function ok(v, msg) {
     window.opener.postMessage({status: "ok", result: !!v, message: msg}, "*");
   }
 
+  function is(v, e, msg) {
+    window.opener.postMessage({status: "is", result: v, expected: e, message: msg}, "*");
+  }
+
+  var interceptList = [];
+  function onMessage(e) {
+    interceptList.push(e.data);
+  }
+  navigator.serviceWorker.addEventListener("message", onMessage, false);
+
   function finish() {
+    navigator.serviceWorker.removeEventListener("message", onMessage);
     document.documentElement.removeChild(obj);
     document.documentElement.removeChild(embed);
+    document.documentElement.removeChild(plugin);
     window.opener.postMessage({status: "done"}, "*");
   }
 
+  // Test that we do not intercept top level <object> requests.
   function test_object() {
     obj = document.createElement("object");
     obj.setAttribute('data', "object");
     document.documentElement.appendChild(obj);
   }
 
+  // Test that we do not intercept top level <embed> requests.
   function test_embed() {
     embed = document.createElement("embed");
     embed.setAttribute('src', "embed");
     document.documentElement.appendChild(embed);
   }
 
-  navigator.serviceWorker.addEventListener("message", function onMessage(e) {
-    if (e.data.context === "object") {
-      ok(false, "<object> should not be intercepted");
-    } else if (e.data.context === "embed") {
-      ok(false, "<embed> should not be intercepted");
-    } else if (e.data.context === "fetch" && e.data.resource === "foo.txt") {
-      navigator.serviceWorker.removeEventListener("message", onMessage);
-      finish();
-    }
-  }, false);
+  // Test that we do not intercept requests made from within plugins.
+  function test_plugin() {
+    setTestPluginEnabledState(SpecialPowers.Ci.nsIPluginTag.STATE_ENABLED);
+    plugin = document.createElement("embed");
+    plugin.setAttribute("type", "application/x-test");
+    plugin.setAttribute("width", "200");
+    plugin.setAttribute("height", "200");
+    document.documentElement.appendChild(plugin);
+
+    return new Promise(function(resolve, reject) {
+      var url = "http://example.org/tests/dom/plugins/test/mochitest/loremipsum.txt";
+      plugin.streamTest(url, false, null, null, resolve, null, true);
+    });
+  }
 
   test_object();
   test_embed();
-  // SW will definitely intercept fetch API, use this to see if plugins are
-  // intercepted before fetch().
-  fetch("foo.txt");
+  test_plugin().then(function() {
+    return fetch("foo.txt");
+  }).then(function(response) {
+    is(interceptList.length, 1, "should intercept only one request");
+    is(interceptList[0].context, "fetch", "should intercept fetch");
+    is(interceptList[0].resource, "foo.txt", "should intercept fetch");
+  }).catch(function(e) {
+    ok(false, "unexpected promise rejection " + e);
+  }).then(finish);
 </script>
diff --git a/dom/workers/test/serviceworkers/test_not_intercept_plugin.html b/dom/workers/test/serviceworkers/test_not_intercept_plugin.html
--- a/dom/workers/test/serviceworkers/test_not_intercept_plugin.html
+++ b/dom/workers/test/serviceworkers/test_not_intercept_plugin.html
@@ -35,16 +35,18 @@
     });
   }
 
   function testPlugins() {
     var p = new Promise(function(resolve, reject) {
       window.onmessage = function(e) {
         if (e.data.status == "ok") {
           ok(e.data.result, e.data.message);
+        } else if (e.data.status == "is") {
+          is(e.data.result, e.data.expected, e.data.message);
         } else if (e.data.status == "done") {
           window.onmessage = null;
           w.close();
           resolve();
         }
       }
     });
 
