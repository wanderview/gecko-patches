# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  e3abeb320fe1b0b8d2711bbbe615e0cd13ac6bb1
Bug 1293277 P5 Add ClientInfo and ClientState types. r=baku

diff --git a/dom/clients/manager/ClientIPCTypes.ipdlh b/dom/clients/manager/ClientIPCTypes.ipdlh
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/ClientIPCTypes.ipdlh
@@ -0,0 +1,44 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+include DOMTypes;
+include PBackgroundSharedTypes;
+include ProtocolTypes;
+using class mozilla::TimeStamp from "mozilla/TimeStamp.h";
+using ClientType from "mozilla/dom/ClientIPCUtils.h";
+using FrameType from "mozilla/dom/ClientIPCUtils.h";
+using VisibilityState from "mozilla/dom/ClientIPCUtils.h";
+
+namespace mozilla {
+namespace dom {
+
+struct IPCClientInfo
+{
+  nsID id;
+  ClientType type;
+  PrincipalInfo principalInfo;
+  TimeStamp creationTime;
+  nsCString url;
+  FrameType frameType;
+};
+
+struct IPCClientWindowState
+{
+  VisibilityState visibilityState;
+  TimeStamp lastFocusTime;
+  bool focused;
+};
+
+struct IPCClientWorkerState
+{
+};
+
+union IPCClientState
+{
+  IPCClientWindowState;
+  IPCClientWorkerState;
+};
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/clients/manager/ClientIPCUtils.h b/dom/clients/manager/ClientIPCUtils.h
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/ClientIPCUtils.h
@@ -0,0 +1,41 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#ifndef _mozilla_dom_ClientIPCUtils_h
+#define _mozilla_dom_ClientIPCUtils_h
+
+#include "ipc/IPCMessageUtils.h"
+
+// Fix X11 header brain damage that conflicts with FrameType::None
+#undef None
+
+#include "mozilla/dom/ClientBinding.h"
+#include "mozilla/dom/ClientsBinding.h"
+#include "mozilla/dom/DocumentBinding.h"
+
+namespace IPC {
+  template<>
+  struct ParamTraits<mozilla::dom::ClientType> :
+    public ContiguousEnumSerializer<mozilla::dom::ClientType,
+                                    mozilla::dom::ClientType::Window,
+                                    mozilla::dom::ClientType::EndGuard_>
+  {};
+
+  template<>
+  struct ParamTraits<mozilla::dom::FrameType> :
+    public ContiguousEnumSerializer<mozilla::dom::FrameType,
+                                    mozilla::dom::FrameType::Auxiliary,
+                                    mozilla::dom::FrameType::EndGuard_>
+  {};
+
+  template<>
+  struct ParamTraits<mozilla::dom::VisibilityState> :
+    public ContiguousEnumSerializer<mozilla::dom::VisibilityState,
+                                    mozilla::dom::VisibilityState::Hidden,
+                                    mozilla::dom::VisibilityState::EndGuard_>
+  {};
+} // namespace IPC
+
+#endif // _mozilla_dom_ClientIPCUtils_h
diff --git a/dom/clients/manager/ClientInfo.cpp b/dom/clients/manager/ClientInfo.cpp
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/ClientInfo.cpp
@@ -0,0 +1,114 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ClientInfo.h"
+
+#include "mozilla/dom/ClientIPCTypes.h"
+
+namespace mozilla {
+namespace dom {
+
+ClientInfo::ClientInfo(const nsID& aId,
+                       ClientType aType,
+                       const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
+                       const TimeStamp& aCreationTime)
+  : mData(MakeUnique<IPCClientInfo>(aId, aType, aPrincipalInfo, aCreationTime,
+                                    EmptyCString(),
+                                    mozilla::dom::FrameType::None))
+{
+}
+
+ClientInfo::ClientInfo(const IPCClientInfo& aData)
+  : mData(MakeUnique<IPCClientInfo>(aData))
+{
+}
+
+ClientInfo::ClientInfo(const ClientInfo& aRight)
+{
+  operator=(aRight);
+}
+
+ClientInfo&
+ClientInfo::operator=(const ClientInfo& aRight)
+{
+  mData.reset();
+  mData = MakeUnique<IPCClientInfo>(*aRight.mData);
+  return *this;
+}
+
+ClientInfo::ClientInfo(ClientInfo&& aRight)
+  : mData(Move(aRight.mData))
+{
+}
+
+ClientInfo&
+ClientInfo::operator=(ClientInfo&& aRight)
+{
+  mData.reset();
+  mData = Move(aRight.mData);
+  return *this;
+}
+
+ClientInfo::~ClientInfo()
+{
+}
+
+const nsID&
+ClientInfo::Id() const
+{
+  return mData->id();
+}
+
+ClientType
+ClientInfo::Type() const
+{
+  return mData->type();
+}
+
+const mozilla::ipc::PrincipalInfo&
+ClientInfo::PrincipalInfo() const
+{
+  return mData->principalInfo();
+}
+
+const TimeStamp&
+ClientInfo::CreationTime() const
+{
+  return mData->creationTime();
+}
+
+const nsCString&
+ClientInfo::URL() const
+{
+  return mData->url();
+}
+
+void
+ClientInfo::SetURL(const nsACString& aURL)
+{
+  mData->url() = aURL;
+}
+
+FrameType
+ClientInfo::FrameType() const
+{
+  return mData->frameType();
+}
+
+void
+ClientInfo::SetFrameType(mozilla::dom::FrameType aFrameType)
+{
+  mData->frameType() = aFrameType;
+}
+
+const IPCClientInfo&
+ClientInfo::ToIPC() const
+{
+  return *mData;
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/clients/manager/ClientInfo.h b/dom/clients/manager/ClientInfo.h
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/ClientInfo.h
@@ -0,0 +1,98 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#ifndef _mozilla_dom_ClientInfo_h
+#define _mozilla_dom_ClientInfo_h
+
+#include "mozilla/dom/ClientBinding.h"
+#include "mozilla/UniquePtr.h"
+
+namespace mozilla {
+
+namespace ipc {
+class PrincipalInfo;
+} // namespace ipc
+
+namespace dom {
+
+class IPCClientInfo;
+
+// This class provides a simple structure that represents a global living
+// in the system.  Its thread safe and can be transferred across process
+// boundaries.  A ClientInfo object can represent either a window or a worker.
+class ClientInfo final
+{
+  UniquePtr<IPCClientInfo> mData;
+
+public:
+  ClientInfo(const nsID& aId,
+             ClientType aType,
+             const mozilla::ipc::PrincipalInfo& aPrincipalInfo,
+             const TimeStamp& aCreationTime);
+
+  ClientInfo(const ClientInfo& aRight);
+
+  ClientInfo&
+  operator=(const ClientInfo& aRight);
+
+  ClientInfo(ClientInfo&& aRight);
+
+  ClientInfo&
+  operator=(ClientInfo&& aRight);
+
+  explicit ClientInfo(const IPCClientInfo& aData);
+
+  ~ClientInfo();
+
+  // Get the unique identifier chosen at the time of the global's creation.
+  const nsID&
+  Id() const;
+
+  // Determine what kind of global this is; e.g. Window, Worker, SharedWorker,
+  // etc.
+  ClientType
+  Type() const;
+
+  // Every global must have a principal that cannot change.
+  const mozilla::ipc::PrincipalInfo&
+  PrincipalInfo() const;
+
+  // The time at which the global was created.
+  const TimeStamp&
+  CreationTime() const;
+
+  // Each global has the concept of a creation URL.  For the most part this
+  // does not change.  The one exception is for about:blank replacement
+  // iframes.  In this case the URL starts as "about:blank", but is later
+  // overriden with the final URL.
+  const nsCString&
+  URL() const;
+
+  // Override the creation URL.  This should only be used for about:blank
+  // replacement iframes.
+  void
+  SetURL(const nsACString& aURL);
+
+  // The frame type is largely a window concept, but we track it as part
+  // of the global here because of the way the Clients WebAPI was designed.
+  // This is set at the time the global becomes execution ready.  Workers
+  // will always return None.
+  mozilla::dom::FrameType
+  FrameType() const;
+
+  // Set the frame type for the global.  This should only happen once the
+  // global has become execution ready.
+  void
+  SetFrameType(mozilla::dom::FrameType aFrameType);
+
+  // Convert to the ipdl generated type.
+  const IPCClientInfo&
+  ToIPC() const;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // _mozilla_dom_ClientInfo_h
diff --git a/dom/clients/manager/ClientState.cpp b/dom/clients/manager/ClientState.cpp
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/ClientState.cpp
@@ -0,0 +1,214 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ClientState.h"
+
+namespace mozilla {
+namespace dom {
+
+ClientWindowState::ClientWindowState(mozilla::dom::VisibilityState aVisibilityState,
+                                     const TimeStamp& aLastFocusTime,
+                                     bool aFocused)
+  : mData(MakeUnique<IPCClientWindowState>(aVisibilityState, aLastFocusTime,
+                                           aFocused))
+{
+}
+
+ClientWindowState::ClientWindowState(const ClientWindowState& aRight)
+{
+  operator=(aRight);
+}
+
+ClientWindowState&
+ClientWindowState::operator=(const ClientWindowState& aRight)
+{
+  mData.reset();
+  mData = MakeUnique<IPCClientWindowState>(*aRight.mData);
+  return *this;
+}
+
+ClientWindowState::ClientWindowState(const IPCClientWindowState& aData)
+  : mData(MakeUnique<IPCClientWindowState>(aData))
+{
+}
+
+ClientWindowState::ClientWindowState(ClientWindowState&& aRight)
+  : mData(Move(aRight.mData))
+{
+}
+
+ClientWindowState&
+ClientWindowState::operator=(ClientWindowState&& aRight)
+{
+  mData.reset();
+  mData = Move(aRight.mData);
+  return *this;
+}
+
+ClientWindowState::~ClientWindowState()
+{
+}
+
+mozilla::dom::VisibilityState
+ClientWindowState::VisibilityState() const
+{
+  return mData->visibilityState();
+}
+
+const TimeStamp&
+ClientWindowState::LastFocusTime() const
+{
+  return mData->lastFocusTime();
+}
+
+bool
+ClientWindowState::Focused() const
+{
+  return mData->focused();
+}
+
+const IPCClientWindowState&
+ClientWindowState::ToIPC() const
+{
+  return *mData;
+}
+
+ClientWorkerState::ClientWorkerState()
+  : mData(MakeUnique<IPCClientWorkerState>())
+{
+}
+
+ClientWorkerState::ClientWorkerState(const IPCClientWorkerState& aData)
+  : mData(MakeUnique<IPCClientWorkerState>(aData))
+{
+}
+
+ClientWorkerState::ClientWorkerState(const ClientWorkerState& aRight)
+{
+  operator=(aRight);
+}
+
+ClientWorkerState&
+ClientWorkerState::operator=(const ClientWorkerState& aRight)
+{
+  mData.reset();
+  mData = MakeUnique<IPCClientWorkerState>(*aRight.mData);
+  return *this;
+}
+
+ClientWorkerState::ClientWorkerState(ClientWorkerState&& aRight)
+  : mData(Move(aRight.mData))
+{
+}
+
+ClientWorkerState&
+ClientWorkerState::operator=(ClientWorkerState&& aRight)
+{
+  mData.reset();
+  mData = Move(aRight.mData);
+  return *this;
+}
+
+ClientWorkerState::~ClientWorkerState()
+{
+}
+
+const IPCClientWorkerState&
+ClientWorkerState::ToIPC() const
+{
+  return *mData;
+}
+
+ClientState::ClientState()
+{
+}
+
+ClientState::ClientState(const ClientWindowState& aWindowState)
+{
+  mData.emplace(AsVariant(aWindowState));
+}
+
+ClientState::ClientState(const ClientWorkerState& aWorkerState)
+{
+  mData.emplace(AsVariant(aWorkerState));
+}
+
+ClientState::ClientState(ClientState&& aRight)
+  : mData(Move(aRight.mData))
+{
+}
+
+ClientState&
+ClientState::operator=(ClientState&& aRight)
+{
+  mData = Move(aRight.mData);
+  return *this;
+}
+
+ClientState::~ClientState()
+{
+}
+
+ClientState::ClientState(const IPCClientWindowState& aData)
+{
+  mData.emplace(AsVariant(ClientWindowState(aData)));
+}
+
+ClientState::ClientState(const IPCClientWorkerState& aData)
+{
+  mData.emplace(AsVariant(ClientWorkerState(aData)));
+}
+
+// static
+ClientState
+ClientState::FromIPC(const IPCClientState& aData)
+{
+  switch(aData.type()) {
+    case IPCClientState::TIPCClientWindowState:
+      return ClientState(aData.get_IPCClientWindowState());
+    case IPCClientState::TIPCClientWorkerState:
+      return ClientState(aData.get_IPCClientWorkerState());
+    default:
+      MOZ_CRASH("unexpected IPCClientState type");
+  }
+}
+
+bool
+ClientState::IsWindowState() const
+{
+  return mData.isSome() && mData.ref().is<ClientWindowState>();
+}
+
+const ClientWindowState&
+ClientState::AsWindowState() const
+{
+  return mData.ref().as<ClientWindowState>();
+}
+
+bool
+ClientState::IsWorkerState() const
+{
+  return mData.isSome() && mData.ref().is<ClientWorkerState>();
+}
+
+const ClientWorkerState&
+ClientState::AsWorkerState() const
+{
+  return mData.ref().as<ClientWorkerState>();
+}
+
+const IPCClientState
+ClientState::ToIPC() const
+{
+  if (IsWindowState()) {
+    return IPCClientState(AsWindowState().ToIPC());
+  }
+
+  return IPCClientState(AsWorkerState().ToIPC());
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/clients/manager/ClientState.h b/dom/clients/manager/ClientState.h
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/ClientState.h
@@ -0,0 +1,139 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#ifndef _mozilla_dom_ClientState_h
+#define _mozilla_dom_ClientState_h
+
+#include "mozilla/UniquePtr.h"
+
+namespace mozilla {
+namespace dom {
+
+class IPCClientState;
+class IPCClientWindowState;
+class IPCClientWorkerState;
+
+// This class defines the mutable nsGlobalWindow state we support querying
+// through the ClientManagerService.  It is a snapshot of the state and
+// is not live updated.
+class ClientWindowState final
+{
+  UniquePtr<IPCClientWindowState> mData;
+
+public:
+  ClientWindowState(mozilla::dom::VisibilityState aVisibilityState,
+                    const TimeStamp& aLastFocusTime,
+                    bool aFocused);
+
+  ClientWindowState(const ClientWindowState& aRight);
+
+  ClientWindowState&
+  operator=(const ClientWindowState& aRight);
+
+  ClientWindowState(ClientWindowState&& aRight);
+
+  ClientWindowState&
+  operator=(ClientWindowState&& aRight);
+
+  ~ClientWindowState();
+
+  explicit ClientWindowState(const IPCClientWindowState& aData);
+
+  mozilla::dom::VisibilityState
+  VisibilityState() const;
+
+  const TimeStamp&
+  LastFocusTime() const;
+
+  bool
+  Focused() const;
+
+  const IPCClientWindowState&
+  ToIPC() const;
+};
+
+// This class defines the mutable worker state we support querying
+// through the ClientManagerService.  It is a snapshot of the state and
+// is not live updated.  Right now, we don't actually providate any
+// worker specific state values, but we may in the future.  This
+// class also servces as a placeholder that the state is referring
+// to a worker in ClientState.
+class ClientWorkerState final
+{
+  UniquePtr<IPCClientWorkerState> mData;
+
+public:
+  ClientWorkerState();
+
+  explicit ClientWorkerState(const IPCClientWorkerState& aData);
+
+  ClientWorkerState(const ClientWorkerState& aRight);
+
+  ClientWorkerState&
+  operator=(const ClientWorkerState& aRight);
+
+  ClientWorkerState(ClientWorkerState&& aRight);
+
+  ClientWorkerState&
+  operator=(ClientWorkerState&& aRight);
+
+  ~ClientWorkerState();
+
+  const IPCClientWorkerState&
+  ToIPC() const;
+};
+
+// This is a union of the various types of mutable state we support
+// querying in ClientManagerService.  Right now it can contain either
+// window or worker states.
+class ClientState final
+{
+  Maybe<Variant<ClientWindowState, ClientWorkerState>> mData;
+
+public:
+  ClientState();
+
+  explicit ClientState(const ClientWindowState& aWindowState);
+  explicit ClientState(const ClientWorkerState& aWorkerState);
+
+  ClientState(const ClientState& aRight) = default;
+
+  ClientState&
+  operator=(const ClientState& aRight) = default;
+
+  ClientState(ClientState&& aRight);
+
+  ClientState&
+  operator=(ClientState&& aRight);
+
+  ~ClientState();
+
+  explicit ClientState(const IPCClientWindowState& aData);
+
+  explicit ClientState(const IPCClientWorkerState& aData);
+
+  static ClientState
+  FromIPC(const IPCClientState& aData);
+
+  bool
+  IsWindowState() const;
+
+  const ClientWindowState&
+  AsWindowState() const;
+
+  bool
+  IsWorkerState() const;
+
+  const ClientWorkerState&
+  AsWorkerState() const;
+
+  const IPCClientState
+  ToIPC() const;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // _mozilla_dom_ClientState_h
diff --git a/dom/clients/manager/moz.build b/dom/clients/manager/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/clients/manager/moz.build
@@ -0,0 +1,36 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+EXPORTS.mozilla.dom += [
+  'ClientInfo.h',
+  'ClientIPCUtils.h',
+  'ClientState.h',
+]
+
+UNIFIED_SOURCES += [
+  'ClientInfo.cpp',
+  'ClientState.cpp',
+]
+
+IPDL_SOURCES += [
+  'ClientIPCTypes.ipdlh',
+]
+
+include('/ipc/chromium/chromium-config.mozbuild')
+
+LOCAL_INCLUDES += [
+]
+
+FINAL_LIBRARY = 'xul'
+
+MOCHITEST_MANIFESTS += [
+]
+
+BROWSER_CHROME_MANIFESTS += [
+]
+
+XPCSHELL_TESTS_MANIFESTS += [
+]
diff --git a/dom/clients/moz.build b/dom/clients/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/clients/moz.build
@@ -0,0 +1,9 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DIRS += [
+  'manager',
+]
diff --git a/dom/moz.build b/dom/moz.build
--- a/dom/moz.build
+++ b/dom/moz.build
@@ -45,16 +45,17 @@ DIRS += [
     'abort',
     'animation',
     'base',
     'bindings',
     'battery',
     'browser-element',
     'cache',
     'canvas',
+    'clients',
     'commandhandler',
     'credentialmanagement',
     'crypto',
     'encoding',
     'events',
     'fetch',
     'file',
     'filehandle',
