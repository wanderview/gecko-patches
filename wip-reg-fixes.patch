# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  b069eaf0f60de8d5404ae33f1c0e0493ef498530

diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -303,17 +303,16 @@ ServiceWorkerRegistration::ShowNotificat
     return nullptr;
   }
 
   NS_ConvertUTF8toUTF16 scope(mDescriptor.Scope());
 
   // Until we ship ServiceWorker objects on worker threads the active
   // worker will always be nullptr.  So limit this check to main
   // thread for now.
-  MOZ_ASSERT_IF(!NS_IsMainThread(), mDescriptor.GetActive().isNothing());
   if (mDescriptor.GetActive().isNothing() && NS_IsMainThread()) {
     aRv.ThrowTypeError<MSG_NO_ACTIVE_WORKER>(scope);
     return nullptr;
   }
 
   RefPtr<Promise> p =
     Notification::ShowPersistentNotification(aCx, global, scope,
                                              aTitle, aOptions, aRv);
@@ -352,19 +351,19 @@ ServiceWorkerRegistration::GetNotificati
 
 const ServiceWorkerRegistrationDescriptor&
 ServiceWorkerRegistration::Descriptor() const
 {
   return mDescriptor;
 }
 
 void
-ServiceWorkerRegistration::UpdateStateInternal(const Maybe<ServiceWorkerDescriptor> aInstalling,
-                                               const Maybe<ServiceWorkerDescriptor> aWaiting,
-                                               const Maybe<ServiceWorkerDescriptor> aActive)
+ServiceWorkerRegistration::UpdateStateInternal(const Maybe<ServiceWorkerDescriptor>& aInstalling,
+                                               const Maybe<ServiceWorkerDescriptor>& aWaiting,
+                                               const Maybe<ServiceWorkerDescriptor>& aActive)
 {
   // Do this immediately as it may flush an already pending updatefound
   // event.  In that case we want to fire the pending event before
   // modifying any of the registration properties.
   MaybeScheduleUpdateFound(aInstalling);
 
   AutoTArray<RefPtr<ServiceWorker>, 3> oldWorkerList;
   oldWorkerList.AppendElement(mInstallingWorker.forget());
@@ -429,17 +428,17 @@ ServiceWorkerRegistration::UpdateStateIn
     mInstallingWorker = global->GetOrCreateServiceWorker(aInstalling.ref());
     mInstallingWorker->SetState(aInstalling.ref().State());
   } else {
     mInstallingWorker = nullptr;
   }
 }
 
 void
-ServiceWorkerRegistration::MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor> aInstallingDescriptor)
+ServiceWorkerRegistration::MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor)
 {
   uint64_t newId = aInstallingDescriptor.isSome()
                  ? aInstallingDescriptor.ref().Id()
                  : kInvalidUpdateFoundId;
 
   if (mScheduledUpdateFoundId != kInvalidUpdateFoundId) {
     if (mScheduledUpdateFoundId == newId) {
       return;
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -122,22 +122,22 @@ public:
 private:
   ServiceWorkerRegistration(nsIGlobalObject* aGlobal,
                             const ServiceWorkerRegistrationDescriptor& aDescriptor,
                             Inner* aInner);
 
   ~ServiceWorkerRegistration();
 
   void
-  UpdateStateInternal(const Maybe<ServiceWorkerDescriptor> aInstalling,
-                      const Maybe<ServiceWorkerDescriptor> aWaiting,
-                      const Maybe<ServiceWorkerDescriptor> aActive);
+  UpdateStateInternal(const Maybe<ServiceWorkerDescriptor>& aInstalling,
+                      const Maybe<ServiceWorkerDescriptor>& aWaiting,
+                      const Maybe<ServiceWorkerDescriptor>& aActive);
 
   void
-  MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor> aInstallingDescriptor);
+  MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor);
 
   void
   MaybeDispatchUpdateFound();
 
   void
   UpdatePromiseSettled();
 
   ServiceWorkerRegistrationDescriptor mDescriptor;
