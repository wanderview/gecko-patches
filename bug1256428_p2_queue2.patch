# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  e079eaa34db6f6db4dbcf07a86d52afe71aba390
Bug 1256428 P2 Add ServiceWorkerJobQueue2 class. r=ehsan

diff --git a/dom/workers/ServiceWorkerJobQueue.cpp b/dom/workers/ServiceWorkerJobQueue.cpp
new file mode 100644
--- /dev/null
+++ b/dom/workers/ServiceWorkerJobQueue.cpp
@@ -0,0 +1,129 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ServiceWorkerJobQueue.h"
+
+#include "ServiceWorkerJob.h"
+#include "Workers.h"
+
+namespace mozilla {
+namespace dom {
+namespace workers {
+
+class ServiceWorkerJobQueue2::Callback final : public ServiceWorkerJob2::Callback
+{
+  RefPtr<ServiceWorkerJobQueue2> mQueue;
+
+  ~Callback()
+  {
+  }
+
+public:
+  explicit Callback(ServiceWorkerJobQueue2* aQueue)
+    : mQueue(aQueue)
+  {
+    AssertIsOnMainThread();
+    MOZ_ASSERT(mQueue);
+  }
+
+  virtual void
+  JobFinished(ServiceWorkerJob2* aJob, ErrorResult& aStatus) override
+  {
+    AssertIsOnMainThread();
+    mQueue->JobFinished(aJob);
+  }
+
+  NS_INLINE_DECL_REFCOUNTING(ServiceWorkerJobQueue2::Callback, override)
+};
+
+ServiceWorkerJobQueue2::~ServiceWorkerJobQueue2()
+{
+  AssertIsOnMainThread();
+  MOZ_ASSERT(mJobList.IsEmpty());
+}
+
+void
+ServiceWorkerJobQueue2::JobFinished(ServiceWorkerJob2* aJob)
+{
+  AssertIsOnMainThread();
+  MOZ_ASSERT(aJob);
+
+  MOZ_ASSERT(!mJobList.IsEmpty());
+  MOZ_ASSERT(mJobList[0] == aJob);
+  if (NS_WARN_IF(mJobList[0] != aJob)) {
+    return;
+  }
+
+  mJobList.RemoveElementAt(0);
+
+  if (mJobList.IsEmpty()) {
+    return;
+  }
+
+  RunJob();
+}
+
+void
+ServiceWorkerJobQueue2::RunJob()
+{
+  AssertIsOnMainThread();
+  MOZ_ASSERT(!mJobList.IsEmpty());
+  MOZ_ASSERT(mJobList[0]->GetState() == ServiceWorkerJob2::State::Initial);
+
+  RefPtr<Callback> callback = new Callback(this);
+  mJobList[0]->Start(callback);
+}
+
+ServiceWorkerJobQueue2::ServiceWorkerJobQueue2()
+{
+  AssertIsOnMainThread();
+}
+
+void
+ServiceWorkerJobQueue2::ScheduleJob(ServiceWorkerJob2* aJob)
+{
+  AssertIsOnMainThread();
+  MOZ_ASSERT(aJob);
+  MOZ_ASSERT(!mJobList.Contains(aJob));
+
+  if (mJobList.IsEmpty()) {
+    mJobList.AppendElement(aJob);
+    RunJob();
+    return;
+  }
+
+  MOZ_ASSERT(mJobList[0]->GetState() == ServiceWorkerJob2::State::Started);
+
+  RefPtr<ServiceWorkerJob2>& tailJob = mJobList[mJobList.Length() - 1];
+  if (aJob->IsEquivalentTo(tailJob)) {
+    tailJob->StealResultCallbacksFrom(aJob);
+    return;
+  }
+
+  mJobList.AppendElement(aJob);
+}
+
+void
+ServiceWorkerJobQueue2::CancelAll()
+{
+  AssertIsOnMainThread();
+
+  for (RefPtr<ServiceWorkerJob2>& job : mJobList) {
+    job->Cancel();
+  }
+
+  // Remove jobs that are queued but not started since they should never
+  // run after being canceled.  This means throwing away all jobs except
+  // for the job at the front of the list.
+  if (!mJobList.IsEmpty()) {
+    MOZ_ASSERT(mJobList[0]->GetState() == ServiceWorkerJob2::State::Started);
+    mJobList.TruncateLength(1);
+  }
+}
+
+} // namespace workers
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/workers/ServiceWorkerJobQueue.h b/dom/workers/ServiceWorkerJobQueue.h
new file mode 100644
--- /dev/null
+++ b/dom/workers/ServiceWorkerJobQueue.h
@@ -0,0 +1,49 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_workers_serviceworkerjobqueue_h
+#define mozilla_dom_workers_serviceworkerjobqueue_h
+
+#include "mozilla/RefPtr.h"
+#include "nsTArray.h"
+
+namespace mozilla {
+namespace dom {
+namespace workers {
+
+class ServiceWorkerJob2;
+
+class ServiceWorkerJobQueue2 final
+{
+  class Callback;
+
+  nsTArray<RefPtr<ServiceWorkerJob2>> mJobList;
+
+  ~ServiceWorkerJobQueue2();
+
+  void
+  JobFinished(ServiceWorkerJob2* aJob);
+
+  void
+  RunJob();
+
+public:
+  ServiceWorkerJobQueue2();
+
+  void
+  ScheduleJob(ServiceWorkerJob2* aJob);
+
+  void
+  CancelAll();
+
+  NS_INLINE_DECL_REFCOUNTING(ServiceWorkerJobQueue2)
+};
+
+} // namespace workers
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_workers_serviceworkerjobqueue_h
diff --git a/dom/workers/moz.build b/dom/workers/moz.build
--- a/dom/workers/moz.build
+++ b/dom/workers/moz.build
@@ -62,16 +62,17 @@ UNIFIED_SOURCES += [
     'RuntimeService.cpp',
     'ScriptLoader.cpp',
     'ServiceWorker.cpp',
     'ServiceWorkerClient.cpp',
     'ServiceWorkerClients.cpp',
     'ServiceWorkerContainer.cpp',
     'ServiceWorkerEvents.cpp',
     'ServiceWorkerJob.cpp',
+    'ServiceWorkerJobQueue.cpp',
     'ServiceWorkerManager.cpp',
     'ServiceWorkerManagerChild.cpp',
     'ServiceWorkerManagerParent.cpp',
     'ServiceWorkerManagerService.cpp',
     'ServiceWorkerMessageEvent.cpp',
     'ServiceWorkerPrivate.cpp',
     'ServiceWorkerRegistrar.cpp',
     'ServiceWorkerRegistration.cpp',
