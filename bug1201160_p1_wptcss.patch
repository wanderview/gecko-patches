# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  e7d613b3bcfe1e865378bfac37de64560d1234ec
Bug 1201160 P1 Update service worker CSS wpt tests. r=ehsan

diff --git a/dom/base/nsContentUtils.cpp b/dom/base/nsContentUtils.cpp
--- a/dom/base/nsContentUtils.cpp
+++ b/dom/base/nsContentUtils.cpp
@@ -3105,25 +3105,31 @@ nsContentUtils::LoadImage(nsIURI* aURI, 
                           uint32_t aContentPolicyType)
 {
   NS_PRECONDITION(aURI, "Must have a URI");
   NS_PRECONDITION(aLoadingDocument, "Must have a document");
   NS_PRECONDITION(aLoadingPrincipal, "Must have a principal");
   NS_PRECONDITION(aRequest, "Null out param");
 
   imgLoader* imgLoader = GetImgLoaderForDocument(aLoadingDocument);
-  if (!imgLoader) {
+  if (NS_WARN_IF(!imgLoader)) {
     // nothing we can do here
     return NS_ERROR_FAILURE;
   }
 
   nsCOMPtr<nsILoadGroup> loadGroup = aLoadingDocument->GetDocumentLoadGroup();
 
   nsIURI *documentURI = aLoadingDocument->GetDocumentURI();
 
+  nsAutoCString spec;
+  if (documentURI) {
+    documentURI->GetSpec(spec);
+  }
+  printf_stderr("### ### Callin imgLoader->LoadImage() for %s\n", spec.get());
+
   NS_ASSERTION(loadGroup || IsFontTableURI(documentURI),
                "Could not get loadgroup; onload may fire too early");
 
   // Make the URI immutable so people won't change it under us
   NS_TryToSetImmutable(aURI);
 
   // XXXbz using "documentURI" for the initialDocumentURI is not quite
   // right, but the best we can do here...
diff --git a/layout/style/ImageLoader.cpp b/layout/style/ImageLoader.cpp
--- a/layout/style/ImageLoader.cpp
+++ b/layout/style/ImageLoader.cpp
@@ -257,24 +257,28 @@ ImageLoader::LoadImage(nsIURI* aURI, nsI
     return;
   }
 
   if (!nsContentUtils::CanLoadImage(aURI, mDocument, mDocument,
                                     aOriginPrincipal)) {
     return;
   }
 
+  nsAutoCString spec;
+  aURI->GetSpec(spec);
+  printf_stderr("### ### calling LoadImage() for %s\n", spec.get());
+
   nsRefPtr<imgRequestProxy> request;
   nsContentUtils::LoadImage(aURI, mDocument, aOriginPrincipal, aReferrer,
                             mDocument->GetReferrerPolicy(),
                             nullptr, nsIRequest::LOAD_NORMAL,
                             NS_LITERAL_STRING("css"),
                             getter_AddRefs(request));
 
-  if (!request) {
+  if (NS_WARN_IF(!request)) {
     return;
   }
 
   nsRefPtr<imgRequestProxy> clonedRequest;
   mInClone = true;
   nsresult rv = request->Clone(this, getter_AddRefs(clonedRequest));
   mInClone = false;
 
diff --git a/testing/web-platform/mozilla/meta/MANIFEST.json b/testing/web-platform/mozilla/meta/MANIFEST.json
--- a/testing/web-platform/mozilla/meta/MANIFEST.json
+++ b/testing/web-platform/mozilla/meta/MANIFEST.json
@@ -185,16 +185,22 @@
           }
         ],
         "service-workers/service-worker/fetch-request-css-base-url.https.html": [
           {
             "path": "service-workers/service-worker/fetch-request-css-base-url.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-request-css-base-url.https.html"
           }
         ],
+        "service-workers/service-worker/fetch-request-css.https.html": [
+          {
+            "path": "service-workers/service-worker/fetch-request-css.https.html",
+            "url": "/_mozilla/service-workers/service-worker/fetch-request-css.https.html"
+          }
+        ],
         "service-workers/service-worker/fetch-request-fallback.https.html": [
           {
             "path": "service-workers/service-worker/fetch-request-fallback.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-request-fallback.https.html"
           }
         ],
         "service-workers/service-worker/fetch-request-html-imports.https.html": [
           {
@@ -553,9 +559,9 @@
       }
     },
     "reftest_nodes": {}
   },
   "reftest_nodes": {},
   "rev": null,
   "url_base": "/_mozilla/",
   "version": 2
-}
+}
\ No newline at end of file
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html
@@ -41,16 +41,23 @@ async_test(function(t) {
                 });
               });
               worker.postMessage(
                 {port: channel.port2}, [channel.port2]);
             });
         })
       .then(function() { return with_iframe(SCOPE); })
       .then(function(f) {
+          window.onmessage = function(e) {
+            dump('### ### got ' + e.data.type + '\n');
+          };
+          f.contentWindow.postMessage( {
+              type: 'LOAD_STYLESHEET',
+              url: './fetch-request-css-base-url-style.css'
+          }, '*');
           return testDonePromise.then(function() {
             f.remove();
             return service_worker_unregister_and_done(t, SCOPE);
           });
         })
       .catch(unreached_rejection(t));
   }, 'CSS\'s base URL must be the request URL even when fetched from other URL.');
 </script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css.https.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css.https.html
@@ -0,0 +1,73 @@
+<!DOCTYPE html>
+<title>Service Worker: CSS's base URL must be the request URL even when fetched from other URL</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js?pipe=sub"></script>
+<script>
+var host_info = get_host_info();
+
+function loadStylesheet(frame, url) {
+  return new Promise(function(resolve, reject) {
+    window.addEventListener('message', function loadedStylesheetFunc(evt) {
+      dump('### ### got message ' + evt.data.type + ' for ' + evt.data.url + '\n');
+      if (evt.data.type === 'STYLESHEET_LOADED' && evt.data.url === url) {
+        window.removeEventListener('message', loadedStylesheetFunc);
+        setTimeout(resolve, 5000);
+        //resolve();
+      } else if (evt.data.type === 'STYLESHEET_ERROR' && evt.data.url === url) {
+        window.removeEventListener('message', loadedStylesheetFunc);
+        reject(evt.data.message);
+      }
+    });
+
+    frame.contentWindow.postMessage( {
+      type: 'LOAD_STYLESHEET',
+      url: url
+    }, '*');
+  });
+}
+
+// For frame that loads <link> stylesheet with a png subresource:
+
+// frame a.com, stylesheet a.com, SW sees png
+// frame a.com, stylesheet b.com cors, SW sees png
+// frame a.com, stylesheet b.com no-cors, SW does not see png
+// frame a.com, stylesheet a.com redirected to b.com cors, SW does not see png
+// frame a.com, stylesheet a.com redirected to b.com no-cors, SW does not see png
+// frame a.com, stylesheet a.com intercepted to synthetic, SW sees png
+// frame a.com, stylesheet a.com intercepted to a.com, SW sees png
+// frame a.com, stylesheet a.com intercepted to b.com cors, SW sees png
+// frame a.com, stylesheet a.com intercepted to b.com no-cors, SW does not see png
+// frame a.com, stylesheet a.com intercepted to a.com redirected to b.com cors, SW sees png
+// frame a.com, stylesheet a.com intercepted to a.com redirected to b.com no-cors, SW does not see png
+
+async_test(function(t) {
+  var SCOPE = 'resources/fetch-request-css/TODO'
+  var SCRIPT = 'resources/fetch-rewrite-worker.js';
+
+  var sameOrigin = host_info['HTTPS_ORIGIN'];
+  var crossOrigin = host_info['HTTPS_REMOTE_ORIGIN'];
+  var framePath = base_path() + 'resources/fetch-request-css-iframe.html';
+  var cssPath = base_path() + 'resources/fetch-request-css-style.css';
+  var worker;
+
+  return service_worker_unregister_and_register(t, SCRIPT, SCOPE)
+  .then(function(registration) {
+    worker = registration.installing;
+    return wait_for_state(t, worker, 'activated');
+  })
+  .then(function() {
+    var frameURL = SCOPE + '?url=' + encodeURIComponent(sameOrigin + framePath);
+    return with_iframe(frameURL);
+  })
+  .then(function(frame) {
+    var url = SCOPE + '?url=' + encodeURIComponent(sameOrigin + cssPath) + '&notifyclients=true';
+    return loadStylesheet(frame, url);
+  })
+  .then(function() {
+    return service_worker_unregister_and_done(t, SCOPE);
+  })
+  .catch(unreached_rejection(t));
+}, 'TODO');
+</script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html
@@ -1,1 +1,24 @@
-<link href="./fetch-request-css-base-url-style.css" rel="stylesheet" type="text/css">
+<head>
+</head>
+<script>
+window.addEventListener('message', function(evt) {
+  if (evt.data.type === 'LOAD_STYLESHEET') {
+    var link = document.createElement('link');
+    link.rel = 'stylesheet';
+    link.type = 'text/css';
+    link.href = evt.data.url;
+    link.onload = function(e) {
+      parent.postMessage({ type: 'STYLESHEET_LOADED' }, '*');
+    };
+    link.onerror = function(e) {
+      parent.postMessage({
+        type: 'STYLESHEET_ERROR',
+        name: e.name,
+        message: e.message
+      }, '*');
+    };
+    var head = document.getElementsByTagName('head')[0];
+    head.appendChild(link);
+  }
+});
+</script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-iframe.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-iframe.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-iframe.html
@@ -0,0 +1,43 @@
+<html>
+<head>
+<link rel='stylesheet' type='text/css' href='./fetch-request-css-style.css?notifyclients=true'>
+<script>
+// Proxy messages from the service worker back to parent window so we
+// can keep all assertions in the top level test.
+navigator.serviceWorker.addEventListener('message', function(evt) {
+  if (evt.data.type === 'FETCH_EVENT') {
+    parent.postMessage(evt.data, '*');
+  }
+});
+
+// Dynamically load a stylesheet on demand and report back loaded/error events
+// to the parent window.
+window.addEventListener('message', function(evt) {
+  if (evt.data.type === 'LOAD_STYLESHEET') {
+    var link = document.createElement('link');
+    link.rel = 'stylesheet';
+    link.type = 'text/css';
+    link.href = evt.data.url;
+    link.onload = function(e) {
+      parent.postMessage({
+        type: 'STYLESHEET_LOADED',
+        url: evt.data.url
+      }, '*');
+    };
+    link.onerror = function(e) {
+      parent.postMessage({
+        type: 'STYLESHEET_ERROR',
+        url: evt.data.url,
+        name: e.name,
+        message: e.message
+      }, '*');
+    };
+    var head = document.getElementsByTagName('head')[0];
+    head.appendChild(link);
+  }
+});
+</script>
+</head>
+<body>
+</body>
+</html>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-style.css b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-style.css
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-style.css
@@ -0,0 +1,1 @@
+body { background-image: url("./dummy.png?notifyclients=true");}
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-worker.js b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-worker.js
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-worker.js
@@ -0,0 +1,27 @@
+importScripts('../resources/get-host-info.sub.js');
+importScripts('test-helpers.sub.js');
+
+var port = undefined;
+
+self.onmessage = function(e) {
+  var message = e.data;
+  if ('port' in message) {
+    port = message.port;
+    port.postMessage({ready: true});
+  }
+};
+
+self.addEventListener('fetch', function(event) {
+    var url = event.request.url;
+    if (url.indexOf('fetch-request-css-base-url-style.css') != -1) {
+      event.respondWith(fetch(
+        get_host_info()['HTTPS_REMOTE_ORIGIN'] + base_path() +
+        'fetch-request-css-base-url-style.css',
+        {mode: 'no-cors'}));
+    } else if (url.indexOf('dummy.png') != -1) {
+      port.postMessage({
+          url: event.request.url,
+          referrer: event.request.referrer
+        });
+    }
+  });
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
@@ -59,28 +59,45 @@ self.addEventListener('fetch', function(
         event.respondWith(new Response(new Blob([ua])));
       } else {
         // We don't have a user-agent!
         event.respondWith(new Response(new Blob(["NO_UA"])));
       }
       return;
     }
     event.respondWith(new Promise(function(resolve, reject) {
-        var request = event.request;
-        if (url) {
-          request = new Request(url, init);
+        function doFetch() {
+          var request = event.request;
+          if (url) {
+            request = new Request(url, init);
+          }
+          fetch(request).then(function(response) {
+            var expectedType = params['expected_type'];
+            if (expectedType && response.type !== expectedType) {
+              // Resolve a JSON object with a failure instead of rejecting
+              // in order to distinguish this from a NetworkError, which
+              // may be expected even if the type is correct.
+              resolve(new Response(JSON.stringify({
+                result: 'failure',
+                detail: 'got ' + response.type + ' Response.type instead of ' +
+                        expectedType
+              })));
+            }
+            resolve(response);
+          }, reject)
         }
-        fetch(request).then(function(response) {
-          var expectedType = params['expected_type'];
-          if (expectedType && response.type !== expectedType) {
-            // Resolve a JSON object with a failure instead of rejecting
-            // in order to distinguish this from a NetworkError, which
-            // may be expected even if the type is correct.
-            resolve(new Response(JSON.stringify({
-              result: 'failure',
-              detail: 'got ' + response.type + ' Response.type instead of ' +
-                      expectedType
-            })));
-          }
-          resolve(response);
-        }, reject)
+
+        if (false && !params['notifyclients']) {
+          doFetch();
+          return
+        }
+
+        self.clients.matchAll().then(function(clientList) {
+          clientList.forEach(function(client) {
+            client.postMessage({
+              type: 'FETCH_EVENT',
+              url: event.request.url
+            });
+          });
+          doFetch();
+        });
       }));
   });
