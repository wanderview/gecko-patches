# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  a26f6d8000693522e7439bc57b03ed262550fc7a
Bug 1201160 P1 Update service worker CSS wpt tests. r=ehsan

diff --git a/testing/web-platform/mozilla/meta/MANIFEST.json b/testing/web-platform/mozilla/meta/MANIFEST.json
--- a/testing/web-platform/mozilla/meta/MANIFEST.json
+++ b/testing/web-platform/mozilla/meta/MANIFEST.json
@@ -185,16 +185,22 @@
           }
         ],
         "service-workers/service-worker/fetch-request-css-base-url.https.html": [
           {
             "path": "service-workers/service-worker/fetch-request-css-base-url.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-request-css-base-url.https.html"
           }
         ],
+        "service-workers/service-worker/fetch-request-css.https.html": [
+          {
+            "path": "service-workers/service-worker/fetch-request-css.https.html",
+            "url": "/_mozilla/service-workers/service-worker/fetch-request-css.https.html"
+          }
+        ],
         "service-workers/service-worker/fetch-request-fallback.https.html": [
           {
             "path": "service-workers/service-worker/fetch-request-fallback.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-request-fallback.https.html"
           }
         ],
         "service-workers/service-worker/fetch-request-html-imports.https.html": [
           {
@@ -559,9 +565,9 @@
       }
     },
     "reftest_nodes": {}
   },
   "reftest_nodes": {},
   "rev": null,
   "url_base": "/_mozilla/",
   "version": 2
-}
+}
\ No newline at end of file
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css-base-url.https.html
@@ -41,16 +41,23 @@ async_test(function(t) {
                 });
               });
               worker.postMessage(
                 {port: channel.port2}, [channel.port2]);
             });
         })
       .then(function() { return with_iframe(SCOPE); })
       .then(function(f) {
+          window.onmessage = function(e) {
+            dump('### ### got ' + e.data.type + '\n');
+          };
+          f.contentWindow.postMessage( {
+              type: 'LOAD_STYLESHEET',
+              url: './fetch-request-css-base-url-style.css'
+          }, '*');
           return testDonePromise.then(function() {
             f.remove();
             return service_worker_unregister_and_done(t, SCOPE);
           });
         })
       .catch(unreached_rejection(t));
   }, 'CSS\'s base URL must be the request URL even when fetched from other URL.');
 </script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css.https.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-request-css.https.html
@@ -0,0 +1,242 @@
+<!DOCTYPE html>
+<title>Service Worker: CSS's base URL must be the request URL even when fetched from other URL</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js?pipe=sub"></script>
+<script>
+var host_info = get_host_info();
+
+function loadStylesheet(frame, name, cors, url) {
+  return new Promise(function(resolve, reject) {
+    window.addEventListener('message', function loadedStylesheetFunc(evt) {
+      if (evt.data.type === 'STYLESHEET_LOADED' && evt.data.name === name) {
+        window.removeEventListener('message', loadedStylesheetFunc);
+        resolve(evt.data.intercepted);
+      } else if (evt.data.type === 'STYLESHEET_ERROR' && evt.data.name === name) {
+        window.removeEventListener('message', loadedStylesheetFunc);
+        reject(evt.data.message);
+      }
+    });
+
+    frame.contentWindow.postMessage( {
+      type: 'LOAD_STYLESHEET',
+      name: name,
+      cors: cors,
+      url: url
+    }, '*');
+  });
+}
+
+// For frame that loads <link> stylesheet with a png subresource:
+
+
+var sameOrigin = host_info['HTTPS_ORIGIN'];
+var crossOrigin = host_info['HTTPS_REMOTE_ORIGIN'];
+
+function makeStylesheetURL(name, origin, cors, intercept) {
+  var url = origin + base_path() +
+            'resources/fetch-access-control.py?STYLESHEET=true&' +
+            'notifyclients=true&NAME=' + name;
+  if (cors) {
+    url += '&ACAOrigin=' + encodeURIComponent(sameOrigin);
+  }
+  if (intercept === 'synthetic') {
+    url += '&generate-stylesheet=true';
+  }
+  return url;
+}
+
+function doTest(t, test) {
+  var SCOPE = 'resources/fetch-request-css/' + test.name + '/';
+  var SCRIPT = 'resources/fetch-rewrite-worker.js';
+
+  var framePath = base_path() + 'resources/fetch-request-css-iframe.html';
+  var cssURL;
+  if (test.redirectOrigin) {
+    var endURL = makeStylesheetURL(test.name, test.redirectOrigin, test.cors);
+    cssURL = test.origin + base_path() +
+            'resources/redirect.py?notifyclients=true&Redirect=' +
+            encodeURIComponent(endURL);
+  } else if (test.redirectIntercept) {
+    var endURL = makeStylesheetURL(test.name, test.redirectIntercept, test.cors);
+    var redirectURL = test.origin + base_path() +
+                      'resources/redirect.py?notifyclients=true&Redirect=' +
+                      encodeURIComponent(endURL);
+    cssURL = makeStylesheetURL(test.name, test.origin, test.cors) +
+             '&url=' + encodeURIComponent(redirectURL);
+  } else if (test.intercept && test.intercept !== 'synthetic') {
+    var endURL = makeStylesheetURL(test.name, test.intercept, test.cors);
+    cssURL = makeStylesheetURL(test.name, test.origin, test.cors) +
+             '&url=' + encodeURIComponent(endURL);
+  } else {
+    cssURL = makeStylesheetURL(test.name, test.origin, test.cors,
+                               test.intercept);
+  }
+
+  var bgImageOrigin = test.origin;
+  if (test.redirectOrigin) {
+    bgImageOrigin = test.redirectOrigin;
+  }
+  var bgImageURL = bgImageOrigin + base_path() +
+                   'resources/fetch-access-control.py?PNGIMAGE=true&' +
+                   'notifyclients=true&NAME=' + test.name;
+  if (test.intercept === 'synthetic') {
+    bgImageURL += '&generated=true';
+  }
+
+  var worker;
+
+  return service_worker_unregister_and_register(t, SCRIPT, SCOPE)
+  .then(function(registration) {
+    worker = registration.installing;
+    return wait_for_state(t, worker, 'activated');
+  })
+  .then(function() {
+    var frameURL = SCOPE + 'frame?url=' + encodeURIComponent(sameOrigin + framePath);
+    return with_iframe(frameURL);
+  })
+  .then(function(frame) {
+    return loadStylesheet(frame, test.name, test.cors, cssURL);
+  })
+  .then(function(interceptedList) {
+    var expectedList = [ cssURL ];
+    if (test.expectBgImage) {
+      expectedList.push(bgImageURL);
+    }
+    dump('### ### name:' + test.name + ' intercepted:' + JSON.stringify(interceptedList) + '\n');
+    assert_array_equals(interceptedList, expectedList,
+                        'service worker intercepted expected resources');
+    return service_worker_unregister_and_done(t, SCOPE);
+  })
+  .catch(unreached_rejection(t));
+}
+
+// frame a.com, stylesheet a.com, SW sees png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-stylesheet',
+    origin: sameOrigin,
+    cors: false,
+    expectBgImage: true
+  });
+}, 'Service worker should see sub-resource for same-origin stylesheet.');
+
+// frame a.com, stylesheet b.com cors, SW sees png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'cors-stylesheet',
+    origin: crossOrigin,
+    cors: true,
+    expectBgImage: true
+  });
+}, 'Service worker should see sub-resource for cross-origin cors stylesheet.');
+
+// frame a.com, stylesheet b.com no-cors, SW does not see png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'no-cors-stylesheet',
+    origin: crossOrigin,
+    cors: false,
+    expectBgImage: false
+  });
+}, 'Service worker should not see sub-resource for cross-origin no-cors ' +
+   'stylesheet.');
+
+// frame a.com, stylesheet a.com redirected to b.com cors, SW sees png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-redirect-cors-stylesheet',
+    origin: sameOrigin,
+    redirectOrigin: crossOrigin,
+    cors: true,
+    expectBgImage: true
+  });
+}, 'Service worker should see sub-resource for same-origin redirected to ' +
+   'cross-origin cors stylesheet.');
+
+// frame a.com, stylesheet a.com redirected to b.com no-cors, SW does not see png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-redirect-no-cors-stylesheet',
+    origin: sameOrigin,
+    redirectOrigin: crossOrigin,
+    cors: false,
+    expectBgImage: false
+  });
+}, 'Service worker should not see sub-resource for same-origin redirected to ' +
+   'cross-origin no-cors stylesheet.');
+
+// frame a.com, stylesheet a.com intercepted to synthetic, SW sees png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-intercept-synthetic-stylesheet',
+    origin: sameOrigin,
+    intercept: 'synthetic',
+    cors: false,
+    expectBgImage: true
+  });
+}, 'Service worker should see sub-resource for same-origin stylesheet ' +
+   'intercepted with synthetic response.');
+
+// frame a.com, stylesheet a.com intercepted to a.com, SW sees png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-intercept-same-origin-stylesheet',
+    origin: sameOrigin,
+    intercept: sameOrigin,
+    cors: false,
+    expectBgImage: true
+  });
+}, 'Service worker should see sub-resource for same-origin stylesheet ' +
+   'intercepted with same-origin response.');
+
+// frame a.com, stylesheet a.com intercepted to b.com cors, SW sees png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-intercept-cors-stylesheet',
+    origin: sameOrigin,
+    intercept: crossOrigin,
+    cors: true,
+    expectBgImage: true
+  });
+}, 'Service worker should see sub-resource for same-origin stylesheet ' +
+   'intercepted with cross-origin cors response.');
+
+// frame a.com, stylesheet a.com intercepted to b.com no-cors, SW does not see png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-intercept-no-cors-stylesheet',
+    origin: sameOrigin,
+    intercept: crossOrigin,
+    cors: false,
+    expectBgImage: false
+  });
+}, 'Service worker should see sub-resource for same-origin stylesheet ' +
+   'intercepted with cross-origin no-cors response.');
+
+// frame a.com, stylesheet a.com intercepted to a.com redirected to b.com cors, SW sees png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-intercept-same-origin-redirected-cors-stylesheet',
+    origin: sameOrigin,
+    redirectIntercept: crossOrigin,
+    cors: true,
+    expectBgImage: true
+  });
+}, 'Service worker should see sub-resource for same-origin stylesheet ' +
+   'intercepted with same-origin response redirected to cross-origin cors.');
+
+// frame a.com, stylesheet a.com intercepted to a.com redirected to b.com no-cors, SW does not see png
+async_test(function(t) {
+  return doTest(t, {
+    name: 'same-origin-intercept-same-origin-redirected-no-cors-stylesheet',
+    origin: sameOrigin,
+    redirectIntercept: crossOrigin,
+    cors: false,
+    expectBgImage: false
+  });
+}, 'Service worker should see sub-resource for same-origin stylesheet ' +
+   'intercepted with same-origin response redirected to cross-origin no-cors.');
+
+</script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-access-control.py b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-access-control.py
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-access-control.py
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-access-control.py
@@ -26,16 +26,24 @@ def main(request, response):
 
     if "PNGIMAGE" in request.GET:
         headers.append(("Content-Type", "image/png"))
         body = base64.decodestring("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1B"
                                    "AACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAhSURBVDhPY3wro/KfgQLABKXJBqMG"
                                    "jBoAAqMGDLwBDAwAEsoCTFWunmQAAAAASUVORK5CYII=")
         return headers, body
 
+    if "STYLESHEET" in request.GET:
+        headers.append(('content-Type', 'text/css'))
+        bgimage = "./fetch-access-control.py?PNGIMAGE=true&notifyclients=true"
+        if "NAME" in request.GET:
+          bgimage += "&NAME=%s" % request.GET["NAME"]
+        body = "body { background-image: url(%s);}" % bgimage
+        return headers, body
+
 
     username = request.auth.username if request.auth.username else "undefined"
     password = request.auth.password if request.auth.username else "undefined"
     cookie = request.cookies['cookie'].value if 'cookie' in request.cookies else "undefined"
 
     files = []
     for key, values in request.POST.iteritems():
         assert len(values) == 1
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-base-url-iframe.html
@@ -1,1 +1,24 @@
-<link href="./fetch-request-css-base-url-style.css" rel="stylesheet" type="text/css">
+<head>
+</head>
+<script>
+window.addEventListener('message', function(evt) {
+  if (evt.data.type === 'LOAD_STYLESHEET') {
+    var link = document.createElement('link');
+    link.rel = 'stylesheet';
+    link.type = 'text/css';
+    link.href = evt.data.url;
+    link.onload = function(e) {
+      parent.postMessage({ type: 'STYLESHEET_LOADED' }, '*');
+    };
+    link.onerror = function(e) {
+      parent.postMessage({
+        type: 'STYLESHEET_ERROR',
+        name: e.name,
+        message: e.message
+      }, '*');
+    };
+    var head = document.getElementsByTagName('head')[0];
+    head.appendChild(link);
+  }
+});
+</script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-iframe.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-iframe.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-iframe.html
@@ -0,0 +1,54 @@
+<html>
+<head>
+<script>
+var intercepted = [];
+
+// Proxy messages from the service worker back to parent window so we
+// can keep all assertions in the top level test.
+navigator.serviceWorker.addEventListener('message', function(evt) {
+  if (evt.data.type === 'FETCH_EVENT') {
+    intercepted.push(evt.data.url);
+  }
+});
+
+// Dynamically load a stylesheet on demand and report back loaded/error events
+// to the parent window.
+window.addEventListener('message', function(evt) {
+  if (evt.data.type === 'LOAD_STYLESHEET') {
+    var link = document.createElement('link');
+    link.rel = 'stylesheet';
+    link.type = 'text/css';
+    if (evt.data.cors) {
+      dump('### ### frame setting cors\n');
+      link.crossOrigin = 'anonymous';
+    }
+    dump('### ### frame setting url ' + evt.data.url + '\n');
+    link.href = evt.data.url;
+    link.onload = function(e) {
+      // TODO: try to figure out a way not to always use a timeout here
+      // Delay to allow the background-image to load and send its
+      // FETCH_EVENT message.
+      setTimeout(function() {
+        parent.postMessage({
+          type: 'STYLESHEET_LOADED',
+          name: evt.data.name,
+          intercepted: intercepted
+        }, '*');
+      }, 5000);
+    };
+    link.onerror = function() {
+      parent.postMessage({
+        type: 'STYLESHEET_ERROR',
+        name: evt.data.name,
+        message: 'link element fired error event'
+      }, '*');
+    };
+    var head = document.getElementsByTagName('head')[0];
+    head.appendChild(link);
+  }
+});
+</script>
+</head>
+<body>
+</body>
+</html>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-style.css b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-style.css
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-style.css
@@ -0,0 +1,1 @@
+body { background-image: url("./fetch-access-control.py?PNGIMAGE=true&notifyclients=true");}
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-worker.js b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-worker.js
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-request-css-worker.js
@@ -0,0 +1,27 @@
+importScripts('../resources/get-host-info.sub.js');
+importScripts('test-helpers.sub.js');
+
+var port = undefined;
+
+self.onmessage = function(e) {
+  var message = e.data;
+  if ('port' in message) {
+    port = message.port;
+    port.postMessage({ready: true});
+  }
+};
+
+self.addEventListener('fetch', function(event) {
+    var url = event.request.url;
+    if (url.indexOf('fetch-request-css-base-url-style.css') != -1) {
+      event.respondWith(fetch(
+        get_host_info()['HTTPS_REMOTE_ORIGIN'] + base_path() +
+        'fetch-request-css-base-url-style.css',
+        {mode: 'no-cors'}));
+    } else if (url.indexOf('dummy.png') != -1) {
+      port.postMessage({
+          url: event.request.url,
+          referrer: event.request.referrer
+        });
+    }
+  });
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
@@ -17,70 +17,102 @@ function get_request_init(base, params) 
   init['method'] = params['method'] || base['method'];
   init['mode'] = params['mode'] || base['mode'];
   init['credentials'] = params['credentials'] || base['credentials'];
   init['redirect'] = params['redirect'] || base['redirect'];
   return init;
 }
 
 self.addEventListener('fetch', function(event) {
-    var params = get_query_params(event.request.url);
-    var init = get_request_init(event.request, params);
-    var url = params['url'];
-    if (params['ignore']) {
-      return;
-    }
+  dump('### ### fetch event ' + event.request.url + '\n');
+  var params = get_query_params(event.request.url);
+  var init = get_request_init(event.request, params);
+  var url = params['url'];
+
+  if (params['ignore']) {
+    return;
+  }
+
+  function continueFetchHandler() {
     if (params['reject']) {
-      event.respondWith(new Promise(function(resolve, reject) {
-          reject();
-        }));
-      return;
+      return new Promise(function(resolve, reject) {
+        reject();
+      });
     }
     if (params['resolve-null']) {
-      event.respondWith(new Promise(function(resolve) {
-          resolve(null);
-        }));
-      return;
+      return new Promise(function(resolve) {
+        resolve(null);
+      });
     }
     if (params['generate-png']) {
       var binary = atob(
           'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAA' +
           'RnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAhSURBVDhPY3wro/Kf' +
           'gQLABKXJBqMGjBoAAqMGDLwBDAwAEsoCTFWunmQAAAAASUVORK5CYII=');
       var array = new Uint8Array(binary.length);
       for(var i = 0; i < binary.length; i++) {
         array[i] = binary.charCodeAt(i);
       };
-      event.respondWith(new Response(new Blob([array], {type: 'image/png'})));
-      return;
+      return new Response(new Blob([array], {type: 'image/png'}));
     }
+
+    if (params['generate-stylesheet']) {
+      dump('### ### SW sees generate-stylesheet\n');
+      var bgimage = "./fetch-access-control.py?PNGIMAGE=true&notifyclients=true";
+      if (params['NAME']) {
+        bgimage += '&NAME=' + params['NAME'];
+      }
+      bgimage += '&generated=true';
+      var body = 'body { background-image: url(' + bgimage + ');}';
+      return new Response(body, { headers: { 'content-type': 'text/css' } });
+    }
+
     if (params['check-ua-header']) {
       var ua = event.request.headers.get('User-Agent');
       if (ua) {
         // We have a user agent!
-        event.respondWith(new Response(new Blob([ua])));
+        return new Response(new Blob([ua]));
       } else {
         // We don't have a user-agent!
-        event.respondWith(new Response(new Blob(["NO_UA"])));
+        return new Response(new Blob(["NO_UA"]));
       }
-      return;
     }
-    event.respondWith(new Promise(function(resolve, reject) {
-        var request = event.request;
-        if (url) {
-          request = new Request(url, init);
+
+    return new Promise(function(resolve, reject) {
+      var request = event.request;
+      if (url) {
+        request = new Request(url, init);
+      }
+      fetch(request).then(function(response) {
+        dump('### ### got response type ' + response.type + ' for request mode ' + event.request.mode + '\n');
+        var expectedType = params['expected_type'];
+        if (expectedType && response.type !== expectedType) {
+          // Resolve a JSON object with a failure instead of rejecting
+          // in order to distinguish this from a NetworkError, which
+          // may be expected even if the type is correct.
+          resolve(new Response(JSON.stringify({
+            result: 'failure',
+            detail: 'got ' + response.type + ' Response.type instead of ' +
+                    expectedType
+          })));
         }
-        fetch(request).then(function(response) {
-          var expectedType = params['expected_type'];
-          if (expectedType && response.type !== expectedType) {
-            // Resolve a JSON object with a failure instead of rejecting
-            // in order to distinguish this from a NetworkError, which
-            // may be expected even if the type is correct.
-            resolve(new Response(JSON.stringify({
-              result: 'failure',
-              detail: 'got ' + response.type + ' Response.type instead of ' +
-                      expectedType
-            })));
-          }
-          resolve(response);
-        }, reject)
-      }));
-  });
+        resolve(response);
+      }, function(e) {
+        dump('### ### fetch rejected with ' + e + '\n');
+        reject(e);
+      })
+    });
+  }
+
+  if (!params['notifyclients']) {
+    return event.respondWith(continueFetchHandler());
+  }
+
+  event.respondWith(self.clients.matchAll().then(function(clientList) {
+    clientList.forEach(function(client) {
+      client.postMessage({
+        type: 'FETCH_EVENT',
+        url: event.request.url
+      });
+    });
+    return continueFetchHandler();
+  }));
+});
