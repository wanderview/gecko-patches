# HG changeset patch
# Parent 17b65e7f8404ca69df517d1a20904b1ba414b7ce
# User Ben Kelly <ben@wanderview.com>
Bug 1158262 Fix cache-storage wpt tests not to store POST Requests.

diff --git a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-add.js b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-add.js
--- a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-add.js
+++ b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-add.js
@@ -22,47 +22,37 @@ cache_test(function(cache) {
 cache_test(function(cache) {
     return assert_promise_rejects(
       cache.add('javascript://this-is-not-http-mmkay'),
       new TypeError(),
       'Cache.add should throw a TypeError for non-HTTP/HTTPS URLs.');
   }, 'Cache.add called with non-HTTP/HTTPS URL');
 
 cache_test(function(cache) {
-    var request = new Request('../resources/simple.txt', {method: 'POST', body: 'Hello'});
+    var request = new Request('../resources/simple.txt');
     return cache.add(request)
       .then(function(result) {
           assert_equals(result, undefined,
                         'Cache.add should resolve with undefined on success.');
         });
   }, 'Cache.add called with Request object');
 
 cache_test(function(cache) {
-    var request = new Request('../resources/simple.txt', {method: 'POST', body: 'Hello'});
-    return request.text()
-      .then(function() {
-          assert_false(request.bodyUsed);
-        })
-      .then(function() {
-          return cache.add(request);
-        });
-  }, 'Cache.add called with Request object with a used body');
-
-cache_test(function(cache) {
-    var request = new Request('../resources/simple.txt', {method: 'POST', body: 'Hello'});
+    var request = new Request('../resources/simple.txt');
     return cache.add(request)
       .then(function(result) {
           assert_equals(result, undefined,
                         'Cache.add should resolve with undefined on success.');
         })
       .then(function() {
-          return assert_promise_rejects(
-            cache.add(request),
-            new TypeError(),
-            'Cache.add should throw TypeError if same request is added twice.');
+          return cache.add(request);
+        })
+      .then(function(result) {
+          assert_equals(result, undefined,
+                        'Cache.add should resolve with undefined on success.');
         });
   }, 'Cache.add called twice with the same Request object');
 
 cache_test(function(cache) {
     return cache.add('this-does-not-exist-please-dont-create-it')
       .then(function(result) {
           assert_equals(result, undefined,
                         'Cache.add should resolve with undefined on success.');
diff --git a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-delete.js b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-delete.js
--- a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-delete.js
+++ b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-delete.js
@@ -38,51 +38,27 @@ cache_test(function(cache) {
         })
       .then(function(result) {
           assert_equals(result, undefined,
             'Cache.delete should remove matching entries from cache.');
         });
   }, 'Cache.delete called with a string URL');
 
 cache_test(function(cache) {
-    var request = new Request(test_url, { method: 'POST', body: 'Abc' });
-    return cache.put(request.clone(), new_test_response())
-      .then(function() {
-          return cache.delete(request);
-        })
-      .then(function(result) {
-          assert_true(result,
-                      'Cache.delete should resolve with "true" if an entry ' +
-                      'was successfully deleted.');
-          assert_false(request.bodyUsed,
-                       'Cache.delete should not consume request body.');
-        });
-  }, 'Cache.delete called with a Request object');
-
-cache_test(function(cache) {
-    var request = new Request(test_url, { method: 'POST', body: 'Abc' });
-    return cache.put(request.clone(), new_test_response())
-      .then(function() {
-          return request.text();
-        })
-      .then(function() {
-          assert_true(request.bodyUsed,
-                      '[https://fetch.spec.whatwg.org/#body-mixin] ' +
-                      'Request.bodyUsed should be true after text() method ' +
-                      'resolves.');
-        })
+    var request = new Request(test_url);
+    return cache.put(request, new_test_response())
       .then(function() {
           return cache.delete(request);
         })
       .then(function(result) {
           assert_true(result,
                       'Cache.delete should resolve with "true" if an entry ' +
                       'was successfully deleted.');
         });
-  }, 'Cache.delete with a Request object containing used body');
+  }, 'Cache.delete called with a Request object');
 
 cache_test(function(cache) {
     return cache.delete(test_url)
       .then(function(result) {
           assert_false(result,
                        'Cache.delete should resolve with "false" if there ' +
                        'are no matching entries.');
         });
diff --git a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-match.js b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-match.js
--- a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-match.js
+++ b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-match.js
@@ -168,42 +168,16 @@ prepopulated_cache_test(simple_entries, 
 prepopulated_cache_test(simple_entries, function(cache, entries) {
     return cache.match(new Request(entries.a.request.url))
       .then(function(result) {
           assert_object_equals(result, entries.a.response,
                                'Cache.match should match by Request.');
         });
   }, 'Cache.match with new Request');
 
-cache_test(function(cache) {
-    var request = new Request('https://example.com/foo', {
-        method: 'POST',
-        body: 'Hello world!'
-      });
-    var response = new Response('Booyah!', {
-        status: 200,
-        headers: {'Content-Type': 'text/plain'}
-      });
-
-    return cache.put(request.clone(), response.clone())
-      .then(function() {
-          assert_false(
-            request.bodyUsed,
-            '[https://fetch.spec.whatwg.org/#concept-body-used-flag] ' +
-            'Request.bodyUsed flag should be initially false.');
-        })
-      .then(function() {
-          return cache.match(request);
-        })
-      .then(function(result) {
-          assert_false(request.bodyUsed,
-                       'Cache.match should not consume Request body.');
-        });
-  }, 'Cache.match with Request containing non-empty body');
-
 prepopulated_cache_test(simple_entries, function(cache, entries) {
     return cache.matchAll(entries.a.request,
                           {ignoreSearch: true})
       .then(function(result) {
           assert_array_equivalent(
             result,
             [
               entries.a.response,
@@ -447,16 +421,25 @@ cache_test(function(cache) {
         })
       .then(function(body_text) {
           assert_equals(body_text, 'a simple text file\n',
                         'Cache.match should return a Response object with a ' +
                         'valid body each time it is called.');
         });
   }, 'Cache.match invoked multiple times for the same Request/Response');
 
+prepopulated_cache_test(simple_entries, function(cache, entries) {
+    var request = new Request(entries.a.request, { method: 'POST' });
+    return cache.match(request)
+      .then(function(result) {
+          assert_object_equals(result, undefined,
+                               'Cache.match should not find a match');
+        });
+  }, 'Cache.match with POST Request');
+
 // Helpers ---
 
 // Run |test_function| with a Cache object as its only parameter. Prior to the
 // call, the Cache is populated by cache entries from |entries|. The latter is
 // expected to be an Object mapping arbitrary keys to objects of the form
 // {request: <Request object>, response: <Response object>}. There's no
 // guarantee on the order in which entries will be added to the cache.
 //
diff --git a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-put.js b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-put.js
--- a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-put.js
+++ b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-put.js
@@ -63,39 +63,16 @@ cache_test(function(cache) {
     return cache.put(request, response)
       .then(function() {
         assert_false(response.bodyUsed,
                      'Cache.put should not mark empty response\'s body used');
       });
   }, 'Cache.put with Response without a body');
 
 cache_test(function(cache) {
-    var request = new Request(test_url, {
-        method: 'POST',
-        body: 'Hello'
-      });
-    var response = new Response(test_body);
-    assert_false(request.bodyUsed,
-                 '[https://fetch.spec.whatwg.org/#dom-body-bodyused] ' +
-                 'Request.bodyUsed should be initially false.');
-    return cache.put(request, response.clone())
-      .then(function() {
-          assert_true(request.bodyUsed,
-                       'Cache.put should consume Request body.');
-        })
-      .then(function() {
-          return cache.match(request);
-        })
-      .then(function(result) {
-          assert_object_equals(result, response,
-                               'Cache.put should store response body.');
-        });
-  }, 'Cache.put with Request containing a body');
-
-cache_test(function(cache) {
     var request = new Request(test_url);
     var response = new Response(test_body);
     return cache.put(request, response.clone())
       .then(function() {
           return cache.match(test_url);
         })
       .then(function(result) {
           assert_object_equals(result, response,
@@ -289,28 +266,21 @@ cache_test(function(cache) {
     return assert_promise_rejects(
       cache.put(new Request(test_url), null),
       new TypeError(),
       'Cache.put should throw a TypeError for a null response.');
   }, 'Cache.put with a null response');
 
 cache_test(function(cache) {
     var request = new Request(test_url, {method: 'POST', body: test_body});
-    assert_false(request.bodyUsed,
-                 '[https://fetch.spec.whatwg.org/#dom-body-bodyused] ' +
-                 'Request.bodyUsed should be initially false.');
-    var copy = new Request(request);
-    assert_true(request.bodyUsed,
-                '[https://fetch.spec.whatwg.org/#dom-request] ' +
-                'Request constructor should set input\'s used flag.');
     return assert_promise_rejects(
       cache.put(request, new Response(test_body)),
       new TypeError(),
-      'Cache.put should throw a TypeError for a request with used body.');
-  }, 'Cache.put with a used request body');
+      'Cache.put should throw a TypeError for a POST request.');
+  }, 'Cache.put with a POST request');
 
 cache_test(function(cache) {
     var response = new Response(test_body);
     assert_false(response.bodyUsed,
                  '[https://fetch.spec.whatwg.org/#dom-body-bodyused] ' +
                  'Response.bodyUsed should be initially false.');
     return response.text().then(function() {
       assert_true(
