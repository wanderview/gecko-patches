# HG changeset patch
# Parent 33e6ff41e10d29188ac057b2683d427b3b8df89d
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 025 extra Manager documentation


diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -1144,16 +1144,31 @@ void
 Manager::RemoveListener(Listener* aListener)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   mListeners.RemoveElement(aListener);
   MOZ_ASSERT(!mListeners.Contains(aListener));
 }
 
 void
+Manager::RemoveContext(Context* aContext)
+{
+  NS_ASSERT_OWNINGTHREAD(Manager);
+  MOZ_ASSERT(mContext);
+  MOZ_ASSERT(mContext == aContext);
+  mContext = nullptr;
+
+  // If we're trying to shutdown, then note that we're done.  This is the
+  // delayed case from Manager::Shutdown().
+  if (mShuttingDown) {
+    shutdown::RemoveManagerId(mManagerId);
+  }
+}
+
+void
 Manager::AddRefCacheId(CacheId aCacheId)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mCacheIdRefs.Length(); ++i) {
     if (mCacheIdRefs[i].mCacheId == aCacheId) {
       mCacheIdRefs[i].mCount += 1;
       return;
     }
@@ -1225,63 +1240,16 @@ Manager::ReleaseBodyId(const nsID& aBody
         }
       }
       return;
     }
   }
   MOZ_ASSERT_UNREACHABLE("Attempt to release BodyId that is not referenced!");
 }
 
-bool
-Manager::SetCacheIdOrphanedIfRefed(CacheId aCacheId)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager);
-  for (uint32_t i = 0; i < mCacheIdRefs.Length(); ++i) {
-    if (mCacheIdRefs[i].mCacheId == aCacheId) {
-      MOZ_ASSERT(mCacheIdRefs[i].mCount > 0);
-      MOZ_ASSERT(!mCacheIdRefs[i].mOrphaned);
-      mCacheIdRefs[i].mOrphaned = true;
-      return true;
-    }
-  }
-  return false;
-}
-
-void
-Manager::Shutdown()
-{
-  NS_ASSERT_OWNINGTHREAD(Manager);
-
-  // Ignore duplicate attempts to shutdown.  This can occur when we start
-  // a browser initiated shutdown and then run ~Manager() which also
-  // calls Shutdown().
-  if (mShuttingDown) {
-    return;
-  }
-
-  // Set a flag to prevent any new requests from coming in and creating
-  // a new Context.  We must ensure all Contexts and IO operations are
-  // complete before shutdown proceeds.
-  mShuttingDown = true;
-
-  for (uint32_t i = 0; i < mStreamLists.Length(); ++i) {
-    mStreamLists[i]->CloseAll();
-  }
-
-  // If there is a context, then we must wait for it to complete.  Cancel and
-  // only note that we are done after its cleaned up.
-  if (mContext) {
-    mContext->CancelAll();
-    return;
-  }
-
-  // Otherwise, note that we are complete immediately
-  shutdown::RemoveManagerId(mManagerId);
-}
-
 already_AddRefed<ManagerId>
 Manager::GetManagerId() const
 {
   nsRefPtr<ManagerId> ref = mManagerId;
   return ref.forget();
 }
 
 void
@@ -1479,31 +1447,16 @@ Manager::StorageKeys(Listener* aListener
     return;
   }
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new StorageKeysAction(this, listenerId, aRequestId,
                                                   aNamespace);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
-void
-Manager::RemoveContext(Context* aContext)
-{
-  NS_ASSERT_OWNINGTHREAD(Manager);
-  MOZ_ASSERT(mContext);
-  MOZ_ASSERT(mContext == aContext);
-  mContext = nullptr;
-
-  // If we're trying to shutdown, then note that we're done.  This is the
-  // delayed case from Manager::Shutdown().
-  if (mShuttingDown) {
-    shutdown::RemoveManagerId(mManagerId);
-  }
-}
-
 Manager::Manager(ManagerId* aManagerId, nsIThread* aIOThread)
   : mManagerId(aManagerId)
   , mIOThread(aIOThread)
   , mContext(nullptr)
   , mShuttingDown(false)
 {
   MOZ_ASSERT(mManagerId);
   MOZ_ASSERT(mIOThread);
@@ -1513,16 +1466,48 @@ Manager::~Manager()
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(!mContext);
   Shutdown();
   Factory::Remove(this);
   mIOThread->Shutdown();
 }
 
+void
+Manager::Shutdown()
+{
+  NS_ASSERT_OWNINGTHREAD(Manager);
+
+  // Ignore duplicate attempts to shutdown.  This can occur when we start
+  // a browser initiated shutdown and then run ~Manager() which also
+  // calls Shutdown().
+  if (mShuttingDown) {
+    return;
+  }
+
+  // Set a flag to prevent any new requests from coming in and creating
+  // a new Context.  We must ensure all Contexts and IO operations are
+  // complete before shutdown proceeds.
+  mShuttingDown = true;
+
+  for (uint32_t i = 0; i < mStreamLists.Length(); ++i) {
+    mStreamLists[i]->CloseAll();
+  }
+
+  // If there is a context, then we must wait for it to complete.  Cancel and
+  // only note that we are done after its cleaned up.
+  if (mContext) {
+    mContext->CancelAll();
+    return;
+  }
+
+  // Otherwise, note that we are complete immediately
+  shutdown::RemoveManagerId(mManagerId);
+}
+
 Context*
 Manager::CurrentContext()
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   if (!mContext) {
     MOZ_ASSERT(!mShuttingDown);
     nsRefPtr<Action> setupAction = new SetupAction();
     mContext = new Context(this, setupAction);
@@ -1557,16 +1542,31 @@ Manager::GetListener(ListenerId aListene
     }
   }
 
   // This can legitimately happen if the actor is deleted while a request is
   // in process.  For example, the child process OOMs.
   return nullptr;
 }
 
+bool
+Manager::SetCacheIdOrphanedIfRefed(CacheId aCacheId)
+{
+  NS_ASSERT_OWNINGTHREAD(Manager);
+  for (uint32_t i = 0; i < mCacheIdRefs.Length(); ++i) {
+    if (mCacheIdRefs[i].mCacheId == aCacheId) {
+      MOZ_ASSERT(mCacheIdRefs[i].mCount > 0);
+      MOZ_ASSERT(!mCacheIdRefs[i].mOrphaned);
+      mCacheIdRefs[i].mOrphaned = true;
+      return true;
+    }
+  }
+  return false;
+}
+
 // TODO: provide way to set body non-orphaned if its added back to a cache (bug 1110479)
 
 bool
 Manager::SetBodyIdOrphanedIfRefed(const nsID& aBodyId)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   for (uint32_t i = 0; i < mBodyIdRefs.Length(); ++i) {
     if (mBodyIdRefs[i].mBodyId == aBodyId) {
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -29,19 +29,65 @@ class ManagerId;
 class PCacheQueryParams;
 class PCacheRequest;
 class PCacheRequestOrVoid;
 class PCacheResponse;
 struct SavedRequest;
 struct SavedResponse;
 class StreamList;
 
+// The Manager is class is responsible for performing all of the underlying
+// work for a Cache or CacheStorage operation.  The DOM objects and IPC actors
+// are basically just plumbing to get the request to the right Manager object
+// running in the parent process.
+//
+// There should be exactly one Manager object for each origin or app using the
+// Cache API.  This uniqueness is defined by the ManagerId equality operator.
+// The uniqueness is enforced by the Manager GetOrCreate() factory method.
+//
+// The Manager object can out live the IPC actors in the case where the child
+// process is killed; e.g a child process OOM.  The Manager object can
+// The Manager object can potentially use non-trivial resources.  Long lived
+// DOM objects and their actors should not maintain a reference to the Manager
+// while idle.  Transient DOM objects that may keep a reference for their
+// lifetimes.
+//
+// For example, once a CacheStorage DOM object is access it will live until its
+// global is released.  Therefore, CacheStorage should release its Manager
+// reference after operations complete and it becomes idle.  Cache objects,
+// however, can be GC'd once content are done using them and can therefore keep
+// their Manager reference alive.  Its expected that more operations are
+// performed on a Cache object, so keeping the Manager reference will help
+// minimize overhead for each reference.
+//
+// As an invariant, all Manager objects must cease all IO before shutdown.  This
+// is enforced by the ShutdownObserver.  If content still holds references to
+// Cache DOM objects during shutdown, then all operations will begin rejecting.
 class Manager MOZ_FINAL
 {
 public:
+  // Callback interface implemented by clients of Manager, such as CacheParent
+  // and CacheStorageParent.  In general, if you call a Manager method you
+  // should expect to receive exactly one On*() callback.  For example, if
+  // you call Manager::CacheMatch(), then you should expect to receive
+  // OnCacheMatch() back in response.
+  //
+  // Listener objects are set on a per-operation basis.  So you pass the
+  // Listener to a call like Manager::CacheMatch().  Once set in this way,
+  // the Manager will continue to reference the Listener until RemoveListener()
+  // is called.  This is done to allow the same listener to be used for
+  // multiple operations simultaneously without having to maintain an exact
+  // count of operations-in-flight.
+  //
+  // Note, the Manager only holds weak references to Listener objects.
+  // Listeners must call Manager::RemoveListener() before they are destroyed
+  // to clear these weak references.
+  //
+  // All public methods should be invoked on the same thread used to create
+  // the Manager.
   class Listener
   {
   public:
     virtual void OnCacheMatch(RequestId aRequestId, nsresult aRv,
                               const SavedResponse* aResponse,
                               StreamList* aStreamList) { }
     virtual void OnCacheMatchAll(RequestId aRequestId, nsresult aRv,
                                  const nsTArray<SavedResponse>& aSavedResponses,
@@ -68,25 +114,37 @@ public:
   protected:
     ~Listener() { }
   };
 
   static nsresult GetOrCreate(ManagerId* aManagerId, Manager** aManagerOut);
   static already_AddRefed<Manager> Get(ManagerId* aManagerId);
   static void ShutdownAll();
 
+  // Must be called by Listener objects before they are destroyed.
   void RemoveListener(Listener* aListener);
+
+  // Must be called by Context objects before they are destroyed.
+  void RemoveContext(Context* aContext);
+
+  // If an actor represents a long term reference to a cache or body stream,
+  // then they must call AddRefCacheId() or AddRefBodyId().  This will
+  // cause the Manager to keep the backing data store alive for the given
+  // object.  The actor must then call ReleaseCacheId() or ReleaseBodyId()
+  // exactly once for every AddRef*() call it made.  Any delayed deletion
+  // will then be performed.
   void AddRefCacheId(CacheId aCacheId);
   void ReleaseCacheId(CacheId aCacheId);
   void AddRefBodyId(const nsID& aBodyId);
   void ReleaseBodyId(const nsID& aBodyId);
-  bool SetCacheIdOrphanedIfRefed(CacheId aCacheId);
-  void Shutdown();
+
   already_AddRefed<ManagerId> GetManagerId() const;
 
+  // Methods to allow a StreamList to register themselves with the Manager.
+  // StreamList objects must call RemoveStreamList() before they are destroyed.
   void AddStreamList(StreamList* aStreamList);
   void RemoveStreamList(StreamList* aStreamList);
 
   // TODO: consider moving CacheId up in the argument lists below (bug 1110485)
   void CacheMatch(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
                   const PCacheRequest& aRequest,
                   const PCacheQueryParams& aParams);
   void CacheMatchAll(Listener* aListener, RequestId aRequestId,
@@ -110,18 +168,16 @@ public:
                   Namespace aNamespace, const nsAString& aKey);
   void StorageOpen(Listener* aListener, RequestId aRequestId,
                    Namespace aNamespace, const nsAString& aKey);
   void StorageDelete(Listener* aListener, RequestId aRequestId,
                      Namespace aNamespace, const nsAString& aKey);
   void StorageKeys(Listener* aListener, RequestId aRequestId,
                    Namespace aNamespace);
 
-  void RemoveContext(Context* aContext);
-
 private:
   class Factory;
   class BaseAction;
   class DeleteOrphanedCacheAction;
 
   class CacheMatchAction;
   class CacheMatchAllAction;
   class CachePutAllAction;
@@ -133,50 +189,56 @@ private:
   class StorageOpenAction;
   class StorageDeleteAction;
   class StorageKeysAction;
 
   typedef uintptr_t ListenerId;
 
   Manager(ManagerId* aManagerId, nsIThread* aIOThread);
   ~Manager();
+  void Shutdown();
   Context* CurrentContext();
 
   ListenerId SaveListener(Listener* aListener);
   Listener* GetListener(ListenerId aListenerId) const;
 
+  bool SetCacheIdOrphanedIfRefed(CacheId aCacheId);
   bool SetBodyIdOrphanedIfRefed(const nsID& aBodyId);
   void NoteOrphanedBodyIdList(const nsTArray<nsID>& aDeletedBodyIdList);
 
   nsRefPtr<ManagerId> mManagerId;
   nsCOMPtr<nsIThread> mIOThread;
+
+  // Weak reference cleared by RemoveContext() in Context destructor.
+  Context* mContext;
+
+  // Weak references cleared by RemoveListener() in Listener destructors.
   nsTArray<Listener*> mListeners;
+
+  // Weak references cleared by RemoveStreamList() in StreamList destructors.
   nsTArray<StreamList*> mStreamLists;
 
+  bool mShuttingDown;
+
   struct CacheIdRefCounter
   {
     CacheId mCacheId;
     MozRefCountType mCount;
     bool mOrphaned;
   };
   nsTArray<CacheIdRefCounter> mCacheIdRefs;
 
   struct BodyIdRefCounter
   {
     nsID mBodyId;
     MozRefCountType mCount;
     bool mOrphaned;
   };
   nsTArray<BodyIdRefCounter> mBodyIdRefs;
 
-  // weak ref as Context destructor clears this pointer
-  Context* mContext;
-
-  bool mShuttingDown;
-
 public:
   NS_INLINE_DECL_REFCOUNTING(cache::Manager)
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
