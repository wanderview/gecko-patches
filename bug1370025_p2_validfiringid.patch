# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4d6b5adf23ad518ba02f2783cba576a08ee741cf
Bug 1370025 P2 Add TimeoutManager::IsValidFiringId() helper routine. r=ehsan

diff --git a/dom/base/TimeoutManager.cpp b/dom/base/TimeoutManager.cpp
--- a/dom/base/TimeoutManager.cpp
+++ b/dom/base/TimeoutManager.cpp
@@ -167,16 +167,22 @@ void
 TimeoutManager::DestroyFiringId(uint32_t aFiringId)
 {
   MOZ_DIAGNOSTIC_ASSERT(!mFiringIdStack.IsEmpty());
   MOZ_DIAGNOSTIC_ASSERT(mFiringIdStack.LastElement() == aFiringId);
   mFiringIdStack.RemoveElementAt(mFiringIdStack.Length() - 1);
 }
 
 bool
+TimeoutManager::IsValidFiringId(uint32_t aFiringId) const
+{
+  return !IsInvalidFiringId(aFiringId);
+}
+
+bool
 TimeoutManager::IsInvalidFiringId(uint32_t aFiringId) const
 {
   // Check the most common ways to invalidate a firing id first.
   // These should be quite fast.
   if (aFiringId == InvalidFiringId ||
       mFiringIdStack.IsEmpty()) {
     return true;
   }
diff --git a/dom/base/TimeoutManager.h b/dom/base/TimeoutManager.h
--- a/dom/base/TimeoutManager.h
+++ b/dom/base/TimeoutManager.h
@@ -123,16 +123,19 @@ private:
 
   uint32_t
   CreateFiringId();
 
   void
   DestroyFiringId(uint32_t aFiringId);
 
   bool
+  IsValidFiringId(uint32_t aFiringId) const;
+
+  bool
   IsInvalidFiringId(uint32_t aFiringId) const;
 
 private:
   struct Timeouts {
     Timeouts()
       : mTimeoutInsertionPoint(nullptr)
     {
     }
