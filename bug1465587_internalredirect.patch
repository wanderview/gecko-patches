# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  db872a6e7cc457329cd31b81056015e5b2ee8336
Bug 1465587 Only hide the initial internal redirect to an InterceptedHttpChannel and not internal redirects initiated from IHC. r=mayhemer

diff --git a/netwerk/protocol/http/HttpChannelParent.cpp b/netwerk/protocol/http/HttpChannelParent.cpp
--- a/netwerk/protocol/http/HttpChannelParent.cpp
+++ b/netwerk/protocol/http/HttpChannelParent.cpp
@@ -1761,27 +1761,25 @@ HttpChannelParent::StartRedirect(uint32_
     return NS_BINDING_ABORTED;
   }
 
   // If this is an internal redirect for service worker interception, then
   // hide it from the child process.  The original e10s interception code
   // was not designed with this in mind and its not necessary to replace
   // the HttpChannelChild/Parent objects in this case.
   if (redirectFlags & nsIChannelEventSink::REDIRECT_INTERNAL) {
+    nsCOMPtr<nsIInterceptedChannel> oldIntercepted =
+        do_QueryInterface(static_cast<nsIChannel*>(mChannel.get()));
     nsCOMPtr<nsIInterceptedChannel> newIntercepted = do_QueryInterface(newChannel);
-    if (newIntercepted) {
-#ifdef DEBUG
-      // Note, InterceptedHttpChannel can also do an internal redirect
-      // for opaque response interception.  This should not actually
-      // happen here in e10s mode.
-      nsCOMPtr<nsIInterceptedChannel> oldIntercepted =
-        do_QueryInterface(static_cast<nsIChannel*>(mChannel.get()));
-      MOZ_ASSERT(!oldIntercepted);
-#endif
 
+    // We only want to hide the initial internal redirect from nsHttpChannel
+    // to InterceptedHttpChannel.  We want to allow through internal redirects
+    // initiated from the InterceptedHttpChannel even if they are to another
+    // InterceptedHttpChannel.
+    if (!oldIntercepted && newIntercepted) {
       // We need to move across the reserved and initial client information
       // to the new channel.  Normally this would be handled by the child
       // ClientChannelHelper, but that is not notified of this redirect since
       // we're not propagating it back to the child process.
       nsCOMPtr<nsILoadInfo> oldLoadInfo;
       Unused << mChannel->GetLoadInfo(getter_AddRefs(oldLoadInfo));
       nsCOMPtr<nsILoadInfo> newLoadInfo;
       Unused << newChannel->GetLoadInfo(getter_AddRefs(newLoadInfo));
