# HG changeset patch
# Parent 7872ba2c49778e28869016b2657809d6829618a5
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 014 use RAII objects to cleanup fds

diff --git a/dom/cache/AutoUtils.cpp b/dom/cache/AutoUtils.cpp
new file mode 100644
--- /dev/null
+++ b/dom/cache/AutoUtils.cpp
@@ -0,0 +1,396 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/dom/cache/AutoUtils.h"
+
+#include "mozilla/unused.h"
+#include "mozilla/dom/cache/CacheStreamControlParent.h"
+#include "mozilla/dom/cache/ReadStream.h"
+#include "mozilla/dom/cache/SavedTypes.h"
+#include "mozilla/dom/cache/StreamList.h"
+#include "mozilla/dom/cache/TypeUtils.h"
+#include "mozilla/ipc/FileDescriptorSetChild.h"
+#include "mozilla/ipc/FileDescriptorSetParent.h"
+#include "mozilla/ipc/PBackgroundParent.h"
+
+namespace {
+
+using mozilla::unused;
+using mozilla::dom::cache::PCacheReadStream;
+using mozilla::dom::cache::PCacheReadStreamOrVoid;
+using mozilla::ipc::FileDescriptor;
+using mozilla::ipc::FileDescriptorSetChild;
+using mozilla::ipc::FileDescriptorSetParent;
+using mozilla::ipc::OptionalFileDescriptorSet;
+
+enum CleanupAction
+{
+  ForgetFds,
+  DeleteFds
+};
+
+void
+CleanupChildFds(PCacheReadStream& aReadStream, CleanupAction aAction)
+{
+  if (aReadStream.fds().type() !=
+      OptionalFileDescriptorSet::TPFileDescriptorSetChild) {
+    return;
+  }
+
+  nsAutoTArray<FileDescriptor, 4> fds;
+
+  FileDescriptorSetChild* fdSetActor =
+    static_cast<FileDescriptorSetChild*>(aReadStream.fds().get_PFileDescriptorSetChild());
+  MOZ_ASSERT(fdSetActor);
+
+  if (aAction == DeleteFds) {
+    unused << fdSetActor->Send__delete__(fdSetActor);
+  }
+
+  // FileDescriptorSet doesn't clear its fds in its ActorDestroy, so we
+  // unconditionally forget them here.
+  fdSetActor->ForgetFileDescriptors(fds);
+}
+
+void
+CleanupChildFds(PCacheReadStreamOrVoid& aReadStreamOrVoid, CleanupAction aAction)
+{
+  if (aReadStreamOrVoid.type() == PCacheReadStreamOrVoid::Tvoid_t) {
+    return;
+  }
+
+  CleanupChildFds(aReadStreamOrVoid.get_PCacheReadStream(), aAction);
+}
+
+void
+CleanupParentFds(PCacheReadStream& aReadStream, CleanupAction aAction)
+{
+  if (aReadStream.fds().type() !=
+      OptionalFileDescriptorSet::TPFileDescriptorSetParent) {
+    return;
+  }
+
+  nsAutoTArray<FileDescriptor, 4> fds;
+
+  FileDescriptorSetParent* fdSetActor =
+    static_cast<FileDescriptorSetParent*>(aReadStream.fds().get_PFileDescriptorSetParent());
+  MOZ_ASSERT(fdSetActor);
+
+  if (aAction == DeleteFds) {
+    unused << fdSetActor->Send__delete__(fdSetActor);
+  }
+
+  // FileDescriptorSet doesn't clear its fds in its ActorDestroy, so we
+  // unconditionally forget them here.
+  fdSetActor->ForgetFileDescriptors(fds);
+}
+
+void
+CleanupParentFds(PCacheReadStreamOrVoid& aReadStreamOrVoid, CleanupAction aAction)
+{
+  if (aReadStreamOrVoid.type() == PCacheReadStreamOrVoid::Tvoid_t) {
+    return;
+  }
+
+  CleanupParentFds(aReadStreamOrVoid.get_PCacheReadStream(), aAction);
+}
+
+} // anonymous namespace
+
+namespace mozilla {
+namespace dom {
+namespace cache {
+
+using mozilla::ipc::PBackgroundParent;
+
+AutoChildRequestList::AutoChildRequestList(TypeUtils* aTypeUtils,
+                                           uint32_t aCapacity)
+  : mTypeUtils(aTypeUtils)
+  , mSent(false)
+{
+  MOZ_ASSERT(mTypeUtils);
+  mRequestList.SetCapacity(aCapacity);
+}
+
+AutoChildRequestList::~AutoChildRequestList()
+{
+  CleanupAction action = mSent ? ForgetFds : DeleteFds;
+  for (uint32_t i = 0; i < mRequestList.Length(); ++i) {
+    CleanupChildFds(mRequestList[i].body(), action);
+  }
+}
+
+void
+AutoChildRequestList::Add(const RequestOrUSVString& aRequest,
+                          BodyAction aBodyAction,
+                          ReferrerAction aReferrerAction, ErrorResult& aRv)
+{
+  MOZ_ASSERT(!mSent);
+
+  // The FileDescriptorSetChild asserts in its destructor that all fds have
+  // been removed.  The copy constructor, however, simply duplicates the
+  // fds without removing any.  This means each temporary and copy must be
+  // explicitly cleaned up.
+  //
+  // Avoid a lot of this hassle by making sure we only create one here.  On
+  // error we remove it.
+
+  PCacheRequest* request = mRequestList.AppendElement();
+  mTypeUtils->ToPCacheRequest(*request, aRequest, aBodyAction, aReferrerAction,
+                              aRv);
+  if (aRv.Failed()) {
+    mRequestList.RemoveElementAt(mRequestList.Length() - 1);
+  }
+}
+
+void
+AutoChildRequestList::Add(const OwningRequestOrUSVString& aRequest,
+                          BodyAction aBodyAction,
+                          ReferrerAction aReferrerAction, ErrorResult& aRv)
+{
+  MOZ_ASSERT(!mSent);
+
+  // Same issue as above.  Make sure only one object is created and remove it
+  // on error.
+
+  PCacheRequest* request = mRequestList.AppendElement();
+  mTypeUtils->ToPCacheRequest(*request, aRequest, aBodyAction, aReferrerAction,
+                              aRv);
+  if (aRv.Failed()) {
+    mRequestList.RemoveElementAt(mRequestList.Length() - 1);
+  }
+}
+
+const nsTArray<PCacheRequest>&
+AutoChildRequestList::SendAsRequestList()
+{
+  MOZ_ASSERT(!mSent);
+  mSent = true;
+  return mRequestList;
+}
+
+// --------------------------------------------
+
+AutoChildRequestResponse::AutoChildRequestResponse(TypeUtils* aTypeUtils)
+  : mTypeUtils(aTypeUtils)
+  , mSent(false)
+{
+  // Default IPC-generated constructor does not initialize these correctly
+  // and we check them later when cleaning up.
+  mRequestResponse.request().body() = void_t();
+  mRequestResponse.response().body() = void_t();
+}
+
+AutoChildRequestResponse::~AutoChildRequestResponse()
+{
+  CleanupAction action = mSent ? ForgetFds : DeleteFds;
+  CleanupChildFds(mRequestResponse.request().body(), action);
+  CleanupChildFds(mRequestResponse.response().body(), action);
+}
+
+void
+AutoChildRequestResponse::Add(const RequestOrUSVString& aRequest,
+                              BodyAction aBodyAction,
+                              ReferrerAction aReferrerAction, ErrorResult& aRv)
+{
+  MOZ_ASSERT(!mSent);
+  mTypeUtils->ToPCacheRequest(mRequestResponse.request(), aRequest, aBodyAction,
+                              aReferrerAction, aRv);
+}
+
+void
+AutoChildRequestResponse::Add(Response& aResponse, ErrorResult& aRv)
+{
+  MOZ_ASSERT(!mSent);
+  mTypeUtils->ToPCacheResponse(mRequestResponse.response(), aResponse, aRv);
+}
+
+const CacheRequestResponse&
+AutoChildRequestResponse::SendAsRequestResponse()
+{
+  MOZ_ASSERT(!mSent);
+  mSent = true;
+  return mRequestResponse;
+}
+
+// --------------------------------------------
+
+AutoParentBase::AutoParentBase(PBackgroundParent* aManager)
+  : mManager(aManager)
+  , mStreamControl(nullptr)
+  , mSent(false)
+{
+  MOZ_ASSERT(mManager);
+}
+
+AutoParentBase::~AutoParentBase()
+{
+  if (!mSent && mStreamControl) {
+    unused << PCacheStreamControlParent::Send__delete__(mStreamControl);
+  }
+}
+
+void
+AutoParentBase::SerializeReadStream(const nsID& aId, StreamList* aStreamList,
+                                    PCacheReadStream* aReadStreamOut)
+{
+  MOZ_ASSERT(aStreamList);
+  MOZ_ASSERT(aReadStreamOut);
+  MOZ_ASSERT(!mSent);
+
+  nsCOMPtr<nsIInputStream> stream = aStreamList->Extract(aId);
+  MOZ_ASSERT(stream);
+
+  if (!mStreamControl) {
+    mStreamControl = new CacheStreamControlParent();
+    DebugOnly<PCacheStreamControlParent*> actor =
+      mManager->SendPCacheStreamControlConstructor(mStreamControl);
+    MOZ_ASSERT(mStreamControl == actor);
+  }
+
+  aStreamList->SetStreamControl(mStreamControl);
+
+  nsRefPtr<ReadStream> readStream = ReadStream::Create(mStreamControl,
+                                                       aId, stream);
+  readStream->Serialize(aReadStreamOut);
+}
+
+// --------------------------------------------
+
+AutoParentRequestList::AutoParentRequestList(PBackgroundParent* aManager,
+                                             uint32_t aCapacity)
+  : AutoParentBase(aManager)
+{
+  mRequestList.SetCapacity(aCapacity);
+}
+
+AutoParentRequestList::~AutoParentRequestList()
+{
+  CleanupAction action = mSent ? ForgetFds : DeleteFds;
+  for (uint32_t i = 0; i < mRequestList.Length(); ++i) {
+    CleanupParentFds(mRequestList[i].body(), action);
+  }
+}
+
+void
+AutoParentRequestList::Add(const SavedRequest& aSavedRequest,
+                           StreamList* aStreamList)
+{
+  MOZ_ASSERT(!mSent);
+
+  mRequestList.AppendElement(aSavedRequest.mValue);
+  PCacheRequest& request = mRequestList.LastElement();
+
+  if (!aSavedRequest.mHasBodyId) {
+    request.body() = void_t();
+    return;
+  }
+
+  request.body() = PCacheReadStream();
+  SerializeReadStream(aSavedRequest.mBodyId, aStreamList,
+                      &request.body().get_PCacheReadStream());
+}
+
+const nsTArray<PCacheRequest>&
+AutoParentRequestList::SendAsRequestList()
+{
+  MOZ_ASSERT(!mSent);
+  mSent = true;
+  return mRequestList;
+}
+
+// --------------------------------------------
+
+AutoParentResponseList::AutoParentResponseList(PBackgroundParent* aManager,
+                                               uint32_t aCapacity)
+  : AutoParentBase(aManager)
+{
+  mResponseList.SetCapacity(aCapacity);
+}
+
+AutoParentResponseList::~AutoParentResponseList()
+{
+  CleanupAction action = mSent ? ForgetFds : DeleteFds;
+  for (uint32_t i = 0; i < mResponseList.Length(); ++i) {
+    CleanupParentFds(mResponseList[i].body(), action);
+  }
+}
+
+void
+AutoParentResponseList::Add(const SavedResponse& aSavedResponse,
+                            StreamList* aStreamList)
+{
+  MOZ_ASSERT(!mSent);
+
+  mResponseList.AppendElement(aSavedResponse.mValue);
+  PCacheResponse& response = mResponseList.LastElement();
+
+  if (!aSavedResponse.mHasBodyId) {
+    response.body() = void_t();
+    return;
+  }
+
+  response.body() = PCacheReadStream();
+  SerializeReadStream(aSavedResponse.mBodyId, aStreamList,
+                      &response.body().get_PCacheReadStream());
+}
+
+const nsTArray<PCacheResponse>&
+AutoParentResponseList::SendAsResponseList()
+{
+  MOZ_ASSERT(!mSent);
+  mSent = true;
+  return mResponseList;
+}
+
+// --------------------------------------------
+
+AutoParentResponseOrVoid::AutoParentResponseOrVoid(ipc::PBackgroundParent* aManager)
+  : AutoParentBase(aManager)
+{
+  mResponseOrVoid = void_t();
+}
+
+AutoParentResponseOrVoid::~AutoParentResponseOrVoid()
+{
+  if (mResponseOrVoid.type() != PCacheResponseOrVoid::TPCacheResponse) {
+    return;
+  }
+
+  CleanupAction action = mSent ? ForgetFds : DeleteFds;
+  CleanupParentFds(mResponseOrVoid.get_PCacheResponse().body(), action);
+}
+
+void
+AutoParentResponseOrVoid::Add(const SavedResponse& aSavedResponse,
+                              StreamList* aStreamList)
+{
+  MOZ_ASSERT(!mSent);
+
+  mResponseOrVoid = aSavedResponse.mValue;
+  PCacheResponse& response = mResponseOrVoid.get_PCacheResponse();
+
+  if (!aSavedResponse.mHasBodyId) {
+    response.body() = void_t();
+    return;
+  }
+
+  response.body() = PCacheReadStream();
+  SerializeReadStream(aSavedResponse.mBodyId, aStreamList,
+                      &response.body().get_PCacheReadStream());
+}
+
+const PCacheResponseOrVoid&
+AutoParentResponseOrVoid::SendAsResponseOrVoid()
+{
+  MOZ_ASSERT(!mSent);
+  mSent = true;
+  return mResponseOrVoid;
+}
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/cache/AutoUtils.h b/dom/cache/AutoUtils.h
new file mode 100644
--- /dev/null
+++ b/dom/cache/AutoUtils.h
@@ -0,0 +1,154 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_cache_AutoUtils_h
+#define mozilla_dom_cache_AutoUtils_h
+
+#include "mozilla/Attributes.h"
+#include "mozilla/dom/cache/PCacheTypes.h"
+#include "mozilla/dom/cache/TypeUtils.h"
+#include "nsTArray.h"
+
+struct nsID;
+
+namespace mozilla {
+
+class ErrorResult;
+
+namespace ipc {
+class PBackgroundParent;
+}
+
+namespace dom {
+
+class OwningRequestOrUSVString;
+class RequestOrUSVString;
+
+namespace cache {
+
+class CacheStreamControlParent;
+class SavedRequest;
+class SavedResponse;
+class StreamList;
+
+// A collection of RAII-style helper classes to ensure that IPC
+// FileDescriptorSet actors are properly cleaned up.  The user of these actors
+// must manually either Forget() the Fds or Send__delete__() the actor
+// depending on if the descriptors were actually sent.
+//
+// Note, these should only be used when *sending* streams across IPC.  The
+// deserialization case is handled by creating a ReadStream object.
+
+class AutoChildRequestList MOZ_STACK_CLASS MOZ_FINAL
+{
+public:
+  typedef TypeUtils::BodyAction BodyAction;
+  typedef TypeUtils::ReferrerAction ReferrerAction;
+
+  AutoChildRequestList(TypeUtils* aTypeUtils, uint32_t aCapacity);
+  ~AutoChildRequestList();
+
+  void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
+           ReferrerAction aReferrerAction, ErrorResult& aRv);
+  void Add(const OwningRequestOrUSVString& aRequest, BodyAction aBodyAction,
+           ReferrerAction aReferrerAction, ErrorResult& aRv);
+
+  const nsTArray<PCacheRequest>& SendAsRequestList();
+
+private:
+  TypeUtils* mTypeUtils;
+  bool mSent;
+
+  // Allocates ~5k inline in the stack-only class
+  nsAutoTArray<PCacheRequest, 32> mRequestList;
+};
+
+class AutoChildRequestResponse MOZ_STACK_CLASS MOZ_FINAL
+{
+public:
+  typedef TypeUtils::BodyAction BodyAction;
+  typedef TypeUtils::ReferrerAction ReferrerAction;
+
+  AutoChildRequestResponse(TypeUtils* aTypeUtils);
+  ~AutoChildRequestResponse();
+
+  void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
+           ReferrerAction aReferrerAction, ErrorResult& aRv);
+  void Add(Response& aResponse, ErrorResult& aRv);
+
+  const CacheRequestResponse& SendAsRequestResponse();
+
+private:
+  TypeUtils* mTypeUtils;
+  bool mSent;
+  CacheRequestResponse mRequestResponse;
+};
+
+class AutoParentBase MOZ_STACK_CLASS
+{
+protected:
+  AutoParentBase(mozilla::ipc::PBackgroundParent* aManager);
+  virtual ~AutoParentBase() = 0;
+
+  void SerializeReadStream(const nsID& aId, StreamList* aStreamList,
+                           PCacheReadStream* aReadStreamOut);
+
+  mozilla::ipc::PBackgroundParent* mManager;
+  CacheStreamControlParent* mStreamControl;
+  bool mSent;
+};
+
+class AutoParentRequestList MOZ_STACK_CLASS MOZ_FINAL : public AutoParentBase
+{
+public:
+  AutoParentRequestList(mozilla::ipc::PBackgroundParent* aManager,
+                        uint32_t aCapacity);
+  ~AutoParentRequestList();
+
+  void Add(const SavedRequest& aSavedRequest, StreamList* aStreamList);
+
+  const nsTArray<PCacheRequest>& SendAsRequestList();
+
+private:
+  // Allocates ~5k inline in the stack-only class
+  nsAutoTArray<PCacheRequest, 32> mRequestList;
+};
+
+class AutoParentResponseList MOZ_STACK_CLASS MOZ_FINAL : public AutoParentBase
+{
+public:
+  AutoParentResponseList(mozilla::ipc::PBackgroundParent* aManager,
+                         uint32_t aCapacity);
+  ~AutoParentResponseList();
+
+  void Add(const SavedResponse& aSavedResponse, StreamList* aStreamList);
+
+  const nsTArray<PCacheResponse>& SendAsResponseList();
+
+private:
+  // Allocates ~4k inline in the stack-only class
+  nsAutoTArray<PCacheResponse, 32> mResponseList;
+};
+
+class AutoParentResponseOrVoid MOZ_STACK_CLASS MOZ_FINAL : public AutoParentBase
+{
+public:
+  AutoParentResponseOrVoid(mozilla::ipc::PBackgroundParent* aManager);
+  ~AutoParentResponseOrVoid();
+
+  void Add(const SavedResponse& aSavedResponse, StreamList* aStreamList);
+
+  const PCacheResponseOrVoid& SendAsResponseOrVoid();
+
+private:
+  PCacheResponseOrVoid mResponseOrVoid;
+};
+
+} // namespace cache
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_cache_AutoUtils_h
diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -7,16 +7,17 @@
 #include "mozilla/dom/cache/Cache.h"
 
 #include "mozilla/dom/Headers.h"
 #include "mozilla/dom/InternalResponse.h"
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/Response.h"
 #include "mozilla/dom/WorkerPrivate.h"
 #include "mozilla/dom/CacheBinding.h"
+#include "mozilla/dom/cache/AutoUtils.h"
 #include "mozilla/dom/cache/CacheChild.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/TypeUtils.h"
 #include "mozilla/ErrorResult.h"
 #include "mozilla/Preferences.h"
 #include "mozilla/unused.h"
 #include "nsIGlobalObject.h"
 #include "nsNetUtil.h"
@@ -70,17 +71,17 @@ namespace cache {
 
 using mozilla::ErrorResult;
 using mozilla::unused;
 using mozilla::dom::workers::GetCurrentThreadWorkerPrivate;
 using mozilla::dom::workers::WorkerPrivate;
 
 NS_IMPL_CYCLE_COLLECTING_ADDREF(mozilla::dom::cache::Cache);
 NS_IMPL_CYCLE_COLLECTING_RELEASE(mozilla::dom::cache::Cache);
-NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Cache, mGlobal)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Cache, mGlobal, mRequestPromises)
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Cache)
   NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
   NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
 Cache::Cache(nsIGlobalObject* aGlobal, const nsACString& aOrigin,
              PCacheChild* aActor)
@@ -156,75 +157,56 @@ Cache::Add(const RequestOrUSVString& aRe
     return nullptr;
   }
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
-
-  nsAutoTArray<PCacheRequest, 1> requests;
-  PCacheRequest* request = requests.AppendElement();
-  ToPCacheRequest(*request, aRequest, ReadBody, ExpandReferrer, aRv);
+  AutoChildRequestList requests(this, 1);
+  requests.Add(aRequest, ReadBody, ExpandReferrer, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
-  unused << mActor->SendAddAll(requestId, requests);
-
-  CleanupChildFds(request->body());
+  unused << mActor->SendAddAll(requestId, requests.SendAsRequestList());
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::AddAll(const Sequence<OwningRequestOrUSVString>& aRequests,
               ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
-  // Be careful not to early exist after this point to avoid leaking
-  // file descriptor resources from stream serialization.
+  AutoChildRequestList requests(this, aRequests.Length());
 
-  // allocates roughly ~5k on the stack
-  nsAutoTArray<PCacheRequest, 32> requests;
-  requests.SetCapacity(aRequests.Length());
-
-  for(uint32_t i = 0; i < aRequests.Length(); ++i) {
+  for (uint32_t i = 0; i < aRequests.Length(); ++i) {
     if (!IsValidPutRequestMethod(aRequests[i], aRv)) {
-      break;
+      return nullptr;
     }
 
-    PCacheRequest* request = requests.AppendElement();
-    ToPCacheRequest(*request, aRequests[i], ReadBody, ExpandReferrer, aRv);
+    requests.Add(aRequests[i], ReadBody, ExpandReferrer, aRv);
     if (aRv.Failed()) {
-      break;
+      return nullptr;
     }
   }
 
-  if (!aRv.Failed()) {
-    RequestId requestId = AddRequestPromise(promise, aRv);
-    unused << mActor->SendAddAll(requestId, requests);
-  }
+  RequestId requestId = AddRequestPromise(promise, aRv);
 
-  for (uint32_t i = 0; i < requests.Length(); ++i) {
-    CleanupChildFds(requests[i].body());
-  }
-
-  if (aRv.Failed()) {
-    return nullptr;
-  }
+  unused << mActor->SendAddAll(requestId, requests.SendAsRequestList());
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::Put(const RequestOrUSVString& aRequest, Response& aResponse,
            ErrorResult& aRv)
 {
@@ -234,41 +216,32 @@ Cache::Put(const RequestOrUSVString& aRe
     return nullptr;
   }
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
-  CacheRequestResponse put;
+  AutoChildRequestResponse put(this);
 
-  // Be careful not to early exist after this point to avoid leaking
-  // file descriptor resources from stream serialization.
-
-  ToPCacheRequest(put.request(), aRequest, ReadBody, PassThroughReferrer, aRv);
-
-  put.response().body() = void_t();
-  if (!aRv.Failed()) {
-    ToPCacheResponse(put.response(), aResponse, aRv);
-  }
-
-  if (!aRv.Failed()) {
-    RequestId requestId = AddRequestPromise(promise, aRv);
-
-    unused << mActor->SendPut(requestId, put);
-  }
-
-  CleanupChildFds(put.request().body());
-  CleanupChildFds(put.response().body());
-
+  put.Add(aRequest, ReadBody, PassThroughReferrer, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
+  put.Add(aResponse, aRv);
+  if (aRv.Failed()) {
+    return nullptr;
+  }
+
+  RequestId requestId = AddRequestPromise(promise, aRv);
+
+  unused << mActor->SendPut(requestId, put.SendAsRequestResponse());
+
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::Delete(const RequestOrUSVString& aRequest,
               const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -3,16 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheParent.h"
 
 #include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
+#include "mozilla/dom/cache/AutoUtils.h"
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/SavedTypes.h"
 #include "mozilla/dom/cache/StreamList.h"
 #include "mozilla/ipc/InputStreamUtils.h"
 #include "mozilla/ipc/PBackgroundParent.h"
 #include "mozilla/ipc/FileDescriptorSetParent.h"
 #include "mozilla/ipc/PFileDescriptorSetParent.h"
@@ -145,71 +146,44 @@ CacheParent::RecvKeys(const RequestId& a
   return true;
 }
 
 void
 CacheParent::OnCacheMatch(RequestId aRequestId, nsresult aRv,
                           const SavedResponse* aSavedResponse,
                           StreamList* aStreamList)
 {
-  PCacheResponseOrVoid responseOrVoid;
+  AutoParentResponseOrVoid response(Manager());
 
   // no match
   if (NS_FAILED(aRv) || !aSavedResponse || !aStreamList) {
-    responseOrVoid = void_t();
-    unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
+    unused << SendMatchResponse(aRequestId, aRv,
+                                response.SendAsResponseOrVoid());
     return;
   }
 
-  // match without body data to stream
-  if (!aSavedResponse->mHasBodyId) {
-    responseOrVoid = aSavedResponse->mValue;
-    responseOrVoid.get_PCacheResponse().body() = void_t();
-    unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
-    return;
+  if (aSavedResponse) {
+    response.Add(*aSavedResponse, aStreamList);
   }
 
-  PCacheReadStream readStream;
-  SerializeReadStream(nullptr, aSavedResponse->mBodyId, aStreamList,
-                      &readStream);
-
-  responseOrVoid = aSavedResponse->mValue;
-  responseOrVoid.get_PCacheResponse().body() = readStream;
-
-  unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
+  unused << SendMatchResponse(aRequestId, aRv, response.SendAsResponseOrVoid());
 }
 
 void
 CacheParent::OnCacheMatchAll(RequestId aRequestId, nsresult aRv,
                              const nsTArray<SavedResponse>& aSavedResponses,
                              StreamList* aStreamList)
 {
-  CacheStreamControlParent* streamControl = nullptr;
-
-  // Allocates ~4k on the stack
-  nsAutoTArray<PCacheResponse, 32> responses;
-  responses.SetCapacity(aSavedResponses.Length());
+  AutoParentResponseList responses(Manager(), aSavedResponses.Length());
 
   for (uint32_t i = 0; i < aSavedResponses.Length(); ++i) {
-    PCacheResponse* res = responses.AppendElement();
-    *res = aSavedResponses[i].mValue;
-
-    if (!aSavedResponses[i].mHasBodyId) {
-      res->body() = void_t();
-      continue;
-    }
-
-    PCacheReadStream readStream;
-    streamControl =
-      SerializeReadStream(streamControl, aSavedResponses[i].mBodyId,
-                          aStreamList, &readStream);
-    res->body() = readStream;
+    responses.Add(aSavedResponses[i], aStreamList);
   }
 
-  unused << SendMatchAllResponse(aRequestId, aRv, responses);
+  unused << SendMatchAllResponse(aRequestId, aRv, responses.SendAsResponseList());
 }
 
 void
 CacheParent::OnCachePutAll(RequestId aRequestId, nsresult aRv)
 {
   unused << SendPutResponse(aRequestId, aRv);
 }
 
@@ -219,77 +193,33 @@ CacheParent::OnCacheDelete(RequestId aRe
   unused << SendDeleteResponse(aRequestId, aRv, aSuccess);
 }
 
 void
 CacheParent::OnCacheKeys(RequestId aRequestId, nsresult aRv,
                          const nsTArray<SavedRequest>& aSavedRequests,
                          StreamList* aStreamList)
 {
-  CacheStreamControlParent* streamControl = nullptr;
-
-  // Allocates ~5k on the stack
-  nsAutoTArray<PCacheRequest, 32> requests;
-  requests.SetCapacity(aSavedRequests.Length());
+  AutoParentRequestList requests(Manager(), aSavedRequests.Length());
 
   for (uint32_t i = 0; i < aSavedRequests.Length(); ++i) {
-    PCacheRequest* req = requests.AppendElement();
-    *req = aSavedRequests[i].mValue;
-
-    if (!aSavedRequests[i].mHasBodyId) {
-      req->body() = void_t();
-      continue;
-    }
-
-    PCacheReadStream readStream;
-    streamControl =
-      SerializeReadStream(streamControl, aSavedRequests[i].mBodyId,
-                          aStreamList, &readStream);
-    req->body() = readStream;
+    requests.Add(aSavedRequests[i], aStreamList);
   }
 
-  unused << SendKeysResponse(aRequestId, aRv, requests);
+  unused << SendKeysResponse(aRequestId, aRv, requests.SendAsRequestList());
 }
 
 void
 CacheParent::OnFetchPut(FetchPut* aFetchPut, RequestId aRequestId, nsresult aRv)
 {
   aFetchPut->ClearListener();
   mFetchPutList.RemoveElement(aFetchPut);
   unused << SendAddAllResponse(aRequestId, aRv);
 }
 
-CacheStreamControlParent*
-CacheParent::SerializeReadStream(CacheStreamControlParent *aStreamControl,
-                                 const nsID& aId,
-                                 StreamList* aStreamList,
-                                 PCacheReadStream* aReadStreamOut)
-{
-  MOZ_ASSERT(aStreamList);
-  MOZ_ASSERT(aReadStreamOut);
-
-  nsCOMPtr<nsIInputStream> stream = aStreamList->Extract(aId);
-  MOZ_ASSERT(stream);
-
-  if (!aStreamControl) {
-    aStreamControl = new CacheStreamControlParent();
-    DebugOnly<PCacheStreamControlParent*> actor =
-      Manager()->SendPCacheStreamControlConstructor(aStreamControl);
-    MOZ_ASSERT(aStreamControl == actor);
-  }
-
-  aStreamList->SetStreamControl(aStreamControl);
-
-  nsRefPtr<ReadStream> readStream = ReadStream::Create(aStreamControl,
-                                                       aId, stream);
-  readStream->Serialize(aReadStreamOut);
-
-  return aStreamControl;
-}
-
 already_AddRefed<nsIInputStream>
 CacheParent::DeserializeCacheStream(const PCacheReadStreamOrVoid& aStreamOrVoid)
 {
   if (aStreamOrVoid.type() == PCacheReadStreamOrVoid::Tvoid_t) {
     return nullptr;
   }
 
   const PCacheReadStream& readStream = aStreamOrVoid.get_PCacheReadStream();
diff --git a/dom/cache/CacheParent.h b/dom/cache/CacheParent.h
--- a/dom/cache/CacheParent.h
+++ b/dom/cache/CacheParent.h
@@ -66,21 +66,16 @@ public:
                            const nsTArray<SavedRequest>& aSavedRequests,
                            StreamList* aStreamList) MOZ_OVERRIDE;
 
   // FetchPut::Listener methods
   virtual void OnFetchPut(FetchPut* aFetchPut, RequestId aRequestId,
                           nsresult aRv) MOZ_OVERRIDE;
 
 private:
-  CacheStreamControlParent*
-  SerializeReadStream(CacheStreamControlParent *aStreamControl, const nsID& aId,
-                      StreamList* aStreamList,
-                      PCacheReadStream* aReadStreamOut);
-
   already_AddRefed<nsIInputStream>
   DeserializeCacheStream(const PCacheReadStreamOrVoid& aStreamOrVoid);
 
   nsRefPtr<cache::Manager> mManager;
   const CacheId mCacheId;
   nsTArray<nsRefPtr<FetchPut>> mFetchPutList;
 };
 
diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -2,16 +2,17 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStorageParent.h"
 
 #include "mozilla/dom/ContentParent.h"
+#include "mozilla/dom/cache/AutoUtils.h"
 #include "mozilla/dom/cache/CacheParent.h"
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 #include "mozilla/dom/cache/Manager.h"
 #include "mozilla/dom/cache/ManagerId.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/SavedTypes.h"
 #include "mozilla/dom/cache/StreamList.h"
 #include "mozilla/ipc/PBackgroundParent.h"
@@ -173,38 +174,29 @@ void
 CacheStorageParent::OnStorageMatch(RequestId aRequestId, nsresult aRv,
                                    const SavedResponse* aSavedResponse,
                                    StreamList* aStreamList)
 {
   PCacheResponseOrVoid responseOrVoid;
 
   ReleaseManager(aRequestId);
 
+  AutoParentResponseOrVoid response(Manager());
+
   // no match
   if (NS_FAILED(aRv) || !aSavedResponse) {
-    responseOrVoid = void_t();
-    unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
+    unused << SendMatchResponse(aRequestId, aRv, response.SendAsResponseOrVoid());
     return;
   }
 
-  // match without body data to stream
-  if (!aSavedResponse->mHasBodyId) {
-    responseOrVoid = aSavedResponse->mValue;
-    unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
-    return;
+  if (aSavedResponse) {
+    response.Add(*aSavedResponse, aStreamList);
   }
 
-  PCacheReadStream readStream;
-  SerializeReadStream(nullptr, aSavedResponse->mBodyId, aStreamList,
-                      &readStream);
-
-  responseOrVoid = aSavedResponse->mValue;
-  responseOrVoid.get_PCacheResponse().body() = readStream;
-
-  unused << SendMatchResponse(aRequestId, aRv, responseOrVoid);
+  unused << SendMatchResponse(aRequestId, aRv, response.SendAsResponseOrVoid());
 }
 
 void
 CacheStorageParent::OnStorageHas(RequestId aRequestId, nsresult aRv,
                                  bool aCacheFound)
 {
   ReleaseManager(aRequestId);
   unused << SendHasResponse(aRequestId, aRv, aCacheFound);
@@ -241,44 +233,16 @@ CacheStorageParent::OnStorageDelete(Requ
 void
 CacheStorageParent::OnStorageKeys(RequestId aRequestId, nsresult aRv,
                                   const nsTArray<nsString>& aKeys)
 {
   ReleaseManager(aRequestId);
   unused << SendKeysResponse(aRequestId, aRv, aKeys);
 }
 
-CacheStreamControlParent*
-CacheStorageParent::SerializeReadStream(CacheStreamControlParent *aStreamControl,
-                                        const nsID& aId,
-                                        StreamList* aStreamList,
-                                        PCacheReadStream* aReadStreamOut)
-{
-  MOZ_ASSERT(aStreamList);
-  MOZ_ASSERT(aReadStreamOut);
-
-  nsCOMPtr<nsIInputStream> stream = aStreamList->Extract(aId);
-  MOZ_ASSERT(stream);
-
-  if (!aStreamControl) {
-    aStreamControl = new CacheStreamControlParent();
-    DebugOnly<PCacheStreamControlParent*> actor =
-      Manager()->SendPCacheStreamControlConstructor(aStreamControl);
-    MOZ_ASSERT(aStreamControl == actor);
-  }
-
-  aStreamList->SetStreamControl(aStreamControl);
-
-  nsRefPtr<ReadStream> readStream = ReadStream::Create(aStreamControl,
-                                                       aId, stream);
-  readStream->Serialize(aReadStreamOut);
-
-  return aStreamControl;
-}
-
 void
 CacheStorageParent::RetryPendingRequests()
 {
   for (uint32_t i = 0; i < mPendingRequests.Length(); ++i) {
     Entry& entry = mPendingRequests[i];
     switch(entry.mOp) {
       case OP_MATCH:
         RecvMatch(entry.mRequestId, entry.mRequest, entry.mParams);
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -34,17 +34,17 @@ class PCacheReadStream;
 class PCacheReadStreamOrVoid;
 class PCacheRequest;
 class PCacheRequestOrVoid;
 class PCacheResponse;
 class PCacheStreamControlChild;
 
 class TypeUtils
 {
-protected:
+public:
   enum BodyAction
   {
     IgnoreBody,
     ReadBody
   };
 
   enum ReferrerAction
   {
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -1,16 +1,17 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXPORTS.mozilla.dom.cache += [
     'Action.h',
+    'AutoUtils.h',
     'Cache.h',
     'CacheChild.h',
     'CacheParent.h',
     'CacheStorage.h',
     'CacheStorageChild.h',
     'CacheStorageParent.h',
     'CacheStreamControlChild.h',
     'CacheStreamControlParent.h',
@@ -29,16 +30,17 @@ EXPORTS.mozilla.dom.cache += [
     'ShutdownObserver.h',
     'StreamList.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
 SOURCES += [
     'Action.cpp',
+    'AutoUtils.cpp',
     'Cache.cpp',
     'CacheChild.cpp',
     'CacheParent.cpp',
     'CacheStorage.cpp',
     'CacheStorageChild.cpp',
     'CacheStorageParent.cpp',
     'CacheStreamControlChild.cpp',
     'CacheStreamControlParent.cpp',
