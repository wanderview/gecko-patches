# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  c7a3ae9f39a5b4fb07460227f96debfecc3c0e24
Bug 1299887 P2 Cycle collect service worker KeepAliveHandler::InternalHandler. r=bz

diff --git a/dom/workers/ServiceWorkerPrivate.cpp b/dom/workers/ServiceWorkerPrivate.cpp
--- a/dom/workers/ServiceWorkerPrivate.cpp
+++ b/dom/workers/ServiceWorkerPrivate.cpp
@@ -341,17 +341,18 @@ class KeepAliveHandler final
 
       if (NS_WARN_IF(!ref->UseWorkerHolder())) {
         return nullptr;
       }
 
       return ref.forget();
     }
 
-    NS_DECL_ISUPPORTS
+    NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+    NS_DECL_CYCLE_COLLECTION_CLASS(KeepAliveHandler::InternalHandler)
   };
 
   // This is really just a wrapper class to keep the InternalHandler
   // private.  We don't want any code to accidentally call
   // Promise::AppendNativeHandler() without also referencing the promise.
   // Therefore we force all code through the static CreateAndAttachToPromise()
   // and use the private InternalHandler object.
   KeepAliveHandler() = delete;
@@ -382,17 +383,24 @@ public:
 
     // This then creates a strong ref cycle between the promise and the
     // handler.  The cycle is broken when the Promise is fulfilled or
     // the worker thread is Terminated.
     aPromise->AppendNativeHandler(handler);
   }
 };
 
-NS_IMPL_ISUPPORTS0(KeepAliveHandler::InternalHandler)
+NS_IMPL_CYCLE_COLLECTION(KeepAliveHandler::InternalHandler, mPromise)
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(KeepAliveHandler::InternalHandler)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(KeepAliveHandler::InternalHandler)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(KeepAliveHandler::InternalHandler)
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
 
 class RegistrationUpdateRunnable : public Runnable
 {
   nsMainThreadPtrHandle<ServiceWorkerRegistrationInfo> mRegistration;
   const bool mNeedTimeCheck;
 
 public:
   RegistrationUpdateRunnable(nsMainThreadPtrHandle<ServiceWorkerRegistrationInfo>& aRegistration,
