# HG changeset patch
# Parent 3189971d0bf69cddae93cbe31cc86a2ccc3a007a
# User Ben Kelly <ben@wanderview.com>
Hack PBackground to understand blobs so stream serialization compiles.


diff --git a/dom/ipc/PBlob.ipdl b/dom/ipc/PBlob.ipdl
--- a/dom/ipc/PBlob.ipdl
+++ b/dom/ipc/PBlob.ipdl
@@ -1,12 +1,13 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+include protocol PBackground;
 include protocol PBlobStream;
 include protocol PContent;
 include protocol PContentBridge;
 
 include DOMTypes;
 
 namespace mozilla {
 namespace dom {
@@ -14,17 +15,17 @@ namespace dom {
 union ResolveMysteryParams
 {
   NormalBlobConstructorParams;
   FileBlobConstructorParams;
 };
 
 protocol PBlob
 {
-  manager PContent or PContentBridge;
+  manager PContent or PContentBridge or PBackground;
   manages PBlobStream;
 
 both:
   __delete__();
 
   PBlobStream();
 
   ResolveMystery(ResolveMysteryParams params);
diff --git a/ipc/glue/BackgroundChildImpl.cpp b/ipc/glue/BackgroundChildImpl.cpp
--- a/ipc/glue/BackgroundChildImpl.cpp
+++ b/ipc/glue/BackgroundChildImpl.cpp
@@ -94,16 +94,30 @@ bool
 BackgroundChildImpl::DeallocPBackgroundTestChild(PBackgroundTestChild* aActor)
 {
   MOZ_ASSERT(aActor);
 
   delete static_cast<TestChild*>(aActor);
   return true;
 }
 
+PBackgroundChild::PBlobChild*
+BackgroundChildImpl::AllocPBlobChild(const BlobConstructorParams&)
+{
+  MOZ_CRASH("merge jamun to get blobs on pbackground");
+  return nullptr;
+}
+
+bool
+BackgroundChildImpl::DeallocPBlobChild(PBackgroundChild::PBlobChild*)
+{
+  MOZ_CRASH("merge jamun to get blobs on pbackground");
+  return false;
+}
+
 PCacheStorageChild*
 BackgroundChildImpl::AllocPCacheStorageChild(const Namespace& aNamespace,
                                              const nsCString& aOrigin,
                                              const nsCString& aBaseDomain)
 {
   MOZ_CRASH("CacheStorageChild actor must be provided to PBackground manager");
   return nullptr;
 }
diff --git a/ipc/glue/BackgroundChildImpl.h b/ipc/glue/BackgroundChildImpl.h
--- a/ipc/glue/BackgroundChildImpl.h
+++ b/ipc/glue/BackgroundChildImpl.h
@@ -42,16 +42,22 @@ protected:
   ActorDestroy(ActorDestroyReason aWhy) MOZ_OVERRIDE;
 
   virtual PBackgroundTestChild*
   AllocPBackgroundTestChild(const nsCString& aTestArg) MOZ_OVERRIDE;
 
   virtual bool
   DeallocPBackgroundTestChild(PBackgroundTestChild* aActor) MOZ_OVERRIDE;
 
+  virtual mozilla::ipc::PBackgroundChild::PBlobChild*
+  AllocPBlobChild(const BlobConstructorParams&) MOZ_OVERRIDE;
+
+  virtual bool
+  DeallocPBlobChild(mozilla::ipc::PBackgroundChild::PBlobChild*) MOZ_OVERRIDE;
+
   virtual mozilla::dom::cache::PCacheStorageChild*
   AllocPCacheStorageChild(const Namespace& aNamespace,
                           const nsCString& aOrigin,
                           const nsCString& aBaseDomain) MOZ_OVERRIDE;
 
   virtual bool
   DeallocPCacheStorageChild(mozilla::dom::cache::PCacheStorageChild* aActor) MOZ_OVERRIDE;
 
diff --git a/ipc/glue/BackgroundParentImpl.cpp b/ipc/glue/BackgroundParentImpl.cpp
--- a/ipc/glue/BackgroundParentImpl.cpp
+++ b/ipc/glue/BackgroundParentImpl.cpp
@@ -111,16 +111,30 @@ BackgroundParentImpl::DeallocPBackground
   AssertIsInMainProcess();
   AssertIsOnBackgroundThread();
   MOZ_ASSERT(aActor);
 
   delete static_cast<TestParent*>(aActor);
   return true;
 }
 
+PBackgroundParent::PBlobParent*
+BackgroundParentImpl::AllocPBlobParent(const BlobConstructorParams&)
+{
+  MOZ_CRASH("merge jamun to get blobs on pbackground");
+  return nullptr;
+}
+
+bool
+BackgroundParentImpl::DeallocPBlobParent(PBackgroundParent::PBlobParent*)
+{
+  MOZ_CRASH("merge jamun to get blobs on pbackground");
+  return false;
+}
+
 PCacheStorageParent*
 BackgroundParentImpl::AllocPCacheStorageParent(const Namespace& aNamespace,
                                                const nsCString& aOrigin,
                                                const nsCString& aBaseDomain)
 {
   return new CacheStorageParent(aNamespace, aOrigin, aBaseDomain);
 }
 
diff --git a/ipc/glue/BackgroundParentImpl.h b/ipc/glue/BackgroundParentImpl.h
--- a/ipc/glue/BackgroundParentImpl.h
+++ b/ipc/glue/BackgroundParentImpl.h
@@ -5,16 +5,17 @@
 #ifndef mozilla_ipc_backgroundparentimpl_h__
 #define mozilla_ipc_backgroundparentimpl_h__
 
 #include "mozilla/Attributes.h"
 #include "mozilla/ipc/PBackgroundParent.h"
 
 namespace mozilla {
 namespace dom {
+  class BlobConstructorParams;
 namespace cache {
   class PCacheParent;
   class PCacheStorageParent;
 }
 }
 namespace ipc {
 
 // Instances of this class should never be created directly. This class is meant
@@ -33,16 +34,22 @@ protected:
 
   virtual bool
   RecvPBackgroundTestConstructor(PBackgroundTestParent* aActor,
                                  const nsCString& aTestArg) MOZ_OVERRIDE;
 
   virtual bool
   DeallocPBackgroundTestParent(PBackgroundTestParent* aActor) MOZ_OVERRIDE;
 
+  virtual mozilla::ipc::PBackgroundParent::PBlobParent*
+  AllocPBlobParent(const BlobConstructorParams&) MOZ_OVERRIDE;
+
+  virtual bool
+  DeallocPBlobParent(mozilla::ipc::PBackgroundParent::PBlobParent*) MOZ_OVERRIDE;
+
   virtual mozilla::dom::cache::PCacheStorageParent*
   AllocPCacheStorageParent(const Namespace& aNamespace,
                            const nsCString& aOrigin,
                            const nsCString& aBaseDomain) MOZ_OVERRIDE;
 
   virtual bool
   DeallocPCacheStorageParent(mozilla::dom::cache::PCacheStorageParent* aActor) MOZ_OVERRIDE;
 
diff --git a/ipc/glue/PBackground.ipdl b/ipc/glue/PBackground.ipdl
--- a/ipc/glue/PBackground.ipdl
+++ b/ipc/glue/PBackground.ipdl
@@ -1,35 +1,40 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 include protocol PBackgroundTest;
+include protocol PBlob;
 include protocol PCacheStorage;
 include protocol PCache;
 include protocol PMessagePort;
+include DOMTypes;
 
 using mozilla::dom::cache::Namespace from "mozilla/dom/cache/Types.h";
 
 namespace mozilla {
 namespace ipc {
 
 protocol PBackground
 {
   manages PBackgroundTest;
+  manages PBlob;
   manages PCacheStorage;
   manages PCache;
   manages PMessagePort;
 
 parent:
   // Only called at startup during mochitests to check the basic infrastructure.
   PBackgroundTest(nsCString testArg);
 
   PCacheStorage(Namespace namespaceEnum, nsCString origin, nsCString baseDomain);
 
   PMessagePort();
 
+  async PBlob(BlobConstructorParams params);
+
 child:
   PCache();
 };
 
 } // namespace ipc
 } // namespace mozilla
