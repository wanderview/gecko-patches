# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  351622bd120ed79ad9e9b70ec5a900ea7e7e6523
Bug 1451913 P2 Update websocket state on the inner window when rebinding. r=smaug

diff --git a/dom/websocket/WebSocket.cpp b/dom/websocket/WebSocket.cpp
--- a/dom/websocket/WebSocket.cpp
+++ b/dom/websocket/WebSocket.cpp
@@ -949,16 +949,40 @@ WebSocket::~WebSocket()
 }
 
 JSObject*
 WebSocket::WrapObject(JSContext* cx, JS::Handle<JSObject*> aGivenProto)
 {
   return WebSocketBinding::Wrap(cx, this, aGivenProto);
 }
 
+void
+WebSocket::BindToOwner(nsIGlobalObject* aNew)
+{
+  auto scopeExit = MakeScopeExit([&] {
+    DOMEventTargetHelper::BindToOwner(aNew);
+  });
+
+  // If we're disconnected, then there is no state to update.
+  if (!mImpl || mImpl->mDisconnectingOrDisconnected) {
+    return;
+  }
+
+  // Update state on the old window.
+  if (GetOwner()) {
+    GetOwner()->UpdateWebSocketCount(-1);
+  }
+
+  // Update state on the new window
+  nsCOMPtr<nsPIDOMWindowInner> newWindow = do_QueryInterface(aNew);
+  if (newWindow) {
+    newWindow->UpdateWebSocketCount(1);
+  }
+}
+
 //---------------------------------------------------------------------------
 // WebIDL
 //---------------------------------------------------------------------------
 
 // Constructor:
 already_AddRefed<WebSocket>
 WebSocket::Constructor(const GlobalObject& aGlobal,
                        const nsAString& aUrl,
diff --git a/dom/websocket/WebSocket.h b/dom/websocket/WebSocket.h
--- a/dom/websocket/WebSocket.h
+++ b/dom/websocket/WebSocket.h
@@ -60,16 +60,19 @@ public:
 
   virtual void DisconnectFromOwner() override;
 
   // nsWrapperCache
   nsPIDOMWindowInner* GetParentObject() { return GetOwner(); }
 
   virtual JSObject* WrapObject(JSContext* cx, JS::Handle<JSObject*> aGivenProto) override;
 
+  // DOMEventTargetHelper
+  void BindToOwner(nsIGlobalObject* aNew) override;
+
 public: // static helpers:
 
   // Determine if preferences allow WebSocket
   static bool PrefEnabled(JSContext* aCx = nullptr, JSObject* aGlobal = nullptr);
 
 public: // WebIDL interface:
 
   // Constructor:
