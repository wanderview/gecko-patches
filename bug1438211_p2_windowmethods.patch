# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  63d86ec465b37b54c4b851b165518cd06f8dc01c
Bug 1438211 P2 Implement nsGlobalWindowInner::GetOrCreateServiceWorkerRegistration() and associated methods. r=asuth

diff --git a/dom/base/nsGlobalWindowInner.cpp b/dom/base/nsGlobalWindowInner.cpp
--- a/dom/base/nsGlobalWindowInner.cpp
+++ b/dom/base/nsGlobalWindowInner.cpp
@@ -1096,16 +1096,19 @@ nsGlobalWindowInner::~nsGlobalWindowInne
   // separating the handling into CleanUp() and FreeInnerObjects.
   CleanUp();
 
   nsCOMPtr<nsIDeviceSensors> ac = do_GetService(NS_DEVICE_SENSORS_CONTRACTID);
   if (ac)
     ac->RemoveWindowAsListener(this);
 
   nsLayoutStatics::Release();
+
+  MOZ_ASSERT(mServiceWorkerList.IsEmpty());
+  MOZ_ASSERT(mServiceWorkerRegistrationList.IsEmpty());
 }
 
 void
 nsGlobalWindowInner::AddEventTargetObject(DOMEventTargetHelper* aObject)
 {
   mEventTargetObjects.PutEntry(aObject);
 }
 
@@ -6389,16 +6392,17 @@ nsGlobalWindowInner::GetOrCreateServiceW
   RefPtr<ServiceWorker> ref;
   for (auto sw : mServiceWorkerList) {
     if (sw->MatchesDescriptor(aDescriptor)) {
       ref = sw;
       return ref.forget();
     }
   }
   ref = ServiceWorker::Create(this, aDescriptor);
+  MOZ_ASSERT(mServiceWorkerList.Contains(ref));
   return ref.forget();
 }
 
 void
 nsGlobalWindowInner::AddServiceWorker(ServiceWorker* aServiceWorker)
 {
   MOZ_ASSERT(NS_IsMainThread());
   MOZ_DIAGNOSTIC_ASSERT(aServiceWorker);
@@ -6410,16 +6414,50 @@ void
 nsGlobalWindowInner::RemoveServiceWorker(ServiceWorker* aServiceWorker)
 {
   MOZ_ASSERT(NS_IsMainThread());
   MOZ_DIAGNOSTIC_ASSERT(aServiceWorker);
   MOZ_ASSERT(mServiceWorkerList.Contains(aServiceWorker));
   mServiceWorkerList.RemoveElement(aServiceWorker);
 }
 
+RefPtr<ServiceWorkerRegistration>
+nsGlobalWindowInner::GetOrCreateServiceWorkerRegistration(const ServiceWorkerRegistrationDescriptor& aDescriptor)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  RefPtr<ServiceWorkerRegistration> ref;
+  for (auto swr : mServiceWorkerRegistrationList) {
+    if (swr->MatchesDescriptor(aDescriptor)) {
+      ref = swr;
+      return ref.forget();
+    }
+  }
+  ref = ServiceWorkerRegistration::CreateForMainThread(this, aDescriptor);
+  MOZ_ASSERT(mServiceWorkerRegistrationList.Contains(ref));
+  return ref.forget();
+}
+
+void
+nsGlobalWindowInner::AddServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  MOZ_DIAGNOSTIC_ASSERT(aRegistration);
+  MOZ_ASSERT(!mServiceWorkerRegistrationList.Contains(aRegistration));
+  mServiceWorkerRegistrationList.AppendElement(aRegistration);
+}
+
+void
+nsGlobalWindowInner::RemoveServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration)
+{
+  MOZ_ASSERT(NS_IsMainThread());
+  MOZ_DIAGNOSTIC_ASSERT(aRegistration);
+  MOZ_ASSERT(mServiceWorkerRegistrationList.Contains(aRegistration));
+  mServiceWorkerRegistrationList.RemoveElement(aRegistration);
+}
+
 nsresult
 nsGlobalWindowInner::FireDelayedDOMEvents()
 {
   if (mApplicationCache) {
     static_cast<nsDOMOfflineResourceList*>(mApplicationCache.get())->FirePendingEvents();
   }
 
   // Fires an offline status event if the offline status has changed
diff --git a/dom/base/nsGlobalWindowInner.h b/dom/base/nsGlobalWindowInner.h
--- a/dom/base/nsGlobalWindowInner.h
+++ b/dom/base/nsGlobalWindowInner.h
@@ -354,16 +354,25 @@ public:
   GetOrCreateServiceWorker(const mozilla::dom::ServiceWorkerDescriptor& aDescriptor) override;
 
   virtual void
   AddServiceWorker(mozilla::dom::ServiceWorker* aServiceWorker) override;
 
   virtual void
   RemoveServiceWorker(mozilla::dom::ServiceWorker* aServiceWorker) override;
 
+  virtual RefPtr<mozilla::dom::ServiceWorkerRegistration>
+  GetOrCreateServiceWorkerRegistration(const mozilla::dom::ServiceWorkerRegistrationDescriptor& aDescriptor) override;
+
+  virtual void
+  AddServiceWorkerRegistration(mozilla::dom::ServiceWorkerRegistration* aRegistration) override;
+
+  virtual void
+  RemoveServiceWorkerRegistration(mozilla::dom::ServiceWorkerRegistration* aRegistration) override;
+
   void NoteCalledRegisterForServiceWorkerScope(const nsACString& aScope);
 
   virtual nsresult FireDelayedDOMEvents() override;
 
   virtual nsresult SetNewDocument(nsIDocument *aDocument,
                                   nsISupports *aState,
                                   bool aForceReuseInnerWindow) override;
 
@@ -1451,16 +1460,20 @@ protected:
   RefPtr<mozilla::dom::IntlUtils> mIntlUtils;
 
   mozilla::UniquePtr<mozilla::dom::ClientSource> mClientSource;
 
   // Weak references added by AddServiceWorker() and cleared by
   // RemoveServiceWorker() when the ServiceWorker is destroyed.
   nsTArray<mozilla::dom::ServiceWorker*> mServiceWorkerList;
 
+  // Weak references added by AddServiceWorkerRegistration() and cleared by
+  // RemoveServiceWorkerRegistration() when the object is destroyed.
+  nsTArray<mozilla::dom::ServiceWorkerRegistration*> mServiceWorkerRegistrationList;
+
   nsTArray<RefPtr<mozilla::dom::Promise>> mPendingPromises;
 
   static InnerWindowByIdTable* sInnerWindowsById;
 
   // Members in the mChromeFields member should only be used in chrome windows.
   // All accesses to this field should be guarded by a check of mIsChrome.
   struct ChromeFields {
     ChromeFields()
