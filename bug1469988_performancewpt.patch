# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  17967a3dbfe83d27f088c9ad4517b89604ab14c3
Bug 1469988 Fix performance-timeline.https.html to not timeout if bufferfull event is not fired in service worker. r=mrbkap

diff --git a/testing/web-platform/meta/service-workers/service-worker/performance-timeline.https.html.ini b/testing/web-platform/meta/service-workers/service-worker/performance-timeline.https.html.ini
--- a/testing/web-platform/meta/service-workers/service-worker/performance-timeline.https.html.ini
+++ b/testing/web-platform/meta/service-workers/service-worker/performance-timeline.https.html.ini
@@ -1,12 +1,5 @@
 prefs: [privacy.reduceTimerPrecision:false]
 [performance-timeline.https.html]
-  expected: TIMEOUT
   [Resource Timing]
-    expected: TIMEOUT
-
-  [Test Performance Timeline API in Service Worker]
-    expected: TIMEOUT
-
-  [empty service worker fetch event included in performance timings]
-    expected: NOTRUN
-
+    expected: FAIL
+    bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1432758
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/performance-timeline-worker.js b/testing/web-platform/tests/service-workers/service-worker/resources/performance-timeline-worker.js
--- a/testing/web-platform/tests/service-workers/service-worker/resources/performance-timeline-worker.js
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/performance-timeline-worker.js
@@ -39,20 +39,30 @@ promise_test(function(test) {
           assert_equals(performance.getEntriesByType('resource').length, expectedResources.length);
           for (var i = 0; i < expectedResources.length; i++) {
               var entry = performance.getEntriesByType('resource')[i];
               assert_true(entry.name.endsWith(expectedResources[i]));
               assert_equals(entry.workerStart, 0);
               assert_greater_than(entry.startTime, 0);
               assert_greater_than(entry.responseEnd, entry.startTime);
           }
-          return new Promise(function(resolve) {
-              performance.onresourcetimingbufferfull = resolve;
+          return Promise.race([
+            new Promise(function(resolve) {
+              performance.onresourcetimingbufferfull = _ => {
+                resolve('bufferfull');
+              }
               performance.setResourceTimingBufferSize(expectedResources.length);
-            });
+            }),
+
+            // Race the bufferfull event against another fetch.  We should get the
+            // event before this completes.  This allows us to detect a failure
+            // to dispatch the event without timing out the entire test.
+            fetch('dummy.txt').then(resp => resp.text())
+          ]);
         })
-      .then(function() {
+      .then(function(result) {
+          assert_equals(result, 'bufferfull');
           performance.clearResourceTimings();
           assert_equals(performance.getEntriesByType('resource').length, 0);
         })
   }, 'Resource Timing');
 
 done();
