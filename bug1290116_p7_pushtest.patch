# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  b06803085462c7d3c4c8ed3eb86aeb2a3c5ac288
Bug 1290116 P7 Fixed activation races in push service worker tests. r=kitcambridge

diff --git a/dom/push/test/test_data.html b/dom/push/test/test_data.html
--- a/dom/push/test/test_data.html
+++ b/dom/push/test/test_data.html
@@ -42,16 +42,17 @@ http://creativecommons.org/licenses/publ
 
   var registration;
   add_task(function* start() {
     yield setupPrefsAndMockSocket(mockSocket);
     yield setPushPermission(true);
 
     var url = "worker.js" + "?" + (Math.random());
     registration = yield navigator.serviceWorker.register(url, {scope: "."});
+    yield waitForActive(registration);
   });
 
   var controlledFrame;
   add_task(function* createControlledIFrame() {
     controlledFrame = yield injectControlledFrame();
   });
 
   var pushSubscription;
diff --git a/dom/push/test/test_error_reporting.html b/dom/push/test/test_error_reporting.html
--- a/dom/push/test/test_error_reporting.html
+++ b/dom/push/test/test_error_reporting.html
@@ -40,16 +40,17 @@ http://creativecommons.org/licenses/publ
         reporters.delete(messageId);
         resolve(reason);
       },
     });
     yield setPushPermission(true);
 
     var url = "error_worker.js" + "?" + (Math.random());
     registration = yield navigator.serviceWorker.register(url, {scope: "."});
+    yield waitForActive(registration);
   });
 
   var controlledFrame;
   add_task(function* createControlledIFrame() {
     controlledFrame = yield injectControlledFrame();
   });
 
   var idCounter = 1;
diff --git a/dom/push/test/test_has_permissions.html b/dom/push/test/test_has_permissions.html
--- a/dom/push/test/test_has_permissions.html
+++ b/dom/push/test/test_has_permissions.html
@@ -5,16 +5,17 @@ Bug 1038811: Push tests.
 
 Any copyright is dedicated to the Public Domain.
 http://creativecommons.org/licenses/publicdomain/
 
 -->
 <head>
   <title>Test for Bug 1038811</title>
   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="/tests/dom/push/test/test_utils.js"></script>
   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
   <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
 </head>
 <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1038811">Mozilla Bug 1038811</a>
 <p id="display"></p>
 <div id="content" style="display: none">
 
 </div>
@@ -24,17 +25,20 @@ http://creativecommons.org/licenses/publ
 <script class="testbody" type="text/javascript">
 
   function debug(str) {
   // console.log(str + "\n");
   }
 
   function start() {
     return navigator.serviceWorker.register("worker.js" + "?" + (Math.random()), {scope: "."})
-    .then((swr) => registration = swr);
+    .then((swr) => {
+      registration = swr;
+      return waitForActive(registration);
+    });
   }
 
   function unregister() {
     return registration.unregister().then(function(result) {
       ok(result, "Unregister should return true.");
     }, function(e) {
       dump("Unregistering the SW failed with " + e + "\n");
     });
diff --git a/dom/push/test/test_multiple_register.html b/dom/push/test/test_multiple_register.html
--- a/dom/push/test/test_multiple_register.html
+++ b/dom/push/test/test_multiple_register.html
@@ -25,17 +25,20 @@ http://creativecommons.org/licenses/publ
 <script class="testbody" type="text/javascript">
 
   function debug(str) {
   //  console.log(str + "\n");
   }
 
   function start() {
     return navigator.serviceWorker.register("worker.js" + "?" + (Math.random()), {scope: "."})
-    .then((swr) => registration = swr);
+    .then((swr) => {
+      registration = swr
+      return waitForActive(registration);
+    });
   }
 
   function unregister() {
     return registration.unregister().then(function(result) {
       ok(result, "Unregister should return true.");
     }, function(e) {
       dump("Unregistering the SW failed with " + e + "\n");
     });
diff --git a/dom/push/test/test_multiple_register_different_scope.html b/dom/push/test/test_multiple_register_different_scope.html
--- a/dom/push/test/test_multiple_register_different_scope.html
+++ b/dom/push/test/test_multiple_register_different_scope.html
@@ -27,17 +27,18 @@ http://creativecommons.org/licenses/publ
   var scopeA = "./a/";
   var scopeB = "./b/";
 
   function debug(str) {
   //  console.log(str + "\n");
   }
 
   function registerServiceWorker(scope) {
-    return navigator.serviceWorker.register("worker.js" + "?" + (Math.random()), {scope: scope});
+    return navigator.serviceWorker.register("worker.js" + "?" + (Math.random()), {scope: scope})
+      .then(swr => waitForActive(swr));
   }
 
   function unregister(swr) {
     return swr.unregister()
       .then(result => {
         ok(result, "Unregister should return true.");
       }, err => {
         ok(false,"Unregistering the SW failed with " + err + "\n");
diff --git a/dom/push/test/test_permissions.html b/dom/push/test/test_permissions.html
--- a/dom/push/test/test_permissions.html
+++ b/dom/push/test/test_permissions.html
@@ -31,16 +31,17 @@ http://creativecommons.org/licenses/publ
 
   var registration;
   add_task(function* start() {
     yield setupPrefsAndMockSocket(new MockWebSocket());
     yield setPushPermission(false);
 
     var url = "worker.js" + "?" + Math.random();
     registration = yield navigator.serviceWorker.register(url, {scope: "."});
+    yield waitForActive(registration);
   });
 
   add_task(function* denySubscribe() {
     try {
       yield registration.pushManager.subscribe();
       ok(false, "subscribe() should fail because no permission for push");
     } catch (error) {
       ok(error instanceof DOMException, "Wrong exception type");
diff --git a/dom/push/test/test_register.html b/dom/push/test/test_register.html
--- a/dom/push/test/test_register.html
+++ b/dom/push/test/test_register.html
@@ -46,16 +46,17 @@ http://creativecommons.org/licenses/publ
 
   var registration;
   add_task(function* start() {
     yield setupPrefsAndMockSocket(mockSocket);
     yield setPushPermission(true);
 
     var url = "worker.js" + "?" + (Math.random());
     registration = yield navigator.serviceWorker.register(url, {scope: "."});
+    yield waitForActive(registration);
   });
 
   var controlledFrame;
   add_task(function* createControlledIFrame() {
     controlledFrame = yield injectControlledFrame();
   });
 
   add_task(function* checkPermissionState() {
diff --git a/dom/push/test/test_register_key.html b/dom/push/test/test_register_key.html
--- a/dom/push/test/test_register_key.html
+++ b/dom/push/test/test_register_key.html
@@ -65,16 +65,17 @@ http://creativecommons.org/licenses/publ
         };
       },
     });
     yield setPushPermission(true);
     testKey = yield generateKey();
 
     var url = "worker.js" + "?" + (Math.random());
     registration = yield navigator.serviceWorker.register(url, {scope: "."});
+    yield waitForActive(registration);
   });
 
   var controlledFrame;
   add_task(function* createControlledIFrame() {
     controlledFrame = yield injectControlledFrame();
   });
 
   add_task(function* emptyKey() {
diff --git a/dom/push/test/test_serviceworker_lifetime.html b/dom/push/test/test_serviceworker_lifetime.html
--- a/dom/push/test/test_serviceworker_lifetime.html
+++ b/dom/push/test/test_serviceworker_lifetime.html
@@ -38,17 +38,17 @@
 <script class="testbody" type="text/javascript">
 
   function start() {
     return navigator.serviceWorker.register("lifetime_worker.js", {scope: "./"})
     .then((swr) => ({registration: swr}));
   }
 
   function waitForActiveServiceWorker(ctx) {
-    return navigator.serviceWorker.ready.then(function(result) {
+    return waitForActive(ctx.registration).then(function(result) {
       ok(ctx.registration.active, "Service Worker is active");
       return ctx;
     });
   }
 
   function unregister(ctx) {
     return ctx.registration.unregister().then(function(result) {
       ok(result, "Unregister should return true.");
diff --git a/dom/push/test/test_subscription_change.html b/dom/push/test/test_subscription_change.html
--- a/dom/push/test/test_subscription_change.html
+++ b/dom/push/test/test_subscription_change.html
@@ -27,16 +27,17 @@ http://creativecommons.org/licenses/publ
 
   var registration;
   add_task(function* start() {
     yield setupPrefsAndMockSocket(new MockWebSocket());
     yield setPushPermission(true);
 
     var url = "worker.js" + "?" + (Math.random());
     registration = yield navigator.serviceWorker.register(url, {scope: "."});
+    yield waitForActive(registration);
   });
 
   var controlledFrame;
   add_task(function* createControlledIFrame() {
     controlledFrame = yield injectControlledFrame();
   });
 
   add_task(function* togglePermission() {
diff --git a/dom/push/test/test_try_registering_offline_disabled.html b/dom/push/test/test_try_registering_offline_disabled.html
--- a/dom/push/test/test_try_registering_offline_disabled.html
+++ b/dom/push/test/test_try_registering_offline_disabled.html
@@ -24,17 +24,18 @@ http://creativecommons.org/licenses/publ
 
 <script class="testbody" type="text/javascript">
 
   function debug(str) {
   //  console.log(str + "\n");
   }
 
   function registerServiceWorker() {
-    return navigator.serviceWorker.register("worker.js" + "?" + (Math.random()), {scope: "."});
+    return navigator.serviceWorker.register("worker.js" + "?" + (Math.random()), {scope: "."})
+      .then(swr => waitForActive(swr));
   }
 
   function unregister(swr) {
     return swr.unregister()
       .then(result => {
         ok(result, "Unregister should return true.");
       }, err => {
         dump("Unregistering the SW failed with " + err + "\n");
diff --git a/dom/push/test/test_unregister.html b/dom/push/test/test_unregister.html
--- a/dom/push/test/test_unregister.html
+++ b/dom/push/test/test_unregister.html
@@ -31,16 +31,17 @@ http://creativecommons.org/licenses/publ
 
   var registration;
   add_task(function* start() {
     yield setupPrefsAndMockSocket(new MockWebSocket());
     yield setPushPermission(true);
 
     registration = yield navigator.serviceWorker.register(
       generateURL(), {scope: "."});
+    yield waitForActive(registration);
   });
 
   var pushSubscription;
   add_task(function* setupPushNotification() {
     pushSubscription = yield registration.pushManager.subscribe();
     ok(pushSubscription, "successful registered for push notification");
   });
 
@@ -58,16 +59,17 @@ http://creativecommons.org/licenses/publ
     pushSubscription = yield registration.pushManager.subscribe();
     ok(pushSubscription, "Should create a new push subscription");
 
     var result = yield registration.unregister();
     ok(result, "Should unregister the service worker");
 
     registration = yield navigator.serviceWorker.register(
       generateURL(), {scope: "."});
+    yield waitForActive(registration);
     var pushSubscription = yield registration.pushManager.getSubscription();
     ok(!pushSubscription,
       "Unregistering a service worker should drop its subscription");
   });
 
   add_task(function* unregister() {
     var result = yield registration.unregister();
     ok(result, "Unregister should return true.");
diff --git a/dom/push/test/test_utils.js b/dom/push/test/test_utils.js
--- a/dom/push/test/test_utils.js
+++ b/dom/push/test/test_utils.js
@@ -222,8 +222,24 @@ function sendRequestToWorker(request) {
       var channel = new MessageChannel();
       channel.port1.onmessage = e => {
         (e.data.error ? reject : resolve)(e.data);
       };
       registration.active.postMessage(request, [channel.port2]);
     });
   });
 }
+
+function waitForActive(swr) {
+  let sw = swr.installing || swr.waiting || swr.active;
+  return new Promise(resolve => {
+    if (sw.state === 'activated') {
+      resolve(swr);
+      return;
+    }
+    sw.addEventListener('statechange', function onStateChange(evt) {
+      if (sw.state === 'activated') {
+        sw.removeEventListener('statechange', onStateChange);
+        resolve(swr);
+      }
+    });
+  });
+}
