# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  668b9238bac7b2728ccfd0be0577a884772b39c4
Bug 1210413 P2 Test CORS credentials on cross-origin redirects. r=sicking a=dveditz

diff --git a/dom/security/test/cors/file_CrossSiteXHR_server.sjs b/dom/security/test/cors/file_CrossSiteXHR_server.sjs
--- a/dom/security/test/cors/file_CrossSiteXHR_server.sjs
+++ b/dom/security/test/cors/file_CrossSiteXHR_server.sjs
@@ -16,16 +16,32 @@ function handleRequest(request, response
   var bodyStream = new BinaryInputStream(request.bodyInputStream);
   var bodyBytes = [];
   while ((bodyAvail = bodyStream.available()) > 0)
     Array.prototype.push.apply(bodyBytes, bodyStream.readByteArray(bodyAvail));
 
   var body = decodeURIComponent(
     escape(String.fromCharCode.apply(null, bodyBytes)));
 
+  if (query.hop) {
+    query.hop = parseInt(query.hop, 10);
+    hops = eval(query.hops);
+    var curHop = hops[query.hop - 1];
+    query.allowOrigin = curHop.allowOrigin;
+    query.allowHeaders = curHop.allowHeaders;
+    query.allowCred = curHop.allowCred;
+    if (curHop.setCookie) {
+      query.setCookie = unescape(curHop.setCookie);
+    }
+    if (curHop.cookie) {
+      query.cookie = unescape(curHop.cookie);
+    }
+    query.noCookie = curHop.noCookie;
+  }
+
   // Check that request was correct
 
   if (!isPreflight && query.body && body != query.body) {
     sendHttp500(response, "Wrong body. Expected " + query.body + " got " +
       body);
     return;
   }
 
@@ -81,31 +97,24 @@ function handleRequest(request, response
         sendHttp500(response,
           "Cookie " + name  + " had wrong value. Expected " + value +
           " got " + cookies[name]);
         return;
       }
     });
   }
 
-  if ("noCookie" in query && request.hasHeader("Cookie")) {
+  if (query.noCookie && request.hasHeader("Cookie")) {
     sendHttp500(response,
       "Got cookies when didn't expect to: " + request.getHeader("Cookie"));
     return;
   }
 
   // Send response
 
-  if (query.hop) {
-     query.hop = parseInt(query.hop, 10);
-     hops = eval(query.hops);
-     query.allowOrigin = hops[query.hop-1].allowOrigin;
-     query.allowHeaders = hops[query.hop-1].allowHeaders;
-  }
-
   if (!isPreflight && query.status) {
     response.setStatusLine(null, query.status, query.statusMessage);
   }
   if (isPreflight && query.preflightStatus) {
     response.setStatusLine(null, query.preflightStatus, "preflight status");
   }
   
   if (query.allowOrigin && (!isPreflight || !query.noAllowPreflight))
@@ -134,17 +143,17 @@ function handleRequest(request, response
 
     if (query.exposeHeaders)
       response.setHeader("Access-Control-Expose-Headers", query.exposeHeaders);
   }
 
   if (query.hop && query.hop < hops.length) {
     newURL = hops[query.hop].server +
              "/tests/dom/security/test/cors/file_CrossSiteXHR_server.sjs?" +
-             "hop=" + (query.hop + 1) + "&hops=" + query.hops;
+             "hop=" + (query.hop + 1) + "&hops=" + escape(query.hops);
     response.setStatusLine(null, 307, "redirect");
     response.setHeader("Location", newURL);
 
     return;
   }
 
   // Send response body
   if (!isPreflight && request.method != "HEAD") {
diff --git a/dom/security/test/cors/test_CrossSiteXHR.html b/dom/security/test/cors/test_CrossSiteXHR.html
--- a/dom/security/test/cors/test_CrossSiteXHR.html
+++ b/dom/security/test/cors/test_CrossSiteXHR.html
@@ -1135,29 +1135,125 @@ function runTest() {
                       allowHeaders: "my-header",
                     },
                     { server: "http://example.org",
                       allowOrigin: origin,
                       allowHeaders: "my-header",
                     },
                     ],
            },
+
+           // test redirects with different credentials settings
+           {
+             // Initialize by setting a cookies for same- and cross- origins.
+             pass: 1,
+             method: "GET",
+             hops: [{ server: origin,
+                      setCookie: escape("a=1"),
+                    },
+                    { server: "http://example.com",
+                      allowOrigin: origin,
+                      allowCred: 1,
+                      setCookie: escape("a=2"),
+                    },
+                    ],
+             withCred: 1,
+           },
+           { pass: 1,
+             method: "GET",
+             hops: [{ server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: "http://example.com",
+                      allowOrigin: origin,
+                      noCookie: 1,
+                    },
+                    ],
+             withCred: 0,
+           },
+           { pass: 1,
+             method: "GET",
+             hops: [{ server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: "http://example.com",
+                      allowOrigin: origin,
+                      allowCred: 1,
+                      cookie: escape("a=2"),
+                    },
+                    ],
+             withCred: 1,
+           },
+           // expected fail because allow-credentials CORS header is not set
+           { pass: 0,
+             method: "GET",
+             hops: [{ server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: "http://example.com",
+                      allowOrigin: origin,
+                      cookie: escape("a=2"),
+                    },
+                    ],
+             withCred: 1,
+           },
+           { pass: 1,
+             method: "GET",
+             hops: [{ server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: "http://example.com",
+                      allowOrigin: '*',
+                      noCookie: 1,
+                    },
+                    ],
+             withCred: 0,
+           },
+           { pass: 0,
+             method: "GET",
+             hops: [{ server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: origin,
+                      cookie: escape("a=1"),
+                    },
+                    { server: "http://example.com",
+                      allowOrigin: '*',
+                      allowCred: 1,
+                      cookie: escape("a=2"),
+                    },
+                    ],
+             withCred: 1,
+           },
            ];
 
   if (!runRedirectTests) {
     tests = [];
   }
 
   for (test of tests) {
     req = {
       url: test.hops[0].server + basePath + "hop=1&hops=" +
            escape(test.hops.toSource()),
       method: test.method,
       headers: test.headers,
       body: test.body,
+      withCred: test.withCred,
     };
 
     if (test.pass) {
       if (test.body)
         req.url += "&body=" + escape(test.body);
     }
 
     loaderWindow.postMessage(req.toSource(), origin);
