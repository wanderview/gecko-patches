# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  c74824f79536427fd669caff6b0a0263d613a085

diff --git a/toolkit/components/extensions/ExtensionContent.jsm b/toolkit/components/extensions/ExtensionContent.jsm
--- a/toolkit/components/extensions/ExtensionContent.jsm
+++ b/toolkit/components/extensions/ExtensionContent.jsm
@@ -229,16 +229,17 @@ class Script {
 
   preload() {
     this.loadCSS();
     this.compileScripts();
   }
 
   cleanup(window) {
     if (!this.removeCss && this.cssURLs.length) {
+      dump('### ### ExtensionContent.jsm Script.cleanup(' + window + ')\n');
       let winUtils = getWinUtils(window);
 
       let type = this.cssOrigin === "user" ? winUtils.USER_SHEET : winUtils.AUTHOR_SHEET;
       for (let url of this.cssURLs) {
         this.cssCache.deleteDocument(url, window.document);
         runSafeSyncWithoutClone(winUtils.removeSheetUsingURIString, url, type);
       }
 
@@ -278,16 +279,17 @@ class Script {
     DocumentManager.lazyInit();
     if (this.requiresCleanup) {
       context.addScript(this);
     }
 
     let cssPromise;
     if (this.cssURLs.length) {
       let window = context.contentWindow;
+      dump('### ### ExtensionContent.jsm Script.inject(' + context + ') window: ' + window + '\n');
       let winUtils = getWinUtils(window);
 
       let type = this.cssOrigin === "user" ? winUtils.USER_SHEET : winUtils.AUTHOR_SHEET;
 
       if (this.removeCSS) {
         for (let url of this.cssURLs) {
           this.cssCache.deleteDocument(url, window.document);
 
diff --git a/toolkit/components/extensions/ExtensionTabs.jsm b/toolkit/components/extensions/ExtensionTabs.jsm
--- a/toolkit/components/extensions/ExtensionTabs.jsm
+++ b/toolkit/components/extensions/ExtensionTabs.jsm
@@ -1164,16 +1164,17 @@ class WindowTrackerBase extends EventEmi
 
     this._statusListeners = new DefaultWeakMap(listener => {
       return new StatusListener(listener);
     });
 
     this._windowIds = new DefaultWeakMap(window => {
       window.QueryInterface(Ci.nsIInterfaceRequestor);
 
+      dump('### ### ExtensionTabs.jsm WindowTrackerBase.constructor() window: ' + window + '\n');
       return getWinUtils(window).outerWindowID;
     });
   }
 
   isBrowserWindow(window) {
     let {documentElement} = window.document;
 
     return documentElement.getAttribute("windowtype") === "navigator:browser";
diff --git a/toolkit/components/extensions/ext-browser-content.js b/toolkit/components/extensions/ext-browser-content.js
--- a/toolkit/components/extensions/ext-browser-content.js
+++ b/toolkit/components/extensions/ext-browser-content.js
@@ -73,16 +73,17 @@ const BrowserListener = {
     this.maxHeight = maxHeight;
 
     this.blockParser = blockParser;
     this.needsResize = fixedWidth || maxHeight || maxWidth;
 
     this.oldBackground = null;
 
     if (allowScriptsToClose) {
+      dump('### ### ext-browser-content.js BrowserListener.init() content: ' + content + '\n');
       getWinUtils(content).allowScriptsToClose();
     }
 
     // Force external links to open in tabs.
     docShell.isAppTab = true;
 
     if (this.blockParser) {
       this.blockingPromise = new Promise(resolve => {
@@ -117,16 +118,17 @@ const BrowserListener = {
       if (this.unblockParser) {
         this.unblockParser();
         this.blockingPromise = null;
       }
     }
   },
 
   loadStylesheets() {
+    dump('### ### ext-browser-content.js BrowserListener.loadStylesheets() content: ' + content + '\n');
     let winUtils = getWinUtils(content);
 
     for (let url of this.stylesheets) {
       winUtils.addSheet(ExtensionCommon.stylesheetMap.get(url), winUtils.AGENT_SHEET);
     }
   },
 
   handleEvent(event) {
