# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  31a8d452c16e7b14fef5e49793516e248f79351b
Bug 1371787 P8 Allow TimeDuration to be passed to CalculateDelay. r=ehsan

diff --git a/dom/base/TimeoutManager.cpp b/dom/base/TimeoutManager.cpp
--- a/dom/base/TimeoutManager.cpp
+++ b/dom/base/TimeoutManager.cpp
@@ -228,19 +228,28 @@ TimeoutManager::IsInvalidFiringId(uint32
   return !mFiringIdStack.Contains(aFiringId);
 }
 
 // The number of nested timeouts before we start clamping. HTML5 says 1, WebKit
 // uses 5.
 #define DOM_CLAMP_TIMEOUT_NESTING_LEVEL 5
 
 TimeDuration
-TimeoutManager::CalculateDelay(Timeout* aTimeout, int32_t aDefaultDelay) const {
+TimeoutManager::CalculateDelay(Timeout* aTimeout, int32_t aDefaultDelay) const
+{
+  return CalculateDelay(aTimeout,
+                        TimeDuration::FromMilliseconds(aDefaultDelay));
+}
+
+TimeDuration
+TimeoutManager::CalculateDelay(Timeout* aTimeout,
+                               const TimeDuration& aDefaultDelay) const
+{
   MOZ_DIAGNOSTIC_ASSERT(aTimeout);
-  TimeDuration result = TimeDuration::FromMilliseconds(aDefaultDelay);
+  TimeDuration result = aDefaultDelay;
 
   if (aTimeout->mIsInterval ||
       aTimeout->mNestingLevel >= DOM_CLAMP_TIMEOUT_NESTING_LEVEL) {
     result = TimeDuration::Max(
       result, TimeDuration::FromMilliseconds(gMinClampTimeoutValue));
   }
 
   if (aTimeout->mIsTracking && mThrottleTrackingTimeouts) {
diff --git a/dom/base/TimeoutManager.h b/dom/base/TimeoutManager.h
--- a/dom/base/TimeoutManager.h
+++ b/dom/base/TimeoutManager.h
@@ -53,16 +53,19 @@ public:
   bool RescheduleTimeout(mozilla::dom::Timeout* aTimeout, const TimeStamp& now);
 
   void ClearAllTimeouts();
   uint32_t GetTimeoutId(mozilla::dom::Timeout::Reason aReason);
 
   TimeDuration
   CalculateDelay(Timeout* aTimeout, int32_t aDefaultDelay = 0) const;
 
+  TimeDuration
+  CalculateDelay(Timeout* aTimeout, const TimeDuration& aDefaultDelay) const;
+
   // aTimeout is the timeout that we're about to start running.  This function
   // returns the current timeout.
   mozilla::dom::Timeout* BeginRunningTimeout(mozilla::dom::Timeout* aTimeout);
   // aTimeout is the last running timeout.
   void EndRunningTimeout(mozilla::dom::Timeout* aTimeout);
 
   void UnmarkGrayTimers();
 
