# HG changeset patch
# Parent 69a64ce63c921648690ffc0259fd47bb0438d38e
# User Ben Kelly <ben@wanderview.com>
Implement cache body reading and writing.


diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -4,16 +4,19 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheParent.h"
 
 #include "mozilla/unused.h"
 #include "nsCOMPtr.h"
 
+// TODO: remove testing only headers
+#include "nsStringStream.h"
+
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::unused;
 using mozilla::void_t;
 
 CacheParent::CacheParent(const nsACString& aOrigin,
@@ -72,17 +75,36 @@ CacheParent::RecvAddAll(const RequestId&
   return false;
 }
 
 bool
 CacheParent::RecvPut(const RequestId& aRequestId, const PCacheRequest& aRequest,
                      const PCacheResponse& aResponse)
 {
   MOZ_ASSERT(mManager);
-  mManager->CachePut(this, aRequestId, mCacheId, aRequest, aResponse);
+
+  // TODO: remove stream test code
+  nsCOMPtr<nsIInputStream> requestStream;
+  nsresult rv = NS_NewCStringInputStream(getter_AddRefs(requestStream),
+                NS_LITERAL_CSTRING("request body stream beep beep boop!"));
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    OnCachePut(aRequestId, rv, PCacheResponseOrVoid(void_t()));
+    return true;
+  }
+
+  nsCOMPtr<nsIInputStream> responseStream;
+  rv = NS_NewCStringInputStream(getter_AddRefs(requestStream),
+                NS_LITERAL_CSTRING("response body stream hooray!"));
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    OnCachePut(aRequestId, rv, PCacheResponseOrVoid(void_t()));
+    return true;
+  }
+
+  mManager->CachePut(this, aRequestId, mCacheId,
+                     aRequest, requestStream, aResponse, responseStream);
   return true;
 }
 
 bool
 CacheParent::RecvDelete(const RequestId& aRequestId,
                         const PCacheRequest& aRequest,
                         const PCacheQueryParams& aParams)
 {
diff --git a/dom/cache/DBAction.cpp b/dom/cache/DBAction.cpp
--- a/dom/cache/DBAction.cpp
+++ b/dom/cache/DBAction.cpp
@@ -43,16 +43,17 @@ DBAction::RunOnTarget(Resolver* aResolve
 
   nsCOMPtr<mozIStorageConnection> conn;
   rv = OpenConnection(aQuotaDir, getter_AddRefs(conn));
   if (NS_WARN_IF(NS_FAILED(rv))) {
     aResolver->Resolve(rv);
     return;
   }
   MOZ_ASSERT(conn);
+
   RunWithDBOnTarget(aResolver, aQuotaDir, conn);
 }
 
 nsresult
 DBAction::OpenConnection(nsIFile* aDBDir, mozIStorageConnection** aConnOut)
 {
   MOZ_ASSERT(aDBDir);
   MOZ_ASSERT(aConnOut);
diff --git a/dom/cache/DBAction.h b/dom/cache/DBAction.h
--- a/dom/cache/DBAction.h
+++ b/dom/cache/DBAction.h
@@ -24,16 +24,19 @@ protected:
   {
     Existing,
     Create
   };
 
   DBAction(Mode aMode, const nsACString& aOrigin,
            const nsACString& aBaseDomain);
 
+  // Just as the resolver must be ref'd until cancel or resolve, you may also
+  // ref the DB connection.  The connection can only be referenced from the
+  // target thread and must be released upon cancel or resolve.
   virtual void RunWithDBOnTarget(Resolver* aResolver, nsIFile* aDBDir,
                                  mozIStorageConnection* aConn)=0;
 
   virtual
   void RunOnTarget(Resolver* aResolver, nsIFile* aQuotaDir) MOZ_OVERRIDE;
 
   virtual ~DBAction() { }
 
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -10,17 +10,20 @@
 #include "mozilla/dom/cache/DBSchema.h"
 #include "mozilla/dom/cache/PCacheQueryParams.h"
 #include "mozilla/dom/cache/PCacheRequest.h"
 #include "mozilla/dom/cache/PCacheResponse.h"
 #include "mozilla/dom/cache/Types.h"
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozStorageHelper.h"
 #include "nsAutoPtr.h"
+#include "nsIInputStream.h"
+#include "nsID.h"
 #include "nsIThread.h"
+#include "nsStreamUtils.h"
 #include "nsThreadUtils.h"
 
 namespace {
 
 using mozilla::dom::cache::DBSchema;
 using mozilla::dom::cache::SyncDBAction;
 
 class SetupAction MOZ_FINAL : public SyncDBAction
@@ -224,17 +227,17 @@ public:
 
 private:
   virtual ~CheckCacheOrphanedAction() { }
   nsRefPtr<Manager> mManager;
   const CacheId mCacheId;
   bool mOrphaned;
 };
 
-class Manager::CacheMatchAction : public Manager::BaseAction
+class Manager::CacheMatchAction MOZ_FINAL : public Manager::BaseAction
 {
 public:
   CacheMatchAction(Manager* aManager, ListenerId aListenerId,
                    RequestId aRequestId, CacheId aCacheId,
                    const PCacheRequest& aRequest,
                    const PCacheQueryParams& aParams)
     : BaseAction(aManager, aListenerId, aRequestId)
     , mCacheId(aCacheId)
@@ -260,17 +263,17 @@ public:
 protected:
   virtual ~CacheMatchAction() { }
   const CacheId mCacheId;
   const PCacheRequest mRequest;
   const PCacheQueryParams mParams;
   PCacheResponseOrVoid mResponseOrVoid;
 };
 
-class Manager::CacheMatchAllAction : public Manager::BaseAction
+class Manager::CacheMatchAllAction MOZ_FINAL : public Manager::BaseAction
 {
 public:
   CacheMatchAllAction(Manager* aManager, ListenerId aListenerId,
                       RequestId aRequestId, CacheId aCacheId,
                       const PCacheRequestOrVoid& aRequestOrVoid,
                       const PCacheQueryParams& aParams)
     : BaseAction(aManager, aListenerId, aRequestId)
     , mCacheId(aCacheId)
@@ -295,63 +298,170 @@ public:
 protected:
   virtual ~CacheMatchAllAction() { }
   const CacheId mCacheId;
   const PCacheRequestOrVoid mRequestOrVoid;
   const PCacheQueryParams mParams;
   nsTArray<PCacheResponse> mResponses;
 };
 
-class Manager::CachePutAction : public Manager::BaseAction
+class Manager::CachePutAction MOZ_FINAL : public DBAction
 {
 public:
   CachePutAction(Manager* aManager, ListenerId aListenerId,
                  RequestId aRequestId, CacheId aCacheId,
-                 const PCacheRequest& aRequest, const PCacheResponse& aResponse)
-    : BaseAction(aManager, aListenerId, aRequestId)
+                 const PCacheRequest& aRequest,
+                 nsIInputStream* aRequestBodyStream,
+                 const PCacheResponse& aResponse,
+                 nsIInputStream* aResponseBodyStream)
+    : DBAction(DBAction::Existing, aManager->Origin(), aManager->BaseDomain())
+    , mManager(aManager)
+    , mListenerId(aListenerId)
+    , mRequestId(aRequestId)
     , mCacheId(aCacheId)
     , mRequest(aRequest)
+    , mRequestBodyStream(aRequestBodyStream)
     , mResponse(aResponse)
+    , mResponseBodyStream(aResponseBodyStream)
     , mResponseOrVoid(void_t())
+    , mExpectedAsyncCopyCompletions(0)
   { }
 
-  virtual nsresult
-  RunSyncWithDBOnTarget(nsIFile* aDBDir,
-                        mozIStorageConnection* aConn) MOZ_OVERRIDE
+  virtual void
+  RunWithDBOnTarget(Resolver* aResolver, nsIFile* aDBDir,
+                    mozIStorageConnection* aConn) MOZ_OVERRIDE
   {
-    mozStorageTransaction trans(aConn, false,
+    MOZ_ASSERT(aResolver);
+    MOZ_ASSERT(aDBDir);
+    MOZ_ASSERT(aConn);
+    MOZ_ASSERT(!mResolver);
+    MOZ_ASSERT(!mConn);
+
+    mResolver = aResolver;
+    mConn = aConn;
+
+    mExpectedAsyncCopyCompletions = mRequestBodyStream ? 1 : 0;
+    mExpectedAsyncCopyCompletions += mResponseBodyStream ? 1 : 0;
+
+    if (mExpectedAsyncCopyCompletions < 1) {
+      OnAsyncCopyComplete(NS_OK);
+      return;
+    }
+
+    nsresult rv = StartStreamCopy(mRequestBodyStream, &mRequestBodyId,
+                                  getter_AddRefs(mRequestBodyCopyContext));
+    if (NS_WARN_IF(NS_FAILED(rv))) {
+      DoResolve(rv);
+      return;
+    }
+    MOZ_ASSERT(mRequestBodyCopyContext);
+
+    rv = StartStreamCopy(mResponseBodyStream, &mResponseBodyId,
+                         getter_AddRefs(mResponseBodyCopyContext));
+    if (NS_WARN_IF(NS_FAILED(rv))) {
+      NS_CancelAsyncCopy(mRequestBodyCopyContext, rv);
+      mRequestBodyCopyContext = nullptr;
+      DoResolve(rv);
+      return;
+    }
+  }
+
+  void
+  OnAsyncCopyComplete(nsresult aRv)
+  {
+    MOZ_ASSERT(mConn);
+    MOZ_ASSERT(mResolver);
+
+    if (mExpectedAsyncCopyCompletions > 0) {
+      return;
+    }
+
+    mRequestBodyCopyContext = nullptr;
+    mResponseBodyCopyContext = nullptr;
+
+    mozStorageTransaction trans(mConn, false,
                                 mozIStorageConnection::TRANSACTION_IMMEDIATE);
 
-    nsresult rv = DBSchema::CachePut(aConn, mCacheId, mRequest, mResponse);
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+    nsresult rv = DBSchema::CachePut(mConn, mCacheId, mRequest, mResponse);
+    if (NS_WARN_IF(NS_FAILED(rv))) {
+      DoResolve(rv);
+      return;
+    }
 
     rv = trans.Commit();
-    if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
+    if (NS_WARN_IF(NS_FAILED(rv))) {
+      DoResolve(rv);
+      return;
+    }
 
     // TODO: replace this with a read stream of the written files
     mResponseOrVoid = mResponse;
 
-    return rv;
+    DoResolve(rv);
   }
 
   virtual void
-  Complete(Listener* aListener, nsresult aRv) MOZ_OVERRIDE
+  CompleteOnInitiatingThread(nsresult aRv) MOZ_OVERRIDE
   {
-    aListener->OnCachePut(mRequestId, aRv, mResponseOrVoid);
+    NS_ASSERT_OWNINGTHREAD(Action);
+    Listener* listener = mManager->GetListener(mListenerId);
+    if (!listener) {
+      return;
+    }
+    listener->OnCachePut(mRequestId, aRv, mResponseOrVoid);
   }
 
-protected:
+private:
   virtual ~CachePutAction() { }
+
+  nsresult
+  StartStreamCopy(nsIInputStream* aSource, nsID* aIdOut,
+                  nsISupports** aCopyContextOut)
+  {
+    return NS_OK;
+  }
+
+  static void
+  AsyncCopyCompleteFunc(void* aClosure, nsresult aRv)
+  {
+    MOZ_ASSERT(aClosure);
+    CachePutAction* action = static_cast<CachePutAction*>(aClosure);
+    action->OnAsyncCopyComplete(aRv);
+  }
+
+  void
+  DoResolve(nsresult aRv)
+  {
+    NS_ASSERT_OWNINGTHREAD(Action);
+    mConn = nullptr;
+    if (mResolver) {
+      mResolver->Resolve(aRv);
+      mResolver = nullptr;
+    }
+  }
+
+  nsRefPtr<Manager> mManager;
+  const ListenerId mListenerId;
+  const RequestId mRequestId;
   const CacheId mCacheId;
   const PCacheRequest mRequest;
+  nsCOMPtr<nsIInputStream> mRequestBodyStream;
   const PCacheResponse mResponse;
+  nsCOMPtr<nsIInputStream> mResponseBodyStream;
   PCacheResponseOrVoid mResponseOrVoid;
+  nsRefPtr<Resolver> mResolver;
+  nsCOMPtr<mozIStorageConnection> mConn;
+  uint32_t mExpectedAsyncCopyCompletions;
+  nsID mRequestBodyId;
+  nsID mResponseBodyId;
+  nsCOMPtr<nsISupports> mRequestBodyCopyContext;
+  nsCOMPtr<nsISupports> mResponseBodyCopyContext;
 };
 
-class Manager::CacheDeleteAction : public Manager::BaseAction
+class Manager::CacheDeleteAction MOZ_FINAL : public Manager::BaseAction
 {
 public:
   CacheDeleteAction(Manager* aManager, ListenerId aListenerId,
                     RequestId aRequestId, CacheId aCacheId,
                     const PCacheRequest& aRequest,
                     const PCacheQueryParams& aParams)
     : BaseAction(aManager, aListenerId, aRequestId)
     , mCacheId(aCacheId)
@@ -651,23 +761,27 @@ Manager::CacheMatchAll(Listener* aListen
   nsRefPtr<Action> action = new CacheMatchAllAction(this, listenerId, aRequestId,
                                                     aCacheId, aRequest, aParams);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::CachePut(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
                   const PCacheRequest& aRequest,
-                  const PCacheResponse& aResponse)
+                  nsIInputStream* aRequestBodyStream,
+                  const PCacheResponse& aResponse,
+                  nsIInputStream* aResponseBodyStream)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new CachePutAction(this, listenerId, aRequestId,
-                                               aCacheId, aRequest, aResponse);
+                                               aCacheId,
+                                               aRequest, aRequestBodyStream,
+                                               aResponse, aResponseBodyStream);
   CurrentContext()->Dispatch(mIOThread, action);
 }
 
 void
 Manager::CacheDelete(Listener* aListener, const RequestId& aRequestId,
                      CacheId aCacheId, const PCacheRequest& aRequest,
                      const PCacheQueryParams& aParams)
 {
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -9,16 +9,17 @@
 
 #include "mozilla/dom/cache/Context.h"
 #include "mozilla/dom/cache/Types.h"
 #include "nsCOMPtr.h"
 #include "nsISupportsImpl.h"
 #include "nsString.h"
 #include "nsTArray.h"
 
+class nsIInputStream;
 class nsIThread;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class PCacheQueryParams;
 class PCacheRequest;
@@ -65,17 +66,20 @@ public:
   // TODO: consider moving CacheId up in the argument lists below
   void CacheMatch(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
                   const PCacheRequest& aRequest,
                   const PCacheQueryParams& aParams);
   void CacheMatchAll(Listener* aListener, RequestId aRequestId,
                      CacheId aCacheId, const PCacheRequestOrVoid& aRequestOrVoid,
                      const PCacheQueryParams& aParams);
   void CachePut(Listener* aListener, RequestId aRequestId, CacheId aCacheId,
-                const PCacheRequest& aRequest, const PCacheResponse& aResponse);
+                const PCacheRequest& aRequest,
+                nsIInputStream* aRequestBodyStream,
+                const PCacheResponse& aResponse,
+                nsIInputStream* aResponseBodyStream);
   void CacheDelete(Listener* aListener, const RequestId& aRequestId,
                    CacheId aCacheId, const PCacheRequest& aRequest,
                    const PCacheQueryParams& aParams);
 
   void StorageGet(Listener* aListener, RequestId aRequestId,
                   Namespace aNamespace, const nsAString& aKey);
   void StorageHas(Listener* aListener, RequestId aRequestId,
                   Namespace aNamespace, const nsAString& aKey);
