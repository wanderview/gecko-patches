# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  98c2c349e5caf848c68e6456862749498a824e74
Bug 1460635 Add ServiceWorkerImpl class to isolate ServiceWorkerInfo from the binding layer. r=baku

diff --git a/dom/serviceworkers/ServiceWorker.cpp b/dom/serviceworkers/ServiceWorker.cpp
--- a/dom/serviceworkers/ServiceWorker.cpp
+++ b/dom/serviceworkers/ServiceWorker.cpp
@@ -3,16 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorker.h"
 
 #include "nsIDocument.h"
 #include "nsPIDOMWindow.h"
+#include "ServiceWorkerImpl.h"
 #include "ServiceWorkerManager.h"
 #include "ServiceWorkerPrivate.h"
 
 #include "mozilla/dom/DOMPrefs.h"
 #include "mozilla/dom/ClientIPCTypes.h"
 #include "mozilla/dom/ClientState.h"
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/ServiceWorkerGlobalScopeBinding.h"
@@ -57,17 +58,18 @@ ServiceWorker::Create(nsIGlobalObject* a
     return ref.forget();
   }
 
   RefPtr<ServiceWorkerInfo> info = reg->GetByDescriptor(aDescriptor);
   if (!info) {
     return ref.forget();
   }
 
-  ref = new ServiceWorker(aOwner, aDescriptor, info);
+  RefPtr<ServiceWorker::Inner> inner = new ServiceWorkerImpl(info);
+  ref = new ServiceWorker(aOwner, aDescriptor, inner);
   return ref.forget();
 }
 
 ServiceWorker::ServiceWorker(nsIGlobalObject* aGlobal,
                              const ServiceWorkerDescriptor& aDescriptor,
                              ServiceWorker::Inner* aInner)
   : DOMEventTargetHelper(aGlobal)
   , mDescriptor(aDescriptor)
diff --git a/dom/serviceworkers/ServiceWorkerImpl.cpp b/dom/serviceworkers/ServiceWorkerImpl.cpp
new file mode 100644
--- /dev/null
+++ b/dom/serviceworkers/ServiceWorkerImpl.cpp
@@ -0,0 +1,65 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ServiceWorkerImpl.h"
+
+namespace mozilla {
+namespace dom {
+
+ServiceWorkerImpl::~ServiceWorkerImpl()
+{
+  MOZ_DIAGNOSTIC_ASSERT(!mOuter);
+  mInfo->RemoveListener(this);
+}
+
+void
+ServiceWorkerImpl::AddServiceWorker(ServiceWorker* aWorker)
+{
+  MOZ_DIAGNOSTIC_ASSERT(!mOuter);
+  MOZ_DIAGNOSTIC_ASSERT(aWorker);
+  mOuter = aWorker;
+
+  // Wait to attach to the info as a listener until we have the outer
+  // set.  This is important because the info will try to set the
+  // state immediately.
+  mInfo->AddListener(this);
+}
+
+void
+ServiceWorkerImpl::RemoveServiceWorker(ServiceWorker* aWorker)
+{
+  MOZ_DIAGNOSTIC_ASSERT(mOuter);
+  MOZ_DIAGNOSTIC_ASSERT(mOuter == aWorker);
+  mOuter = nullptr;
+}
+
+void
+ServiceWorkerImpl::PostMessage(ipc::StructuredCloneData&& aData,
+                               const ClientInfo& aClientInfo,
+                               const ClientState& aClientState)
+{
+  mInfo->PostMessage(Move(aData), aClientInfo, aClientState);
+}
+
+void
+ServiceWorkerImpl::SetState(ServiceWorkerState aState)
+{
+  if (!mOuter) {
+    return;
+  }
+  mOuter->SetState(aState);
+}
+
+
+ServiceWorkerImpl::ServiceWorkerImpl(ServiceWorkerInfo* aInfo)
+  : mInfo(aInfo)
+  , mOuter(nullptr)
+{
+  MOZ_DIAGNOSTIC_ASSERT(mInfo);
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/serviceworkers/ServiceWorkerImpl.h b/dom/serviceworkers/ServiceWorkerImpl.h
new file mode 100644
--- /dev/null
+++ b/dom/serviceworkers/ServiceWorkerImpl.h
@@ -0,0 +1,51 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_ServiceWorkerImpl_h
+#define mozilla_dom_ServiceWorkerImpl_h
+
+#include "ServiceWorker.h"
+#include "ServiceWorkerInfo.h"
+
+namespace mozilla {
+namespace dom {
+
+class ServiceWorkerInfo;
+
+class ServiceWorkerImpl final : public ServiceWorker::Inner
+                              , public ServiceWorkerInfo::Listener
+{
+  RefPtr<ServiceWorkerInfo> mInfo;
+  ServiceWorker* mOuter;
+
+  ~ServiceWorkerImpl();
+
+  // ServiceWorker::Inner interface
+  void
+  AddServiceWorker(ServiceWorker* aWorker) override;
+
+  void
+  RemoveServiceWorker(ServiceWorker* aWorker) override;
+
+  void
+  PostMessage(ipc::StructuredCloneData&& aData,
+              const ClientInfo& aClientInfo,
+              const ClientState& aClientState) override;
+
+  // ServiceWorkerInfo::Listener interface
+  void
+  SetState(ServiceWorkerState aState) override;
+
+public:
+  explicit ServiceWorkerImpl(ServiceWorkerInfo* aInfo);
+
+  NS_INLINE_DECL_REFCOUNTING(ServiceWorkerImpl, override);
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_ServiceWorkerImpl_h
diff --git a/dom/serviceworkers/ServiceWorkerInfo.cpp b/dom/serviceworkers/ServiceWorkerInfo.cpp
--- a/dom/serviceworkers/ServiceWorkerInfo.cpp
+++ b/dom/serviceworkers/ServiceWorkerInfo.cpp
@@ -113,17 +113,17 @@ ServiceWorkerInfo::DetachDebugger()
   return mServiceWorkerPrivate->DetachDebugger();
 }
 
 namespace {
 
 class ChangeStateUpdater final : public Runnable
 {
 public:
-  ChangeStateUpdater(const nsTArray<ServiceWorker*>& aInstances,
+  ChangeStateUpdater(const nsTArray<ServiceWorkerInfo::Listener*>& aInstances,
                      ServiceWorkerState aState)
     : Runnable("dom::ChangeStateUpdater")
     , mState(aState)
   {
     for (size_t i = 0; i < aInstances.Length(); ++i) {
       mInstances.AppendElement(aInstances[i]);
     }
   }
@@ -132,17 +132,17 @@ public:
   {
     for (size_t i = 0; i < mInstances.Length(); ++i) {
       mInstances[i]->SetState(mState);
     }
     return NS_OK;
   }
 
 private:
-  AutoTArray<RefPtr<ServiceWorker>, 1> mInstances;
+  AutoTArray<RefPtr<ServiceWorkerInfo::Listener>, 1> mInstances;
   ServiceWorkerState mState;
 };
 
 }
 
 void
 ServiceWorkerInfo::UpdateState(ServiceWorkerState aState)
 {
@@ -220,43 +220,30 @@ static uint64_t gServiceWorkerInfoCurren
 
 uint64_t
 ServiceWorkerInfo::GetNextID() const
 {
   return ++gServiceWorkerInfoCurrentID;
 }
 
 void
-ServiceWorkerInfo::AddServiceWorker(ServiceWorker* aWorker)
+ServiceWorkerInfo::AddListener(Listener* aListener)
 {
-  MOZ_DIAGNOSTIC_ASSERT(aWorker);
-#ifdef MOZ_DIAGNOSTIC_ASSERT_ENABLED
-  nsAutoString workerURL;
-  aWorker->GetScriptURL(workerURL);
-  MOZ_DIAGNOSTIC_ASSERT(
-    workerURL.Equals(NS_ConvertUTF8toUTF16(mDescriptor.ScriptURL())));
-#endif
-  MOZ_ASSERT(!mInstances.Contains(aWorker));
+  MOZ_DIAGNOSTIC_ASSERT(aListener);
+  MOZ_ASSERT(!mInstances.Contains(aListener));
 
-  mInstances.AppendElement(aWorker);
-  aWorker->SetState(State());
+  mInstances.AppendElement(aListener);
+  aListener->SetState(State());
 }
 
 void
-ServiceWorkerInfo::RemoveServiceWorker(ServiceWorker* aWorker)
+ServiceWorkerInfo::RemoveListener(Listener* aListener)
 {
-  MOZ_DIAGNOSTIC_ASSERT(aWorker);
-#ifdef MOZ_DIAGNOSTIC_ASSERT_ENABLED
-  nsAutoString workerURL;
-  aWorker->GetScriptURL(workerURL);
-  MOZ_DIAGNOSTIC_ASSERT(
-    workerURL.Equals(NS_ConvertUTF8toUTF16(mDescriptor.ScriptURL())));
-#endif
-
-  DebugOnly<bool> removed = mInstances.RemoveElement(aWorker);
+  MOZ_DIAGNOSTIC_ASSERT(aListener);
+  DebugOnly<bool> removed = mInstances.RemoveElement(aListener);
   MOZ_ASSERT(removed);
 }
 
 void
 ServiceWorkerInfo::PostMessage(ipc::StructuredCloneData&& aData,
                                const ClientInfo& aClientInfo,
                                const ClientState& aClientState)
 {
diff --git a/dom/serviceworkers/ServiceWorkerInfo.h b/dom/serviceworkers/ServiceWorkerInfo.h
--- a/dom/serviceworkers/ServiceWorkerInfo.h
+++ b/dom/serviceworkers/ServiceWorkerInfo.h
@@ -7,33 +7,41 @@
 #ifndef mozilla_dom_serviceworkerinfo_h
 #define mozilla_dom_serviceworkerinfo_h
 
 #include "MainThreadUtils.h"
 #include "mozilla/dom/ServiceWorkerBinding.h" // For ServiceWorkerState
 #include "mozilla/dom/WorkerCommon.h"
 #include "mozilla/OriginAttributes.h"
 #include "nsIServiceWorkerManager.h"
-#include "ServiceWorker.h"
 
 namespace mozilla {
 namespace dom {
 
 class ClientInfoAndState;
 class ServiceWorkerPrivate;
 
 /*
  * Wherever the spec treats a worker instance and a description of said worker
  * as the same thing; i.e. "Resolve foo with
  * _GetNewestWorker(serviceWorkerRegistration)", we represent the description
  * by this class and spawn a ServiceWorker in the right global when required.
  */
 class ServiceWorkerInfo final : public nsIServiceWorkerInfo
-                              , public ServiceWorker::Inner
 {
+public:
+  class Listener
+  {
+  public:
+    virtual void
+    SetState(ServiceWorkerState aState) = 0;
+
+    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
+  };
+
 private:
   nsCOMPtr<nsIPrincipal> mPrincipal;
   ServiceWorkerDescriptor mDescriptor;
   const nsString mCacheName;
   OriginAttributes mOriginAttributes;
 
   // This LoadFlags is only applied to imported scripts, since the main script
   // has already been downloaded when performing the bytecheck. This LoadFlag is
@@ -55,17 +63,17 @@ private:
   PRTime mActivatedTime;
   PRTime mRedundantTime;
 
   // We hold rawptrs since the ServiceWorker constructor and destructor ensure
   // addition and removal.
   //
   // There is a high chance of there being at least one ServiceWorker
   // associated with this all the time.
-  AutoTArray<ServiceWorker*, 1> mInstances;
+  AutoTArray<Listener*, 1> mInstances;
 
   RefPtr<ServiceWorkerPrivate> mServiceWorkerPrivate;
   bool mSkipWaitingFlag;
 
   enum {
     Unknown,
     Enabled,
     Disabled
@@ -73,32 +81,31 @@ private:
 
   ~ServiceWorkerInfo();
 
   // Generates a unique id for the service worker, with zero being treated as
   // invalid.
   uint64_t
   GetNextID() const;
 
-  // ServiceWorker::Inner implementation
-  virtual void
-  AddServiceWorker(ServiceWorker* aWorker) override;
-
-  virtual void
-  RemoveServiceWorker(ServiceWorker* aWorker) override;
-
-  virtual void
-  PostMessage(ipc::StructuredCloneData&& aData,
-              const ClientInfo& aClientInfo,
-              const ClientState& aClientState) override;
-
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSISERVICEWORKERINFO
 
+  void
+  AddListener(Listener* aListener);
+
+  void
+  RemoveListener(Listener* aListener);
+
+  void
+  PostMessage(ipc::StructuredCloneData&& aData,
+              const ClientInfo& aClientInfo,
+              const ClientState& aClientState);
+
   class ServiceWorkerPrivate*
   WorkerPrivate() const
   {
     MOZ_ASSERT(mServiceWorkerPrivate);
     return mServiceWorkerPrivate;
   }
 
   nsIPrincipal*
diff --git a/dom/serviceworkers/ServiceWorkerRegistrar.cpp b/dom/serviceworkers/ServiceWorkerRegistrar.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrar.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrar.cpp
@@ -10,16 +10,17 @@
 #include "mozilla/net/MozURL.h"
 
 #include "nsIEventTarget.h"
 #include "nsIInputStream.h"
 #include "nsILineInputStream.h"
 #include "nsIObserverService.h"
 #include "nsIOutputStream.h"
 #include "nsISafeOutputStream.h"
+#include "nsIServiceWorkerManager.h"
 
 #include "MainThreadUtils.h"
 #include "mozilla/ClearOnShutdown.h"
 #include "mozilla/CycleCollectedJSContext.h"
 #include "mozilla/dom/StorageActivityService.h"
 #include "mozilla/ErrorNames.h"
 #include "mozilla/ipc/BackgroundChild.h"
 #include "mozilla/ipc/BackgroundParent.h"
@@ -31,16 +32,17 @@
 #include "nsAppDirectoryServiceDefs.h"
 #include "nsContentUtils.h"
 #include "nsDirectoryServiceUtils.h"
 #include "nsNetCID.h"
 #include "nsNetUtil.h"
 #include "nsServiceManagerUtils.h"
 #include "nsThreadUtils.h"
 #include "nsXULAppAPI.h"
+#include "ServiceWorkerUtils.h"
 
 using namespace mozilla::ipc;
 
 namespace mozilla {
 namespace dom {
 
 namespace {
 
diff --git a/dom/serviceworkers/moz.build b/dom/serviceworkers/moz.build
--- a/dom/serviceworkers/moz.build
+++ b/dom/serviceworkers/moz.build
@@ -27,16 +27,17 @@ EXPORTS.mozilla.dom += [
 ]
 
 UNIFIED_SOURCES += [
     'ServiceWorker.cpp',
     'ServiceWorkerContainer.cpp',
     'ServiceWorkerContainerImpl.cpp',
     'ServiceWorkerDescriptor.cpp',
     'ServiceWorkerEvents.cpp',
+    'ServiceWorkerImpl.cpp',
     'ServiceWorkerInfo.cpp',
     'ServiceWorkerInterceptController.cpp',
     'ServiceWorkerJob.cpp',
     'ServiceWorkerJobQueue.cpp',
     'ServiceWorkerManager.cpp',
     'ServiceWorkerManagerChild.cpp',
     'ServiceWorkerManagerParent.cpp',
     'ServiceWorkerManagerService.cpp',
