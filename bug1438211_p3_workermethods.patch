# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  7addeb445d34fe9272020cc38981c040bfaea82e
Bug 1438211 P3 Implement WorkerGlobalScope::GetOrCreateServiceWorkerRegistration and associated methods. r=asuth

diff --git a/dom/workers/WorkerScope.cpp b/dom/workers/WorkerScope.cpp
--- a/dom/workers/WorkerScope.cpp
+++ b/dom/workers/WorkerScope.cpp
@@ -82,16 +82,17 @@ WorkerGlobalScope::WorkerGlobalScope(Wor
 
   // We should always have an event target when the global is created.
   MOZ_DIAGNOSTIC_ASSERT(mSerialEventTarget);
 }
 
 WorkerGlobalScope::~WorkerGlobalScope()
 {
   mWorkerPrivate->AssertIsOnWorkerThread();
+  MOZ_DIAGNOSTIC_ASSERT(mServiceWorkerRegistrationList.IsEmpty());
 }
 
 NS_IMPL_CYCLE_COLLECTION_CLASS(WorkerGlobalScope)
 
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(WorkerGlobalScope,
                                                   DOMEventTargetHelper)
   tmp->mWorkerPrivate->AssertIsOnWorkerThread();
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mConsole)
@@ -532,16 +533,50 @@ WorkerGlobalScope::GetClientState() cons
 }
 
 Maybe<ServiceWorkerDescriptor>
 WorkerGlobalScope::GetController() const
 {
   return mWorkerPrivate->GetController();
 }
 
+RefPtr<ServiceWorkerRegistration>
+WorkerGlobalScope::GetOrCreateServiceWorkerRegistration(const ServiceWorkerRegistrationDescriptor& aDescriptor)
+{
+  mWorkerPrivate->AssertIsOnWorkerThread();
+  RefPtr<ServiceWorkerRegistration> ref;
+  for (auto swr : mServiceWorkerRegistrationList) {
+    if (swr->MatchesDescriptor(aDescriptor)) {
+      ref = swr;
+      return ref.forget();
+    }
+  }
+  ref = ServiceWorkerRegistration::CreateForWorker(mWorkerPrivate, aDescriptor);
+  MOZ_ASSERT(mServiceWorkerRegistrationList.Contains(ref));
+  return ref.forget();
+}
+
+void
+WorkerGlobalScope::AddServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration)
+{
+  mWorkerPrivate->AssertIsOnWorkerThread();
+  MOZ_DIAGNOSTIC_ASSERT(aRegistration);
+  MOZ_ASSERT(!mServiceWorkerRegistrationList.Contains(aRegistration));
+  mServiceWorkerRegistrationList.AppendElement(aRegistration);
+}
+
+void
+WorkerGlobalScope::RemoveServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration)
+{
+  mWorkerPrivate->AssertIsOnWorkerThread();
+  MOZ_DIAGNOSTIC_ASSERT(aRegistration);
+  MOZ_ASSERT(mServiceWorkerRegistrationList.Contains(aRegistration));
+  mServiceWorkerRegistrationList.RemoveElement(aRegistration);
+}
+
 DedicatedWorkerGlobalScope::DedicatedWorkerGlobalScope(WorkerPrivate* aWorkerPrivate,
                                                        const nsString& aName)
   : WorkerGlobalScope(aWorkerPrivate)
   , mName(aName)
 {
 }
 
 bool
diff --git a/dom/workers/WorkerScope.h b/dom/workers/WorkerScope.h
--- a/dom/workers/WorkerScope.h
+++ b/dom/workers/WorkerScope.h
@@ -56,16 +56,20 @@ class WorkerGlobalScope : public DOMEven
   RefPtr<Crypto> mCrypto;
   RefPtr<WorkerLocation> mLocation;
   RefPtr<WorkerNavigator> mNavigator;
   RefPtr<Performance> mPerformance;
   RefPtr<IDBFactory> mIndexedDB;
   RefPtr<cache::CacheStorage> mCacheStorage;
   nsCOMPtr<nsISerialEventTarget> mSerialEventTarget;
 
+  // Weak references added by AddServiceWorkerRegistration() and cleared by
+  // RemoveServiceWorkerRegistration() when the object is destroyed.
+  nsTArray<ServiceWorkerRegistration*> mServiceWorkerRegistrationList;
+
   uint32_t mWindowInteractionsAllowed;
 
 protected:
   WorkerPrivate* mWorkerPrivate;
 
   explicit WorkerGlobalScope(WorkerPrivate* aWorkerPrivate);
   virtual ~WorkerGlobalScope();
 
@@ -225,16 +229,25 @@ public:
   Maybe<ClientInfo>
   GetClientInfo() const override;
 
   Maybe<ClientState>
   GetClientState() const;
 
   Maybe<ServiceWorkerDescriptor>
   GetController() const override;
+
+  RefPtr<mozilla::dom::ServiceWorkerRegistration>
+  GetOrCreateServiceWorkerRegistration(const ServiceWorkerRegistrationDescriptor& aDescriptor) override;
+
+  void
+  AddServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration) override;
+
+  void
+  RemoveServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration) override;
 };
 
 class DedicatedWorkerGlobalScope final : public WorkerGlobalScope
 {
   const nsString mName;
 
   ~DedicatedWorkerGlobalScope() { }
 
