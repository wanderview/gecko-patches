# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  3295bcef536105fe69c05e3fe9441ec59228d0fc

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -3513,16 +3513,20 @@ nsGlobalWindow::EnsureClientSource()
   if (loadInfo) {
     const Maybe<ServiceWorkerDescriptor>& controller =
       loadInfo->GetController();
     if (controller.isSome()) {
       mClientSource->SetController(controller.ref());
     }
   }
 
+  if (IsFrozen()) {
+    mClientSource->Freeze();
+  }
+
   return NS_OK;
 }
 
 nsresult
 nsGlobalWindow::InnerExecutionReady()
 {
   MOZ_DIAGNOSTIC_ASSERT(IsInnerWindow());
 
@@ -12517,17 +12521,19 @@ nsGlobalWindow::FreezeInternal()
   MOZ_ASSERT(mSuspendDepth >= mFreezeDepth);
   if (mFreezeDepth != 1) {
     return;
   }
 
   mozilla::dom::workers::FreezeWorkersForWindow(AsInner());
 
   mTimeoutManager->Freeze();
-  mClientSource->Freeze();
+  if (mClientSource) {
+    mClientSource->Freeze();
+  }
 
   NotifyDOMWindowFrozen(this);
 }
 
 void
 nsGlobalWindow::Thaw()
 {
   MOZ_ASSERT(NS_IsMainThread());
@@ -12547,17 +12553,19 @@ nsGlobalWindow::ThawInternal()
 
   MOZ_ASSERT(mFreezeDepth != 0);
   mFreezeDepth -= 1;
   MOZ_ASSERT(mSuspendDepth >= mFreezeDepth);
   if (mFreezeDepth != 0) {
     return;
   }
 
-  mClientSource->Thaw();
+  if (mClientSource) {
+    mClientSource->Thaw();
+  }
   mTimeoutManager->Thaw();
 
   mozilla::dom::workers::ThawWorkersForWindow(AsInner());
 
   NotifyDOMWindowThawed(this);
 }
 
 bool
diff --git a/netwerk/base/LoadInfo.cpp b/netwerk/base/LoadInfo.cpp
--- a/netwerk/base/LoadInfo.cpp
+++ b/netwerk/base/LoadInfo.cpp
@@ -35,17 +35,16 @@ LoadInfo::LoadInfo(nsIPrincipal* aLoadin
                    nsINode* aLoadingContext,
                    nsSecurityFlags aSecurityFlags,
                    nsContentPolicyType aContentPolicyType)
   : mLoadingPrincipal(aLoadingContext ?
                         aLoadingContext->NodePrincipal() : aLoadingPrincipal)
   , mTriggeringPrincipal(aTriggeringPrincipal ?
                            aTriggeringPrincipal : mLoadingPrincipal.get())
   , mPrincipalToInherit(nullptr)
-  // by default do not propagate the reserved Client
   , mLoadingContext(do_GetWeakReference(aLoadingContext))
   , mSecurityFlags(aSecurityFlags)
   , mInternalContentPolicyType(aContentPolicyType)
   , mTainting(LoadTainting::Basic)
   , mUpgradeInsecureRequests(false)
   , mVerifySignedContent(false)
   , mEnforceSRI(false)
   , mForceInheritPrincipalDropped(false)
@@ -889,16 +888,17 @@ LoadInfo::GiveReservedClient(UniquePtr<C
   MOZ_DIAGNOSTIC_ASSERT(aClientSource);
   mReservedClient = Move(aClientSource);
   SetReservedClientInfo(mReservedClient->Info());
 }
 
 UniquePtr<ClientSource>
 LoadInfo::TakeReservedClient()
 {
+  mReservedClientInfo.reset();
   return Move(mReservedClient);
 }
 
 void
 LoadInfo::SetReservedClientInfo(const ClientInfo& aClientInfo)
 {
   mReservedClientInfo.emplace(aClientInfo);
 }
