# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  6602576987baec9edbaaad117114ba5227db6261
Bug 1433044 P2 Update local-url-inherit-controller.https.html to test fetch() interception in local URL windows and workers. r=asuth

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -285865,16 +285865,21 @@
      {}
     ]
    ],
    "service-workers/service-worker/resources/local-url-inherit-controller-frame.html": [
     [
      {}
     ]
    ],
+   "service-workers/service-worker/resources/local-url-inherit-controller-worker.js": [
+    [
+     {}
+    ]
+   ],
    "service-workers/service-worker/resources/malformed-worker.py": [
     [
      {}
     ]
    ],
    "service-workers/service-worker/resources/mime-sniffing-worker.js": [
     [
      {}
@@ -574829,17 +574834,17 @@
    "5cc3f2c872435df9c735390426a6cf8b4b788fb0",
    "testharness"
   ],
   "service-workers/service-worker/iso-latin1-header.https.html": [
    "3c75caa66d3906602d10b07ff22e7d0f210cfee9",
    "testharness"
   ],
   "service-workers/service-worker/local-url-inherit-controller.https.html": [
-   "e29f2ffef20a9436cc721293ddcf932ca1b26bda",
+   "e2e8258f24860cb93b71b4bb27f618b7740756bd",
    "testharness"
   ],
   "service-workers/service-worker/mime-sniffing.https.html": [
    "d61a859a111dea758efb91480817fa1a029c152b",
    "testharness"
   ],
   "service-workers/service-worker/multi-globals/current/current.https.html": [
    "2f7a23c1a4dfa7feb121e55d13ff8a0980165b37",
@@ -575637,17 +575642,21 @@
    "08525451705224fd78993adaed33a345d514c9a1",
    "support"
   ],
   "service-workers/service-worker/resources/loaded.html": [
    "7ef9421050590733bab9b7c1d0d1b8695b5cb920",
    "support"
   ],
   "service-workers/service-worker/resources/local-url-inherit-controller-frame.html": [
-   "bf2722799132cf551a9d32e5593c0734b85a3c0f",
+   "12822899ad84cef80d4f67cb33475a93ca1d56ed",
+   "support"
+  ],
+  "service-workers/service-worker/resources/local-url-inherit-controller-worker.js": [
+   "7a74ae709c072750cf0639f78bf9a0ac4f16f50b",
    "support"
   ],
   "service-workers/service-worker/resources/malformed-worker.py": [
    "a9f19c8f8f6908c4a4732bbd0f6b2f3d19401909",
    "support"
   ],
   "service-workers/service-worker/resources/mime-sniffing-worker.js": [
    "b37f174839f3fa92cb46835d3574e547de369b88",
@@ -583601,17 +583610,17 @@
    "817011a8cdff7cfd7e445fb8ecb84e5d91f03993",
    "wdspec"
   ],
   "webdriver/tests/get_window_rect.py": [
    "c9139c16aa950c734c776887d6a762b867790812",
    "wdspec"
   ],
   "webdriver/tests/interaction/element_clear.py": [
-   "222a472b70c38e9178bdb64cc13a99053169a831",
+   "46f145bac93316b5f93d565e9e2389499771ff24",
    "wdspec"
   ],
   "webdriver/tests/interaction/send_keys_content_editable.py": [
    "9c071e60e1203cf31120f20874b5f38ba41dacc3",
    "wdspec"
   ],
   "webdriver/tests/interface.html": [
    "6625887cfa7f461dc428c11861fce71c47bef57d",
diff --git a/testing/web-platform/tests/service-workers/service-worker/local-url-inherit-controller.https.html b/testing/web-platform/tests/service-workers/service-worker/local-url-inherit-controller.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/local-url-inherit-controller.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/local-url-inherit-controller.https.html
@@ -3,77 +3,127 @@
 <meta name=timeout content=long>
 <script src="/resources/testharness.js"></script>
 <script src="/resources/testharnessreport.js"></script>
 <script src="/common/get-host-info.sub.js"></script>
 <script src="resources/test-helpers.sub.js"></script>
 <body>
 <script>
 
-const SCRIPT = 'resources/empty.js';
+const SCRIPT = 'resources/local-url-inherit-controller-worker.js';
 const SCOPE = 'resources/local-url-inherit-controller-frame.html';
 
 async function doAsyncTest(t, opts) {
-  let name = opts.scheme + '-' + opts.child;
+  let name = `${opts.scheme}-${opts.child}-${opts.check}`;
   let scope = SCOPE + '?name=' + name;
   let reg = await service_worker_unregister_and_register(t, SCRIPT, scope);
   add_completion_callback(_ => reg.unregister());
   await wait_for_state(t, reg.installing, 'activated');
 
   let frame = await with_iframe(scope);
   add_completion_callback(_ => frame.remove());
   assert_not_equals(frame.contentWindow.navigator.serviceWorker.controller, null,
                     'frame should be controlled');
 
-  let blobController = await frame.contentWindow.checkChildController(opts);
+  let result = await frame.contentWindow.checkChildController(opts);
+  result = result.data;
 
-  let expect = opts.expect === 'inherit'
-             ?  frame.contentWindow.navigator.serviceWorker.controller.scriptURL
-             : null;
+  let expect = 'unexpected';
+  if (opts.check === 'controller') {
+    expect = opts.expect === 'inherit'
+               ? frame.contentWindow.navigator.serviceWorker.controller.scriptURL
+               : null;
+  } else if (opts.check === 'fetch') {
+    // The service worker FetchEvent handler will provide an "intercepted"
+    // body.  If the local URL ends up with an opaque origin and is not
+    // intercepted then it will get an opaque Response.  In that case it
+    // should see an empty string body.
+    expect = opts.expect === 'intercept' ? 'intercepted' : '';
+  }
 
-  assert_equals(blobController, expect,
-                `${opts.scheme} URL ${opts.child} should ${opts.expect} controller`);
+  assert_equals(result, expect,
+                `${opts.scheme} URL ${opts.child} should ${opts.expect} ${opts.check}`);
 }
 
 promise_test(function(t) {
   return doAsyncTest(t, {
     scheme: 'blob',
     child: 'iframe',
+    check: 'controller',
     expect: 'inherit',
   });
 }, 'Same-origin blob URL iframe should inherit service worker controller.');
 
 promise_test(function(t) {
   return doAsyncTest(t, {
     scheme: 'blob',
+    child: 'iframe',
+    check: 'fetch',
+    expect: 'intercept',
+  });
+}, 'Same-origin blob URL iframe should intercept fetch().');
+
+promise_test(function(t) {
+  return doAsyncTest(t, {
+    scheme: 'blob',
     child: 'worker',
+    check: 'controller',
     expect: 'inherit',
   });
 }, 'Same-origin blob URL worker should inherit service worker controller.');
 
 promise_test(function(t) {
+  return doAsyncTest(t, {
+    scheme: 'blob',
+    child: 'worker',
+    check: 'fetch',
+    expect: 'intercept',
+  });
+}, 'Same-origin blob URL worker should intercept fetch().');
+
+promise_test(function(t) {
   // Data URLs should result in an opaque origin and should probably not
   // have access to a cross-origin service worker.  See:
   //
   // https://github.com/w3c/ServiceWorker/issues/1262
   //
   return doAsyncTest(t, {
     scheme: 'data',
     child: 'iframe',
+    check: 'controller',
     expect: 'not inherit',
   });
 }, 'Data URL iframe should not inherit service worker controller.');
 
 promise_test(function(t) {
+  return doAsyncTest(t, {
+    scheme: 'data',
+    child: 'iframe',
+    check: 'fetch',
+    expect: 'not intercept',
+  });
+}, 'Data URL iframe should not intercept fetch().');
+
+promise_test(function(t) {
   // Data URLs should result in an opaque origin and should probably not
   // have access to a cross-origin service worker.  See:
   //
   // https://github.com/w3c/ServiceWorker/issues/1262
   //
   return doAsyncTest(t, {
     scheme: 'data',
     child: 'worker',
+    check: 'controller',
     expect: 'not inherit',
   });
 }, 'Data URL worker should not inherit service worker controller.');
 
+promise_test(function(t) {
+  return doAsyncTest(t, {
+    scheme: 'data',
+    child: 'worker',
+    check: 'fetch',
+    expect: 'not intercept',
+  });
+}, 'Data URL worker should not intercept fetch().');
+
 </script>
 </body>
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-frame.html b/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-frame.html
--- a/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-frame.html
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-frame.html
@@ -1,33 +1,71 @@
 <!DOCTYPE html>
 <html>
 <script>
 
-const frameText =
+const fetchURL = new URL('dummy.txt', window.location).href;
+
+const frameControllerText =
 `<script>
   let t = navigator.serviceWorker.controller
         ? navigator.serviceWorker.controller.scriptURL
         : null;
-  parent.postMessage(t, "*");
+  parent.postMessage({ data: t }, '*');
 </` + `script>`;
 
-const workerText =
+const frameFetchText =
+`<script>
+  fetch('${fetchURL}', { mode: 'no-cors' }).then(response => {
+    return response.text();
+  }).then(text => {
+    parent.postMessage({ data: text }, '*');
+  }).catch(e => {
+    parent.postMessage({ data: e.message }, '*');
+  });
+</` + `script>`;
+
+const workerControllerText =
 `let t = navigator.serviceWorker.controller
        ? navigator.serviceWorker.controller.scriptURL
        : null;
 self.postMessage(t);`;
 
+const workerFetchText =
+`fetch('${fetchURL}', { mode: 'no-cors' }).then(response => {
+  return response.text();
+}).then(text => {
+  self.postMessage(text);
+}).catch(e => {
+  self.postMessage(e.message);
+});`
+
 function getChildText(opts) {
   if (opts.child === 'iframe') {
-    return frameText;
+    if (opts.check === 'controller') {
+      return frameControllerText;
+    }
+
+    if (opts.check === 'fetch') {
+      return frameFetchText;
+    }
+
+    throw('unexpected feature to check: ' + opts.check);
   }
 
   if (opts.child === 'worker') {
-    return workerText;
+    if (opts.check === 'controller') {
+      return workerControllerText;
+    }
+
+    if (opts.check === 'fetch') {
+      return workerFetchText;
+    }
+
+    throw('unexpected feature to check: ' + opts.check);
   }
 
   throw('unexpected child type ' + opts.child);
 }
 
 function makeURL(opts) {
   if (opts.scheme === 'blob') {
     let blob = new Blob([getChildText(opts)]);
diff --git a/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-worker.js b/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-worker.js
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/resources/local-url-inherit-controller-worker.js
@@ -0,0 +1,5 @@
+addEventListener('fetch', evt => {
+  if (evt.request.url.includes('dummy')) {
+    evt.respondWith(new Response('intercepted'));
+  }
+});
