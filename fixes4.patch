# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  7384ebfffaefb3ea8003bc2003eea31aaf3ee5ac

diff --git a/layout/reftests/bugs/703186-1.html b/layout/reftests/bugs/703186-1.html
--- a/layout/reftests/bugs/703186-1.html
+++ b/layout/reftests/bugs/703186-1.html
@@ -1,25 +1,25 @@
 <!DOCTYPE html>
 <html class="reftest-wait">
   <head>
     <script type="text/javascript">
       function init()
       {
-        window.addEventListener("focus", function (e) { e.stopPropagation(); },
+        window.addEventListener("focus", function (e) { e.stopPropagation(); dump('### ### called stopPropagation()\n'); },
                                 true);
         document.getElementById("link").focus();
-        setTimeout(finish, 0);
+        setTimeout(finish, 10);
       }
 
       function finish()
       {
         document.documentElement.removeAttribute("class");
       }
     </script>
   </head>
-  <body onload="setTimeout(init, 0);">
+  <body onload="setTimeout(init, 10);">
     <img src="100x80-white-rect-top-right.png" usemap="#map">
     <map name="map">
       <area id="link" shape="rect" coords="10,10,30,30" href="about:blank">
     </map>
   </body>
 </html>
diff --git a/layout/tools/reftest/bootstrap.js b/layout/tools/reftest/bootstrap.js
--- a/layout/tools/reftest/bootstrap.js
+++ b/layout/tools/reftest/bootstrap.js
@@ -18,17 +18,17 @@ var WindowListener = {
       while (windows.hasMoreElements()) {
         win = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
         break;
       }
 
       Cu.import("chrome://reftest/content/reftest.jsm");
       win.addEventListener("pageshow", function() {
         // Add setTimeout here because windows.innerWidth/Height are not set yet.
-        win.setTimeout(function() {OnRefTestLoad(win);}, 0);
+        win.setTimeout(function() {OnRefTestLoad(win);}, 10);
       }, {once: true});
     }, {once: true});
   }
 };
 
 function startup(data, reason) {
   if (Services.appinfo.OS == "Android") {
     Cm.addBootstrappedManifestLocation(data.installPath);
diff --git a/layout/tools/reftest/reftest-content.js b/layout/tools/reftest/reftest-content.js
--- a/layout/tools/reftest/reftest-content.js
+++ b/layout/tools/reftest/reftest-content.js
@@ -458,33 +458,33 @@ function WaitForTestEnd(contentRootEleme
             // Invalidation in subframes will cause invalidation in the toplevel document anyway.
             return;
         }
 
         SendUpdateCanvasForEvent(event, contentRootElement);
         // These events are fired immediately after a paint. Don't
         // confuse ourselves by firing synchronously if we triggered the
         // paint ourselves.
-        setTimeout(MakeProgress, 0);
+        setTimeout(MakeProgress, 10);
     }
 
     function AttrModifiedListener() {
         LogInfo("AttrModifiedListener fired");
         // Wait for the next return-to-event-loop before continuing --- for
         // example, the attribute may have been modified in an subdocument's
         // load event handler, in which case we need load event processing
         // to complete and unsuppress painting before we check isMozAfterPaintPending.
-        setTimeout(MakeProgress, 0);
+        setTimeout(MakeProgress, 10);
     }
 
     function ExplicitPaintsCompleteListener() {
         LogInfo("ExplicitPaintsCompleteListener fired");
         // Since this can fire while painting, don't confuse ourselves by
         // firing synchronously. It's fine to do this asynchronously.
-        setTimeout(MakeProgress, 0);
+        setTimeout(MakeProgress, 10);
     }
 
     function RemoveListeners() {
         // OK, we can end the test now.
         removeEventListener("MozAfterPaint", AfterPaintListener, false);
         if (contentRootElement) {
             contentRootElement.removeEventListener("DOMAttrModified", AttrModifiedListener);
         }
@@ -631,17 +631,17 @@ function WaitForTestEnd(contentRootEleme
               }
               CheckLayerAssertions(contentRootElement);
             }
             LogInfo("MakeProgress: Completed");
             state = STATE_COMPLETED;
             gFailureReason = "timed out while taking snapshot (bug in harness?)";
             RemoveListeners();
             CheckForProcessCrashExpectation();
-            setTimeout(RecordResult, 0);
+            setTimeout(RecordResult, 10);
             return;
         }
     }
 
     LogInfo("WaitForTestEnd: Adding listeners");
     addEventListener("MozAfterPaint", AfterPaintListener, false);
     // If contentRootElement is null then shouldWaitForReftestWaitRemoval will
     // always return false so we don't need a listener anyway
@@ -744,31 +744,31 @@ function OnDocumentLoad(event)
 
     if (shouldWaitForReftestWaitRemoval(contentRootElement) ||
         shouldWaitForExplicitPaintWaiters() ||
         spellCheckedElements.length) {
         // Go into reftest-wait mode immediately after painting has been
         // unsuppressed, after the onload event has finished dispatching.
         gFailureReason = "timed out waiting for test to complete (trying to get into WaitForTestEnd)";
         LogInfo("OnDocumentLoad triggering WaitForTestEnd");
-        setTimeout(function () { WaitForTestEnd(contentRootElement, inPrintMode, spellCheckedElements); }, 0);
+        setTimeout(function () { WaitForTestEnd(contentRootElement, inPrintMode, spellCheckedElements); }, 10);
     } else {
         if (doPrintMode(contentRootElement)) {
             LogInfo("OnDocumentLoad setting up print mode");
             setupPrintMode();
             inPrintMode = true;
         }
 
         // Since we can't use a bubbling-phase load listener from chrome,
         // this is a capturing phase listener.  So do setTimeout twice, the
         // first to get us after the onload has fired in the content, and
         // the second to get us after any setTimeout(foo, 0) in the content.
         gFailureReason = "timed out waiting for test to complete (waiting for onload scripts to complete)";
         LogInfo("OnDocumentLoad triggering AfterOnLoadScripts");
-        setTimeout(function () { setTimeout(AfterOnLoadScripts, 0); }, 0);
+        setTimeout(function () { setTimeout(AfterOnLoadScripts, 0); }, 10);
     }
 }
 
 function CheckLayerAssertions(contentRootElement)
 {
     if (!contentRootElement) {
         return;
     }
