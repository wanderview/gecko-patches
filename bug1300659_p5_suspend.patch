# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  55074ae7e844cc8e3497079e4e49fd71b5b2abdb
Bug 1300659 P5 Suspend a window if its main thread TaskQueue falls to far behind. r=smaug

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -3653,16 +3653,52 @@ nsGlobalWindow::MaybeCreateMainThreadTas
   NS_GetMainThread(getter_AddRefs(mainThread));
   MOZ_DIAGNOSTIC_ASSERT(mainThread);
 
   // This may return nullptr during xpcom shutdown.  This is ok as we
   // do not guarantee a task queue will be present.
   mMainThreadTaskQueue = SelfClosingTaskQueueTarget::Create(mainThread);
 }
 
+void
+nsGlobalWindow::MaybeApplyMainThreadTaskQueueBackPressure()
+{
+  MOZ_ASSERT(NS_IsMainThread());
+
+  // If we are already suspended, then we don't need to apply back
+  // pressure for TaskQueue reasons.  This also avoids repeatedly
+  // calling SuspendTimeout() if this routine is executed many times
+  // before dropping below the backpressure threshold.
+  if (IsSuspended()) {
+    return;
+  }
+
+  RefPtr<SelfClosingTaskQueueTarget> taskQueue = GetMainThreadTaskQueue();
+  if (!taskQueue) {
+    return;
+  }
+
+  static const uint32_t kTaskQueueBackPressure = 5000;
+  if (taskQueue->ImpreciseLengthForHeuristics() < kTaskQueueBackPressure) {
+    return;
+  }
+
+  // First attempt to queue a runnable to resume running timeouts.  We do
+  // this first in order to verify we can dispatch successfully.
+  nsCOMPtr<nsIRunnable> r = NewRunnableMethod(this, &nsGlobalWindow::Resume);
+  nsresult rv = taskQueue->Dispatch(r.forget(), NS_DISPATCH_NORMAL);
+  NS_ENSURE_SUCCESS_VOID(rv);
+
+  // Since the resume is dispatched we can go ahead and suspend the window
+  // now.  Once the task queue drains the resume will automatically get
+  // executed balancing this suspend.
+  // TODO: Consider suppressing event handling as well.
+  Suspend();
+}
+
 SelfClosingTaskQueueTarget*
 nsGlobalWindow::GetMainThreadTaskQueue()
 {
   FORWARD_TO_OUTER(GetMainThreadTaskQueue, (), nullptr);
   return mMainThreadTaskQueue;
 }
 
 //*****************************************************************************
@@ -13035,16 +13071,18 @@ nsGlobalWindow::RunTimeout(nsTimeout *aT
   }
 
   // Take the dummy timeout off the head of the list
   dummy_timeout->remove();
   timeoutExtraRef = nullptr;
   MOZ_ASSERT(dummy_timeout->HasRefCntOne(), "dummy_timeout may leak");
 
   mTimeoutInsertionPoint = last_insertion_point;
+
+  MaybeApplyMainThreadTaskQueueBackPressure();
 }
 
 void
 nsGlobalWindow::ClearTimeoutOrInterval(int32_t aTimerID)
 {
   MOZ_RELEASE_ASSERT(IsInnerWindow());
 
   uint32_t public_id = (uint32_t)aTimerID;
diff --git a/dom/base/nsGlobalWindow.h b/dom/base/nsGlobalWindow.h
--- a/dom/base/nsGlobalWindow.h
+++ b/dom/base/nsGlobalWindow.h
@@ -1754,16 +1754,22 @@ private:
   // Maybe create a TaskQueue for dispatching runnables to the main thread
   // from this window.  This TaskQueue will throttle these runnables and
   // prevent the window content from significantly impacting main thread
   // responsiveness.  Certain situations will result in a nullptr task
   // queue even after calling this method.
   void
   MaybeCreateMainThreadTaskQueue();
 
+  // Apply back pressure to the window if the main thread TaskQueue exists
+  // and has too many runnables waiting to run.  For example, suspend timers
+  // until we have a chance to catch up, etc.
+  void
+  MaybeApplyMainThreadTaskQueueBackPressure();
+
   mozilla::dom::TabGroup* TabGroupInner();
   mozilla::dom::TabGroup* TabGroupOuter();
 
 public:
   mozilla::dom::TabGroup* TabGroup();
   mozilla::dom::DocGroup* GetDocGroup();
 
 protected:
