# HG changeset patch
# User Andrea Marchesini <amarchesini@mozilla.com>
# Parent  9f5e9170fbc590b256076ea30354a4fc9a720999
Bug 1128959 - Implement the WHATWG Streams spec - part 8 - NS_NewCancelableRunnableFunction, r=bkelly

diff --git a/xpcom/threads/nsThreadUtils.h b/xpcom/threads/nsThreadUtils.h
--- a/xpcom/threads/nsThreadUtils.h
+++ b/xpcom/threads/nsThreadUtils.h
@@ -506,16 +506,49 @@ public:
                   "The lambda must return void!");
     mFunction();
     return NS_OK;
   }
 private:
   StoredFunction mFunction;
 };
 
+// An event that can be used to call a C++11 functions or function objects,
+// including lambdas. The function must have no required arguments, and must
+// return void.
+template<typename StoredRunFunction, typename StoredCancelFunction>
+class CancelableRunnableFunction : public CancelableRunnable
+{
+public:
+  template <typename RunFunction, typename CancelFunction>
+  explicit CancelableRunnableFunction(RunFunction&& aRunFunction,
+                                      CancelFunction&& aCancelFunction)
+    : CancelableRunnable("RunnableFunction")
+    , mRunFunction(Forward<RunFunction>(aRunFunction))
+    , mCancelFunction(Forward<CancelFunction>(aCancelFunction))
+  { }
+
+  NS_IMETHOD Run() override {
+    static_assert(IsVoid<decltype(mRunFunction())>::value,
+                  "The lambda must return void!");
+    mRunFunction();
+    return NS_OK;
+  }
+
+  nsresult Cancel() override {
+    static_assert(IsVoid<decltype(mCancelFunction())>::value,
+                  "The lambda must return void!");
+    mCancelFunction();
+    return NS_OK;
+  }
+private:
+  StoredRunFunction mRunFunction;
+  StoredCancelFunction mCancelFunction;
+};
+
 // Type alias for NS_NewRunnableFunction
 template<typename Function>
 using RunnableFunctionImpl =
   // Make sure we store a non-reference in nsRunnableFunction.
   typename detail::RunnableFunction<typename RemoveReference<Function>::Type>;
 } // namespace detail
 
 namespace detail {
@@ -599,16 +632,30 @@ struct RemoveRawOrSmartPointer
 } // namespace mozilla
 
 inline nsISupports*
 ToSupports(mozilla::Runnable *p)
 {
   return static_cast<nsIRunnable*>(p);
 }
 
+template<typename RunFunction, typename CancelFunction>
+already_AddRefed<mozilla::CancelableRunnable>
+NS_NewCancelableRunnableFunction(const char* aName, RunFunction&& aRunFunction,
+                                 CancelFunction&& aCancelFunction)
+{
+  // We store a non-reference in RunnableFunction, but still forward aFunction
+  // to move if possible.
+  return mozilla::detail::SetRunnableName(
+    aName,
+    new mozilla::detail::CancelableRunnableFunctionImpl<RunFunction, CancelFunction>(
+      mozilla::Forward<RunFunction>(aRunFunction),
+      mozilla::Forward<CancelFunction>(aCancelFunction)));
+}
+
 template<typename Function>
 already_AddRefed<mozilla::Runnable>
 NS_NewRunnableFunction(const char* aName, Function&& aFunction)
 {
   // We store a non-reference in RunnableFunction, but still forward aFunction
   // to move if possible.
   return do_AddRef(
     new mozilla::detail::RunnableFunctionImpl<Function>(
