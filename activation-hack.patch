# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  82800e7bec3ac0534ac5664e7d378f316d35edce

diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
--- a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
@@ -48,44 +48,40 @@ void
 RemoteServiceWorkerRegistrationImpl::ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg)
 {
   NS_ASSERT_OWNINGTHREAD(RemoteServiceWorkerRegistrationImpl);
   MOZ_DIAGNOSTIC_ASSERT(mOuter);
   MOZ_DIAGNOSTIC_ASSERT(aReg == mOuter);
   mOuter = nullptr;
 }
 
-RefPtr<ServiceWorkerRegistrationPromise>
-RemoteServiceWorkerRegistrationImpl::Update()
+void
+RemoteServiceWorkerRegistrationImpl::Update(ServiceWorkerRegistrationCallback&& aSuccess,
+                                            ServiceWorkerErrorCallback&& aError)
 {
   if (!mActor) {
-    return ServiceWorkerRegistrationPromise::CreateAndReject(
-      NS_ERROR_DOM_INVALID_STATE_ERR, __func__);
+    aError(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
   }
 
-  RefPtr<ServiceWorkerRegistrationPromise::Private> promise =
-    new ServiceWorkerRegistrationPromise::Private(__func__);
-
-  mActor->SendUpdate([promise] (const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aResult) {
-    if (aResult.type() == IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult::TCopyableErrorResult) {
-      // application layer error
-      auto& rv = aResult.get_CopyableErrorResult();
-      MOZ_DIAGNOSTIC_ASSERT(rv.Failed());
-      promise->Reject(rv, __func__);
-      return;
-    }
-    // success
-    auto& ipcDesc = aResult.get_IPCServiceWorkerRegistrationDescriptor();
-    promise->Resolve(ServiceWorkerRegistrationDescriptor(ipcDesc), __func__);
-  }, [promise] (ResponseRejectReason aReason) {
-    // IPC layer error
-    promise->Reject(NS_ERROR_DOM_INVALID_STATE_ERR, __func__);
-  });
-
-  return promise.forget();
+  mActor->SendUpdate(
+    [success = Move(aSuccess), error = aError]
+    (const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aResult) {
+      if (aResult.type() == IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult::TCopyableErrorResult) {
+        // application layer error
+        auto& rv = aResult.get_CopyableErrorResult();
+        MOZ_DIAGNOSTIC_ASSERT(rv.Failed());
+        error(rv);
+        return;
+      }
+      // success
+      auto& ipcDesc = aResult.get_IPCServiceWorkerRegistrationDescriptor();
+      success(ServiceWorkerRegistrationDescriptor(ipcDesc));
+    }, [error = Move(aError)] (ResponseRejectReason aReason) {
+      error(CopyableErrorResult(NS_ERROR_DOM_INVALID_STATE_ERR));
+    });
 }
 
 RefPtr<GenericPromise>
 RemoteServiceWorkerRegistrationImpl::Unregister()
 {
   if (!mActor) {
     return GenericPromise::CreateAndReject(NS_ERROR_DOM_INVALID_STATE_ERR,
                                            __func__);
diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
--- a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
@@ -27,18 +27,19 @@ class RemoteServiceWorkerRegistrationImp
 
   // ServiceWorkerRegistration::Inner implementation
   void
   SetServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
 
   void
   ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
 
-  RefPtr<ServiceWorkerRegistrationPromise>
-  Update() override;
+  void
+  Update(ServiceWorkerRegistrationCallback&& aSuccess,
+         ServiceWorkerErrorCallback&& aError) override;
 
   virtual RefPtr<GenericPromise>
   Unregister() override;
 
 public:
   explicit RemoteServiceWorkerRegistrationImpl(const ServiceWorkerRegistrationDescriptor& aDescriptor);
 
   void
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -257,36 +257,31 @@ ServiceWorkerRegistration::Update(ErrorR
   }
 
   RefPtr<Promise> outer = Promise::Create(global, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return nullptr;
   }
 
   RefPtr<ServiceWorkerRegistration> self = this;
-  RefPtr<DOMMozPromiseRequestHolder<ServiceWorkerRegistrationPromise>> holder =
-    new DOMMozPromiseRequestHolder<ServiceWorkerRegistrationPromise>(global);
 
-  mInner->Update()->Then(
-    global->EventTargetFor(TaskCategory::Other), __func__,
-    [outer, self, holder](const ServiceWorkerRegistrationDescriptor& aDesc) {
-      holder->Complete();
+  mInner->Update(
+    [outer, self](const ServiceWorkerRegistrationDescriptor& aDesc) {
       nsIGlobalObject* global = self->GetParentObject();
       MOZ_DIAGNOSTIC_ASSERT(global);
       RefPtr<ServiceWorkerRegistration> ref =
         global->GetOrCreateServiceWorkerRegistration(aDesc);
       if (!ref) {
         outer->MaybeReject(NS_ERROR_DOM_INVALID_STATE_ERR);
         return;
       }
       outer->MaybeResolve(ref);
-    }, [outer, holder] (const CopyableErrorResult& aRv) {
-      holder->Complete();
+    }, [outer] (const CopyableErrorResult& aRv) {
       outer->MaybeReject(CopyableErrorResult(aRv));
-    })->Track(*holder);
+    });
 
   return outer.forget();
 }
 
 already_AddRefed<Promise>
 ServiceWorkerRegistration::Unregister(ErrorResult& aRv)
 {
   if (!mInner) {
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -39,18 +39,19 @@ public:
     NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
 
     virtual void
     SetServiceWorkerRegistration(ServiceWorkerRegistration* aReg) = 0;
 
     virtual void
     ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg) = 0;
 
-    virtual RefPtr<ServiceWorkerRegistrationPromise>
-    Update() = 0;
+    virtual void
+    Update(ServiceWorkerRegistrationCallback&& aSuccess,
+           ServiceWorkerErrorCallback&& aError) = 0;
 
     virtual RefPtr<GenericPromise>
     Unregister() = 0;
   };
 
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_DOM_SERVICEWORKERREGISTRATION_IID)
   NS_DECL_ISUPPORTS_INHERITED
   NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(ServiceWorkerRegistration, DOMEventTargetHelper)
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
@@ -539,32 +539,35 @@ public:
     }
 
     return NS_OK;
   }
 };
 
 } // namespace
 
-RefPtr<ServiceWorkerRegistrationPromise>
-ServiceWorkerRegistrationMainThread::Update()
+void
+ServiceWorkerRegistrationMainThread::Update(ServiceWorkerRegistrationCallback&& aSuccess,
+                                            ServiceWorkerErrorCallback&& aError)
 {
   MOZ_ASSERT(NS_IsMainThread());
   MOZ_DIAGNOSTIC_ASSERT(mOuter);
 
+  /* TODO
   nsCOMPtr<nsIPrincipal> principal = mDescriptor.GetPrincipal();
   if (!principal) {
     return ServiceWorkerRegistrationPromise::CreateAndReject(
       NS_ERROR_DOM_INVALID_STATE_ERR, __func__);
   }
 
   RefPtr<MainThreadUpdateCallback> cb = new MainThreadUpdateCallback();
   UpdateInternal(principal, NS_ConvertUTF16toUTF8(mScope), cb);
 
   return cb->Promise();
+  */
 }
 
 RefPtr<GenericPromise>
 ServiceWorkerRegistrationMainThread::Unregister()
 {
   MOZ_ASSERT(NS_IsMainThread());
   MOZ_DIAGNOSTIC_ASSERT(mOuter);
 
@@ -731,19 +734,21 @@ ServiceWorkerRegistrationWorkerThread::S
 void
 ServiceWorkerRegistrationWorkerThread::ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg)
 {
   MOZ_ASSERT_IF(mOuter, mOuter == aReg);
   ReleaseListener();
   mOuter = nullptr;
 }
 
-RefPtr<ServiceWorkerRegistrationPromise>
-ServiceWorkerRegistrationWorkerThread::Update()
+void
+ServiceWorkerRegistrationWorkerThread::Update(ServiceWorkerRegistrationCallback&& aSuccess,
+                                              ServiceWorkerErrorCallback&& aError)
 {
+  /* TODO
   if (NS_WARN_IF(!mWorkerRef->GetPrivate())) {
     return ServiceWorkerRegistrationPromise::CreateAndReject(
       NS_ERROR_DOM_INVALID_STATE_ERR, __func__);
   }
 
   RefPtr<StrongWorkerRef> workerRef =
     StrongWorkerRef::Create(mWorkerRef->GetPrivate(),
                             "ServiceWorkerRegistration::Update");
@@ -777,16 +782,17 @@ ServiceWorkerRegistrationWorkerThread::U
 
   nsresult rv = workerRef->Private()->DispatchToMainThread(r.forget());
   if (NS_FAILED(rv)) {
     outer->Reject(NS_ERROR_DOM_INVALID_STATE_ERR, __func__);
     return outer.forget();
   }
 
   return outer.forget();
+  */
 }
 
 RefPtr<GenericPromise>
 ServiceWorkerRegistrationWorkerThread::Unregister()
 {
   if (NS_WARN_IF(!mWorkerRef->GetPrivate())) {
     return GenericPromise::CreateAndReject(
       NS_ERROR_DOM_INVALID_STATE_ERR, __func__);
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationImpl.h b/dom/serviceworkers/ServiceWorkerRegistrationImpl.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationImpl.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationImpl.h
@@ -37,18 +37,19 @@ public:
 
   // ServiceWorkerRegistration::Inner
   void
   SetServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
 
   void
   ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
 
-  RefPtr<ServiceWorkerRegistrationPromise>
-  Update() override;
+  void
+  Update(ServiceWorkerRegistrationCallback&& aSuccess,
+         ServiceWorkerErrorCallback&& aError) override;
 
   RefPtr<GenericPromise>
   Unregister() override;
 
   // ServiceWorkerRegistrationListener
   void
   UpdateFound() override;
 
@@ -105,18 +106,19 @@ public:
 
   // ServiceWorkerRegistration::Inner
   void
   SetServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
 
   void
   ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
 
-  RefPtr<ServiceWorkerRegistrationPromise>
-  Update() override;
+  void
+  Update(ServiceWorkerRegistrationCallback&& aSuccess,
+         ServiceWorkerErrorCallback&& aError) override;
 
   RefPtr<GenericPromise>
   Unregister() override;
 
   void
   UpdateFound();
 
 private:
diff --git a/dom/serviceworkers/ServiceWorkerUtils.h b/dom/serviceworkers/ServiceWorkerUtils.h
--- a/dom/serviceworkers/ServiceWorkerUtils.h
+++ b/dom/serviceworkers/ServiceWorkerUtils.h
@@ -23,16 +23,22 @@ class ServiceWorkerRegistrationData;
 class ServiceWorkerRegistrationDescriptor;
 
 typedef MozPromise<ServiceWorkerRegistrationDescriptor, CopyableErrorResult, false>
         ServiceWorkerRegistrationPromise;
 
 typedef MozPromise<nsTArray<ServiceWorkerRegistrationDescriptor>, CopyableErrorResult, false>
         ServiceWorkerRegistrationListPromise;
 
+typedef std::function<void (const ServiceWorkerRegistrationDescriptor&)>
+        ServiceWorkerRegistrationCallback;
+
+typedef std::function<void (const CopyableErrorResult&)>
+        ServiceWorkerErrorCallback;
+
 bool
 ServiceWorkerParentInterceptEnabled();
 
 bool
 ServiceWorkerRegistrationDataIsValid(const ServiceWorkerRegistrationData& aData);
 
 nsresult
 ServiceWorkerScopeAndScriptAreValid(const ClientInfo& aClientInfo,
