# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d5ee36f811a86644a64374a991748a96ea0de7e0
Bug 1459209 P4 Scaffold RemoteServiceWorkerRegistrationImpl to connect the binding registration to the actor. r=baku

diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
new file mode 100644
--- /dev/null
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
@@ -0,0 +1,119 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "RemoteServiceWorkerRegistrationImpl.h"
+
+#include "ServiceWorkerRegistrationChild.h"
+
+namespace mozilla {
+namespace dom {
+
+RemoteServiceWorkerRegistrationImpl::~RemoteServiceWorkerRegistrationImpl()
+{
+  MOZ_DIAGNOSTIC_ASSERT(!mOuter);
+  Shutdown();
+}
+
+void
+RemoteServiceWorkerRegistrationImpl::Shutdown()
+{
+  if (mShutdown) {
+    return;
+  }
+  mShutdown = true;
+
+  if (mActor) {
+    mActor->RevokeOwner(this);
+    mActor->MaybeStartTeardown();
+    mActor = nullptr;
+  }
+}
+
+void
+RemoteServiceWorkerRegistrationImpl::SetServiceWorkerRegistration(ServiceWorkerRegistration* aReg)
+{
+  NS_ASSERT_OWNINGTHREAD(RemoteServiceWorkerRegistrationImpl);
+  MOZ_DIAGNOSTIC_ASSERT(!mOuter);
+  MOZ_DIAGNOSTIC_ASSERT(aReg);
+  mOuter = aReg;
+}
+
+void
+RemoteServiceWorkerRegistrationImpl::ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg)
+{
+  NS_ASSERT_OWNINGTHREAD(RemoteServiceWorkerRegistrationImpl);
+  MOZ_DIAGNOSTIC_ASSERT(mOuter);
+  MOZ_DIAGNOSTIC_ASSERT(aReg == mOuter);
+  mOuter = nullptr;
+}
+
+RefPtr<ServiceWorkerRegistrationPromise>
+RemoteServiceWorkerRegistrationImpl::Update()
+{
+  // TODO
+  return nullptr;
+}
+
+RefPtr<GenericPromise>
+RemoteServiceWorkerRegistrationImpl::Unregister()
+{
+  // TODO
+  return nullptr;
+}
+
+RemoteServiceWorkerRegistrationImpl::RemoteServiceWorkerRegistrationImpl(const ServiceWorkerRegistrationDescriptor& aDescriptor)
+  : mActor(nullptr)
+  , mOuter(nullptr)
+  , mShutdown(false)
+{
+  PBackgroundChild* parentActor = BackgroundChild::GetOrCreateForCurrentThread();
+  if (NS_WARN_IF(!parentActor)) {
+    Shutdown();
+    return;
+  }
+
+  RefPtr<WorkerHolderToken> workerHolderToken;
+  if (!NS_IsMainThread()) {
+    WorkerPrivate* workerPrivate = GetCurrentThreadWorkerPrivate();
+    MOZ_DIAGNOSTIC_ASSERT(workerPrivate);
+
+    workerHolderToken =
+      WorkerHolderToken::Create(workerPrivate, Terminating,
+                                WorkerHolderToken::AllowIdleShutdownStart);
+
+    if (NS_WARN_IF(!workerHolderToken)) {
+      Shutdown();
+      return;
+    }
+  }
+
+  ServiceWorkerRegistrationChild* actor =
+    new ServiceWorkerRegistrationChild(workerHolderToken);
+  PServiceWorkerRegistrationChild* sentActor =
+    parentActor->SendPServiceWorkerRegistrationConstructor(actor, aDescriptor.ToIPC());
+  if (NS_WARN_IF(!sentActor)) {
+    Shutdown();
+    return;
+  }
+  MOZ_DIAGNOSTIC_ASSERT(sentActor == actor);
+
+  mActor = actor;
+  mActor->SetOwner(this);
+}
+
+void
+RemoteServiceWorkerRegistrationImpl::RevokeActor(ServiceWorkerRegistrationChild* aActor)
+{
+  MOZ_DIAGNOSTIC_ASSERT(mActor);
+  MOZ_DIAGNOSTIC_ASSERT(mActor == aActor);
+  mActor->RevokeOwner(this);
+  mActor = nullptr;
+
+  mShutdown = true;
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
new file mode 100644
--- /dev/null
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
@@ -0,0 +1,53 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_remoteserviceworkerregistrationimpl_h__
+#define mozilla_dom_remoteserviceworkerregistrationimpl_h__
+
+#include "ServiceWorkerRegistration.h"
+
+namespace mozilla {
+namespace dom {
+
+class ServiceWorkerRegistrationChild;
+
+class RemoteServiceWorkerRegistrationImpl final : public ServiceWorkerRegistration::Inner
+{
+  ServiceWorkerRegistrationChild* mActor;
+  ServiceWorkerRegistration* mOuter;
+  bool mShutdown;
+
+  ~RemoteServiceWorkerRegistrationImpl();
+
+  void
+  Shutdown();
+
+  // ServiceWorkerRegistration::Inner implementation
+  void
+  SetServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
+
+  void
+  ClearServiceWorkerRegistration(ServiceWorkerRegistration* aReg) override;
+
+  RefPtr<ServiceWorkerRegistrationPromise>
+  Update() override;
+
+  virtual RefPtr<GenericPromise>
+  Unregister() override;
+
+public:
+  explicit RemoteServiceWorkerRegistrationImpl(const ServiceWorkerRegistrationDescriptor& aDescriptor);
+
+  void
+  RevokeActor(ServiceWorkerRegistrationChild* aActor);
+
+  NS_INLINE_DECL_REFCOUNTING(RemoteServiceWorkerRegistrationImpl, override)
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_remoteserviceworkerregistrationimpl_h__
diff --git a/dom/serviceworkers/ServiceWorkerActors.cpp b/dom/serviceworkers/ServiceWorkerActors.cpp
--- a/dom/serviceworkers/ServiceWorkerActors.cpp
+++ b/dom/serviceworkers/ServiceWorkerActors.cpp
@@ -85,17 +85,17 @@ InitServiceWorkerContainerParent(PServic
 {
   auto actor = static_cast<ServiceWorkerContainerParent*>(aActor);
   actor->Init();
 }
 
 PServiceWorkerRegistrationChild*
 AllocServiceWorkerRegistrationChild()
 {
-  return new ServiceWorkerRegistrationChild();
+  MOZ_CRASH("should not be called");
 }
 
 bool
 DeallocServiceWorkerRegistrationChild(PServiceWorkerRegistrationChild* aActor)
 {
   auto actor = static_cast<ServiceWorkerRegistrationChild*>(aActor);
   delete actor;
   return true;
diff --git a/dom/serviceworkers/ServiceWorkerJobQueue.cpp b/dom/serviceworkers/ServiceWorkerJobQueue.cpp
--- a/dom/serviceworkers/ServiceWorkerJobQueue.cpp
+++ b/dom/serviceworkers/ServiceWorkerJobQueue.cpp
@@ -3,16 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorkerJobQueue.h"
 
 #include "ServiceWorkerJob.h"
 #include "mozilla/dom/WorkerCommon.h"
+#include "nsThreadUtils.h"
 
 namespace mozilla {
 namespace dom {
 
 class ServiceWorkerJobQueue::Callback final : public ServiceWorkerJob::Callback
 {
   RefPtr<ServiceWorkerJobQueue> mQueue;
 
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -11,16 +11,17 @@
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/PushManager.h"
 #include "mozilla/dom/ServiceWorker.h"
 #include "mozilla/dom/ServiceWorkerRegistrationBinding.h"
 #include "mozilla/dom/WorkerPrivate.h"
 #include "nsCycleCollectionParticipant.h"
 #include "nsISupportsPrimitives.h"
 #include "nsPIDOMWindow.h"
+#include "RemoteServiceWorkerRegistrationImpl.h"
 #include "ServiceWorkerRegistrationImpl.h"
 
 namespace mozilla {
 namespace dom {
 
 NS_IMPL_CYCLE_COLLECTION_INHERITED(ServiceWorkerRegistration,
                                    DOMEventTargetHelper,
                                    mInstallingWorker,
@@ -64,35 +65,46 @@ ServiceWorkerRegistration::WrapObject(JS
 
 /* static */ already_AddRefed<ServiceWorkerRegistration>
 ServiceWorkerRegistration::CreateForMainThread(nsPIDOMWindowInner* aWindow,
                                                const ServiceWorkerRegistrationDescriptor& aDescriptor)
 {
   MOZ_ASSERT(aWindow);
   MOZ_ASSERT(NS_IsMainThread());
 
-  RefPtr<Inner> inner = new ServiceWorkerRegistrationMainThread(aDescriptor);
+  RefPtr<Inner> inner;
+  if (ServiceWorkerParentInterceptEnabled()) {
+    inner = new RemoteServiceWorkerRegistrationImpl(aDescriptor);
+  } else {
+    inner = new ServiceWorkerRegistrationMainThread(aDescriptor);
+  }
+  NS_ENSURE_TRUE(inner, nullptr);
 
   RefPtr<ServiceWorkerRegistration> registration =
     new ServiceWorkerRegistration(aWindow->AsGlobal(), aDescriptor, inner);
 
   return registration.forget();
 }
 
 /* static */ already_AddRefed<ServiceWorkerRegistration>
 ServiceWorkerRegistration::CreateForWorker(WorkerPrivate* aWorkerPrivate,
                                            nsIGlobalObject* aGlobal,
                                            const ServiceWorkerRegistrationDescriptor& aDescriptor)
 {
   MOZ_DIAGNOSTIC_ASSERT(aWorkerPrivate);
   MOZ_DIAGNOSTIC_ASSERT(aGlobal);
   aWorkerPrivate->AssertIsOnWorkerThread();
 
-  RefPtr<Inner> inner =
-    new ServiceWorkerRegistrationWorkerThread(aDescriptor);
+  RefPtr<Inner> inner;
+  if (ServiceWorkerParentInterceptEnabled()) {
+    inner = new RemoteServiceWorkerRegistrationImpl(aDescriptor);
+  } else {
+    inner = new ServiceWorkerRegistrationWorkerThread(aDescriptor);
+  }
+  NS_ENSURE_TRUE(inner, nullptr);
 
   RefPtr<ServiceWorkerRegistration> registration =
     new ServiceWorkerRegistration(aGlobal, aDescriptor, inner);
 
   return registration.forget();
 }
 
 void
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp b/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
@@ -1,19 +1,71 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorkerRegistrationChild.h"
 
+#include "RemoteServiceWorkerRegistrationImpl.h"
+
 namespace mozilla {
 namespace dom {
 
 void
 ServiceWorkerRegistrationChild::ActorDestroy(ActorDestroyReason aReason)
 {
-  // TODO
+  if (mWorkerHolderToken) {
+    mWorkerHolderToken->RemoveListener(this);
+    mWorkerHolderToken = nullptr;
+  }
+
+  if (mOwner) {
+    mOwner->RevokeActor(this);
+    MOZ_DIAGNOSTIC_ASSERT(!mOwner);
+  }
+}
+
+void
+ServiceWorkerRegistrationChild::WorkerShuttingDown()
+{
+  MaybeStartTeardown();
+}
+
+ServiceWorkerRegistrationChild::ServiceWorkerRegistrationChild(WorkerHolderToken* aWorkerHolderToken)
+  : mWorkerHolderToken(aWorkerHolderToken)
+  , mOwner(nullptr)
+  , mTeardownStarted(false)
+{
+  if (mWorkerHolderToken) {
+    mWorkerHolderToken->AddListener(this);
+  }
+}
+
+void
+ServiceWorkerRegistrationChild::SetOwner(RemoteServiceWorkerRegistrationImpl* aOwner)
+{
+  MOZ_DIAGNOSTIC_ASSERT(!mOwner);
+  MOZ_DIAGNOSTIC_ASSERT(aOwner);
+  mOwner = aOwner;
+}
+
+void
+ServiceWorkerRegistrationChild::RevokeOwner(RemoteServiceWorkerRegistrationImpl* aOwner)
+{
+  MOZ_DIAGNOSTIC_ASSERT(mOwner);
+  MOZ_DIAGNOSTIC_ASSERT(aOwner == mOwner);
+  mOwner = nullptr;
+}
+
+void
+ServiceWorkerRegistrationChild::MaybeStartTeardown()
+{
+  if (mTeardownStarted) {
+    return;
+  }
+  mTeardownStarted = true;
+  Unused << SendTeardown();
 }
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationChild.h b/dom/serviceworkers/ServiceWorkerRegistrationChild.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationChild.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationChild.h
@@ -3,27 +3,48 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_serviceworkerregistrationchild_h__
 #define mozilla_dom_serviceworkerregistrationchild_h__
 
 #include "mozilla/dom/PServiceWorkerRegistrationChild.h"
+#include "mozilla/dom/WorkerHolderToken.h"
 
 namespace mozilla {
 namespace dom {
 
+class RemoteServiceWorkerRegistrationImpl;
+
 class ServiceWorkerRegistrationChild final : public PServiceWorkerRegistrationChild
+                                           , public WorkerHolderToken::Listener
 {
+  RefPtr<WorkerHolderToken> mWorkerHolderToken;
+  RemoteServiceWorkerRegistrationImpl* mOwner;
+  bool mTeardownStarted;
+
   // PServiceWorkerRegistrationChild
   void
   ActorDestroy(ActorDestroyReason aReason) override;
 
+  // WorkerHolderToken::Listener
+  void
+  WorkerShuttingDown() override;
+
 public:
-  ServiceWorkerRegistrationChild() = default;
+  explicit ServiceWorkerRegistrationChild(WorkerHolderToken* aWorkerHolderToken);
   ~ServiceWorkerRegistrationChild() = default;
+
+  void
+  SetOwner(RemoteServiceWorkerRegistrationImpl* aOwner);
+
+  void
+  RevokeOwner(RemoteServiceWorkerRegistrationImpl* aOwner);
+
+  void
+  MaybeStartTeardown();
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_serviceworkerregistrationchild_h__
diff --git a/dom/serviceworkers/ServiceWorkerUnregisterJob.cpp b/dom/serviceworkers/ServiceWorkerUnregisterJob.cpp
--- a/dom/serviceworkers/ServiceWorkerUnregisterJob.cpp
+++ b/dom/serviceworkers/ServiceWorkerUnregisterJob.cpp
@@ -1,17 +1,21 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ServiceWorkerUnregisterJob.h"
 
+#include "mozilla/Unused.h"
 #include "nsIPushService.h"
+#include "nsServiceManagerUtils.h"
+#include "nsThreadUtils.h"
+#include "ServiceWorkerManager.h"
 
 namespace mozilla {
 namespace dom {
 
 class ServiceWorkerUnregisterJob::PushUnsubscribeCallback final :
         public nsIUnsubscribeResultCallback
 {
 public:
diff --git a/dom/serviceworkers/moz.build b/dom/serviceworkers/moz.build
--- a/dom/serviceworkers/moz.build
+++ b/dom/serviceworkers/moz.build
@@ -25,16 +25,17 @@ EXPORTS.mozilla.dom += [
     'ServiceWorkerRegistrationDescriptor.h',
     'ServiceWorkerRegistrationInfo.h',
     'ServiceWorkerUtils.h',
 ]
 
 UNIFIED_SOURCES += [
     'RemoteServiceWorkerContainerImpl.cpp',
     'RemoteServiceWorkerImpl.cpp',
+    'RemoteServiceWorkerRegistrationImpl.cpp',
     'ServiceWorker.cpp',
     'ServiceWorkerActors.cpp',
     'ServiceWorkerChild.cpp',
     'ServiceWorkerContainer.cpp',
     'ServiceWorkerContainerChild.cpp',
     'ServiceWorkerContainerImpl.cpp',
     'ServiceWorkerContainerParent.cpp',
     'ServiceWorkerDescriptor.cpp',
