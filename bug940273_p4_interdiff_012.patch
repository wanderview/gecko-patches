# HG changeset patch
# Parent a06acc0b7dd0f85fe83a54b9ebb9c0dacfd27c42
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 012 Add MOZ_COUNT_(CTOR|DTOR) to non-ref-counted classes.


diff --git a/dom/cache/CacheChild.cpp b/dom/cache/CacheChild.cpp
--- a/dom/cache/CacheChild.cpp
+++ b/dom/cache/CacheChild.cpp
@@ -10,20 +10,22 @@
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 CacheChild::CacheChild()
   : mListener(nullptr)
 {
+  MOZ_COUNT_CTOR(cache::CacheChild);
 }
 
 CacheChild::~CacheChild()
 {
+  MOZ_COUNT_DTOR(cache::CacheChild);
   NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(!mListener);
 }
 
 void
 CacheChild::ActorDestroy(ActorDestroyReason aReason)
 {
   NS_ASSERT_OWNINGTHREAD(CacheChild);
diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -26,22 +26,24 @@ using mozilla::unused;
 using mozilla::void_t;
 using mozilla::ipc::FileDescriptorSetParent;
 using mozilla::ipc::PFileDescriptorSetParent;
 
 CacheParent::CacheParent(cache::Manager* aManager, CacheId aCacheId)
   : mManager(aManager)
   , mCacheId(aCacheId)
 {
+  MOZ_COUNT_CTOR(cache::CacheParent);
   MOZ_ASSERT(mManager);
   mManager->AddRefCacheId(mCacheId);
 }
 
 CacheParent::~CacheParent()
 {
+  MOZ_COUNT_DTOR(cache::CacheParent);
   MOZ_ASSERT(!mManager);
   MOZ_ASSERT(mFetchPutList.IsEmpty());
 }
 
 void
 CacheParent::ActorDestroy(ActorDestroyReason aReason)
 {
   MOZ_ASSERT(mManager);
diff --git a/dom/cache/CacheStorageChild.cpp b/dom/cache/CacheStorageChild.cpp
--- a/dom/cache/CacheStorageChild.cpp
+++ b/dom/cache/CacheStorageChild.cpp
@@ -10,21 +10,23 @@
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 CacheStorageChild::CacheStorageChild(CacheStorage* aListener)
   : mListener(aListener)
 {
+  MOZ_COUNT_CTOR(cache::CacheStorageChild);
   MOZ_ASSERT(mListener);
 }
 
 CacheStorageChild::~CacheStorageChild()
 {
+  MOZ_COUNT_DTOR(cache::CacheStorageChild);
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(!mListener);
 }
 
 void
 CacheStorageChild::ClearListener()
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
diff --git a/dom/cache/CacheStorageParent.cpp b/dom/cache/CacheStorageParent.cpp
--- a/dom/cache/CacheStorageParent.cpp
+++ b/dom/cache/CacheStorageParent.cpp
@@ -29,27 +29,29 @@ using mozilla::ipc::PBackgroundParent;
 using mozilla::ipc::PFileDescriptorSetParent;
 using mozilla::ipc::PrincipalInfo;
 
 CacheStorageParent::CacheStorageParent(PBackgroundParent* aManagingActor,
                                        Namespace aNamespace,
                                        const PrincipalInfo& aPrincipalInfo)
   : mNamespace(aNamespace)
 {
+  MOZ_COUNT_CTOR(cache::CacheStorageParent);
   MOZ_ASSERT(aManagingActor);
 
   nsresult rv = PrincipalVerifier::Create(this, aManagingActor, aPrincipalInfo,
                                           getter_AddRefs(mVerifier));
   if (NS_WARN_IF(NS_FAILED(rv))) {
     unused << Send__delete__(this);
   }
 }
 
 CacheStorageParent::~CacheStorageParent()
 {
+  MOZ_COUNT_DTOR(cache::CacheStorageParent);
   MOZ_ASSERT(!mManager);
 }
 
 void
 CacheStorageParent::ActorDestroy(ActorDestroyReason aReason)
 {
   if (mManager) {
     MOZ_ASSERT(mActiveRequests.Length() > 0);
