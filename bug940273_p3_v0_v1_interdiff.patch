# HG changeset patch
# Parent 06f882e27cd8eac351cf8fa3deef08c839b7f9d3
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P3 v0 to v1 interdiff.


diff --git a/dom/webidl/Cache.webidl b/dom/webidl/Cache.webidl
--- a/dom/webidl/Cache.webidl
+++ b/dom/webidl/Cache.webidl
@@ -7,42 +7,40 @@
  * http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html
  *
  */
 
 [Exposed=(Window,Worker),
  Func="mozilla::dom::cache::Cache::PrefEnabled"]
 interface Cache {
   [Throws]
-  Promise<Response> match((Request or USVString) request,
-                          optional QueryParams params);
+  Promise<Response> match(RequestInfo request,
+                          optional CacheQueryOptions options);
   [Throws]
-  Promise<sequence<Response>> matchAll(optional (Request or USVString) request,
-                                       optional QueryParams params);
+  Promise<sequence<Response>> matchAll(optional RequestInfo request,
+                                       optional CacheQueryOptions options);
   [Throws]
-  Promise<Response> add((Request or USVString) request);
+  Promise<void> add(RequestInfo request);
   [Throws]
-  Promise<sequence<Response>> addAll(sequence<(Request or USVString)> requests);
+  Promise<void> addAll(sequence<RequestInfo> requests);
   [Throws]
-  Promise<Response> put((Request or USVString) request,
-                        Response response);
+  Promise<void> put(RequestInfo request, Response response);
   [Throws]
-  Promise<boolean> delete((Request or USVString) request,
-                          optional QueryParams params);
+  Promise<boolean> delete(RequestInfo request, optional CacheQueryOptions options);
   [Throws]
-  Promise<sequence<Request>> keys(optional (Request or USVString) request,
-                                  optional QueryParams params);
+  Promise<sequence<Request>> keys(optional RequestInfo request,
+                                  optional CacheQueryOptions options);
 };
 
-dictionary QueryParams {
+dictionary CacheQueryOptions {
   boolean ignoreSearch;
   boolean ignoreMethod;
   boolean ignoreVary;
   boolean prefixMatch;
   DOMString cacheName;
 };
 
 dictionary CacheBatchOperation {
   DOMString type;
   Request request;
   Response response;
-  QueryParams matchParams;
+  CacheQueryOptions options;
 };
diff --git a/dom/webidl/CacheStorage.webidl b/dom/webidl/CacheStorage.webidl
--- a/dom/webidl/CacheStorage.webidl
+++ b/dom/webidl/CacheStorage.webidl
@@ -6,21 +6,26 @@
  * The origin of this IDL file is
  * http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html
  *
  */
 
 [Exposed=(Window,Worker),
  Func="mozilla::dom::cache::CacheStorage::PrefEnabled"]
 interface CacheStorage {
-   [Throws] Promise<Response> match((Request or USVString) request,
-                                    optional QueryParams params);
-   [Throws] Promise<boolean> has(DOMString cacheName);
-   [Throws] Promise<Cache> open(DOMString cacheName);
-   [Throws] Promise<boolean> delete(DOMString cacheName);
-   [Throws] Promise<sequence<DOMString>> keys();
+   [Throws]
+   Promise<Response> match(RequestInfo request,
+                           optional CacheQueryOptions options);
+   [Throws]
+   Promise<boolean> has(DOMString cacheName);
+   [Throws]
+   Promise<Cache> open(DOMString cacheName);
+   [Throws]
+   Promise<boolean> delete(DOMString cacheName);
+   [Throws]
+   Promise<sequence<DOMString>> keys();
 };
 
 [NoInterfaceObject, Exposed=(Window,Worker)]
 interface GlobalCaches {
   [Throws, Func="mozilla::dom::cache::CacheStorage::PrefEnabled"]
   readonly attribute CacheStorage caches;
 };
