# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  a84ef47ab7745af248978bb40ad61c2b9d499c04

diff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp
--- a/xpcom/base/nsCycleCollector.cpp
+++ b/xpcom/base/nsCycleCollector.cpp
@@ -1052,22 +1052,31 @@ public:
   }
 
   ~nsPurpleBuffer()
   {
   }
 
   // This method compacts mEntries.
   template<class PurpleVisitor>
-  void VisitEntries(PurpleVisitor& aVisitor)
+  void VisitEntries(PurpleVisitor& aVisitor, TimeStamp* aStart = nullptr,
+                                             bool* aTimeLimit = nullptr)
   {
     if (mEntries.IsEmpty()) {
       return;
     }
 
+    TimeDuration timeLimit;
+    uint32_t numChecked = 0;
+    uint32_t numToCheckPerTimeCheck = 100;
+    if (aStart && !aStart->IsNull()) {
+      timeLimit == TimeDuration::FromMicroseconds(250);
+    }
+
+
     uint32_t oldLength = mEntries.Length();
     uint32_t newLength = 0;
     auto revIter = mEntries.IterFromLast();
     auto iter = mEntries.Iter();
      // After iteration this points to the first empty entry.
     auto firstEmptyIter = mEntries.Iter();
     auto iterFromLastEntry = mEntries.IterFromLast();
     for (; !iter.Done(); iter.Next()) {
@@ -1102,16 +1111,28 @@ public:
       if (e.mObject) {
         firstEmptyIter.Next();
         ++newLength;
       }
 
       if (&e == &revIter.Get()) {
         break;
       }
+
+      if (aStart && !aStart->IsNull()) {
+        numChecked += 1;
+        if (numChecked % numToCheckPerTimeCheck == 0) {
+          TimeDuration elapsed = TimeStamp::Now() - *aStart;
+          if (elapsed >= timeLimit) {
+            printf_stderr("### ### time limit VisitEntries() after %0.3f ms\n", elapsed.ToMilliseconds());
+            *aTimeLimit = true;
+            break;
+          }
+        }
+      }
     }
 
     // There were some empty entries.
     if (oldLength != newLength) {
 
       // While visiting entries, some new ones were possibly added. This can
       // happen during CanSkip. Move all such new entries to be after other
       // entries. Note, we don't call Visit on newly added entries!
@@ -2809,27 +2830,30 @@ nsCycleCollector::FreeSnowWhite(bool aUn
 
   if (mFreeingSnowWhite) {
     return false;
   }
 
   AutoRestore<bool> ar(mFreeingSnowWhite);
   mFreeingSnowWhite = true;
 
+  TimeStamp start(aUntilNoSWInPurpleBuffer ? TimeStamp::Now() : TimeStamp());
+
   bool hadSnowWhiteObjects = false;
+  bool timeLimited = false;
   do {
     SnowWhiteKiller visitor(this);
-    mPurpleBuf.VisitEntries(visitor);
+    mPurpleBuf.VisitEntries(visitor, &start, &timeLimited);
     hadSnowWhiteObjects = hadSnowWhiteObjects ||
                           visitor.HasSnowWhiteObjects();
     if (!visitor.HasSnowWhiteObjects()) {
       break;
     }
   } while (aUntilNoSWInPurpleBuffer);
-  return hadSnowWhiteObjects;
+  return hadSnowWhiteObjects || timeLimited;
 }
 
 void
 nsCycleCollector::ForgetSkippable(bool aRemoveChildlessNodes,
                                   bool aAsyncSnowWhiteFreeing)
 {
   CheckThreadSafety();
 
