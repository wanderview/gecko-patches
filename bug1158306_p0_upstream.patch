# HG changeset patch
# Parent 5e083a57f4a6f665b23a965fa07dc75cda1d658e
# User Ben Kelly <ben@wanderview.com>
Bug 1158306 Fix upstream wpt tests to not expect exact object equality from caches.open().


diff --git a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-storage.js b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-storage.js
--- a/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-storage.js
+++ b/testing/web-platform/tests/service-workers/cache-storage/script-tests/cache-storage.js
@@ -101,40 +101,46 @@ promise_test(function(t) {
           assert_false(result,
                        'CacheStorage.has should return false for ' +
                        'nonexistent cache.');
         });
   }, 'CacheStorage.has with nonexistent cache');
 
 promise_test(function(t) {
     var cache_name = 'cache-storage/open';
+    var url = '../resources/simple.txt';
     var cache;
     return self.caches.delete(cache_name)
       .then(function() {
           return self.caches.open(cache_name);
         })
       .then(function(result) {
           cache = result;
         })
       .then(function() {
-          return self.caches.open(cache_name);
-        })
-      .then(function(result) {
-          assert_equals(result, cache,
-                        'CacheStorage.open should return the named Cache ' +
-                        'object if it exists.');
+          return cache.add('../resources/simple.txt');
         })
       .then(function() {
           return self.caches.open(cache_name);
         })
       .then(function(result) {
-          assert_equals(result, cache,
-                        'CacheStorage.open should return the same ' +
-                        'instance of an existing Cache object.');
-        });
+          assert_true(result instanceof Cache,
+                      'CacheStorage.open should return a Cache object');
+          assert_not_equals(result, cache,
+                            'CacheStorage.open should return a new Cache ' +
+                            'object each time its called.');
+          return Promise.all([cache.keys(), result.keys()]);
+        })
+      .then(function(results) {
+          var expectedUrls = results[0].map(function(r) { return r.url });
+          var actualUrls = results[1].map(function(r) { return r.url });
+          assert_array_equals(actualUrls, expectedUrls,
+                              'CacheStorage.open should return a new Cache ' +
+                              'object for the same backing store.');
+        })
   }, 'CacheStorage.open with existing cache');
 
 promise_test(function(t) {
     var cache_name = 'cache-storage/delete';
 
     return self.caches.delete(cache_name)
       .then(function() {
           return self.caches.open(cache_name);
