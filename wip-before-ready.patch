# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  fc6191ef94a80ba39f869467e29ea4c5cf9e9b24

diff --git a/dom/serviceworkers/ServiceWorkerContainer.cpp b/dom/serviceworkers/ServiceWorkerContainer.cpp
--- a/dom/serviceworkers/ServiceWorkerContainer.cpp
+++ b/dom/serviceworkers/ServiceWorkerContainer.cpp
@@ -539,17 +539,24 @@ ServiceWorkerContainer::GetReady(ErrorRe
       nsIGlobalObject* global = self->GetGlobalIfValid(rv);
       if (rv.Failed()) {
         outer->MaybeReject(rv);
         return;
       }
       RefPtr<ServiceWorkerRegistration> reg =
         global->GetOrCreateServiceWorkerRegistration(aDescriptor);
       NS_ENSURE_TRUE_VOID(reg);
-      outer->MaybeResolve(reg);
+
+      // Don't resolve the ready promise until the registration has
+      // reached the right version.  This ensures that the active
+      // worker property is set correctly on the registration.
+      reg->WhenVersionReached(aDescriptor.Version(),
+        [outer, reg] (bool aResult) {
+          outer->MaybeResolve(reg);
+        });
     }, [self, outer] (ErrorResult& aRv) {
       outer->MaybeReject(aRv);
     });
 
   return mReadyPromise;
 }
 
 // Testing only.
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -153,16 +153,27 @@ ServiceWorkerRegistration::UpdateState(c
 {
   MOZ_DIAGNOSTIC_ASSERT(MatchesDescriptor(aDescriptor));
 
   mDescriptor = aDescriptor;
 
   UpdateStateInternal(aDescriptor.GetInstalling(),
                       aDescriptor.GetWaiting(),
                       aDescriptor.GetActive());
+
+  nsTArray<UniquePtr<VersionCallback>> callbackList;
+  mVersionCallbackList.SwapElements(callbackList);
+  for (auto& cb : callbackList) {
+    if (cb->mVersion > mDescriptor.Version()) {
+      mVersionCallbackList.AppendElement(std::move(cb));
+      continue;
+    }
+
+    cb->mFunc(cb->mVersion == mDescriptor.Version());
+  }
 }
 
 bool
 ServiceWorkerRegistration::MatchesDescriptor(const ServiceWorkerRegistrationDescriptor& aDescriptor) const
 {
   return aDescriptor.Id() == mDescriptor.Id() &&
          aDescriptor.PrincipalInfo() == mDescriptor.PrincipalInfo() &&
          aDescriptor.Scope() == mDescriptor.Scope();
@@ -337,16 +348,29 @@ ServiceWorkerRegistration::GetNotificati
 
 const ServiceWorkerRegistrationDescriptor&
 ServiceWorkerRegistration::Descriptor() const
 {
   return mDescriptor;
 }
 
 void
+ServiceWorkerRegistration::WhenVersionReached(uint64_t aVersion,
+                                              ServiceWorkerBoolCallback&& aCallback)
+{
+  if (aVersion <= mDescriptor.Version()) {
+    aCallback(aVersion == mDescriptor.Version());
+    return;
+  }
+
+  mVersionCallbackList.AppendElement(
+    MakeUnique<VersionCallback>(aVersion, std::move(aCallback)));
+}
+
+void
 ServiceWorkerRegistration::MaybeScheduleUpdateFound(const Maybe<ServiceWorkerDescriptor>& aInstallingDescriptor)
 {
   uint64_t newId = aInstallingDescriptor.isSome()
                  ? aInstallingDescriptor.ref().Id()
                  : kInvalidUpdateFoundId;
 
   if (mScheduledUpdateFoundId != kInvalidUpdateFoundId) {
     if (mScheduledUpdateFoundId == newId) {
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -114,16 +114,19 @@ public:
 
   already_AddRefed<Promise>
   GetNotifications(const GetNotificationOptions& aOptions,
                    ErrorResult& aRv);
 
   const ServiceWorkerRegistrationDescriptor&
   Descriptor() const;
 
+  void
+  WhenVersionReached(uint64_t aVersion, ServiceWorkerBoolCallback&& aCallback);
+
 private:
   ServiceWorkerRegistration(nsIGlobalObject* aGlobal,
                             const ServiceWorkerRegistrationDescriptor& aDescriptor,
                             Inner* aInner);
 
   ~ServiceWorkerRegistration();
 
   void
@@ -143,16 +146,30 @@ private:
   ServiceWorkerRegistrationDescriptor mDescriptor;
   RefPtr<Inner> mInner;
 
   RefPtr<ServiceWorker> mInstallingWorker;
   RefPtr<ServiceWorker> mWaitingWorker;
   RefPtr<ServiceWorker> mActiveWorker;
   RefPtr<PushManager> mPushManager;
 
+  struct VersionCallback
+  {
+    uint64_t mVersion;
+    ServiceWorkerBoolCallback mFunc;
+
+    VersionCallback(uint64_t aVersion, ServiceWorkerBoolCallback&& aFunc)
+      : mVersion(aVersion)
+      , mFunc(std::move(aFunc))
+    {
+      MOZ_DIAGNOSTIC_ASSERT(mFunc);
+    }
+  };
+  nsTArray<UniquePtr<VersionCallback>> mVersionCallbackList;
+
   uint64_t mScheduledUpdateFoundId;
   uint64_t mDispatchedUpdateFoundId;
   uint32_t mPendingUpdatePromises;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(ServiceWorkerRegistration, NS_DOM_SERVICEWORKERREGISTRATION_IID)
 
 } // namespace dom
