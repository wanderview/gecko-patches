# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  9a9dbb75125370550d3a8017dcc2a41750a228e9
Bug 1451913 P5 Migrate the IDBFactory to the new window on document.open(). r=smaug

diff --git a/dom/base/nsGlobalWindowInner.cpp b/dom/base/nsGlobalWindowInner.cpp
--- a/dom/base/nsGlobalWindowInner.cpp
+++ b/dom/base/nsGlobalWindowInner.cpp
@@ -2487,16 +2487,21 @@ nsGlobalWindowInner::MigrateStateForDocu
   aOldInner->ForEachEventTargetObject(
     [&] (DOMEventTargetHelper* aDETH, bool* aDoneOut) {
       aDETH->BindToOwner(this->AsInner());
     });
 
   // Move the old Performance object from the old window to the new window.
   // The Performance object was also rebound in the DETH loop above.
   mPerformance = aOldInner->mPerformance.forget();
+
+  if (aOldInner->mIndexedDB) {
+    aOldInner->mIndexedDB->RebindToNewWindow(this);
+    mIndexedDB = aOldInner->mIndexedDB.forget();
+  }
 }
 
 void
 nsGlobalWindowInner::UpdateTopInnerWindow()
 {
   if (IsTopInnerWindow() || !mTopInnerWindow) {
     return;
   }
diff --git a/dom/indexedDB/IDBFactory.cpp b/dom/indexedDB/IDBFactory.cpp
--- a/dom/indexedDB/IDBFactory.cpp
+++ b/dom/indexedDB/IDBFactory.cpp
@@ -69,16 +69,18 @@ struct IDBFactory::PendingRequestInfo
     MOZ_ASSERT(aParams.type() != FactoryRequestParams::T__None);
   }
 };
 
 IDBFactory::IDBFactory()
   : mOwningObject(nullptr)
   , mBackgroundActor(nullptr)
   , mInnerWindowID(0)
+  , mActiveTransactionCount(0)
+  , mActiveDatabaseCount(0)
   , mBackgroundActorFailed(false)
   , mPrivateBrowsingMode(false)
 {
   AssertIsOnOwningThread();
 }
 
 IDBFactory::~IDBFactory()
 {
@@ -391,25 +393,31 @@ IDBFactory::AllowedForPrincipal(nsIPrinc
 
   return true;
 }
 
 void
 IDBFactory::UpdateActiveTransactionCount(int32_t aDelta)
 {
   AssertIsOnOwningThread();
+  MOZ_DIAGNOSTIC_ASSERT(aDelta > 0 ||
+                        (mActiveTransactionCount + aDelta) < mActiveTransactionCount);
+  mActiveTransactionCount += aDelta;
   if (mWindow) {
     mWindow->UpdateActiveIndexedDBTransactionCount(aDelta);
   }
 }
 
 void
 IDBFactory::UpdateActiveDatabaseCount(int32_t aDelta)
 {
   AssertIsOnOwningThread();
+  MOZ_DIAGNOSTIC_ASSERT(aDelta > 0 ||
+                        (mActiveDatabaseCount + aDelta) < mActiveDatabaseCount);
+  mActiveDatabaseCount += aDelta;
   if (mWindow) {
     mWindow->UpdateActiveIndexedDBDatabaseCount(aDelta);
   }
 }
 
 bool
 IDBFactory::IsChrome() const
 {
@@ -865,16 +873,33 @@ IDBFactory::InitiateRequest(IDBOpenDBReq
   }
 
   MOZ_ASSERT(actor->GetActorEventTarget(),
     "The event target shall be inherited from its manager actor.");
 
   return NS_OK;
 }
 
+void
+IDBFactory::RebindToNewWindow(nsPIDOMWindowInner* aNewWindow)
+{
+  MOZ_DIAGNOSTIC_ASSERT(aNewWindow);
+  MOZ_DIAGNOSTIC_ASSERT(mWindow);
+  MOZ_DIAGNOSTIC_ASSERT(aNewWindow != mWindow);
+
+  mWindow->UpdateActiveIndexedDBTransactionCount(-1 * mActiveTransactionCount);
+  mWindow->UpdateActiveIndexedDBDatabaseCount(-1 * mActiveDatabaseCount);
+
+  mWindow = aNewWindow;
+
+  mInnerWindowID = aNewWindow->WindowID();
+  mWindow->UpdateActiveIndexedDBTransactionCount(mActiveTransactionCount);
+  mWindow->UpdateActiveIndexedDBDatabaseCount(mActiveDatabaseCount);
+}
+
 NS_IMPL_CYCLE_COLLECTING_ADDREF(IDBFactory)
 NS_IMPL_CYCLE_COLLECTING_RELEASE(IDBFactory)
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(IDBFactory)
   NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
   NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
diff --git a/dom/indexedDB/IDBFactory.h b/dom/indexedDB/IDBFactory.h
--- a/dom/indexedDB/IDBFactory.h
+++ b/dom/indexedDB/IDBFactory.h
@@ -71,16 +71,18 @@ class IDBFactory final
 
   indexedDB::BackgroundFactoryChild* mBackgroundActor;
 
   // It is either set to a DocGroup-specific EventTarget if created by
   // CreateForWindow() or set to GetCurrentThreadEventTarget() otherwise.
   nsCOMPtr<nsIEventTarget> mEventTarget;
 
   uint64_t mInnerWindowID;
+  uint32_t mActiveTransactionCount;
+  uint32_t mActiveDatabaseCount;
 
   bool mBackgroundActorFailed;
   bool mPrivateBrowsingMode;
 
 public:
   static nsresult
   CreateForWindow(nsPIDOMWindowInner* aWindow,
                   IDBFactory** aFactory);
@@ -220,16 +222,19 @@ public:
   already_AddRefed<IDBOpenDBRequest>
   DeleteForPrincipal(JSContext* aCx,
                      nsIPrincipal* aPrincipal,
                      const nsAString& aName,
                      const IDBOpenDBOptions& aOptions,
                      SystemCallerGuarantee,
                      ErrorResult& aRv);
 
+  void
+  RebindToNewWindow(nsPIDOMWindowInner* aNewWindow);
+
   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
   NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(IDBFactory)
 
   // nsWrapperCache
   virtual JSObject*
   WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) override;
 
 private:
