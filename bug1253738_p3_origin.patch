# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  9cf8e5d951a1d99244b6be07a7f0fa7fd228c56f
Bug 1253738 P3 Use origin the ServiceWorkerManager scope key. r=baku

diff --git a/dom/workers/ServiceWorkerManager.cpp b/dom/workers/ServiceWorkerManager.cpp
--- a/dom/workers/ServiceWorkerManager.cpp
+++ b/dom/workers/ServiceWorkerManager.cpp
@@ -2640,16 +2640,17 @@ ServiceWorkerManager::NotifyUnregister(n
   AppendPendingOperation(queue, job);
   return NS_OK;
 }
 
 ServiceWorkerJobQueue*
 ServiceWorkerManager::GetOrCreateJobQueue(const nsACString& aKey,
                                           const nsACString& aScope)
 {
+  MOZ_ASSERT(!aKey.IsEmpty());
   ServiceWorkerManager::RegistrationDataPerPrincipal* data;
   if (!mRegistrationInfos.Get(aKey, &data)) {
     data = new RegistrationDataPerPrincipal();
     mRegistrationInfos.Put(aKey, data);
   }
 
   ServiceWorkerJobQueue* queue;
   if (!data->mJobQueues.Get(aScope, &queue)) {
@@ -3138,20 +3139,20 @@ ServiceWorkerManager::GetServiceWorkerRe
   MOZ_ASSERT(data);
 
   RefPtr<ServiceWorkerRegistrationInfo> registration;
   data->mInfos.Get(scope, getter_AddRefs(registration));
   // ordered scopes and registrations better be in sync.
   MOZ_ASSERT(registration);
 
 #ifdef DEBUG
-  nsAutoCString originSuffix;
-  rv = registration->mPrincipal->GetOriginSuffix(originSuffix);
+  nsAutoCString origin;
+  rv = registration->mPrincipal->GetOrigin(origin);
   MOZ_ASSERT(NS_SUCCEEDED(rv));
-  MOZ_ASSERT(originSuffix.Equals(aScopeKey));
+  MOZ_ASSERT(origin.Equals(aScopeKey));
 #endif
 
   if (registration->mPendingUninstall) {
     return nullptr;
   }
   return registration.forget();
 }
 
@@ -3160,17 +3161,17 @@ ServiceWorkerManager::PrincipalToScopeKe
                                           nsACString& aKey)
 {
   MOZ_ASSERT(aPrincipal);
 
   if (!BasePrincipal::Cast(aPrincipal)->IsCodebasePrincipal()) {
     return NS_ERROR_FAILURE;
   }
 
-  nsresult rv = aPrincipal->GetOriginSuffix(aKey);
+  nsresult rv = aPrincipal->GetOrigin(aKey);
   if (NS_WARN_IF(NS_FAILED(rv))) {
     return rv;
   }
 
   return NS_OK;
 }
 
 /* static */ void
@@ -3184,16 +3185,18 @@ ServiceWorkerManager::AddScopeAndRegistr
   MOZ_ASSERT(swm);
 
   nsAutoCString scopeKey;
   nsresult rv = swm->PrincipalToScopeKey(aInfo->mPrincipal, scopeKey);
   if (NS_WARN_IF(NS_FAILED(rv))) {
     return;
   }
 
+  MOZ_ASSERT(!scopeKey.IsEmpty());
+
   RegistrationDataPerPrincipal* data;
   if (!swm->mRegistrationInfos.Get(scopeKey, &data)) {
     data = new RegistrationDataPerPrincipal();
     swm->mRegistrationInfos.Put(scopeKey, data);
   }
 
   for (uint32_t i = 0; i < data->mOrderedScopes.Length(); ++i) {
     const nsCString& current = data->mOrderedScopes[i];
