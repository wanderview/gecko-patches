# HG changeset patch
# Parent 7dd640090c8fc86d2e4b08acea4550a64a6b294f
# User Ben Kelly <ben@wanderview.com>
Fix Vary header tests in blink's w3c tests.


diff --git a/testing/web-platform/tests/cache/resources/cache-match-worker.js b/testing/web-platform/tests/cache/resources/cache-match-worker.js
--- a/testing/web-platform/tests/cache/resources/cache-match-worker.js
+++ b/testing/web-platform/tests/cache/resources/cache-match-worker.js
@@ -243,17 +243,16 @@ prepopulated_cache_test(simple_entries, 
   }, 'Cache.matchAll with prefixMatch option');
 
 prepopulated_cache_test(vary_entries, function(cache) {
     return cache.matchAll('http://example.com/c')
       .then(function(result) {
           assert_array_equivalent(
             result,
             [
-              vary_entries.no_vary_header.response,
               vary_entries.vary_wildcard.response,
               vary_entries.vary_cookie_absent.response
             ],
             'Cache.matchAll should exclude matches if a vary header is ' +
             'missing in the query request, but is present in the cached ' +
             'request.');
         })
 
@@ -261,60 +260,60 @@ prepopulated_cache_test(vary_entries, fu
           return cache.matchAll(
             new Request('http://example.com/c',
                         {headers: {'Cookies': 'none-of-the-above'}}));
         })
       .then(function(result) {
           assert_array_equivalent(
             result,
             [
-              vary_entries.no_vary_header.response,
               vary_entries.vary_wildcard.response
             ],
             'Cache.matchAll should exclude matches if a vary header is ' +
             'missing in the cached request, but is present in the query ' +
             'request.');
         })
 
       .then(function() {
           return cache.matchAll(
             new Request('http://example.com/c',
                         {headers: {'Cookies': 'is-for-cookie'}}));
         })
       .then(function(result) {
           assert_array_equivalent(
             result,
-            [vary_entries.vary_cookie_is_cookie.response],
+            [
+              vary_entries.vary_wildcard.response,
+              vary_entries.vary_cookie_is_cookie.response
+            ],
             'Cache.matchAll should match the entire header if a vary header ' +
             'is present in both the query and cached requests.');
         });
   }, 'Cache.matchAll with responses containing "Vary" header');
 
 prepopulated_cache_test(vary_entries, function(cache) {
     return cache.match('http://example.com/c')
       .then(function(result) {
           assert_object_in_array(
             result,
             [
-              vary_entries.no_vary_header.response,
               vary_entries.vary_wildcard.response,
               vary_entries.vary_cookie_absent.response
             ],
             'Cache.match should honor "Vary" header.');
         });
   }, 'Cache.match with responses containing "Vary" header');
 
 prepopulated_cache_test(vary_entries, function(cache) {
     return cache.matchAll('http://example.com/c',
                           {ignoreVary: true})
       .then(function(result) {
           assert_array_equivalent(
             result,
             [
-              vary_entries.no_vary_header.response,
               vary_entries.vary_cookie_is_cookie.response,
               vary_entries.vary_cookie_is_good.response,
               vary_entries.vary_cookie_absent.response,
               vary_entries.vary_wildcard.response
             ],
             'Cache.matchAll should honor "ignoreVary" parameter.');
         });
   }, 'Cache.matchAll with "ignoreVary" parameter');
