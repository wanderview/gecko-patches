# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  2fd725b97395d418a633dcefc641e199b0d1c582
Bug 1293277 P2 Cleanup test_openWindow.html mochitest service worker a bit. r=baku

diff --git a/dom/workers/test/serviceworkers/openWindow_worker.js b/dom/workers/test/serviceworkers/openWindow_worker.js
--- a/dom/workers/test/serviceworkers/openWindow_worker.js
+++ b/dom/workers/test/serviceworkers/openWindow_worker.js
@@ -55,37 +55,37 @@ onmessage = function(event) {
   if (event.data == "testNoPopup") {
     client = event.source;
 
     var results = [];
     var promises = [];
     promises.push(testForUrl("about:blank", "TypeError", null, results));
     promises.push(testForUrl("http://example.com", "InvalidAccessError", null, results));
     promises.push(testForUrl("_._*`InvalidURL", "InvalidAccessError", null, results));
-    Promise.all(promises).then(function(e) {
+    event.waitUntil(Promise.all(promises).then(function(e) {
       client.postMessage(results);
-    });
+    }));
   }
   if (event.data == "NEW_WINDOW") {
     window_count += 1;
     if (window_count == expected_window_count) {
       resolve_got_all_windows();
     }
   }
 
   if (event.data == "CHECK_NUMBER_OF_WINDOWS") {
-    got_all_windows.then(function() {
+    event.waitUntil(got_all_windows.then(function() {
       return clients.matchAll();
     }).then(function(cl) {
       event.source.postMessage({result: cl.length == expected_window_count,
                                 message: "The number of windows is correct."});
       for (i = 0; i < cl.length; i++) {
         cl[i].postMessage("CLOSE");
       }
-    });
+    }));
   }
 }
 
 onnotificationclick = function(e) {
   var results = [];
   var promises = [];
 
   var redirect = "http://mochi.test:8888/tests/dom/workers/test/serviceworkers/redirect.sjs?"
@@ -96,21 +96,21 @@ onnotificationclick = function(e) {
 
   promises.push(testForUrl("about:blank", "TypeError", null, results));
   promises.push(testForUrl(different_origin, null, null, results));
   promises.push(testForUrl(same_origin, null, {url: same_origin}, results));
   promises.push(testForUrl("open_window/client.html", null, {url: same_origin}, results));
 
   // redirect tests
   promises.push(testForUrl(redirect + "open_window/client.html", null,
-			   {url: same_origin}, results));
+                           {url: same_origin}, results));
   promises.push(testForUrl(redirect + different_origin, null, null, results));
 
   promises.push(testForUrl(redirect_xorigin + "open_window/client.html", null,
-			   null, results));
+                           null, results));
   promises.push(testForUrl(redirect_xorigin + same_origin, null,
-			   {url: same_origin}, results));
+                           {url: same_origin}, results));
 
-  Promise.all(promises).then(function(e) {
+  e.waitUntil(Promise.all(promises).then(function(e) {
     client.postMessage(results);
-  });
+  }));
 }
 
