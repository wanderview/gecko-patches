# HG changeset patch
# Parent d9a05e9a809e8925cc8020c6ca5947b227caafcb
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 006 CacheChild.(h|cpp) issues and remove CacheChildListener.h

diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -84,17 +84,17 @@ NS_INTERFACE_MAP_END
 
 Cache::Cache(nsIGlobalObject* aGlobal, const nsACString& aOrigin,
              PCacheChild* aActor)
   : mGlobal(aGlobal)
   , mOrigin(aOrigin)
   , mActor(static_cast<CacheChild*>(aActor))
 {
   MOZ_ASSERT(mActor);
-  mActor->SetListener(*this);
+  mActor->SetListener(this);
 }
 
 already_AddRefed<Promise>
 Cache::Match(const RequestOrUSVString& aRequest,
              const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
@@ -355,20 +355,20 @@ Cache::GetParentObject() const
 
 JSObject*
 Cache::WrapObject(JSContext* aContext)
 {
   return CacheBinding::Wrap(aContext, this);
 }
 
 void
-Cache::ActorDestroy(mozilla::ipc::IProtocol& aActor)
+Cache::ActorDestroy(mozilla::ipc::IProtocol* aActor)
 {
   MOZ_ASSERT(mActor);
-  MOZ_ASSERT(mActor == &aActor);
+  MOZ_ASSERT(mActor == aActor);
   mActor->ClearListener();
   mActor = nullptr;
 }
 
 void
 Cache::RecvMatchResponse(RequestId aRequestId, nsresult aRv,
                          const PCacheResponseOrVoid& aResponse)
 {
@@ -501,20 +501,20 @@ Cache::AssertOwningThread() const
 {
   NS_ASSERT_OWNINGTHREAD(Cache);
 }
 #endif
 
 Cache::~Cache()
 {
   if (mActor) {
-    mActor->ClearListener();
     PCacheChild::Send__delete__(mActor);
-    // The actor will be deleted by the IPC manager
-    mActor = nullptr;
+    // ActorDestroy() is called synchronously by Send__delete__().  So we
+    // should have already cleared the mActor.
+    MOZ_ASSERT(!mActor);
   }
 }
 
 RequestId
 Cache::AddRequestPromise(Promise* aPromise, ErrorResult& aRv)
 {
   MOZ_ASSERT(aPromise);
 
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -2,49 +2,55 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_cache_Cache_h
 #define mozilla_dom_cache_Cache_h
 
-#include "mozilla/dom/cache/CacheChildListener.h"
+#include "mozilla/dom/cache/Types.h"
 #include "mozilla/dom/cache/TypeUtils.h"
 #include "nsCOMPtr.h"
 #include "nsISupportsImpl.h"
 #include "nsString.h"
 #include "nsWrapperCache.h"
 
 class nsIGlobalObject;
 
 namespace mozilla {
 
 class ErrorResult;
 
+namespace ipc {
+  class IProtocol;
+}
+
 namespace dom {
 
 class OwningRequestOrUSVString;
 class Promise;
 struct CacheQueryOptions;
 class RequestOrUSVString;
 class Response;
 template<typename T> class Optional;
 template<typename T> class Sequence;
 
 namespace cache {
 
 class CacheChild;
 class PCacheChild;
 class PCacheRequest;
 class PCacheRequestOrVoid;
+class PCacheResponse;
+class PCacheResponseOrVoid;
+class PCacheStreamControlChild;
 
 class Cache MOZ_FINAL : public nsISupports
                       , public nsWrapperCache
-                      , public CacheChildListener
                       , public TypeUtils
 {
 public:
   Cache(nsIGlobalObject* aGlobal, const nsACString& aOrigin,
         PCacheChild* aActor);
 
   // webidl interface methods
   already_AddRefed<Promise>
@@ -69,35 +75,35 @@ public:
        const CacheQueryOptions& aParams, ErrorResult& aRv);
 
   // binding methods
   static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
 
   virtual nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
 
-  // CacheChildListener methods
-  virtual void ActorDestroy(mozilla::ipc::IProtocol& aActor) MOZ_OVERRIDE;
+  // methods forwarded from CacheChild
+  virtual void ActorDestroy(mozilla::ipc::IProtocol* aActor);
   virtual void
   RecvMatchResponse(RequestId aRequestId, nsresult aRv,
-                    const PCacheResponseOrVoid& aResponse) MOZ_OVERRIDE;
+                    const PCacheResponseOrVoid& aResponse);
   virtual void
   RecvMatchAllResponse(RequestId aRequestId, nsresult aRv,
-                       const nsTArray<PCacheResponse>& aResponses) MOZ_OVERRIDE;
+                       const nsTArray<PCacheResponse>& aResponses);
   virtual void
-  RecvAddAllResponse(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
+  RecvAddAllResponse(RequestId aRequestId, nsresult aRv);
   virtual void
-  RecvPutResponse(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
+  RecvPutResponse(RequestId aRequestId, nsresult aRv);
 
   virtual void
   RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
-                     bool aSuccess) MOZ_OVERRIDE;
+                     bool aSuccess);
   virtual void
   RecvKeysResponse(RequestId aRequestId, nsresult aRv,
-                   const nsTArray<PCacheRequest>& aRequests) MOZ_OVERRIDE;
+                   const nsTArray<PCacheRequest>& aRequests);
 
   // TypeUtils methods
   virtual nsIGlobalObject*
   GetGlobalObject() const MOZ_OVERRIDE;
   const nsACString& Origin() const MOZ_OVERRIDE;
 
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
diff --git a/dom/cache/CacheChild.cpp b/dom/cache/CacheChild.cpp
--- a/dom/cache/CacheChild.cpp
+++ b/dom/cache/CacheChild.cpp
@@ -1,103 +1,115 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheChild.h"
 
-#include "mozilla/dom/cache/CacheChildListener.h"
+#include "mozilla/dom/cache/Cache.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 CacheChild::CacheChild()
   : mListener(nullptr)
 {
 }
 
 CacheChild::~CacheChild()
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(!mListener);
 }
 
 void
 CacheChild::ActorDestroy(ActorDestroyReason aReason)
 {
-  // If the listener is destroyed before we are, then they will clear
-  // their registration.
-  if (mListener) {
-    mListener->ActorDestroy(*this);
-  }
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
+  MOZ_ASSERT(mListener);
+
+  mListener->ActorDestroy(this);
+
+  // Cache listener should call ClearListener() in ActorDestroy()
+  MOZ_ASSERT(!mListener);
 }
 
 void
-CacheChild::SetListener(CacheChildListener& aListener)
+CacheChild::SetListener(Cache* aListener)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(!mListener);
-  mListener = &aListener;
+  mListener = aListener;
+  MOZ_ASSERT(mListener);
 }
 
 void
 CacheChild::ClearListener()
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener = nullptr;
 }
 
 bool
 CacheChild::RecvMatchResponse(const RequestId& requestId, const nsresult& aRv,
                               const PCacheResponseOrVoid& aResponse)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvMatchResponse(requestId, aRv, aResponse);
   return true;
 }
 
 bool
 CacheChild::RecvMatchAllResponse(const RequestId& requestId, const nsresult& aRv,
                                  const nsTArray<PCacheResponse>& responses)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvMatchAllResponse(requestId, aRv, responses);
   return true;
 }
 
 bool
 CacheChild::RecvAddAllResponse(const RequestId& requestId, const nsresult& aRv)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvAddAllResponse(requestId, aRv);
   return true;
 }
 
 bool
 CacheChild::RecvPutResponse(const RequestId& aRequestId, const nsresult& aRv)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvPutResponse(aRequestId, aRv);
   return true;
 }
 
 bool
 CacheChild::RecvDeleteResponse(const RequestId& requestId, const nsresult& aRv,
                                const bool& result)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvDeleteResponse(requestId, aRv, result);
   return true;
 }
 
 bool
 CacheChild::RecvKeysResponse(const RequestId& requestId, const nsresult& aRv,
                              const nsTArray<PCacheRequest>& requests)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheChild);
   MOZ_ASSERT(mListener);
   mListener->RecvKeysResponse(requestId, aRv, requests);
   return true;
 }
 
 } // namespace cache
 } // namespace dom
 } // namesapce mozilla
diff --git a/dom/cache/CacheChild.h b/dom/cache/CacheChild.h
--- a/dom/cache/CacheChild.h
+++ b/dom/cache/CacheChild.h
@@ -8,32 +8,35 @@
 #define mozilla_dom_cache_CacheChild_h
 
 #include "mozilla/dom/cache/PCacheChild.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-class CacheChildListener;
+class Cache;
 
 class CacheChild MOZ_FINAL : public PCacheChild
 {
-  CacheChildListener* mListener;
-
 public:
   CacheChild();
-  virtual ~CacheChild();
+  ~CacheChild();
 
-  virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
+  void SetListener(Cache* aListener);
 
-  void SetListener(CacheChildListener& aListener);
+  // Must be called by the associated Cache listener in its ActorDestroy()
+  // method.  Also, Cache must Send__delete__() the actor in its destructor to
+  // trigger ActorDestroy() if it has not been called yet.
   void ClearListener();
 
   // PCacheChild methods
+  virtual void
+  ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
+
   virtual bool
   RecvMatchResponse(const RequestId& requestId, const nsresult& aRv,
                     const PCacheResponseOrVoid& aResponse) MOZ_OVERRIDE;
   virtual bool
   RecvMatchAllResponse(const RequestId& requestId, const nsresult& aRv,
                        const nsTArray<PCacheResponse>& responses) MOZ_OVERRIDE;
   virtual bool
   RecvAddAllResponse(const RequestId& requestId,
@@ -42,15 +45,23 @@ public:
   RecvPutResponse(const RequestId& aRequestId,
                   const nsresult& aRv) MOZ_OVERRIDE;
   virtual bool
   RecvDeleteResponse(const RequestId& requestId, const nsresult& aRv,
                      const bool& result) MOZ_OVERRIDE;
   virtual bool
   RecvKeysResponse(const RequestId& requestId, const nsresult& aRv,
                    const nsTArray<PCacheRequest>& requests) MOZ_OVERRIDE;
+
+private:
+  // Use a weak ref so actor does not hold DOM object alive past content use.
+  // The Cache object must call ClearListener() to null this before its
+  // destroyed.
+  Cache* mListener;
+
+  NS_DECL_OWNINGTHREAD
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_CacheChild_h
diff --git a/dom/cache/CacheChildListener.h b/dom/cache/CacheChildListener.h
deleted file mode 100644
--- a/dom/cache/CacheChildListener.h
+++ /dev/null
@@ -1,57 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=8 sts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#ifndef mozilla_dom_cache_CacheChildListener_h
-#define mozilla_dom_cache_CacheChildListener_h
-
-#include "mozilla/dom/cache/Types.h"
-#include "nsTArray.h"
-
-namespace mozilla {
-
-namespace ipc {
-  class IProtocol;
-}
-
-namespace dom {
-namespace cache {
-
-class PCacheRequest;
-class PCacheResponse;
-class PCacheResponseOrVoid;
-class PCacheStreamControlChild;
-
-class CacheChildListener
-{
-public:
-  virtual ~CacheChildListener() { }
-  virtual void ActorDestroy(mozilla::ipc::IProtocol& aActor)=0;
-
-  virtual void
-  RecvMatchResponse(RequestId aRequestId, nsresult aRv,
-                    const PCacheResponseOrVoid& aResponse)=0;
-  virtual void
-  RecvMatchAllResponse(RequestId aRequestId, nsresult aRv,
-                       const nsTArray<PCacheResponse>& aResponses)=0;
-  virtual void
-  RecvAddAllResponse(RequestId aRequestId, nsresult aRv)=0;
-
-  virtual void
-  RecvPutResponse(RequestId aRequestId, nsresult aRv)=0;
-
-  virtual void
-  RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
-                     bool aSuccess)=0;
-  virtual void
-  RecvKeysResponse(RequestId aRequestId, nsresult aRv,
-                   const nsTArray<PCacheRequest>& aRequests)=0;
-};
-
-} // namespace cache
-} // namespace dom
-} // namespace mozilla
-
-#endif // mozilla_dom_CacheChildListener_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -3,17 +3,16 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXPORTS.mozilla.dom.cache += [
     'Action.h',
     'Cache.h',
     'CacheChild.h',
-    'CacheChildListener.h',
     'CacheParent.h',
     'CacheStorage.h',
     'CacheStorageChild.h',
     'CacheStorageParent.h',
     'CacheStreamControlChild.h',
     'CacheStreamControlListener.h',
     'CacheStreamControlParent.h',
     'Context.h',
