# HG changeset patch
# Parent d19c08ce86fca541262712ff716179f02141059d
# User Ben Kelly <ben@wanderview.com>
Bug 1110814 interdiff 001 Re-enable unified builds, fix try failures, address review feedback

diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -276,17 +276,17 @@ CacheParent::DeserializeCacheStream(cons
   nsCOMPtr<nsIInputStream> stream;
   const PCacheReadStream& readStream = aStreamOrVoid.get_PCacheReadStream();
 
   // Option 1: A push stream actor was sent for nsPipe data
   if (readStream.pushStreamParent()) {
     MOZ_ASSERT(!readStream.controlParent());
     CachePushStreamParent* pushStream =
       static_cast<CachePushStreamParent*>(readStream.pushStreamParent());
-    stream = pushStream->ExtractReader();
+    stream = pushStream->TakeReader();
     MOZ_ASSERT(stream);
     return stream.forget();
   }
 
   // Option 2: One of our own ReadStreams was passed back to us with a stream
   //           control actor.
   stream = ReadStream::Create(readStream);
   if (stream) {
diff --git a/dom/cache/CachePushStreamChild.cpp b/dom/cache/CachePushStreamChild.cpp
--- a/dom/cache/CachePushStreamChild.cpp
+++ b/dom/cache/CachePushStreamChild.cpp
@@ -15,25 +15,25 @@
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class CachePushStreamChild::Callback MOZ_FINAL : public nsIInputStreamCallback
                                                , public nsICancelableRunnable
 {
 public:
-  Callback(CachePushStreamChild* aActor)
+  explicit Callback(CachePushStreamChild* aActor)
     : mActor(aActor)
     , mOwningThread(NS_GetCurrentThread())
   {
     MOZ_ASSERT(mActor);
   }
 
-  NS_METHOD
-  OnInputStreamReady(nsIAsyncInputStream* aStream)
+  NS_IMETHOD
+  OnInputStreamReady(nsIAsyncInputStream* aStream) MOZ_OVERRIDE
   {
     // any thread
     if (mOwningThread == NS_GetCurrentThread()) {
       return Run();
     }
 
     // If this fails, then it means the owning thread is a Worker that has
     // been shutdown.  Its ok to lose the event in this case because the
@@ -41,28 +41,28 @@ public:
     nsresult rv = mOwningThread->Dispatch(this, nsIThread::DISPATCH_NORMAL);
     if (NS_FAILED(rv)) {
       NS_WARNING("Failed to dispatch stream readable event to owning thread");
     }
 
     return NS_OK;
   }
 
-  NS_METHOD
-  Run()
+  NS_IMETHOD
+  Run() MOZ_OVERRIDE
   {
     MOZ_ASSERT(mOwningThread == NS_GetCurrentThread());
     if (mActor) {
       mActor->OnStreamReady(this);
     }
     return NS_OK;
   }
 
-  NS_METHOD
-  Cancel()
+  NS_IMETHOD
+  Cancel() MOZ_OVERRIDE
   {
     // Cancel() gets called when the Worker thread is being shutdown.  We have
     // nothing to do here because CachePushStreamChild handles this case via
     // the Feature.
     return NS_OK;
   }
 
   void
diff --git a/dom/cache/CachePushStreamChild.h b/dom/cache/CachePushStreamChild.h
--- a/dom/cache/CachePushStreamChild.h
+++ b/dom/cache/CachePushStreamChild.h
@@ -40,17 +40,17 @@ private:
   void Wait();
 
   void OnStreamReady(Callback* aCallback);
 
   void OnEnd(nsresult aRv);
 
   nsCOMPtr<nsIAsyncInputStream> mStream;
   nsRefPtr<Callback> mCallback;
-  bool mClosed = false;
+  bool mClosed;
 
   NS_DECL_OWNINGTHREAD
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
diff --git a/dom/cache/CachePushStreamParent.cpp b/dom/cache/CachePushStreamParent.cpp
--- a/dom/cache/CachePushStreamParent.cpp
+++ b/dom/cache/CachePushStreamParent.cpp
@@ -40,17 +40,17 @@ CachePushStreamParent::Create()
   return new CachePushStreamParent(reader, writer);
 }
 
 CachePushStreamParent::~CachePushStreamParent()
 {
 }
 
 already_AddRefed<nsIInputStream>
-CachePushStreamParent::ExtractReader()
+CachePushStreamParent::TakeReader()
 {
   MOZ_ASSERT(mReader);
   return mReader.forget();
 }
 
 void
 CachePushStreamParent::ActorDestroy(ActorDestroyReason aReason)
 {
diff --git a/dom/cache/CachePushStreamParent.h b/dom/cache/CachePushStreamParent.h
--- a/dom/cache/CachePushStreamParent.h
+++ b/dom/cache/CachePushStreamParent.h
@@ -21,17 +21,17 @@ class CachePushStreamParent MOZ_FINAL : 
 {
 public:
   static CachePushStreamParent*
   Create();
 
   ~CachePushStreamParent();
 
   already_AddRefed<nsIInputStream>
-  ExtractReader();
+  TakeReader();
 
 private:
   CachePushStreamParent(nsIAsyncInputStream* aReader,
                         nsIAsyncOutputStream* aWriter);
 
   // PCachePushStreamParent methods
   virtual void
   ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
diff --git a/dom/cache/PCache.ipdl b/dom/cache/PCache.ipdl
--- a/dom/cache/PCache.ipdl
+++ b/dom/cache/PCache.ipdl
@@ -34,14 +34,16 @@ parent:
 
 child:
   MatchResponse(RequestId requestId, nsresult aRv, PCacheResponseOrVoid aResponse);
   MatchAllResponse(RequestId requestId, nsresult aRv, PCacheResponse[] responses);
   AddAllResponse(RequestId requestId, nsresult aRv);
   PutResponse(RequestId requestId, nsresult aRv);
   DeleteResponse(RequestId requestId, nsresult aRv, bool success);
   KeysResponse(RequestId requestId, nsresult aRv, PCacheRequest[] requests);
+
+both:
   __delete__();
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -33,18 +33,17 @@ EXPORTS.mozilla.dom.cache += [
     'ReadStream.h',
     'SavedTypes.h',
     'StreamList.h',
     'StreamUtils.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
-#UNIFIED_SOURCES += [
-SOURCES += [
+UNIFIED_SOURCES += [
     'Action.cpp',
     'ActorChild.cpp',
     'AutoUtils.cpp',
     'Cache.cpp',
     'CacheChild.cpp',
     'CacheParent.cpp',
     'CachePushStreamChild.cpp',
     'CachePushStreamParent.cpp',
diff --git a/dom/cache/test/mochitest/test_cache_put.js b/dom/cache/test/mochitest/test_cache_put.js
--- a/dom/cache/test/mochitest/test_cache_put.js
+++ b/dom/cache/test/mochitest/test_cache_put.js
@@ -1,13 +1,13 @@
-var url = 'test_cache_match.js';
+var url = 'test_cache.js';
 var cache;
 var fetchResponse;
 Promise.all([fetch(url),
-             caches.open('putter')]).then(function(results) {
+             caches.open('putter' + context)]).then(function(results) {
   fetchResponse = results[0];
   cache = results[1];
   return cache.put(url, fetchResponse.clone());
 }).then(function(result) {
   is(undefined, result, 'Successful put() should resolve undefined');
   return cache.match(url);
 }).then(function(response) {
   ok(response, 'match() should find resppnse that was previously put()');
