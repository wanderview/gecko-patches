# HG changeset patch
# User Nikhil Marathe <nsm.nikhil@gmail.com>
# Date 1403560172 25200
#      Mon Jun 23 14:49:32 2014 -0700
# Node ID a420e7259ffe23f9dd5609d255dc6c5e558b99cf
# Parent  31de1a84b27f7bf1a15d3dc9ea8a01f4acd7bd75
Bug 1017613 - Part 1 - FetchBodyStream, Headers and Request.

diff --git a/dom/base/FetchBodyStream.cpp b/dom/base/FetchBodyStream.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/FetchBodyStream.cpp
@@ -0,0 +1,78 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "FetchBodyStream.h"
+
+#include "nsPIDOMWindow.h"
+#include "nsISupportsImpl.h"
+
+#include "mozilla/dom/Promise.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(FetchBodyStream)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(FetchBodyStream)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(FetchBodyStream)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(FetchBodyStream)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+FetchBodyStream::FetchBodyStream(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+}
+
+FetchBodyStream::~FetchBodyStream()
+{
+}
+
+/* static */ already_AddRefed<FetchBodyStream>
+FetchBodyStream::Constructor(const GlobalObject& aGlobal, ErrorResult& aRv)
+{
+  nsRefPtr<FetchBodyStream> stream = new FetchBodyStream(aGlobal.GetAsSupports());
+  return stream.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsArrayBuffer()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  nsRefPtr<Promise> promise = new Promise(global);
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsBlob()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  nsRefPtr<Promise> promise = new Promise(global);
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsJSON()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  nsRefPtr<Promise> promise = new Promise(global);
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsText()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  nsRefPtr<Promise> promise = new Promise(global);
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
diff --git a/dom/base/FetchBodyStream.h b/dom/base/FetchBodyStream.h
new file mode 100644
--- /dev/null
+++ b/dom/base/FetchBodyStream.h
@@ -0,0 +1,68 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_FetchBodyStream_h
+#define mozilla_dom_FetchBodyStream_h
+
+#include "mozilla/dom/FetchBinding.h"
+
+#include "nsISupportsImpl.h"
+#include "nsWrapperCache.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class Promise;
+
+class FetchBodyStream : public nsISupports
+                      , public nsWrapperCache
+{
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(FetchBodyStream)
+
+public:
+  FetchBodyStream(nsISupports* aOwner);
+  FetchBodyStream(const FetchBodyStream& aOther)
+  {
+  }
+
+  already_AddRefed<Promise>
+  AsArrayBuffer();
+
+  already_AddRefed<Promise>
+  AsBlob();
+
+  already_AddRefed<Promise>
+  AsJSON();
+
+  already_AddRefed<Promise>
+  AsText();
+
+  static already_AddRefed<FetchBodyStream>
+  Constructor(const GlobalObject& aGlobal, ErrorResult& aRv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::FetchBodyStreamBinding::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  virtual ~FetchBodyStream();
+
+  nsISupports* mOwner;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_FetchBodyStream_h
diff --git a/dom/base/Headers.cpp b/dom/base/Headers.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/Headers.cpp
@@ -0,0 +1,36 @@
+/* -*- Mode: C++; tab-width: 3; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Headers.h"
+#include "nsDOMString.h"
+#include "nsPIDOMWindow.h"
+#include "nsISupportsImpl.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Headers)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Headers)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(Headers)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Headers)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+Headers::Headers(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+}
+
+Headers::~Headers()
+{
+}
+
+/* static */ already_AddRefed<Headers>
+Headers::Constructor(const GlobalObject& aGlobal, const Optional<NonNull<Headers>>& aInit, ErrorResult& aRv)
+{
+  nsRefPtr<Headers> headerMap = new Headers(aGlobal.GetAsSupports());
+  return headerMap.forget();
+}
diff --git a/dom/base/Headers.h b/dom/base/Headers.h
new file mode 100644
--- /dev/null
+++ b/dom/base/Headers.h
@@ -0,0 +1,98 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Headers_h
+#define mozilla_dom_Headers_h
+
+#include "mozilla/dom/HeadersBinding.h"
+
+#include "nsISupportsImpl.h"
+
+#include "nsDataHashtable.h"
+#include "nsString.h"
+#include "nsWrapperCache.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class Headers : public nsISupports
+                , public nsWrapperCache
+{
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Headers)
+
+public:
+  Headers(nsISupports* aOwner);
+  Headers(const Headers& aOther)
+  {
+  }
+  virtual ~Headers();
+
+  void
+  Append(const nsACString& aName, const nsACString& aValue)
+  {
+    nsCString value;
+    value.Assign(aValue);
+    // FIXME(nsm): Append!
+    mHeaders.Put(aName, value);
+  }
+
+  void
+  Delete(const nsACString& aName)
+  {
+    mHeaders.Remove(aName);
+  }
+
+  void
+  Get(const nsACString& aName, nsCString& aValue) const
+  {
+    mHeaders.Get(aName, &aValue);
+  }
+
+  void
+  GetAll(const nsACString& aName, nsTArray<nsCString>& aResults) const
+  {
+    // FIXME(nsm);
+  }
+
+  bool
+  Has(const nsACString& aName) const
+  {
+    return mHeaders.Contains(aName);
+  }
+
+  void
+  Set(const nsACString& aName, const nsACString& aValue)
+  {
+    nsCString value;
+    value.Assign(aValue);
+    mHeaders.Put(aName, value);
+  }
+
+  static already_AddRefed<Headers>
+  Constructor(const GlobalObject& aGlobal, const Optional<NonNull<Headers>>& aInit, ErrorResult& aRv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::HeadersBinding::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  nsISupports* mOwner;
+  nsDataHashtable<nsCStringHashKey, nsCString> mHeaders;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Headers_h
diff --git a/dom/base/Request.cpp b/dom/base/Request.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/Request.cpp
@@ -0,0 +1,64 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Request.h"
+#include "nsDOMString.h"
+#include "nsPIDOMWindow.h"
+#include "nsIURI.h"
+#include "nsISupportsImpl.h"
+
+#include "mozilla/dom/FetchBodyStream.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Request)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Request)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(Request)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Request)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+Request::Request(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+  SetIsDOMBinding();
+}
+
+Request::~Request()
+{
+}
+
+void
+Request::GetHeader(const nsAString& header, DOMString& value) const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+already_AddRefed<Headers>
+Request::Headers() const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+already_AddRefed<FetchBodyStream>
+Request::Body() const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+/*static*/ already_AddRefed<Request>
+Request::Constructor(const GlobalObject& global, const RequestOrString& aInput,
+                     const RequestInit& aInit, ErrorResult& rv)
+{
+  nsRefPtr<Request> request = new Request(global.GetAsSupports());
+  request->mMethod = aInit.mMethod.WasPassed() ? aInit.mMethod.Value() : NS_LITERAL_CSTRING("GET");
+  // FIXME(nsm): Headers
+  // FIXME(nsm): Body setup from FetchBodyStreamInit.
+  request->mMode = aInit.mMode.WasPassed() ? aInit.mMode.Value() : RequestMode::Same_origin;
+  request->mCredentials = aInit.mCredentials.WasPassed() ? aInit.mCredentials.Value() : RequestCredentials::Omit;
+  return request.forget();
+}
diff --git a/dom/base/Request.h b/dom/base/Request.h
new file mode 100644
--- /dev/null
+++ b/dom/base/Request.h
@@ -0,0 +1,104 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Request_h
+#define mozilla_dom_Request_h
+
+#include "mozilla/dom/RequestBinding.h"
+#include "mozilla/dom/UnionTypes.h"
+
+#include "nsWrapperCache.h"
+#include "nsISupportsImpl.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class FetchBodyStream;
+
+class Request : public nsISupports
+              , public nsWrapperCache
+{
+NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Request)
+
+public:
+Request(nsISupports* aOwner);
+virtual ~Request();
+
+
+  void
+  GetUrl(DOMString& aUrl) const
+  {
+    aUrl.AsAString() = mUrl;
+  }
+
+  void
+  GetMethod(nsCString& aMethod)
+  {
+    aMethod = mMethod;
+  }
+  
+  RequestMode
+  Mode() const
+  {
+    return mMode;
+  }
+
+  RequestCredentials
+  Credentials() const
+  {
+    return mCredentials;
+  }
+
+  RequestContext
+  Context() const
+  {
+    return mContext;
+  }
+
+  void
+  GetReferrer(DOMString& aReferrer) const
+  {
+    aReferrer.AsAString() = mReferrer;
+  }
+
+  void GetHeader(const nsAString& header, DOMString& value) const;
+  already_AddRefed<Headers> Headers() const;
+  already_AddRefed<FetchBodyStream> Body() const;
+
+  static already_AddRefed<Request>
+  Constructor(const GlobalObject& global, const RequestOrString& aInput,
+              const RequestInit& aInit, ErrorResult& rv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::RequestBinding_workers::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  nsISupports* mOwner;
+
+  nsCString mMethod;
+  nsString mUrl;
+  // Headers?
+  RequestContext mContext;
+  RequestMode mMode;
+  RequestCredentials mCredentials;
+  nsString mReferrer;
+  nsRefPtr<FetchBodyStream> mBody;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Request_h
diff --git a/dom/base/moz.build b/dom/base/moz.build
--- a/dom/base/moz.build
+++ b/dom/base/moz.build
@@ -50,25 +50,28 @@ EXPORTS += [
 
 EXPORTS.mozilla.dom += [
     'BarProps.h',
     'Console.h',
     'DOMCursor.h',
     'DOMError.h',
     'DOMException.h',
     'DOMRequest.h',
+    'FetchBodyStream.h',
+    'Headers.h',
     'MessageChannel.h',
     'MessagePort.h',
     'MessagePortList.h',
     'NameSpaceConstants.h',
     'Navigator.h',
     'NodeInfo.h',
     'NodeInfoInlines.h',
     'PerformanceEntry.h',
     'PerformanceResourceTiming.h',
+    'Request.h',
     'ScreenOrientation.h',
     'ScriptSettings.h',
     'StructuredCloneTags.h',
     'SubtleCrypto.h',
     'URL.h',
     'URLSearchParams.h',
 ]
 
@@ -76,16 +79,18 @@ UNIFIED_SOURCES += [
     'BarProps.cpp',
     'CompositionStringSynthesizer.cpp',
     'Console.cpp',
     'Crypto.cpp',
     'DOMCursor.cpp',
     'DOMError.cpp',
     'DOMException.cpp',
     'DOMRequest.cpp',
+    'FetchBodyStream.cpp',
+    'Headers.cpp',
     'MessageChannel.cpp',
     'MessagePortList.cpp',
     'Navigator.cpp',
     'NodeInfo.cpp',
     'nsContentPermissionHelper.cpp',
     'nsDOMClassInfo.cpp',
     'nsDOMNavigationTiming.cpp',
     'nsDOMScriptObjectFactory.cpp',
@@ -103,16 +108,17 @@ UNIFIED_SOURCES += [
     'nsScreen.cpp',
     'nsScriptNameSpaceManager.cpp',
     'nsStructuredCloneContainer.cpp',
     'nsWindowMemoryReporter.cpp',
     'nsWindowRoot.cpp',
     'nsWrapperCache.cpp',
     'PerformanceEntry.cpp',
     'PerformanceResourceTiming.cpp',
+    'Request.cpp',
     'ScriptSettings.cpp',
     'SubtleCrypto.cpp',
     'URL.cpp',
     'URLSearchParams.cpp',
     'WindowNamedPropertiesHandler.cpp',
 ]
 
 # these files couldn't be in UNIFIED_SOURCES for now for reasons given below:
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -465,16 +465,26 @@ DOMInterfaces = {
 'GainNode': {
     'resultNotAddRefed': [ 'gain' ],
 },
 
 'Geolocation': {
     'headerFile': 'nsGeolocation.h'
 },
 
+'Headers': [{
+    'headerFile': 'mozilla/dom/Headers.h',
+    'nativeType': 'mozilla::dom::Headers',
+},
+{
+    'headerFile': 'mozilla/dom/Headers.h',
+    'nativeType': 'mozilla::dom::Headers',
+    'workers': True,
+}],
+
 'History': {
     'headerFile': 'nsHistory.h',
     'nativeType': 'nsHistory'
 },
 
 'HmacKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
@@ -1001,16 +1011,26 @@ DOMInterfaces = {
     }
 },
 
 'Rect': {
     'nativeType': 'nsDOMCSSRect',
     'resultNotAddRefed': [ 'top', 'right', 'bottom', 'left' ]
 },
 
+'Request': [{
+    'headerFile': 'mozilla/dom/Request.h',
+    'nativeType': 'mozilla::dom::Request',
+},
+{
+    'headerFile': 'mozilla/dom/Request.h',
+    'nativeType': 'mozilla::dom::Request',
+    'workers': True,
+}],
+
 'RGBColor': {
     'nativeType': 'nsDOMCSSRGBColor',
     'resultNotAddRefed': [ 'alpha', 'blue', 'green', 'red' ]
 },
 
 'RsaHashedKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
diff --git a/dom/webidl/Fetch.webidl b/dom/webidl/Fetch.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Fetch.webidl
@@ -0,0 +1,26 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/
+ */
+
+typedef object JSON;
+// FIXME: Bug 1025183 ScalarValueString.
+typedef (ArrayBuffer or ArrayBufferView or Blob or DOMString) FetchBodyInit;
+// FIXME(nsm): JSON support
+typedef FetchBodyInit FetchBody;
+
+[NoInterfaceObject]
+interface FetchBodyStream {
+  // Promise<ArrayBuffer>
+  Promise asArrayBuffer();
+  // Promise<Blob>
+  Promise asBlob();
+  // Promise<JSON>
+  Promise asJSON();
+  // Promise<ScalarValueString>
+  Promise asText();
+};
diff --git a/dom/webidl/Headers.webidl b/dom/webidl/Headers.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Headers.webidl
@@ -0,0 +1,24 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/#fetch-api
+ */
+
+// FIXME(nsm)
+// typedef (Headers or sequence<sequence<ByteString>> or OpenEndedDictionary<ByteString>) HeadersInit;
+typedef Headers HeadersInit;
+
+[Constructor(optional HeadersInit init),
+ // FIXME: Exposed=Window,Worker,
+ Pref="dom.fetch.enabled"]
+interface Headers {
+  void append(ByteString name, ByteString value);
+  void delete(ByteString name);
+  ByteString? get(ByteString name);
+  sequence<ByteString> getAll(ByteString name);
+  boolean has(ByteString name);
+  void set(ByteString name, ByteString value);
+};
diff --git a/dom/webidl/Request.webidl b/dom/webidl/Request.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Request.webidl
@@ -0,0 +1,41 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/
+ */
+
+// FIXME: Bug 1025183 typedef (Request or ScalarValueString) RequestInfo;
+typedef (Request or DOMString) RequestInfo;
+
+[Constructor(RequestInfo input, optional RequestInit init),
+ // FIXME Exposed=Window,Worker
+ Pref="dom.fetch.enabled"]
+interface Request {
+  readonly attribute ByteString method;
+  // FIXME: Bug 1025183 attribute ScalarValueString url;
+  readonly attribute DOMString url;
+  readonly attribute Headers headers;
+
+  readonly attribute FetchBodyStream body;
+
+  readonly attribute RequestContext context;
+  readonly attribute DOMString referrer;
+  readonly attribute RequestMode mode;
+  readonly attribute RequestCredentials credentials;
+};
+
+dictionary RequestInit {
+  ByteString method;
+  HeadersInit headers;
+  FetchBodyInit body;
+  RequestMode mode;
+  RequestCredentials credentials;
+};
+
+// FIXME(nsm)
+enum RequestContext { "navigate" }; // context
+enum RequestMode { "same-origin", "no-cors", "cors" };
+enum RequestCredentials { "omit", "same-origin", "include" };
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -105,30 +105,32 @@ WEBIDL_FILES = [
     'DummyBinding.webidl',
     'DynamicsCompressorNode.webidl',
     'Element.webidl',
     'Event.webidl',
     'EventHandler.webidl',
     'EventListener.webidl',
     'EventSource.webidl',
     'EventTarget.webidl',
+    'Fetch.webidl',
     'File.webidl',
     'FileHandle.webidl',
     'FileList.webidl',
     'FileMode.webidl',
     'FileReader.webidl',
     'FileReaderSync.webidl',
     'FileRequest.webidl',
     'FocusEvent.webidl',
     'FormData.webidl',
     'Function.webidl',
     'GainNode.webidl',
     'Geolocation.webidl',
     'GeometryUtils.webidl',
     'GetUserMediaRequest.webidl',
+    'Headers.webidl',
     'History.webidl',
     'HTMLAllCollection.webidl',
     'HTMLAnchorElement.webidl',
     'HTMLAppletElement.webidl',
     'HTMLAreaElement.webidl',
     'HTMLAudioElement.webidl',
     'HTMLBaseElement.webidl',
     'HTMLBodyElement.webidl',
@@ -293,16 +295,17 @@ WEBIDL_FILES = [
     'PointerEvent.webidl',
     'Position.webidl',
     'PositionError.webidl',
     'ProcessingInstruction.webidl',
     'Promise.webidl',
     'PushManager.webidl',
     'Range.webidl',
     'Rect.webidl',
+    'Request.webidl',
     'RGBColor.webidl',
     'RTCConfiguration.webidl',
     'RTCIceCandidate.webidl',
     'RTCIdentityAssertion.webidl',
     'RTCPeerConnection.webidl',
     'RTCPeerConnectionStatic.webidl',
     'RTCSessionDescription.webidl',
     'RTCStatsReport.webidl',
diff --git a/dom/workers/RegisterBindings.cpp b/dom/workers/RegisterBindings.cpp
--- a/dom/workers/RegisterBindings.cpp
+++ b/dom/workers/RegisterBindings.cpp
@@ -12,21 +12,23 @@
 #include "js/OldDebugAPI.h"
 #include "mozilla/dom/BindingUtils.h"
 #include "mozilla/dom/ConsoleBinding.h"
 #include "mozilla/dom/DOMExceptionBinding.h"
 #include "mozilla/dom/EventBinding.h"
 #include "mozilla/dom/EventHandlerBinding.h"
 #include "mozilla/dom/EventTargetBinding.h"
 #include "mozilla/dom/FileReaderSyncBinding.h"
+#include "mozilla/dom/HeadersBinding.h"
 #include "mozilla/dom/ImageData.h"
 #include "mozilla/dom/ImageDataBinding.h"
 #include "mozilla/dom/MessageEventBinding.h"
 #include "mozilla/dom/MessagePortBinding.h"
 #include "mozilla/dom/PromiseBinding.h"
+#include "mozilla/dom/RequestBinding.h"
 #include "mozilla/dom/TextDecoderBinding.h"
 #include "mozilla/dom/TextEncoderBinding.h"
 #include "mozilla/dom/XMLHttpRequestBinding.h"
 #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
 #include "mozilla/dom/URLBinding.h"
 #include "mozilla/dom/URLSearchParamsBinding.h"
 #include "mozilla/dom/WorkerBinding.h"
 #include "mozilla/dom/WorkerLocationBinding.h"
@@ -74,14 +76,21 @@ WorkerPrivate::RegisterBindings(JSContex
       !URLBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !URLSearchParamsBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerLocationBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !WorkerNavigatorBinding_workers::GetConstructorObject(aCx, aGlobal)) {
     return false;
   }
 
+  if (DOMFetchEnabled()) {
+    if (!HeadersBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !RequestBinding_workers::GetConstructorObject(aCx, aGlobal)) {
+      return nullptr;
+    }
+  }
+
   if (!JS_DefineProfilingFunctions(aCx, aGlobal)) {
     return false;
   }
 
   return true;
 }
diff --git a/dom/workers/RuntimeService.cpp b/dom/workers/RuntimeService.cpp
--- a/dom/workers/RuntimeService.cpp
+++ b/dom/workers/RuntimeService.cpp
@@ -137,16 +137,17 @@ static_assert(MAX_WORKERS_PER_DOMAIN >= 
 #define PREF_MEM_OPTIONS_PREFIX "mem."
 #define PREF_GCZEAL "gcZeal"
 
 #if !(defined(DEBUG) || defined(MOZ_ENABLE_JS_DUMP))
 #define DUMP_CONTROLLED_BY_PREF 1
 #define PREF_DOM_WINDOW_DUMP_ENABLED "browser.dom.window.dump.enabled"
 #endif
 
+#define PREF_DOM_FETCH_ENABLED         "dom.fetch.enabled"
 #define PREF_WORKERS_LATEST_JS_VERSION "dom.workers.latestJSVersion"
 
 namespace {
 
 const uint32_t kNoIndex = uint32_t(-1);
 
 const JS::ContextOptions kRequiredContextOptions =
   JS::ContextOptions().setDontReportUncaught(true)
@@ -1687,16 +1688,20 @@ RuntimeService::Init()
                                         nullptr)) ||
 #endif
 #if DUMP_CONTROLLED_BY_PREF
       NS_FAILED(Preferences::RegisterCallbackAndCall(
                                   WorkerPrefChanged,
                                   PREF_DOM_WINDOW_DUMP_ENABLED,
                                   reinterpret_cast<void *>(WORKERPREF_DUMP))) ||
 #endif
+      NS_FAILED(Preferences::RegisterCallbackAndCall(
+                                  WorkerPrefChanged,
+                                  PREF_DOM_FETCH_ENABLED,
+                                  reinterpret_cast<void *>(WORKERPREF_DOM_FETCH))) ||
       NS_FAILED(Preferences::RegisterCallback(LoadRuntimeAndContextOptions,
                                               PREF_JS_OPTIONS_PREFIX,
                                               nullptr)) ||
       NS_FAILED(Preferences::RegisterCallbackAndCall(
                                                    LoadRuntimeAndContextOptions,
                                                    PREF_WORKERS_OPTIONS_PREFIX,
                                                    nullptr)) ||
       NS_FAILED(Preferences::RegisterCallbackAndCall(
@@ -1846,16 +1851,20 @@ RuntimeService::Cleanup()
                                                   PREF_WORKERS_LATEST_JS_VERSION,
                                                   nullptr)) ||
         NS_FAILED(Preferences::UnregisterCallback(LoadRuntimeAndContextOptions,
                                                   PREF_JS_OPTIONS_PREFIX,
                                                   nullptr)) ||
         NS_FAILED(Preferences::UnregisterCallback(LoadRuntimeAndContextOptions,
                                                   PREF_WORKERS_OPTIONS_PREFIX,
                                                   nullptr)) ||
+        NS_FAILED(Preferences::UnregisterCallback(
+                                  WorkerPrefChanged,
+                                  PREF_DOM_FETCH_ENABLED,
+                                  reinterpret_cast<void *>(WORKERPREF_DOM_FETCH))) ||
 #if DUMP_CONTROLLED_BY_PREF
         NS_FAILED(Preferences::UnregisterCallback(
                                   WorkerPrefChanged,
                                   PREF_DOM_WINDOW_DUMP_ENABLED,
                                   reinterpret_cast<void *>(WORKERPREF_DUMP))) ||
 #endif
 #ifdef JS_GC_ZEAL
         NS_FAILED(Preferences::UnregisterCallback(
@@ -2359,16 +2368,22 @@ RuntimeService::WorkerPrefChanged(const 
 #ifdef DUMP_CONTROLLED_BY_PREF
   if (key == WORKERPREF_DUMP) {
     key = WORKERPREF_DUMP;
     sDefaultPreferences[WORKERPREF_DUMP] =
       Preferences::GetBool(PREF_DOM_WINDOW_DUMP_ENABLED, false);
   }
 #endif
 
+  if (key == WORKERPREF_DOM_FETCH) {
+    key = WORKERPREF_DOM_FETCH;
+    sDefaultPreferences[WORKERPREF_DOM_FETCH] =
+      Preferences::GetBool(PREF_DOM_FETCH_ENABLED, false);
+  }
+
   // This function should never be registered as a callback for a preference it
   // does not handle.
   MOZ_ASSERT(key != WORKERPREF_COUNT);
 
   RuntimeService* rts = RuntimeService::GetService();
   if (rts) {
     rts->UpdateAllWorkerPreference(key, sDefaultPreferences[key]);
   }
diff --git a/dom/workers/WorkerPrivate.h b/dom/workers/WorkerPrivate.h
--- a/dom/workers/WorkerPrivate.h
+++ b/dom/workers/WorkerPrivate.h
@@ -1035,16 +1035,23 @@ public:
   bool
   DumpEnabled() const
   {
     AssertIsOnWorkerThread();
     return mPreferences[WORKERPREF_DUMP];
   }
 
   bool
+  DOMFetchEnabled() const
+  {
+    AssertIsOnWorkerThread();
+    return mPreferences[WORKERPREF_DOM_FETCH];
+  }
+
+  bool
   OnLine() const
   {
     AssertIsOnWorkerThread();
     return mOnLine;
   }
 
   void
   StopSyncLoop(nsIEventTarget* aSyncLoopTarget, bool aResult);
diff --git a/dom/workers/Workers.h b/dom/workers/Workers.h
--- a/dom/workers/Workers.h
+++ b/dom/workers/Workers.h
@@ -161,16 +161,17 @@ struct JSSettings
 
     return false;
   }
 };
 
 enum WorkerPreference
 {
   WORKERPREF_DUMP = 0, // browser.dom.window.dump.enabled
+  WORKERPREF_DOM_FETCH, // dom.fetch.enabled
   WORKERPREF_COUNT
 };
 
 // All of these are implemented in RuntimeService.cpp
 bool
 ResolveWorkerClasses(JSContext* aCx, JS::Handle<JSObject*> aObj, JS::Handle<jsid> aId,
                      JS::MutableHandle<JSObject*> aObjp);
 
diff --git a/dom/workers/test/fetch/mochitest.ini b/dom/workers/test/fetch/mochitest.ini
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/mochitest.ini
@@ -0,0 +1,5 @@
+[DEFAULT]
+support-files =
+  worker_interfaces.js
+
+[test_interfaces.html]
diff --git a/dom/workers/test/fetch/moz.build b/dom/workers/test/fetch/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/moz.build
@@ -0,0 +1,7 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+MOCHITEST_MANIFESTS += ['mochitest.ini']
diff --git a/dom/workers/test/fetch/test_interfaces.html b/dom/workers/test/fetch/test_interfaces.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/test_interfaces.html
@@ -0,0 +1,48 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug XXXXXX - Test fetch API interfaces</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none"></div>
+<pre id="test"></pre>
+<script class="testbody" type="text/javascript">
+
+  function checkEnabled() {
+    var worker = new Worker("worker_interfaces.js");
+    worker.onmessage = function(event) {
+
+      if (event.data.type == 'finish') {
+        SimpleTest.finish();
+      } else if (event.data.type == 'status') {
+        ok(event.data.status, event.data.msg);
+      }
+    }
+
+    worker.onerror = function(event) {
+      ok(false, "Worker had an error: " + event.data);
+      SimpleTest.finish();
+    };
+
+    worker.postMessage(true);
+  }
+
+  SimpleTest.waitForExplicitFinish();
+
+  SpecialPowers.pushPrefEnv({"set": [
+    ["dom.fetch.enabled", true]
+  ]}, function() {
+    checkEnabled();
+  });
+</script>
+</pre>
+</body>
+</html>
+
diff --git a/dom/workers/test/fetch/worker_interfaces.js b/dom/workers/test/fetch/worker_interfaces.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/worker_interfaces.js
@@ -0,0 +1,20 @@
+function ok(a, msg) {
+  dump("OK: " + !!a + "  =>  " + a + " " + msg + "\n");
+  postMessage({type: 'status', status: !!a, msg: a + ": " + msg });
+}
+
+function is(a, b, msg) {
+  dump("IS: " + (a===b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a === b, msg: a + " === " + b + ": " + msg });
+}
+
+function isnot(a, b, msg) {
+  dump("ISNOT: " + (a!==b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a !== b, msg: a + " !== " + b + ": " + msg });
+}
+
+onmessage = function() {
+  ok(typeof HeaderMap === "function", "HeaderMap should be defined");
+  ok(typeof Request === "function", "Request should be defined");
+  postMessage({ type: 'finish' });
+}
diff --git a/dom/workers/test/moz.build b/dom/workers/test/moz.build
--- a/dom/workers/test/moz.build
+++ b/dom/workers/test/moz.build
@@ -1,16 +1,17 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'extensions',
+    'fetch',
     'serviceworkers',
 ]
 
 MOCHITEST_MANIFESTS += ['mochitest.ini']
 
 MOCHITEST_CHROME_MANIFESTS += ['chrome.ini']
 
 XPCSHELL_TESTS_MANIFESTS += ['xpcshell/xpcshell.ini']
diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -4223,8 +4223,11 @@ pref("image.mozsamplesize.enabled", fals
 // play nicely with Firefox OS apps yet.
 #ifndef MOZ_WIDGET_GONK
 pref("beacon.enabled", true);
 #endif
 
 // Camera prefs
 pref("camera.control.autofocus_moving_callback.enabled", true);
 pref("camera.control.face_detection.enabled", true);
+
+// Fetch API.
+pref("dom.fetch.enabled", false);
