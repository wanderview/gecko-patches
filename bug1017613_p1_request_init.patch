# HG changeset patch
# Parent 349a2f00352900322fdc9d2f2b2c896d135da53d
# User Nikhil Marathe <nsm.nikhil@gmail.com>
Bug XXXXXX - Part 1 - Request IDL and stubs. r=ehsan

diff --git a/dom/base/HeaderMap.cpp b/dom/base/HeaderMap.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/HeaderMap.cpp
@@ -0,0 +1,36 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "HeaderMap.h"
+#include "nsDOMString.h"
+#include "nsPIDOMWindow.h"
+#include "nsISupportsImpl.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(HeaderMap)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(HeaderMap)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(HeaderMap)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(HeaderMap)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+HeaderMap::HeaderMap(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+}
+
+HeaderMap::~HeaderMap()
+{
+}
+
+/* static */ already_AddRefed<HeaderMap>
+HeaderMap::Constructor(const GlobalObject& aGlobal, ErrorResult& aRv)
+{
+  nsRefPtr<HeaderMap> headerMap = new HeaderMap(aGlobal.GetAsSupports());
+  return headerMap.forget();
+}
diff --git a/dom/base/HeaderMap.h b/dom/base/HeaderMap.h
new file mode 100644
--- /dev/null
+++ b/dom/base/HeaderMap.h
@@ -0,0 +1,97 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_HeaderMap_h
+#define mozilla_dom_HeaderMap_h
+
+#include "mozilla/dom/HeaderMapBinding.h"
+
+#include "nsISupportsImpl.h"
+
+#include "nsDataHashtable.h"
+#include "nsString.h"
+#include "nsWrapperCache.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class HeaderMap : public nsISupports
+                , public nsWrapperCache
+{
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(HeaderMap)
+
+public:
+  HeaderMap(nsISupports* aOwner);
+  HeaderMap(const HeaderMap& aOther)
+  {
+  }
+  virtual ~HeaderMap();
+
+  void
+  Add(const nsACString& aName, const nsACString& aValue)
+  {
+    nsCString value;
+    value.Assign(aValue);
+    mHeaders.Put(aName, value);
+  }
+
+  void
+  Delete(const nsACString& aName)
+  {
+    mHeaders.Remove(aName);
+  }
+
+  void
+  Get(const nsACString& aName, nsCString& aValue) const
+  {
+    mHeaders.Get(aName, &aValue);
+  }
+
+  void
+  GetAll(const nsACString& aName, nsTArray<nsCString>& aResults) const
+  {
+    // FIXME(nsm);
+  }
+
+  bool
+  Has(const nsACString& aName) const
+  {
+    return mHeaders.Contains(aName);
+  }
+
+  void
+  Set(const nsACString& aName, const nsACString& aValue)
+  {
+    nsCString value;
+    value.Assign(aValue);
+    mHeaders.Put(aName, value);
+  }
+
+  static already_AddRefed<HeaderMap>
+  Constructor(const GlobalObject& aGlobal, ErrorResult& aRv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::HeaderMapBinding::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  nsISupports* mOwner;
+  nsDataHashtable<nsCStringHashKey, nsCString> mHeaders;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_HeaderMap_h
diff --git a/dom/base/Request.cpp b/dom/base/Request.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/Request.cpp
@@ -0,0 +1,61 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Request.h"
+#include "nsDOMString.h"
+#include "nsPIDOMWindow.h"
+#include "nsIURI.h"
+#include "nsISupportsImpl.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Request)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Request)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(Request)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Request)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+Request::Request(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+  SetIsDOMBinding();
+}
+
+Request::~Request()
+{
+}
+
+void
+Request::GetHeader(const nsAString& header, DOMString& value) const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+already_AddRefed<HeaderMap>
+Request::Headers() const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+already_AddRefed<Promise>
+Request::BodyAs(FetchBodyType aType) const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+/*static*/ already_AddRefed<Request>
+Request::Constructor(const GlobalObject& global, const RequestOrString& aInput,
+                     const RequestInit& aInit, ErrorResult& rv)
+{
+  nsRefPtr<Request> request = new Request(global.GetAsSupports());
+  request->mMethod = aInit.mMethod.WasPassed() ? aInit.mMethod.Value() : NS_LITERAL_CSTRING("GET");
+  request->mBody = aInit.mBody.WasPassed() ? aInit.mBody.Value() : EmptyString();
+  request->mMode = aInit.mMode.WasPassed() ? aInit.mMode.Value() : RequestMode::Same_origin;
+  request->mOmitCredentialsMode = aInit.mOmitCredentialsMode.WasPassed() ? aInit.mOmitCredentialsMode.Value() : RequestOmitCredentialsMode::Omit;
+  return request.forget();
+}
diff --git a/dom/base/Request.h b/dom/base/Request.h
new file mode 100644
--- /dev/null
+++ b/dom/base/Request.h
@@ -0,0 +1,157 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Request_h
+#define mozilla_dom_Request_h
+
+#include "mozilla/dom/RequestBinding.h"
+#include "mozilla/dom/UnionTypes.h"
+
+#include "nsWrapperCache.h"
+#include "nsISupportsImpl.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class Request : public nsISupports
+              , public nsWrapperCache
+{
+NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Request)
+
+public:
+Request(nsISupports* aOwner);
+virtual ~Request();
+
+
+  void
+  GetUrl(DOMString& url) const
+  {
+    url.AsAString() = mUrl;
+  }
+
+  void
+  SetUrl(const nsAString& aUrl)
+  {
+    mUrl.Assign(aUrl);
+  }
+
+  void
+  GetMethod(nsCString& aMethod)
+  {
+    aMethod = mMethod;
+  }
+  
+  void
+  SetMethod(const nsACString& aMethod)
+  {
+    mMethod.Assign(aMethod);
+  }
+  
+  void
+  GetOrigin(DOMString& origin)
+  {
+    origin.AsAString() = mOrigin;
+  }
+
+  RequestMode
+  Mode() const
+  {
+    return mMode;
+  }
+
+  void
+  SetMode(RequestMode aMode)
+  {
+    mMode = aMode;
+  }
+
+  RequestOmitCredentialsMode
+  OmitCredentialsMode() const
+  {
+    return mOmitCredentialsMode;
+  }
+
+  void
+  SetOmitCredentialsMode(RequestOmitCredentialsMode aOmitCredentialsMode)
+  {
+    mOmitCredentialsMode = aOmitCredentialsMode;
+  }
+
+  void
+  GetReferrer(DOMString& referrer) const
+  {
+    referrer.AsAString() = mReferrer;
+  }
+
+  void GetHeader(const nsAString& header, DOMString& value) const;
+  already_AddRefed<HeaderMap> Headers() const;
+  already_AddRefed<Promise> BodyAs(FetchBodyType aType) const;
+
+  bool
+  Handles401() const
+  {
+    // FIXME(nsm).
+    return false;
+  }
+
+  bool
+  HandlesRedirects() const
+  {
+    // FIXME(nsm).
+    return false;
+  }
+
+  bool
+  IsSynchronous() const
+  {
+    // FIXME(nsm).
+    return false;
+  }
+
+  bool
+  UsingURLCredentials() const
+  {
+    // FIXME(nsm).
+    return false;
+  }
+
+  static already_AddRefed<Request>
+  Constructor(const GlobalObject& global, const RequestOrString& aInput,
+              const RequestInit& aInit, ErrorResult& rv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::RequestBinding_workers::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  nsISupports* mOwner;
+
+  nsString mOrigin;
+  nsString mBody;
+  nsCString mMethod;
+  enum RequestMode mMode;
+  RequestOmitCredentialsMode mOmitCredentialsMode;
+  //FIXME(nsm) URL
+  nsString mReferrer;
+  // FIXME(nsm) URL.
+  // We can't use URL right now because it is custom for Workers, but the
+  // bindings generated code uses mozilla::dom::URL.
+  nsString mUrl;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Request_h
diff --git a/dom/base/moz.build b/dom/base/moz.build
--- a/dom/base/moz.build
+++ b/dom/base/moz.build
@@ -50,22 +50,24 @@ EXPORTS += [
 
 EXPORTS.mozilla.dom += [
     'BarProps.h',
     'Console.h',
     'DOMCursor.h',
     'DOMError.h',
     'DOMException.h',
     'DOMRequest.h',
+    'HeaderMap.h',
     'MessageChannel.h',
     'MessagePort.h',
     'MessagePortList.h',
     'Navigator.h',
     'PerformanceEntry.h',
     'PerformanceResourceTiming.h',
+    'Request.h',
     'ScreenOrientation.h',
     'ScriptSettings.h',
     'StructuredCloneTags.h',
     'SubtleCrypto.h',
     'URL.h',
     'URLSearchParams.h',
 ]
 
@@ -73,16 +75,17 @@ UNIFIED_SOURCES += [
     'BarProps.cpp',
     'CompositionStringSynthesizer.cpp',
     'Console.cpp',
     'Crypto.cpp',
     'DOMCursor.cpp',
     'DOMError.cpp',
     'DOMException.cpp',
     'DOMRequest.cpp',
+    'HeaderMap.cpp',
     'MessageChannel.cpp',
     'MessagePortList.cpp',
     'Navigator.cpp',
     'nsContentPermissionHelper.cpp',
     'nsDOMClassInfo.cpp',
     'nsDOMNavigationTiming.cpp',
     'nsDOMScriptObjectFactory.cpp',
     'nsDOMWindowList.cpp',
@@ -99,16 +102,17 @@ UNIFIED_SOURCES += [
     'nsScreen.cpp',
     'nsScriptNameSpaceManager.cpp',
     'nsStructuredCloneContainer.cpp',
     'nsWindowMemoryReporter.cpp',
     'nsWindowRoot.cpp',
     'nsWrapperCache.cpp',
     'PerformanceEntry.cpp',
     'PerformanceResourceTiming.cpp',
+    'Request.cpp',
     'ScriptSettings.cpp',
     'SubtleCrypto.cpp',
     'URL.cpp',
     'URLSearchParams.cpp',
     'WindowNamedPropertiesHandler.cpp',
 ]
 
 # these files couldn't be in UNIFIED_SOURCES for now for reasons given below:
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -469,16 +469,26 @@ DOMInterfaces = {
 'GainNode': {
     'resultNotAddRefed': [ 'gain' ],
 },
 
 'Geolocation': {
     'headerFile': 'nsGeolocation.h'
 },
 
+'HeaderMap': [{
+    'headerFile': 'mozilla/dom/HeaderMap.h',
+    'nativeType': 'mozilla::dom::HeaderMap',
+},
+{
+    'headerFile': 'mozilla/dom/HeaderMap.h',
+    'nativeType': 'mozilla::dom::HeaderMap',
+    'workers': True,
+}],
+
 'History': {
     'headerFile': 'nsHistory.h',
     'nativeType': 'nsHistory'
 },
 
 'HmacKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
@@ -1005,16 +1015,26 @@ DOMInterfaces = {
     }
 },
 
 'Rect': {
     'nativeType': 'nsDOMCSSRect',
     'resultNotAddRefed': [ 'top', 'right', 'bottom', 'left' ]
 },
 
+'Request': [{
+    'headerFile': 'mozilla/dom/Request.h',
+    'nativeType': 'mozilla::dom::Request',
+},
+{
+    'headerFile': 'mozilla/dom/Request.h',
+    'nativeType': 'mozilla::dom::Request',
+    'workers': True,
+}],
+
 'RGBColor': {
     'nativeType': 'nsDOMCSSRGBColor',
     'resultNotAddRefed': [ 'alpha', 'blue', 'green', 'red' ]
 },
 
 'RsaHashedKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
diff --git a/dom/webidl/Fetch.webidl b/dom/webidl/Fetch.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Fetch.webidl
@@ -0,0 +1,12 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/
+ */
+
+// FIXME: ScalarValueString.
+typedef (ArrayBuffer or ArrayBufferView or Blob or DOMString) FetchBody;
+enum FetchBodyType { "arraybuffer", "blob", "text" };
diff --git a/dom/webidl/HeaderMap.webidl b/dom/webidl/HeaderMap.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/HeaderMap.webidl
@@ -0,0 +1,20 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/#fetch-api
+ */
+
+[Constructor(),
+ // FIXME: Exposed=Window,Worker,
+ Pref="dom.fetch.enabled"]
+interface HeaderMap {
+  void add(ByteString name, ByteString value);
+  void delete(ByteString name);
+  ByteString get(ByteString name);
+  sequence<ByteString> getAll(ByteString name);
+  boolean has(ByteString name);
+  void set(ByteString name, ByteString value);
+};
diff --git a/dom/webidl/Request.webidl b/dom/webidl/Request.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Request.webidl
@@ -0,0 +1,47 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/
+ */
+
+// FIXME: typedef (Request or ScalarValueString) RequestInfo;
+typedef (Request or DOMString) RequestInfo;
+
+[Constructor(RequestInfo input, optional RequestInit init),
+ // FIXME Exposed=Window,Worker
+ Pref="dom.fetch.enabled"]
+interface Request {
+           attribute ByteString method;
+           // FIXME: attribute ScalarValueString url;
+           attribute DOMString url;
+  readonly attribute HeaderMap headers;
+
+  // Promise<FetchBody>
+  Promise bodyAs(FetchBodyType type);
+
+  // readonly attribute RequestContext context;
+  readonly attribute DOMString origin;
+  readonly attribute DOMString referrer;
+  readonly attribute boolean handles401;
+  readonly attribute boolean isSynchronous;
+           attribute RequestMode mode;
+           attribute RequestOmitCredentialsMode omitCredentialsMode;
+  readonly attribute boolean usingURLCredentials;
+  readonly attribute boolean handlesRedirects;
+};
+
+dictionary RequestInit {
+  ByteString method;
+  HeaderMap headers;
+  // FIXME: ... body;
+  DOMString body;
+  RequestMode mode;
+  RequestOmitCredentialsMode omitCredentialsMode;
+};
+
+// enum RequestContext { ... }; // context
+enum RequestMode { "same-origin", "no-cors", "cors", "cors-with-forced-preflight" };
+enum RequestOmitCredentialsMode { "omit", "same-origin", "include" };
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -105,30 +105,32 @@ WEBIDL_FILES = [
     'DummyBinding.webidl',
     'DynamicsCompressorNode.webidl',
     'Element.webidl',
     'Event.webidl',
     'EventHandler.webidl',
     'EventListener.webidl',
     'EventSource.webidl',
     'EventTarget.webidl',
+    'Fetch.webidl',
     'File.webidl',
     'FileHandle.webidl',
     'FileList.webidl',
     'FileMode.webidl',
     'FileReader.webidl',
     'FileReaderSync.webidl',
     'FileRequest.webidl',
     'FocusEvent.webidl',
     'FormData.webidl',
     'Function.webidl',
     'GainNode.webidl',
     'Geolocation.webidl',
     'GeometryUtils.webidl',
     'GetUserMediaRequest.webidl',
+    'HeaderMap.webidl',
     'History.webidl',
     'HTMLAllCollection.webidl',
     'HTMLAnchorElement.webidl',
     'HTMLAppletElement.webidl',
     'HTMLAreaElement.webidl',
     'HTMLAudioElement.webidl',
     'HTMLBaseElement.webidl',
     'HTMLBodyElement.webidl',
@@ -293,16 +295,17 @@ WEBIDL_FILES = [
     'PointerEvent.webidl',
     'Position.webidl',
     'PositionError.webidl',
     'ProcessingInstruction.webidl',
     'Promise.webidl',
     'PushManager.webidl',
     'Range.webidl',
     'Rect.webidl',
+    'Request.webidl',
     'RGBColor.webidl',
     'RTCConfiguration.webidl',
     'RTCIceCandidate.webidl',
     'RTCIdentityAssertion.webidl',
     'RTCPeerConnection.webidl',
     'RTCPeerConnectionStatic.webidl',
     'RTCSessionDescription.webidl',
     'RTCStatsReport.webidl',
diff --git a/dom/workers/RegisterBindings.cpp b/dom/workers/RegisterBindings.cpp
--- a/dom/workers/RegisterBindings.cpp
+++ b/dom/workers/RegisterBindings.cpp
@@ -17,16 +17,17 @@
 #include "mozilla/dom/EventHandlerBinding.h"
 #include "mozilla/dom/EventTargetBinding.h"
 #include "mozilla/dom/FileReaderSyncBinding.h"
 #include "mozilla/dom/ImageData.h"
 #include "mozilla/dom/ImageDataBinding.h"
 #include "mozilla/dom/MessageEventBinding.h"
 #include "mozilla/dom/MessagePortBinding.h"
 #include "mozilla/dom/PromiseBinding.h"
+#include "mozilla/dom/RequestBinding.h"
 #include "mozilla/dom/TextDecoderBinding.h"
 #include "mozilla/dom/TextEncoderBinding.h"
 #include "mozilla/dom/XMLHttpRequestBinding.h"
 #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
 #include "mozilla/dom/URLBinding.h"
 #include "mozilla/dom/URLSearchParamsBinding.h"
 #include "mozilla/dom/WorkerBinding.h"
 #include "mozilla/dom/WorkerLocationBinding.h"
@@ -74,14 +75,23 @@ WorkerPrivate::RegisterBindings(JSContex
       !URLBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !URLSearchParamsBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerLocationBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !WorkerNavigatorBinding_workers::GetConstructorObject(aCx, aGlobal)) {
     return false;
   }
 
+  // FIXME(nsm): When landing flip this.
+  // Init ServiceWorker specific APIs.
+  if (true) {
+    if (!HeaderMapBinding_workers::GetConstructorObject(aCx, aGlobal) ||
+        !RequestBinding_workers::GetConstructorObject(aCx, aGlobal)) {
+      return nullptr;
+    }
+  }
+
   if (!JS_DefineProfilingFunctions(aCx, aGlobal)) {
     return false;
   }
 
   return true;
 }
diff --git a/dom/workers/test/fetch/mochitest.ini b/dom/workers/test/fetch/mochitest.ini
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/mochitest.ini
@@ -0,0 +1,5 @@
+[DEFAULT]
+support-files =
+  worker_interfaces.js
+
+[test_interfaces.html]
diff --git a/dom/workers/test/fetch/moz.build b/dom/workers/test/fetch/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/moz.build
@@ -0,0 +1,7 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+MOCHITEST_MANIFESTS += ['mochitest.ini']
diff --git a/dom/workers/test/fetch/test_interfaces.html b/dom/workers/test/fetch/test_interfaces.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/test_interfaces.html
@@ -0,0 +1,48 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug XXXXXX - Test fetch API interfaces</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none"></div>
+<pre id="test"></pre>
+<script class="testbody" type="text/javascript">
+
+  function checkEnabled() {
+    var worker = new Worker("worker_interfaces.js");
+    worker.onmessage = function(event) {
+
+      if (event.data.type == 'finish') {
+        SimpleTest.finish();
+      } else if (event.data.type == 'status') {
+        ok(event.data.status, event.data.msg);
+      }
+    }
+
+    worker.onerror = function(event) {
+      ok(false, "Worker had an error: " + event.data);
+      SimpleTest.finish();
+    };
+
+    worker.postMessage(true);
+  }
+
+  SimpleTest.waitForExplicitFinish();
+
+  SpecialPowers.pushPrefEnv({"set": [
+    ["dom.fetch.enabled", true]
+  ]}, function() {
+    checkEnabled();
+  });
+</script>
+</pre>
+</body>
+</html>
+
diff --git a/dom/workers/test/fetch/worker_interfaces.js b/dom/workers/test/fetch/worker_interfaces.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/worker_interfaces.js
@@ -0,0 +1,20 @@
+function ok(a, msg) {
+  dump("OK: " + !!a + "  =>  " + a + " " + msg + "\n");
+  postMessage({type: 'status', status: !!a, msg: a + ": " + msg });
+}
+
+function is(a, b, msg) {
+  dump("IS: " + (a===b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a === b, msg: a + " === " + b + ": " + msg });
+}
+
+function isnot(a, b, msg) {
+  dump("ISNOT: " + (a!==b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a !== b, msg: a + " !== " + b + ": " + msg });
+}
+
+onmessage = function() {
+  ok(typeof HeaderMap === "function", "HeaderMap should be defined");
+  ok(typeof Request === "function", "Request should be defined");
+  postMessage({ type: 'finish' });
+}
diff --git a/dom/workers/test/moz.build b/dom/workers/test/moz.build
--- a/dom/workers/test/moz.build
+++ b/dom/workers/test/moz.build
@@ -1,16 +1,17 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'extensions',
+    'fetch',
     'serviceworkers',
 ]
 
 MOCHITEST_MANIFESTS += ['mochitest.ini']
 
 MOCHITEST_CHROME_MANIFESTS += ['chrome.ini']
 
 XPCSHELL_TESTS_MANIFESTS += ['xpcshell/xpcshell.ini']
diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -4226,8 +4226,11 @@ pref("image.mozsamplesize.enabled", fals
 // play nicely with Firefox OS apps yet.
 #ifndef MOZ_WIDGET_GONK
 pref("beacon.enabled", true);
 #endif
 
 // Camera prefs
 pref("camera.control.autofocus_moving_callback.enabled", true);
 pref("camera.control.face_detection.enabled", true);
+
+// Fetch API.
+pref("dom.fetch.enabled", false);
