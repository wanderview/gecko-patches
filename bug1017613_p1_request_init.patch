# HG changeset patch
# Parent 5add3261493b1999a9b7f0e7b15ae76e331beb81
# User Nikhil Marathe <nsm.nikhil@gmail.com>
Bug 1017613 - Part 1 - Request IDL and stubs. r=ehsan

diff --git a/dom/base/HeaderMap.h b/dom/base/HeaderMap.h
new file mode 100644
--- /dev/null
+++ b/dom/base/HeaderMap.h
@@ -0,0 +1,68 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_HeaderMap_h
+#define mozilla_dom_HeaderMap_h
+
+#include "mozilla/dom/RequestBinding.h"
+
+#include "nsISupportsImpl.h"
+
+#include "nsDataHashtable.h"
+#include "nsString.h"
+#include "nsWrapperCache.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class HeaderMap : public nsISupports
+                , public nsWrapperCache
+{
+NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(HeaderMap)
+
+public:
+  HeaderMap(nsISupports* aOwner);
+  virtual ~HeaderMap();
+
+  bool
+  Has(const nsAString& aKey) const
+  {
+    return mHeaders.Contains(aKey);
+  }
+
+  void
+  Get(const nsAString& aKey, DOMString& aValue) const
+  {
+    nsString value;
+    mHeaders.Get(aKey, &value);
+    aValue.AsAString() = value;
+  }
+
+  static already_AddRefed<HeaderMap>
+  Constructor(const GlobalObject& global);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::HeaderMapBinding::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  nsISupports* mOwner;
+  nsDataHashtable<nsStringHashKey, nsString> mHeaders;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_HeaderMap_h
diff --git a/dom/base/Request.cpp b/dom/base/Request.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/Request.cpp
@@ -0,0 +1,180 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Request.h"
+#include "nsDOMString.h"
+#include "nsPIDOMWindow.h"
+#include "nsIURI.h"
+#include "nsISupportsImpl.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Request)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Request)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(Request)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Request)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+Request::Request(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+  SetIsDOMBinding();
+}
+
+Request::~Request()
+{
+}
+
+uint32_t
+Request::Timeout()
+{
+  return mTimeout;
+}
+
+void
+Request::SetTimeout(uint32_t aTimeout)
+{
+  mTimeout = aTimeout;
+}
+
+void
+Request::GetUrl(DOMString& url)
+{
+  url.AsAString() = mUrl;
+}
+
+void
+Request::SetUrl(const nsAString& aUrl)
+{
+  mUrl.Assign(aUrl);
+}
+
+void
+Request::GetMethod(DOMString& method)
+{
+  method.AsAString() = mMethod;
+}
+
+void
+Request::SetMethod(const nsAString& aMethod)
+{
+  mMethod.Assign(aMethod);
+}
+
+void
+Request::GetOrigin(DOMString& origin)
+{
+  origin.AsAString() = mOrigin;
+}
+
+bool
+Request::Synchronous()
+{
+  return mSynchronous;
+}
+
+void
+Request::SetSynchronous(bool aSynchronous)
+{
+  mSynchronous = aSynchronous;
+}
+
+uint32_t
+Request::RedirectCount()
+{
+  return mRedirectCount;
+}
+
+bool
+Request::ForcePreflight()
+{
+  return mForcePreflight;
+}
+
+void
+Request::SetForcePreflight(bool aForcePreflight)
+{
+  mForcePreflight = aForcePreflight;
+}
+
+bool
+Request::ForceSameOrigin()
+{
+  return mForceSameOrigin;
+}
+
+void
+Request::SetForceSameOrigin(bool aForceSameOrigin)
+{
+  mForceSameOrigin = aForceSameOrigin;
+}
+
+Mode
+Request::Mode_()
+{
+  return mMode;
+}
+
+bool
+Request::OmitCredentials()
+{
+  return mOmitCredentials;
+}
+
+void
+Request::SetOmitCredentials(bool aOmitCredentials)
+{
+  mOmitCredentials = aOmitCredentials;
+}
+
+void
+Request::GetReferrer(DOMString& referrer)
+{
+  referrer.AsAString() = mReferrer;
+}
+
+void
+Request::GetHeader(const nsAString& header, DOMString& value)
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+void
+Request::Headers(nsTArray<nsString>& headers)
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+JS::Value
+Request::Body(JSContext* aCx)
+{
+  return JS::UndefinedHandleValue;
+}
+
+void
+Request::SetBody(JSContext* aCx, JS::Handle<JS::Value> aValue)
+{
+}
+
+/*static*/ already_AddRefed<Request>
+Request::Constructor(const GlobalObject& global, const RequestInit& init, ErrorResult& rv)
+{
+  nsRefPtr<Request> request = new Request(global.GetAsSupports());
+  // request->mBody = init.mBody.WasPassed() ? init.mBody.Value() : EmptyString();
+  // request->mOrigin = init.mBody.WasPassed() ? init.mOrigin.Value() : EmptyString();
+  request->mForcePreflight = init.mForcePreflight;
+  request->mMethod = init.mMethod;
+  request->mOmitCredentials = init.mOmitCredentials;
+  // request->mRedirectCount = init.mRedirectCount;
+  // request->mReferrer = init.mReferrer.WasPassed() ? init.mReferrer.Value() : EmptyString();
+  request->mSynchronous = init.mSynchronous;
+  request->mTimeout = init.mTimeout;
+  MOZ_ASSERT(init.mUrl.WasPassed());
+  request->mUrl = init.mUrl.Value();
+  return request.forget();
+}
diff --git a/dom/base/Request.h b/dom/base/Request.h
new file mode 100644
--- /dev/null
+++ b/dom/base/Request.h
@@ -0,0 +1,92 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Request_h
+#define mozilla_dom_Request_h
+
+#include "mozilla/dom/RequestBinding.h"
+#include "nsWrapperCache.h"
+#include "nsISupportsImpl.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class Request : public nsISupports
+              , public nsWrapperCache
+{
+NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Request)
+
+public:
+Request(nsISupports* aOwner);
+virtual ~Request();
+
+
+  uint32_t Timeout();
+  void SetTimeout(uint32_t aTimeout);
+
+  void GetUrl(DOMString& url);
+  void SetUrl(const nsAString& aUrl);
+
+  void GetEncoding(DOMString& encoding);
+  void GetMethod(DOMString& method);
+  void SetMethod(const nsAString& aMethod);
+  void GetOrigin(DOMString& origin);
+  bool Synchronous();
+  void SetSynchronous(bool aSynchronous);
+  uint32_t RedirectCount();
+  bool ForcePreflight();
+  void SetForcePreflight(bool aForcePreflight);
+  bool ForceSameOrigin();
+  void SetForceSameOrigin(bool aForceSameOrigin);
+  Mode Mode_();
+  bool OmitCredentials();
+  void SetOmitCredentials(bool aOmitCredentials);
+  void GetReferrer(DOMString& referrer);
+  void GetHeader(const nsAString& header, DOMString& value);
+  void Headers(nsTArray<nsString>& headers);
+  JS::Value Body(JSContext* aCx);
+  void SetBody(JSContext* aCx, JS::Handle<JS::Value> aValue);
+  static already_AddRefed<Request>
+  Constructor(const GlobalObject& global, const RequestInit& init, ErrorResult& rv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::RequestBinding_workers::Wrap(aCx, this);
+  }
+
+nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  nsISupports* mOwner;
+
+  nsString mOrigin;
+  nsString mBody;
+  bool mForcePreflight;
+  bool mForceSameOrigin;
+  nsString mMethod;
+  enum Mode mMode;
+  bool mOmitCredentials;
+  uint32_t mRedirectCount;
+  //FIXME(nsm) URL
+  nsString mReferrer;
+  bool mSynchronous;
+  uint32_t mTimeout;
+  // FIXME(nsm) URL.
+  // We can't use URL right now because it is custom for Workers, but the
+  // bindings generated code uses mozilla::dom::URL.
+  nsString mUrl;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Request_h
diff --git a/dom/base/moz.build b/dom/base/moz.build
--- a/dom/base/moz.build
+++ b/dom/base/moz.build
@@ -51,22 +51,24 @@ EXPORTS += [
 
 EXPORTS.mozilla.dom += [
     'BarProps.h',
     'Console.h',
     'DOMCursor.h',
     'DOMError.h',
     'DOMException.h',
     'DOMRequest.h',
+    'HeaderMap.h',
     'MessageChannel.h',
     'MessagePort.h',
     'MessagePortList.h',
     'Navigator.h',
     'PerformanceEntry.h',
     'PerformanceResourceTiming.h',
+    'Request.h',
     'ScreenOrientation.h',
     'ScriptSettings.h',
     'StructuredCloneTags.h',
     'SubtleCrypto.h',
     'URL.h',
     'URLSearchParams.h',
 ]
 
@@ -100,16 +102,17 @@ UNIFIED_SOURCES += [
     'nsScreen.cpp',
     'nsScriptNameSpaceManager.cpp',
     'nsStructuredCloneContainer.cpp',
     'nsWindowMemoryReporter.cpp',
     'nsWindowRoot.cpp',
     'nsWrapperCache.cpp',
     'PerformanceEntry.cpp',
     'PerformanceResourceTiming.cpp',
+    'Request.cpp',
     'ScriptSettings.cpp',
     'SubtleCrypto.cpp',
     'URL.cpp',
     'URLSearchParams.cpp',
     'WindowNamedPropertiesHandler.cpp',
 ]
 
 # these files couldn't be in UNIFIED_SOURCES for now for reasons given below:
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -1005,16 +1005,23 @@ DOMInterfaces = {
     }
 },
 
 'Rect': {
     'nativeType': 'nsDOMCSSRect',
     'resultNotAddRefed': [ 'top', 'right', 'bottom', 'left' ]
 },
 
+'Request': {
+    'binaryNames': {'mode': 'mode_'},
+    'headerFile': 'mozilla/dom/Request.h',
+    'nativeType': 'mozilla::dom::Request',
+    'workers': True,
+},
+
 'RGBColor': {
     'nativeType': 'nsDOMCSSRGBColor',
     'resultNotAddRefed': [ 'alpha', 'blue', 'green', 'red' ]
 },
 
 'RsaHashedKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
diff --git a/dom/webidl/Request.webidl b/dom/webidl/Request.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Request.webidl
@@ -0,0 +1,59 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://www.w3.org/TR/2014/WD-service-workers-20140508/
+ */
+
+// Isn't used anywhere in the spec.
+// interface RequestPromise : Promise {
+// };
+
+[Constructor(optional RequestInit init), Pref="dom.fetch.enabled"]
+interface Request {
+  attribute unsigned long timeout;
+  attribute DOMString url;
+  // Although spec says ByteString, that is likely incorrect.
+  // https://github.com/slightlyoff/ServiceWorker/issues/269
+  attribute DOMString method;
+  readonly attribute DOMString origin;
+  readonly attribute Mode mode;
+  attribute boolean synchronous;
+  readonly attribute unsigned long redirectCount;
+  attribute boolean forcePreflight;
+  attribute boolean forceSameOrigin;
+  attribute boolean omitCredentials;
+  readonly attribute DOMString referrer;
+  //readonly attribute sequence<Header> headers; // Use HeaderMap later.
+  DOMString getHeader(DOMString name);
+  attribute any body;
+};
+
+dictionary RequestInit {
+  unsigned long timeout = 0;
+  DOMString url;
+  boolean synchronous = false;
+  boolean forcePreflight = false;
+  boolean forceSameOrigin = false;
+  boolean omitCredentials = false;
+  // Although spec says ByteString, that is likely incorrect.
+  // https://github.com/slightlyoff/ServiceWorker/issues/269
+  DOMString method = "GET";
+  // HeaderMap headers;
+  any body;
+};
+
+enum Mode {
+  "same origin",
+  "tainted x-origin",
+  "CORS"
+};
+
+// [MapClass(DOMString, DOMString)]
+interface HeaderMap {
+  // FIXME(nsm): Implement forEach().
+  DOMString get(DOMString key);
+  boolean has(DOMString key);
+};
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -288,16 +288,17 @@ WEBIDL_FILES = [
     'PointerEvent.webidl',
     'Position.webidl',
     'PositionError.webidl',
     'ProcessingInstruction.webidl',
     'Promise.webidl',
     'PushManager.webidl',
     'Range.webidl',
     'Rect.webidl',
+    'Request.webidl',
     'RGBColor.webidl',
     'RTCConfiguration.webidl',
     'RTCIceCandidate.webidl',
     'RTCIdentityAssertion.webidl',
     'RTCPeerConnection.webidl',
     'RTCSessionDescription.webidl',
     'RTCStatsReport.webidl',
     'Screen.webidl',
diff --git a/dom/workers/RegisterBindings.cpp b/dom/workers/RegisterBindings.cpp
--- a/dom/workers/RegisterBindings.cpp
+++ b/dom/workers/RegisterBindings.cpp
@@ -17,16 +17,17 @@
 #include "mozilla/dom/EventHandlerBinding.h"
 #include "mozilla/dom/EventTargetBinding.h"
 #include "mozilla/dom/FileReaderSyncBinding.h"
 #include "mozilla/dom/ImageData.h"
 #include "mozilla/dom/ImageDataBinding.h"
 #include "mozilla/dom/MessageEventBinding.h"
 #include "mozilla/dom/MessagePortBinding.h"
 #include "mozilla/dom/PromiseBinding.h"
+#include "mozilla/dom/RequestBinding.h"
 #include "mozilla/dom/TextDecoderBinding.h"
 #include "mozilla/dom/TextEncoderBinding.h"
 #include "mozilla/dom/XMLHttpRequestBinding.h"
 #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
 #include "mozilla/dom/URLBinding.h"
 #include "mozilla/dom/URLSearchParamsBinding.h"
 #include "mozilla/dom/WorkerBinding.h"
 #include "mozilla/dom/WorkerLocationBinding.h"
@@ -74,14 +75,22 @@ WorkerPrivate::RegisterBindings(JSContex
       !URLBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !URLSearchParamsBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerBinding::GetConstructorObject(aCx, aGlobal) ||
       !WorkerLocationBinding_workers::GetConstructorObject(aCx, aGlobal) ||
       !WorkerNavigatorBinding_workers::GetConstructorObject(aCx, aGlobal)) {
     return false;
   }
 
+  // FIXME(nsm): When landing flip this.
+  // Init ServiceWorker specific APIs.
+  if (true) {
+    if (!RequestBinding_workers::GetConstructorObject(aCx, aGlobal)) {
+      return nullptr;
+    }
+  }
+
   if (!JS_DefineProfilingFunctions(aCx, aGlobal)) {
     return false;
   }
 
   return true;
 }
diff --git a/dom/workers/test/fetch/mochitest.ini b/dom/workers/test/fetch/mochitest.ini
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/mochitest.ini
@@ -0,0 +1,5 @@
+[DEFAULT]
+support-files =
+  worker_interfaces.js
+
+[test_interfaces.html]
diff --git a/dom/workers/test/fetch/moz.build b/dom/workers/test/fetch/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/moz.build
@@ -0,0 +1,7 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+MOCHITEST_MANIFESTS += ['mochitest.ini']
diff --git a/dom/workers/test/fetch/test_interfaces.html b/dom/workers/test/fetch/test_interfaces.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/test_interfaces.html
@@ -0,0 +1,48 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug XXXXXX - Test fetch API interfaces</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none"></div>
+<pre id="test"></pre>
+<script class="testbody" type="text/javascript">
+
+  function checkEnabled() {
+    var worker = new Worker("worker_interfaces.js");
+    worker.onmessage = function(event) {
+
+      if (event.data.type == 'finish') {
+        SimpleTest.finish();
+      } else if (event.data.type == 'status') {
+        ok(event.data.status, event.data.msg);
+      }
+    }
+
+    worker.onerror = function(event) {
+      ok(false, "Worker had an error: " + event.data);
+      SimpleTest.finish();
+    };
+
+    worker.postMessage(true);
+  }
+
+  SimpleTest.waitForExplicitFinish();
+
+  SpecialPowers.pushPrefEnv({"set": [
+    ["dom.fetch.enabled", true]
+  ]}, function() {
+    checkEnabled();
+  });
+</script>
+</pre>
+</body>
+</html>
+
diff --git a/dom/workers/test/fetch/worker_interfaces.js b/dom/workers/test/fetch/worker_interfaces.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/worker_interfaces.js
@@ -0,0 +1,19 @@
+function ok(a, msg) {
+  dump("OK: " + !!a + "  =>  " + a + " " + msg + "\n");
+  postMessage({type: 'status', status: !!a, msg: a + ": " + msg });
+}
+
+function is(a, b, msg) {
+  dump("IS: " + (a===b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a === b, msg: a + " === " + b + ": " + msg });
+}
+
+function isnot(a, b, msg) {
+  dump("ISNOT: " + (a!==b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a !== b, msg: a + " !== " + b + ": " + msg });
+}
+
+onmessage = function() {
+  ok(typeof Request === "function", "Request should be defined");
+  postMessage({ type: 'finish' });
+}
diff --git a/dom/workers/test/moz.build b/dom/workers/test/moz.build
--- a/dom/workers/test/moz.build
+++ b/dom/workers/test/moz.build
@@ -1,16 +1,17 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'extensions',
+    'fetch',
     'serviceworkers',
 ]
 
 MOCHITEST_MANIFESTS += ['mochitest.ini']
 
 MOCHITEST_CHROME_MANIFESTS += ['chrome.ini']
 
 XPCSHELL_TESTS_MANIFESTS += ['xpcshell/xpcshell.ini']
diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -4168,8 +4168,11 @@ pref("image.mozsamplesize.enabled", fals
 // play nicely with Firefox OS apps yet.
 #ifndef MOZ_WIDGET_GONK
 pref("beacon.enabled", true);
 #endif
 
 // Camera prefs
 pref("camera.control.autofocus_moving_callback.enabled", true);
 pref("camera.control.face_detection.enabled", true);
+
+// Fetch API.
+pref("dom.fetch.enabled", false);
