# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  c1bfc6ad8ff3863730e017a79f4d21bdd9707d2a
Bug 1343308 P2 Add a WPT test verifying Clients.matchAll() only returns Clients controlled by calling worker. r=baku

diff --git a/testing/web-platform/meta/MANIFEST.json b/testing/web-platform/meta/MANIFEST.json
--- a/testing/web-platform/meta/MANIFEST.json
+++ b/testing/web-platform/meta/MANIFEST.json
@@ -118613,16 +118613,22 @@
     ]
    ],
    "service-workers/service-worker/clients-matchall-client-types.https.html": [
     [
      "/service-workers/service-worker/clients-matchall-client-types.https.html",
      {}
     ]
    ],
+   "service-workers/service-worker/clients-matchall-exact-controller.https.html": [
+    [
+     "/service-workers/service-worker/clients-matchall-exact-controller.https.html",
+     {}
+    ]
+   ],
    "service-workers/service-worker/clients-matchall-include-uncontrolled.https.html": [
     [
      "/service-workers/service-worker/clients-matchall-include-uncontrolled.https.html",
      {}
     ]
    ],
    "service-workers/service-worker/clients-matchall-order.https.html": [
     [
@@ -199786,16 +199792,20 @@
   "service-workers/service-worker/clients-get.https.html": [
    "32ccf7734a7d0d40205c4fd30b393b175e6507bd",
    "testharness"
   ],
   "service-workers/service-worker/clients-matchall-client-types.https.html": [
    "aaca38d0ad5e6a03775632fcef1657dd40753ae0",
    "testharness"
   ],
+  "service-workers/service-worker/clients-matchall-exact-controller.https.html": [
+   "231ce3ee744eeb670e00ee3a670ba361d5ca0707",
+   "testharness"
+  ],
   "service-workers/service-worker/clients-matchall-include-uncontrolled.https.html": [
    "a4f4cb575ffea826c642aa3de424c0a0f986fdd0",
    "testharness"
   ],
   "service-workers/service-worker/clients-matchall-order.https.html": [
    "b2617b7dce0dce64c1a354a3dc07c67f1fa0adf2",
    "testharness"
   ],
diff --git a/testing/web-platform/tests/service-workers/service-worker/clients-matchall-exact-controller.https.html b/testing/web-platform/tests/service-workers/service-worker/clients-matchall-exact-controller.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/tests/service-workers/service-worker/clients-matchall-exact-controller.https.html
@@ -0,0 +1,68 @@
+<!DOCTYPE html>
+<title>Service Worker: Clients.matchAll with exact controller</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<script>
+const scope = 'resources/blank.html?clients-matchAll';
+const t = async_test('Test Clients.matchAll() with exact controller');
+let frames = [];
+
+function checkWorkerClients(worker, expected) {
+  return new Promise((resolve, reject) => {
+    let channel = new MessageChannel();
+    channel.port1.onmessage = evt => {
+      try {
+        assert_equals(evt.data.length, expected.length);
+        for (let i = 0; i < expected.length; ++i) {
+          assert_array_equals(evt.data[i], expected[i]);
+        }
+        resolve();
+      } catch (e) {
+        reject(e);
+      }
+    };
+
+    worker.postMessage({port:channel.port2}, [channel.port2]);
+  });
+}
+
+let expected = [
+    /* visibilityState, focused, url, frameType */
+    ['visible', true, new URL(scope + '#1', location).toString(), 'window', 'nested'],
+    ['visible', false, new URL(scope + '#2', location).toString(), 'window', 'nested']
+];
+
+t.step(_ => {
+    let script = 'resources/clients-matchall-worker.js';
+    service_worker_unregister_and_register(t, script, scope)
+      .then(registration => {
+          return wait_for_state(t, registration.installing, 'activated');
+        })
+      .then(_ => with_iframe(scope + '#1') )
+      .then(frame1 => {
+          frames.push(frame1);
+          frame1.focus();
+          return with_iframe(scope + '#2');
+        })
+      .then(frame2 => {
+          frames.push(frame2);
+          return navigator.serviceWorker.register(script + '?updated', { scope: scope });
+        })
+      .then(registration => {
+          return wait_for_state(t, registration.installing, 'installed')
+            .then(_ => registration);
+        })
+      .then(registration => {
+          return Promise.all([
+            checkWorkerClients(registration.waiting, []),
+            checkWorkerClients(registration.active, expected),
+          ]);
+        })
+      .then(_ => {
+          frames.forEach(f => f.remove() );
+          service_worker_unregister_and_done(t, scope);
+        })
+      .catch(unreached_rejection(t));
+  });
+</script>
