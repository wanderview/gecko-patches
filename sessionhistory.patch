# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d38d06f85ef59c5dbb5d4a1a8d895957a78714de

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -110,16 +110,18 @@
 #include "nsThreadUtils.h"
 #include "nsILoadContext.h"
 #include "nsIPresShell.h"
 #include "nsIScrollableFrame.h"
 #include "nsView.h"
 #include "nsViewManager.h"
 #include "nsISelectionController.h"
 #include "nsISelection.h"
+#include "nsISHEntry.h"
+#include "nsISHistory.h"
 #include "nsIPrompt.h"
 #include "nsIPromptService.h"
 #include "nsIPromptFactory.h"
 #include "nsIWritablePropertyBag2.h"
 #include "nsIWebNavigation.h"
 #include "nsIWebBrowserChrome.h"
 #include "nsIWebBrowserFind.h"  // For window.find()
 #include "nsIWindowMediator.h"  // For window.find()
@@ -12136,17 +12138,31 @@ nsGlobalWindow::SyncStateFromParentWindo
     Suspend();
   }
 }
 
 template<typename Method>
 void
 nsGlobalWindow::CallOnChildren(Method aMethod)
 {
+  MOZ_ASSERT(IsInnerWindow());
+  if (AsInner()->IsCurrentInnerWindow()) {
+    CallOnCurrentInnerWindowChildren(aMethod);
+  } else {
+    CallOnSessionHistoryChildren(aMethod);
+  }
+}
+
+template<typename Method>
+void
+nsGlobalWindow::CallOnCurrentInnerWindowChildren(Method aMethod)
+{
   MOZ_ASSERT(NS_IsMainThread());
+  MOZ_ASSERT(IsInnerWindow());
+  MOZ_ASSERT(AsInner()->IsCurrentInnerWindow());
 
   nsCOMPtr<nsIDocShell> docShell = GetDocShell();
   if (!docShell) {
     return;
   }
 
   int32_t childCount = 0;
   docShell->GetChildCount(&childCount);
@@ -12170,16 +12186,64 @@ nsGlobalWindow::CallOnChildren(Method aM
     if (!mDoc || !frame || mDoc != frame->OwnerDoc() || !inner) {
       continue;
     }
 
     (inner->*aMethod)();
   }
 }
 
+template<typename Method>
+void
+nsGlobalWindow::CallOnSessionHistoryChildren(Method aMethod)
+{
+  MOZ_ASSERT(IsInnerWindow());
+  MOZ_ASSERT(!AsInner()->IsCurrentInnerWindow());
+
+  nsCOMPtr<nsIDocShell> docShell = GetDocShell();
+  nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(docShell));
+  if (!webNav) {
+    return;
+  }
+
+  nsCOMPtr<nsISHistory> history;
+  MOZ_ALWAYS_SUCCEEDS(webNav->GetSessionHistory(getter_AddRefs(history)));
+
+  nsCOMPtr<nsISimpleEnumerator> iter;
+  MOZ_ALWAYS_SUCCEEDS(history->GetSHistoryEnumerator(getter_AddRefs(iter)));
+
+  nsCOMPtr<nsISHEntry> shEntry;
+
+  bool hasMore = false;
+  while (NS_SUCCEEDED(iter->HasMoreElements(&hasMore)) && hasMore) {
+    nsCOMPtr<nsISupports> next;
+    MOZ_ALWAYS_SUCCEEDS(iter->GetNext(getter_AddRefs(next)));
+
+    nsCOMPtr<nsISHEntry> entry(do_QueryInterface(next));
+
+    nsCOMPtr<nsISupports> state;
+    MOZ_ALWAYS_SUCCEEDS(entry->GetWindowState(getter_AddRefs(state)));
+
+    nsCOMPtr<WindowStateHolder> stateHolder(do_QueryInterface(state));
+    printf_stderr("### ### this:%p stateHolder:%p inner:%p\n",
+                  this, stateHolder.get(),
+                  (stateHolder ? stateHolder->GetInnerWindow() : nullptr));
+    if (stateHolder && stateHolder->GetInnerWindow() == this) {
+      shEntry = entry.forget();
+      break;
+    }
+  }
+
+  if (!shEntry) {
+    return;
+  }
+
+  MOZ_ASSERT(false, "todo");
+}
+
 nsresult
 nsGlobalWindow::FireDelayedDOMEvents()
 {
   FORWARD_TO_INNER(FireDelayedDOMEvents, (), NS_ERROR_UNEXPECTED);
 
   for (uint32_t i = 0, len = mPendingStorageEvents.Length(); i < len; ++i) {
     Observe(mPendingStorageEvents[i], "dom-storage2-changed", nullptr);
   }
diff --git a/dom/base/nsGlobalWindow.h b/dom/base/nsGlobalWindow.h
--- a/dom/base/nsGlobalWindow.h
+++ b/dom/base/nsGlobalWindow.h
@@ -1455,16 +1455,22 @@ private:
                         nsISupports *aExtraArgument,
                         nsIDocShellLoadInfo* aLoadInfo,
                         bool aForceNoOpener,
                         nsPIDOMWindowOuter **aReturn);
 
   template<typename Method>
   void CallOnChildren(Method aMethod);
 
+  template<typename Method>
+  void CallOnCurrentInnerWindowChildren(Method aMethod);
+
+  template<typename Method>
+  void CallOnSessionHistoryChildren(Method aMethod);
+
   void FreezeInternal();
   void ThawInternal();
 
 public:
   // Timeout Functions
   // Language agnostic timeout function (all args passed).
   // |interval| is in milliseconds.
   nsresult SetTimeoutOrInterval(nsITimeoutHandler* aHandler,
