# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  cce9591a9255cd579ebe3d5068842734e2fb12f2
Bug 1255070 P7 Make nsStorageInputStream implement nsIBufferedInputStream. r=froydnj

diff --git a/xpcom/io/nsStorageStream.cpp b/xpcom/io/nsStorageStream.cpp
--- a/xpcom/io/nsStorageStream.cpp
+++ b/xpcom/io/nsStorageStream.cpp
@@ -12,16 +12,17 @@
  * with the attendant performance loss and heap fragmentation.
  */
 
 #include "nsAlgorithm.h"
 #include "nsStorageStream.h"
 #include "nsSegmentedBuffer.h"
 #include "nsStreamUtils.h"
 #include "nsCOMPtr.h"
+#include "nsIBufferedStreams.h"
 #include "nsICloneableInputStream.h"
 #include "nsIInputStream.h"
 #include "nsIIPCSerializableInputStream.h"
 #include "nsISeekableStream.h"
 #include "mozilla/Logging.h"
 #include "mozilla/Attributes.h"
 #include "mozilla/Likely.h"
 #include "mozilla/MathAlgorithms.h"
@@ -324,17 +325,17 @@ nsStorageStream::Seek(int32_t aPosition)
        this, mWriteCursor, mSegmentEnd));
   return NS_OK;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
 
 // There can be many nsStorageInputStreams for a single nsStorageStream
 class nsStorageInputStream final
-  : public nsIInputStream
+  : public nsIBufferedInputStream
   , public nsISeekableStream
   , public nsIIPCSerializableInputStream
   , public nsICloneableInputStream
 {
 public:
   nsStorageInputStream(nsStorageStream* aStorageStream, uint32_t aSegmentSize)
     : mStorageStream(aStorageStream), mReadCursor(0),
       mSegmentEnd(0), mSegmentNum(0),
@@ -343,16 +344,17 @@ public:
   {
   }
 
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_NSIINPUTSTREAM
   NS_DECL_NSISEEKABLESTREAM
   NS_DECL_NSIIPCSERIALIZABLEINPUTSTREAM
   NS_DECL_NSICLONEABLEINPUTSTREAM
+  NS_DECL_NSIBUFFEREDINPUTSTREAM
 
 private:
   ~nsStorageInputStream()
   {
   }
 
 protected:
   NS_METHOD Seek(uint32_t aPosition);
@@ -377,17 +379,18 @@ private:
     return aPosition & (mSegmentSize - 1);
   }
 };
 
 NS_IMPL_ISUPPORTS(nsStorageInputStream,
                   nsIInputStream,
                   nsISeekableStream,
                   nsIIPCSerializableInputStream,
-                  nsICloneableInputStream)
+                  nsICloneableInputStream,
+                  nsIBufferedInputStream)
 
 NS_IMETHODIMP
 nsStorageStream::NewInputStream(int32_t aStartingOffset,
                                 nsIInputStream** aInputStream)
 {
   if (NS_WARN_IF(!mSegmentedBuffer)) {
     return NS_ERROR_NOT_INITIALIZED;
   }
@@ -614,16 +617,23 @@ nsStorageInputStream::GetCloneable(bool*
 }
 
 NS_IMETHODIMP
 nsStorageInputStream::Clone(nsIInputStream** aCloneOut)
 {
   return mStorageStream->NewInputStream(mLogicalCursor, aCloneOut);
 }
 
+NS_IMETHODIMP
+nsStorageInputStream::Init(nsIInputStream*, uint32_t)
+{
+  MOZ_CRASH("nsStorageInputStream should not be initialized using "
+            "nsIBufferedInputStream::Init()");
+}
+
 nsresult
 NS_NewStorageStream(uint32_t aSegmentSize, uint32_t aMaxSize,
                     nsIStorageStream** aResult)
 {
   RefPtr<nsStorageStream> storageStream = new nsStorageStream();
   nsresult rv = storageStream->Init(aSegmentSize, aMaxSize);
   if (NS_FAILED(rv)) {
     return rv;
diff --git a/xpcom/tests/gtest/TestStorageStream.cpp b/xpcom/tests/gtest/TestStorageStream.cpp
--- a/xpcom/tests/gtest/TestStorageStream.cpp
+++ b/xpcom/tests/gtest/TestStorageStream.cpp
@@ -5,16 +5,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include <stdlib.h>
 #include "gtest/gtest.h"
 #include "Helpers.h"
 #include "nsCOMPtr.h"
 #include "nsICloneableInputStream.h"
 #include "nsIInputStream.h"
+#include "nsIIPCSerializableInputStream.h"
 #include "nsIOutputStream.h"
 #include "nsIStorageStream.h"
 
 namespace {
 
 void
 WriteData(nsIOutputStream* aOut, nsTArray<char>& aData, uint32_t aNumBytes,
           nsACString& aDataWritten)
@@ -123,8 +124,33 @@ TEST(StorageStreams, EarlyInputStream)
   rv = out->Close();
   EXPECT_TRUE(NS_SUCCEEDED(rv));
   out = nullptr;
 
   // Should be able to consume input stream
   testing::ConsumeAndValidateStream(in, dataWritten);
   in = nullptr;
 }
+
+TEST(StorageStreams, Interfaces)
+{
+  nsresult rv;
+  nsCOMPtr<nsIStorageStream> stor;
+
+  rv = NS_NewStorageStream(4096, UINT32_MAX, getter_AddRefs(stor));
+  EXPECT_TRUE(NS_SUCCEEDED(rv));
+
+  nsCOMPtr<nsIInputStream> in;
+  rv = stor->NewInputStream(0, getter_AddRefs(in));
+  EXPECT_TRUE(NS_SUCCEEDED(rv));
+
+  nsCOMPtr<nsISeekableStream> inType1 = do_QueryInterface(in);
+  ASSERT_TRUE(inType1);
+
+  nsCOMPtr<nsIIPCSerializableInputStream> inType2 = do_QueryInterface(in);
+  ASSERT_TRUE(inType2);
+
+  nsCOMPtr<nsICloneableInputStream> inType3 = do_QueryInterface(in);
+  ASSERT_TRUE(inType3);
+
+  nsCOMPtr<nsIBufferedInputStream> inType4 = do_QueryInterface(in);
+  ASSERT_TRUE(inType4);
+}
