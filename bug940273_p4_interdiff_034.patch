# HG changeset patch
# Parent 1803191a2dab4b5746abd46c41a86c1dd4cf2a4a
# User Ben Kelly <ben@wanderview.com>
Bug 940273 p4 interdiff 034 fix non-debug build, enable unified build, rename globals in ShutdownObserver

diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -548,13 +548,14 @@ Cache::RemoveRequestPromise(RequestId aR
     if (aRequestId == reinterpret_cast<RequestId>(promise.get())) {
       nsRefPtr<Promise> ref;
       ref.swap(promise);
       mRequestPromises.RemoveElementAt(i);
       return ref.forget();
     }
   }
   MOZ_ASSERT_UNREACHABLE("Received response without a matching promise!");
+  return nullptr;
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -569,13 +569,14 @@ CacheStorage::RemoveRequestPromise(Reque
     if (aRequestId == reinterpret_cast<RequestId>(promise.get())) {
       nsRefPtr<Promise> ref;
       ref.swap(promise);
       mRequestPromises.RemoveElementAt(i);
       return ref.forget();
     }
   }
   MOZ_ASSERT_UNREACHABLE("Received response without a matching promise!");
+  return nullptr;
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/ShutdownObserver.cpp b/dom/cache/ShutdownObserver.cpp
--- a/dom/cache/ShutdownObserver.cpp
+++ b/dom/cache/ShutdownObserver.cpp
@@ -72,57 +72,57 @@ public:
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_NSIOBSERVER
 };
 
 // ShutdownObserver conflicts with other code here, so use CacheShutdownObserver
 NS_IMPL_ISUPPORTS(CacheShutdownObserver, nsIObserver);
 
 // PBackground worker thread only
-static bool sInstanceInit = false;
-static StaticRefPtr<CacheShutdownObserver> sInstance;
+static bool gInstanceInit = false;
+static StaticRefPtr<CacheShutdownObserver> gInstance;
 
 // Main thread only
-static bool sActive = false;
+static bool gActive = false;
 
 // static
 already_AddRefed<CacheShutdownObserver>
 CacheShutdownObserver::Instance()
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
 
-  // Use a separate init variable here.  Since we clear sInstance after
+  // Use a separate init variable here.  Since we clear gInstance after
   // shutdown we can't just compare against nullptr.  The init variable
   // allows us to ensure that a observer is not created in this case.
-  if (!sInstanceInit) {
-    sInstanceInit = true;
+  if (!gInstanceInit) {
+    gInstanceInit = true;
 
     // We cannot use ClearOnShutdown() because we are not on the main
     // thread.  Of course, we are implementing a shutdown handler,
     // so its not a problem to clear it manually.  This is done in
     // FinishShutdownOnBgThread().
-    sInstance = new CacheShutdownObserver();
+    gInstance = new CacheShutdownObserver();
 
     // We must initialize our new observer on the main thread.  Do this
     // outside the constructor because its fallible.
     nsCOMPtr<nsIRunnable> runnable =
-      NS_NewRunnableMethod(sInstance, &CacheShutdownObserver::InitOnMainThread);
+      NS_NewRunnableMethod(gInstance, &CacheShutdownObserver::InitOnMainThread);
     nsresult rv = NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
 
     // If we try to create an instance after shutdown somehow when no
     // Cache managers have ever been used, then we may fail to dispatch
     // to the main thread.  Treat this the same as calling Instance() with
-    // sInstanceInit equal to true.
+    // gInstanceInit equal to true.
     if (NS_WARN_IF(NS_FAILED(rv))) {
-      sInstance = nullptr;
+      gInstance = nullptr;
     }
   }
 
   // can be null if we've already shutdown!
-  nsRefPtr<CacheShutdownObserver> ref = sInstance.get();
+  nsRefPtr<CacheShutdownObserver> ref = gInstance.get();
   return ref.forget();
 }
 
 nsresult
 CacheShutdownObserver::AddManagerId(ManagerId* aManagerId)
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
 
@@ -157,23 +157,23 @@ CacheShutdownObserver::RemoveManagerId(M
   MOZ_ASSERT(NS_SUCCEEDED(rv));
 }
 
 CacheShutdownObserver::CacheShutdownObserver()
   : mBackgroundThread(NS_GetCurrentThread())
   , mShuttingDown(false)
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
-  MOZ_ASSERT(!sActive);
+  MOZ_ASSERT(!gActive);
 }
 
 CacheShutdownObserver::~CacheShutdownObserver()
 {
   // This can happen on either main thread or background thread.
-  MOZ_ASSERT(!sActive);
+  MOZ_ASSERT(!gActive);
 }
 
 void
 CacheShutdownObserver::InitOnMainThread()
 {
   MOZ_ASSERT(NS_IsMainThread());
 
   nsCOMPtr<nsIObserverService> os = GetObserverService();
@@ -190,25 +190,25 @@ CacheShutdownObserver::InitOnMainThread(
 }
 
 void
 CacheShutdownObserver::AddManagerIdOnMainThread(ManagerId* aManagerId)
 {
   MOZ_ASSERT(NS_IsMainThread());
   MOZ_ASSERT(!mManagerIds.Contains(aManagerId, ManagerId::Comparator()));
   mManagerIds.AppendElement(aManagerId);
-  sActive = true;
+  gActive = true;
 }
 
 void
 CacheShutdownObserver::RemoveManagerIdOnMainThread(ManagerId* aManagerId)
 {
   MOZ_ASSERT(NS_IsMainThread());
   mManagerIds.RemoveElement(aManagerId, ManagerId::Comparator());
-  sActive = !mManagerIds.IsEmpty();
+  gActive = !mManagerIds.IsEmpty();
 }
 
 void
 CacheShutdownObserver::StartShutdownOnBgThread()
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
 
   // prevent any further AddManagerId() calls
@@ -218,17 +218,17 @@ CacheShutdownObserver::StartShutdownOnBg
 }
 
 void
 CacheShutdownObserver::FinishShutdownOnBgThread()
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
   MOZ_ASSERT(mShuttingDown);
 
-  sInstance = nullptr;
+  gInstance = nullptr;
 }
 
 void
 CacheShutdownObserver::DoShutdown()
 {
   MOZ_ASSERT(NS_IsMainThread());
 
   nsCOMPtr<nsIObserverService> os = mozilla::services::GetObserverService();
@@ -301,31 +301,31 @@ void RemoveManagerId(ManagerId* aManager
   // We should never get a nullptr while a Manager is still running.
   nsRefPtr<CacheShutdownObserver> so = CacheShutdownObserver::Instance();
   so->RemoveManagerId(aManagerId);
 }
 
 bool ManagersAreActive()
 {
   MOZ_ASSERT(NS_IsMainThread());
-  return sActive;
+  return gActive;
 }
 
 void ExecuteShutdown()
 {
   MOZ_ASSERT(NS_IsMainThread());
 
-  if (!sActive) {
+  if (!gActive) {
     return;
   }
 
-  // If sActive is true, then we are guaranteed for there to be an observer
+  // If gActive is true, then we are guaranteed for there to be an observer
   // instance available.
-  MOZ_ASSERT(sInstance);
+  MOZ_ASSERT(gInstance);
 
   // Simulate an observer service notification
-  sInstance->Observe(nullptr, "profile-before-change", nullptr);
+  gInstance->Observe(nullptr, "profile-before-change", nullptr);
 }
 
 } // namespace shutdown
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -29,17 +29,17 @@ EXPORTS.mozilla.dom.cache += [
     'ReadStream.h',
     'SavedTypes.h',
     'ShutdownObserver.h',
     'StreamList.h',
     'Types.h',
     'TypeUtils.h',
 ]
 
-SOURCES += [
+UNIFIED_SOURCES += [
     'Action.cpp',
     'AutoUtils.cpp',
     'Cache.cpp',
     'CacheChild.cpp',
     'CacheParent.cpp',
     'CacheStorage.cpp',
     'CacheStorageChild.cpp',
     'CacheStorageParent.cpp',
