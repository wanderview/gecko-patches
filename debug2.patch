# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  c3302469562c5f090a658186cfca1a46aa9b2a3a

diff --git a/toolkit/components/extensions/ExtensionCommon.jsm b/toolkit/components/extensions/ExtensionCommon.jsm
--- a/toolkit/components/extensions/ExtensionCommon.jsm
+++ b/toolkit/components/extensions/ExtensionCommon.jsm
@@ -102,16 +102,17 @@ class BaseContext {
     this.innerWindowID = 0;
   }
 
   setContentWindow(contentWindow) {
     let {document} = contentWindow;
     let docShell = contentWindow.QueryInterface(Ci.nsIInterfaceRequestor)
                                 .getInterface(Ci.nsIDocShell);
 
+    dump('### ### ExtensionCommon.jsm setContentWindow(' + contentWindow + ')\n');
     this.innerWindowID = getInnerWindowID(contentWindow);
     this.messageManager = docShell.QueryInterface(Ci.nsIInterfaceRequestor)
                                   .getInterface(Ci.nsIContentFrameMessageManager);
 
     if (this.incognito == null) {
       this.incognito = PrivateBrowsingUtils.isContentWindowPrivate(contentWindow);
     }
 
diff --git a/toolkit/components/extensions/ExtensionContent.jsm b/toolkit/components/extensions/ExtensionContent.jsm
--- a/toolkit/components/extensions/ExtensionContent.jsm
+++ b/toolkit/components/extensions/ExtensionContent.jsm
@@ -575,16 +575,17 @@ DocumentManager = {
       if (context) {
         context.close();
         extensions.delete(extension);
       }
     }
   },
 
   getContexts(window) {
+    dump('### ### ExtensionContent.jsm getContexts(' + window + ')\n');
     let winId = getInnerWindowID(window);
 
     let extensions = this.contexts.get(winId);
     if (!extensions) {
       extensions = new Map();
       this.contexts.set(winId, extensions);
     }
 
@@ -596,16 +597,17 @@ DocumentManager = {
     for (let [extension, context] of this.getContexts(window)) {
       if (extension.id === extensionId) {
         return context;
       }
     }
   },
 
   getContentScriptGlobals(window) {
+    dump('### ### ExtensionContent.jsm getContentScriptGlobals(' + window + ')\n');
     let extensions = this.contexts.get(getInnerWindowID(window));
 
     if (extensions) {
       return Array.from(extensions.values(), ctx => ctx.sandbox);
     }
 
     return [];
   },
diff --git a/toolkit/components/extensions/ExtensionUtils.jsm b/toolkit/components/extensions/ExtensionUtils.jsm
--- a/toolkit/components/extensions/ExtensionUtils.jsm
+++ b/toolkit/components/extensions/ExtensionUtils.jsm
@@ -135,22 +135,24 @@ class DefaultMap extends Map {
     if (!this.has(key)) {
       this.set(key, this.defaultConstructor(key));
     }
     return super.get(key);
   }
 }
 
 const _winUtils = new DefaultWeakMap(win => {
+  dump('### ### ExtensionUtils.jsm _winUtils(' + win + ')\n');
   return win.QueryInterface(Ci.nsIInterfaceRequestor)
             .getInterface(Ci.nsIDOMWindowUtils);
 });
 const getWinUtils = win => _winUtils.get(win);
 
 function getInnerWindowID(window) {
+  dump('### ### ExtensionUtils.jsm getInnerWindowID(' + window + ')\n');
   return getWinUtils(window).currentInnerWindowID;
 }
 
 const LISTENERS = Symbol("listeners");
 const ONCE_MAP = Symbol("onceMap");
 
 class EventEmitter {
   constructor() {
diff --git a/toolkit/components/extensions/extension-process-script.js b/toolkit/components/extensions/extension-process-script.js
--- a/toolkit/components/extensions/extension-process-script.js
+++ b/toolkit/components/extensions/extension-process-script.js
@@ -87,16 +87,17 @@ class ExtensionGlobal {
     MessageChannel.addListener(global, "Extension:Capture", this);
     MessageChannel.addListener(global, "Extension:DetectLanguage", this);
     MessageChannel.addListener(global, "Extension:Execute", this);
     MessageChannel.addListener(global, "WebNavigation:GetFrame", this);
     MessageChannel.addListener(global, "WebNavigation:GetAllFrames", this);
   }
 
   get messageFilterStrict() {
+    dump('### ### extension-process-script.js messageFilterStruct() content: ' + this.global.content + '\n');
     return {
       innerWindowID: getInnerWindowID(this.global.content),
     };
   }
 
   receiveMessage({target, messageName, recipient, data}) {
     switch (messageName) {
       case "Extension:Capture":
