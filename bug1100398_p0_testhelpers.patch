# HG changeset patch
# Parent dbba23a6c8889cf681ab3e9c2bb730465acd7850
# User Ben Kelly <ben@wanderview.com>
Bug 1100398 P0 Break out helper routines to support gtests for more stream types.

diff --git a/xpcom/tests/gtest/TestHelpers.cpp b/xpcom/tests/gtest/TestHelpers.cpp
new file mode 100644
--- /dev/null
+++ b/xpcom/tests/gtest/TestHelpers.cpp
@@ -0,0 +1,66 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "TestHelpers.h"
+
+#include <algorithm>
+#include "gtest/gtest.h"
+#include "nsIOutputStream.h"
+#include "nsTArray.h"
+
+namespace testing {
+
+void
+CreateData(uint32_t aNumBytes, nsTArray<char>& aDataOut)
+{
+  static const char data[] =
+    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec egestas "
+    "purus eu condimentum iaculis. In accumsan leo eget odio porttitor, non "
+    "rhoncus nulla vestibulum. Etiam lacinia consectetur nisl nec "
+    "sollicitudin. Sed fringilla accumsan diam, pulvinar varius massa. Duis "
+    "mollis dignissim felis, eget tempus nisi tristique ut. Fusce euismod, "
+    "lectus non lacinia tempor, tellus diam suscipit quam, eget hendrerit "
+    "lacus nunc fringilla ante. Sed ultrices massa vitae risus molestie, ut "
+    "finibus quam laoreet nullam.";
+  static const uint32_t dataLength = sizeof(data) - 1;
+
+  aDataOut.SetCapacity(aNumBytes);
+
+  while (aNumBytes > 0) {
+    uint32_t amount = std::min(dataLength, aNumBytes);
+    aDataOut.AppendElements(data, amount);
+    aNumBytes -= amount;
+  }
+}
+
+void
+Write(nsIOutputStream* aStream, const nsTArray<char>& aData, uint32_t aOffset,
+      uint32_t aNumBytes)
+{
+  uint32_t remaining =
+    std::min(aNumBytes, static_cast<uint32_t>(aData.Length() - aOffset));
+
+  while (remaining > 0) {
+    uint32_t numWritten;
+    nsresult rv = aStream->Write(aData.Elements() + aOffset, remaining,
+                                 &numWritten);
+    ASSERT_TRUE(NS_SUCCEEDED(rv));
+    if (numWritten < 1) {
+      break;
+    }
+    aOffset += numWritten;
+    remaining -= numWritten;
+  }
+}
+
+void
+WriteAllAndClose(nsIOutputStream* aStream, const nsTArray<char>& aData)
+{
+  Write(aStream, aData, 0, aData.Length());
+  aStream->Close();
+}
+
+} // namespace testing
diff --git a/xpcom/tests/gtest/TestHelpers.h b/xpcom/tests/gtest/TestHelpers.h
new file mode 100644
--- /dev/null
+++ b/xpcom/tests/gtest/TestHelpers.h
@@ -0,0 +1,29 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef __TestHelpers_h
+#define __TestHelpers_h
+
+#include <stdint.h>
+
+class nsIOutputStream;
+template <class T> class nsTArray;
+
+namespace testing {
+
+void
+CreateData(uint32_t aNumBytes, nsTArray<char>& aDataOut);
+
+void
+Write(nsIOutputStream* aStream, const nsTArray<char>& aData, uint32_t aOffset,
+      uint32_t aNumBytes);
+
+void
+WriteAllAndClose(nsIOutputStream* aStream, const nsTArray<char>& aData);
+
+} // namespace testing
+
+#endif // __TestHelpers_h
diff --git a/xpcom/tests/gtest/TestSnappyStreams.cpp b/xpcom/tests/gtest/TestSnappyStreams.cpp
--- a/xpcom/tests/gtest/TestSnappyStreams.cpp
+++ b/xpcom/tests/gtest/TestSnappyStreams.cpp
@@ -8,63 +8,23 @@
 #include "gtest/gtest.h"
 #include "mozilla/SnappyCompressOutputStream.h"
 #include "mozilla/SnappyUncompressInputStream.h"
 #include "nsIPipe.h"
 #include "nsStreamUtils.h"
 #include "nsString.h"
 #include "nsStringStream.h"
 #include "nsTArray.h"
+#include "TestHelpers.h"
 
 namespace {
 
 using mozilla::SnappyCompressOutputStream;
 using mozilla::SnappyUncompressInputStream;
 
-static void CreateData(uint32_t aNumBytes, nsTArray<char>& aDataOut)
-{
-  static const char data[] =
-    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec egestas "
-    "purus eu condimentum iaculis. In accumsan leo eget odio porttitor, non "
-    "rhoncus nulla vestibulum. Etiam lacinia consectetur nisl nec "
-    "sollicitudin. Sed fringilla accumsan diam, pulvinar varius massa. Duis "
-    "mollis dignissim felis, eget tempus nisi tristique ut. Fusce euismod, "
-    "lectus non lacinia tempor, tellus diam suscipit quam, eget hendrerit "
-    "lacus nunc fringilla ante. Sed ultrices massa vitae risus molestie, ut "
-    "finibus quam laoreet nullam.";
-  static const uint32_t dataLength = sizeof(data) - 1;
-
-  aDataOut.SetCapacity(aNumBytes);
-
-  while (aNumBytes > 0) {
-    uint32_t amount = std::min(dataLength, aNumBytes);
-    aDataOut.AppendElements(data, amount);
-    aNumBytes -= amount;
-  }
-}
-
-static void
-WriteAllAndClose(nsIOutputStream* aStream, const nsTArray<char>& aData)
-{
-  uint32_t offset = 0;
-  uint32_t remaining = aData.Length();
-  while (remaining > 0) {
-    uint32_t numWritten;
-    nsresult rv = aStream->Write(aData.Elements() + offset, remaining,
-                                 &numWritten);
-    ASSERT_TRUE(NS_SUCCEEDED(rv));
-    if (numWritten < 1) {
-      break;
-    }
-    offset += numWritten;
-    remaining -= numWritten;
-  }
-  aStream->Close();
-}
-
 static already_AddRefed<nsIOutputStream>
 CompressPipe(nsIInputStream** aReaderOut)
 {
   nsCOMPtr<nsIOutputStream> pipeWriter;
 
   nsresult rv = NS_NewPipe(aReaderOut, getter_AddRefs(pipeWriter));
   if (NS_FAILED(rv)) { return nullptr; }
 
@@ -80,19 +40,19 @@ static void TestCompress(uint32_t aNumBy
   // bloat very small content.
   ASSERT_GT(aNumBytes, 1024u);
 
   nsCOMPtr<nsIInputStream> pipeReader;
   nsCOMPtr<nsIOutputStream> compress = CompressPipe(getter_AddRefs(pipeReader));
   ASSERT_TRUE(compress);
 
   nsTArray<char> inputData;
-  CreateData(aNumBytes, inputData);
+  testing::CreateData(aNumBytes, inputData);
 
-  WriteAllAndClose(compress, inputData);
+  testing::WriteAllAndClose(compress, inputData);
 
   nsAutoCString outputData;
   nsresult rv = NS_ConsumeStream(pipeReader, UINT32_MAX, outputData);
   ASSERT_TRUE(NS_SUCCEEDED(rv));
 
   ASSERT_LT(outputData.Length(), inputData.Length());
 }
 
@@ -103,19 +63,19 @@ static void TestCompressUncompress(uint3
   nsCOMPtr<nsIInputStream> pipeReader;
   nsCOMPtr<nsIOutputStream> compress = CompressPipe(getter_AddRefs(pipeReader));
   ASSERT_TRUE(compress);
 
   nsCOMPtr<nsIInputStream> uncompress =
     new SnappyUncompressInputStream(pipeReader);
 
   nsTArray<char> inputData;
-  CreateData(aNumBytes, inputData);
+  testing::CreateData(aNumBytes, inputData);
 
-  WriteAllAndClose(compress, inputData);
+  testing::WriteAllAndClose(compress, inputData);
 
   nsAutoCString outputData;
   nsresult rv = NS_ConsumeStream(uncompress, UINT32_MAX, outputData);
   ASSERT_TRUE(NS_SUCCEEDED(rv));
 
   ASSERT_EQ(inputData.Length(), outputData.Length());
   for (uint32_t i = 0; i < inputData.Length(); ++i) {
     EXPECT_EQ(inputData[i], outputData.get()[i]) << "Byte " << i;
diff --git a/xpcom/tests/gtest/moz.build b/xpcom/tests/gtest/moz.build
--- a/xpcom/tests/gtest/moz.build
+++ b/xpcom/tests/gtest/moz.build
@@ -3,16 +3,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 UNIFIED_SOURCES += [
     'TestCRT.cpp',
     'TestEncoding.cpp',
     'TestExpirationTracker.cpp',
+    'TestHelpers.cpp',
     'TestPipes.cpp',
     'TestPriorityQueue.cpp',
     'TestSnappyStreams.cpp',
     'TestStorageStream.cpp',
     'TestStrings.cpp',
     'TestSynchronization.cpp',
     'TestThreadPool.cpp',
     'TestTimeStamp.cpp',
