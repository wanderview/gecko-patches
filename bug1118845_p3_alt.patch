# HG changeset patch
# Parent 91de84ac12eefd4d975bb1936ad81d23044d10ae
# User Ben Kelly <ben@wanderview.com>
Bug 1118845 P3 Override SharedWorker load group after script has initially loaded.


diff --git a/dom/workers/WorkerPrivate.cpp b/dom/workers/WorkerPrivate.cpp
--- a/dom/workers/WorkerPrivate.cpp
+++ b/dom/workers/WorkerPrivate.cpp
@@ -3496,25 +3496,33 @@ template <class Derived>
 void
 WorkerPrivateParent<Derived>::SetPrincipal(nsIPrincipal* aPrincipal,
                                            nsILoadGroup* aLoadGroup)
 {
   AssertIsOnMainThread();
   MOZ_ASSERT(NS_LoadGroupMatchesPrincipal(aLoadGroup, aPrincipal));
   MOZ_ASSERT(!mLoadInfo.mPrincipalInfo);
 
+  // SharedWorkers must have a load group separate from their originating
+  // document.
+  if (IsSharedWorker() || IsServiceWorker()) {
+    NS_NewLoadGroup(getter_AddRefs(mLoadInfo.mLoadGroup), aPrincipal,
+                    aLoadGroup);
+  } else {
+    mLoadInfo.mLoadGroup = aLoadGroup;
+  }
+
   mLoadInfo.mPrincipal = aPrincipal;
   mLoadInfo.mPrincipalIsSystem = nsContentUtils::IsSystemPrincipal(aPrincipal);
   uint16_t appStatus = aPrincipal->GetAppStatus();
   mLoadInfo.mIsInPrivilegedApp =
     (appStatus == nsIPrincipal::APP_STATUS_CERTIFIED ||
      appStatus == nsIPrincipal::APP_STATUS_PRIVILEGED);
   mLoadInfo.mIsInCertifiedApp = (appStatus == nsIPrincipal::APP_STATUS_CERTIFIED);
 
-  mLoadInfo.mLoadGroup = aLoadGroup;
 
   mLoadInfo.mPrincipalInfo = new PrincipalInfo();
 
   MOZ_ALWAYS_TRUE(NS_SUCCEEDED(
     PrincipalToPrincipalInfo(aPrincipal, mLoadInfo.mPrincipalInfo)));
 }
 
 template <class Derived>
