# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  9069819e52588aec4b92e432c873822170abee6e
Bug 1413604 P2 Make WorkerHolderToken use an nsTObserverArray to allow for mutation during iteration. r=asuth

diff --git a/dom/workers/WorkerHolderToken.cpp b/dom/workers/WorkerHolderToken.cpp
--- a/dom/workers/WorkerHolderToken.cpp
+++ b/dom/workers/WorkerHolderToken.cpp
@@ -91,20 +91,23 @@ WorkerHolderToken::Notify(Status aStatus
   NS_ASSERT_OWNINGTHREAD(WorkerHolderToken);
 
   // When the service worker thread is stopped we will get Terminating,
   // but nothing higher than that.  We must shut things down at Terminating.
   if (aStatus < mShutdownStatus || mShuttingDown) {
     return true;
   }
 
-  mShuttingDown = true;
-
   // Start the asynchronous destruction of our actors.  These will call back
   // into RemoveActor() once the actor is destroyed.
-  for (uint32_t i = 0; i < mListenerList.Length(); ++i) {
-    mListenerList[i]->WorkerShuttingDown();
+  nsTObserverArray<Listener*>::ForwardIterator iter(mListenerList);
+  while (iter.HasMore()) {
+    iter.GetNext()->WorkerShuttingDown();
   }
 
+  // Set this after calling WorkerShuttingDown() on listener list in case
+  // one callback triggers another listener to be added.
+  mShuttingDown = true;
+
   return true;
 }
 
 END_WORKERS_NAMESPACE
diff --git a/dom/workers/WorkerHolderToken.h b/dom/workers/WorkerHolderToken.h
--- a/dom/workers/WorkerHolderToken.h
+++ b/dom/workers/WorkerHolderToken.h
@@ -3,17 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_workers_WorkerHolderToken_h
 #define mozilla_dom_workers_WorkerHolderToken_h
 
 #include "nsISupportsImpl.h"
-#include "nsTArray.h"
+#include "nsTObserverArray.h"
 #include "WorkerHolder.h"
 
 BEGIN_WORKERS_NAMESPACE
 
 class WorkerPrivate;
 
 // This is a ref-counted WorkerHolder implementation.  If you wish
 // to be notified of worker shutdown beginning, then you can implement
@@ -62,17 +62,17 @@ private:
   WorkerHolderToken(Status aShutdownStatus, Behavior aBehavior);
 
   ~WorkerHolderToken();
 
   // WorkerHolder methods
   virtual bool
   Notify(workers::Status aStatus) override;
 
-  nsTArray<Listener*> mListenerList;
+  nsTObserverArray<Listener*> mListenerList;
   const Status mShutdownStatus;
   bool mShuttingDown;
 
 public:
   NS_INLINE_DECL_REFCOUNTING(WorkerHolderToken)
 };
 
 END_WORKERS_NAMESPACE
