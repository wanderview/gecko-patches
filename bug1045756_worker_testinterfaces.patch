# HG changeset patch
# Parent 2fc48871c4593f7317f9a11c31c0ea9562130a14
# User Ben Kelly <ben@wanderview.com>
Bug 1045756 Test DOM interfaces exposed on worker global.


diff --git a/dom/workers/test/mochitest.ini b/dom/workers/test/mochitest.ini
--- a/dom/workers/test/mochitest.ini
+++ b/dom/workers/test/mochitest.ini
@@ -72,16 +72,19 @@ support-files =
   xhr_worker.js
   xhr_headers_worker.js
   xhr_headers_server.sjs
   url_exceptions_worker.js
   urlSearchParams_worker.js
   subdir/relativeLoad_sub_worker.js
   subdir/relativeLoad_sub_worker2.js
   subdir/relativeLoad_sub_import.js
+  test_worker_interfaces.js
+  worker_driver.js
+  worker_wrapper.js
 
 [test_404.html]
 [test_atob.html]
 [test_blobConstructor.html]
 [test_blobWorkers.html]
 [test_bug1002702.html]
 [test_bug949946.html]
 [test_bug1010784.html]
@@ -141,16 +144,17 @@ skip-if = buildapp == 'b2g' || e10s # b2
 [test_threadErrors.html]
 [test_threadTimeouts.html]
 [test_throwingOnerror.html]
 [test_timeoutTracing.html]
 [test_transferable.html]
 [test_url.html]
 [test_urlApi.html]
 [test_workersDisabled.html]
+[test_worker_interfaces.html]
 [test_xhr.html]
 [test_xhr2.html]
 [test_xhrAbort.html]
 [test_xhr_headers.html]
 [test_xhr_implicit_cancel.html]
 [test_xhr_parameters.html]
 skip-if = buildapp == 'b2g' || e10s
 [test_xhr_parameters.js]
diff --git a/dom/workers/test/test_worker_interfaces.html b/dom/workers/test/test_worker_interfaces.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/test_worker_interfaces.html
@@ -0,0 +1,16 @@
+<!-- Any copyright is dedicated to the Public Domain.
+   - http://creativecommons.org/publicdomain/zero/1.0/ -->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Validate Interfaces Exposed to Workers</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+  <script type="text/javascript" src="worker_driver.js"></script>
+</head>
+<body>
+<script class="testbody" type="text/javascript">
+workerTestExec("test_worker_interfaces.js");
+</script>
+</body>
+</html>
diff --git a/dom/workers/test/test_worker_interfaces.js b/dom/workers/test/test_worker_interfaces.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/test_worker_interfaces.js
@@ -0,0 +1,215 @@
+// This is a list of all interfaces that are exposed to workers.
+// Please only add things to this list with great care and proper review
+// from the associated module peers.
+
+// This file lists global interfaces we want exposed and verifies they
+// are what we intend. Each entry in the arrays below can either be a
+// simple string with the interface name, or an object with a 'name'
+// property giving the interface name as a string, and additional
+// properties which qualify the exposure of that interface. For example:
+//
+// [
+//   "AGlobalInterface",
+//   {name: "ExperimentalThing", release: false},
+//   {name: "OptionalThing", pref: "some.thing.enabled"},
+// ];
+//
+// See createInterfaceMap() below for a complete list of properties.
+
+// IMPORTANT: Do not change this list without review from
+//            a JavaScript Engine peer!
+var ecmaGlobals =
+  [
+    "Array",
+    "ArrayBuffer",
+    "Boolean",
+    "DataView",
+    "Date",
+    "Error",
+    "EvalError",
+    "Float32Array",
+    "Float64Array",
+    "Function",
+    // NB: We haven't bothered to resolve constants like Infinity and NaN on
+    // Xrayed windows (which are seen from the XBL scope). We could support
+    // this if needed with some refactoring.
+    {name: "Infinity", xbl: false},
+    "Int16Array",
+    "Int32Array",
+    "Int8Array",
+    "InternalError",
+    {name: "Intl", desktop: true},
+    "Iterator",
+    "JSON",
+    "Map",
+    "Math",
+    {name: "NaN", xbl: false},
+    "Number",
+    "Object",
+    "Proxy",
+    "RangeError",
+    "ReferenceError",
+    "RegExp",
+    "Set",
+    {name: "SharedArrayBuffer", nightly: true},
+    {name: "SIMD", nightly: true},
+    "StopIteration",
+    "String",
+    "Symbol",
+    "SyntaxError",
+    {name: "TypedObject", nightly: true},
+    "TypeError",
+    "Uint16Array",
+    "Uint32Array",
+    "Uint8Array",
+    "Uint8ClampedArray",
+    "URIError",
+    "WeakMap",
+  ];
+// IMPORTANT: Do not change the list above without review from
+//            a JavaScript Engine peer!
+
+// IMPORTANT: Do not change the list below without review from a DOM peer!
+var interfaceNamesInGlobalScope =
+  [
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "Blob",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "Console",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "DedicatedWorkerGlobalScope",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "DOMException",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "Event",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "EventTarget",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "File",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "FileReaderSync",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    { name: "Headers", pref: "dom.fetch.enabled" },
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "ImageData",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "MessageEvent",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "MessagePort",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "Promise",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "TextDecoder",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "TextEncoder",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "XMLHttpRequest",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "XMLHttpRequestUpload",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "URL",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "URLSearchParams",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "Worker",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "WorkerGlobalScope",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "WorkerLocation",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+    "WorkerNavigator",
+// IMPORTANT: Do not change this list without review from a DOM peer!
+  ];
+// IMPORTANT: Do not change the list above without review from a DOM peer!
+
+function createInterfaceMap(prefMap, permissionMap, version, userAgent) {
+  var isNightly = version.endsWith("a1");
+  var isRelease = !version.contains("a");
+  var isDesktop = !/Mobile|Tablet/.test(userAgent);
+  var isB2G = !isDesktop && !userAgent.contains("Android");
+
+  var interfaceMap = {};
+
+  function addInterfaces(interfaces)
+  {
+    for (var entry of interfaces) {
+      if (typeof(entry) === "string") {
+        interfaceMap[entry] = true;
+      } else if ((entry.nightly === !isNightly) ||
+                 (entry.desktop === !isDesktop) ||
+                 (entry.b2g === !isB2G) ||
+                 (entry.release === !isRelease) ||
+                 (entry.pref && !prefMap[entry.pref])  ||
+                 (entry.permission && !permissionMap[entry.permission])) {
+        interfaceMap[entry.name] = false;
+      } else {
+        interfaceMap[entry.name] = true;
+      }
+    }
+  }
+
+  addInterfaces(ecmaGlobals);
+  addInterfaces(interfaceNamesInGlobalScope);
+
+  return interfaceMap;
+}
+
+function runTest(prefMap, permissionMap, version, userAgent) {
+  var interfaceMap = createInterfaceMap(prefMap, permissionMap, version, userAgent);
+  for (var name of Object.getOwnPropertyNames(self)) {
+    // An interface name should start with an upper case character.
+    if (!/^[A-Z]/.test(name)) {
+      continue;
+    }
+    ok(interfaceMap[name],
+       "If this is failing: DANGER, are you sure you want to expose the new interface " + name +
+       " to all webpages as a property on the worker? Do not make a change to this file without a " +
+       " review from a DOM peer for that specific change!!! (or a JS peer for changes to ecmaGlobals)");
+    delete interfaceMap[name];
+  }
+  for (var name of Object.keys(interfaceMap)) {
+    ok(name in self === interfaceMap[name],
+       name + " should " + (interfaceMap[name] ? "" : " NOT") + " be defined on the global scope");
+    if (!interfaceMap[name]) {
+      delete interfaceMap[name];
+    }
+  }
+  is(Object.keys(interfaceMap).length, 0,
+     "The following interface(s) are not enumerated: " + Object.keys(interfaceMap).join(", "));
+}
+
+function appendPrefs(prefs, interfaces) {
+  for (var entry of interfaces) {
+    if (entry.pref !== undefined && prefs.indexOf(entry.pref) === -1) {
+      prefs.push(entry.pref);
+    }
+  }
+}
+
+var prefs = [];
+appendPrefs(prefs, ecmaGlobals);
+appendPrefs(prefs, interfaceNamesInGlobalScope);
+
+function appendPermissions(permissions, interfaces) {
+  for (var entry of interfaces) {
+    if (entry.permission !== undefined &&
+        permissions.indexOf(entry.permission) === -1) {
+      permissions.push(entry.permission);
+    }
+  }
+}
+
+var permissions = [];
+appendPermissions(permissions, ecmaGlobals);
+appendPermissions(permissions, interfaceNamesInGlobalScope);
+
+workerTestGetPrefs(prefs, function(prefMap) {
+  workerTestGetPermissions(permissions, function(permissionMap) {
+    workerTestGetVersion(function(version) {
+      workerTestGetUserAgent(function(userAgent) {
+        runTest(prefMap, permissionMap, version, userAgent);
+        workerTestDone();
+      });
+    });
+  });
+});
diff --git a/dom/workers/test/worker_driver.js b/dom/workers/test/worker_driver.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/worker_driver.js
@@ -0,0 +1,35 @@
+function workerTestExec(script) {
+  SimpleTest.waitForExplicitFinish();
+  var worker = new Worker("worker_wrapper.js");
+  worker.onmessage = function(event) {
+    if (event.data.type == "finish") {
+      SimpleTest.finish();
+    } else if (event.data.type == "status") {
+      ok(event.data.status, event.data.msg);
+    } else if (event.data.type == "getPrefs") {
+      var result = {};
+      event.data.prefs.forEach(function(pref) {
+        result[pref] = SpecialPowers.Services.prefs.getBoolPref(pref);
+      });
+      worker.postMessage(result);
+    } else if (event.data.type == "getPermissions") {
+      var result = {};
+      event.data.permissions.forEach(function(permission) {
+        result[permission] = SpecialPowers.hasPermission(permission, window.document);
+      });
+      worker.postMessage(result);
+    } else if (event.data.type == "getVersion") {
+      var result = SpecialPowers.Cc["@mozilla.org/xre/app-info;1"].getService(SpecialPowers.Ci.nsIXULAppInfo).version;
+      worker.postMessage(result);
+    } else if (event.data.type == "getUserAgent") {
+      worker.postMessage(navigator.userAgent);
+    }
+  }
+
+  worker.onerror = function(event) {
+    ok(false, "Worker had an error: " + event.data);
+    SimpleTest.finish();
+  };
+
+  worker.postMessage({ script: script });
+}
diff --git a/dom/workers/test/worker_wrapper.js b/dom/workers/test/worker_wrapper.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/worker_wrapper.js
@@ -0,0 +1,115 @@
+function ok(a, msg) {
+  dump("OK: " + !!a + "  =>  " + a + " " + msg + "\n");
+  postMessage({type: 'status', status: !!a, msg: a + ": " + msg });
+}
+
+function is(a, b, msg) {
+  dump("IS: " + (a===b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a === b, msg: a + " === " + b + ": " + msg });
+}
+
+/*
+var WorkerTest = {
+  done: function() {
+    postMessage({ type: 'finish' });
+  },
+  getPrefs: function(prefs, cb) {
+    addEventListener('message', function workerTestGetPrefsCB(e) {
+      removeEventListener('message', workerTestGetPrefsCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getPrefs',
+      prefs: prefs
+    });
+  },
+  getPermissions: function(permissions, cb) {
+    addEventListener('message', function workerTestGetPermissionsCB(e) {
+      removeEventListener('message', workerTestGetPermissionsCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getPermissions',
+      permissions: permissions
+    });
+  },
+  getVersion: function(cb) {
+    addEventListener('message', function workerTestGetVersionCB(e) {
+      removeEventListener('message', workerTestGetVersionCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getVersion'
+    });
+  },
+  getUserAgent: function(cb) {
+    addEventListener('message', function workerTestGetUserAgentCB(e) {
+      removeEventListener('message', workerTestGetUserAgentCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getUserAgent'
+    });
+  }
+};
+*/
+
+function workerTestDone() {
+    postMessage({ type: 'finish' });
+}
+
+function workerTestGetPrefs(prefs, cb) {
+    addEventListener('message', function workerTestGetPrefsCB(e) {
+      removeEventListener('message', workerTestGetPrefsCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getPrefs',
+      prefs: prefs
+    });
+}
+
+function workerTestGetPermissions(permissions, cb) {
+    addEventListener('message', function workerTestGetPermissionsCB(e) {
+      removeEventListener('message', workerTestGetPermissionsCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getPermissions',
+      permissions: permissions
+    });
+}
+
+function workerTestGetVersion(cb) {
+    addEventListener('message', function workerTestGetVersionCB(e) {
+      removeEventListener('message', workerTestGetVersionCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getVersion'
+    });
+}
+
+function workerTestGetUserAgent(cb) {
+    addEventListener('message', function workerTestGetUserAgentCB(e) {
+      removeEventListener('message', workerTestGetUserAgentCB);
+      cb(e.data);
+    });
+    postMessage({
+      type: 'getUserAgent'
+    });
+}
+
+addEventListener('message', function workerWrapperOnMessage(e) {
+  removeEventListener('message', workerWrapperOnMessage);
+  var data = e.data;
+  try {
+    importScripts(data.script);
+  } catch(e) {
+    postMessage({
+      type: 'status',
+      status: false,
+      msg: 'worker failed to import ' + data.script + "; error: " + e.message
+    });
+  }
+});
