# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  7b78c867bde0d3c06b0d6f6385fc2da3dfc182bc
Bug 1424338 P7 Remove the ClientEndPoint union type for now. r=baku

diff --git a/dom/clients/manager/ClientIPCTypes.ipdlh b/dom/clients/manager/ClientIPCTypes.ipdlh
--- a/dom/clients/manager/ClientIPCTypes.ipdlh
+++ b/dom/clients/manager/ClientIPCTypes.ipdlh
@@ -73,31 +73,25 @@ struct ClientFocusArgs
 
 struct ClientNavigateArgs
 {
   IPCClientInfo target;
   nsCString url;
   nsCString baseURL;
 };
 
-union ClientEndPoint
-{
-  IPCClientInfo;
-  IPCServiceWorkerDescriptor;
-};
-
 struct ClientPostMessageArgs
 {
   ClonedMessageData clonedData;
   IPCServiceWorkerDescriptor serviceWorker;
 };
 
 struct ClientMatchAllArgs
 {
-  ClientEndPoint endpoint;
+  IPCServiceWorkerDescriptor serviceWorker;
   ClientType type;
   bool includeUncontrolled;
 };
 
 struct ClientClaimArgs
 {
   IPCServiceWorkerDescriptor serviceWorker;
 };
diff --git a/dom/clients/manager/ClientManagerService.cpp b/dom/clients/manager/ClientManagerService.cpp
--- a/dom/clients/manager/ClientManagerService.cpp
+++ b/dom/clients/manager/ClientManagerService.cpp
@@ -432,22 +432,18 @@ public:
 
 } // anonymous namespace
 
 RefPtr<ClientOpPromise>
 ClientManagerService::MatchAll(const ClientMatchAllArgs& aArgs)
 {
   AssertIsOnBackgroundThread();
 
-  const ClientEndPoint& endpoint = aArgs.endpoint();
-
-  const PrincipalInfo& principalInfo =
-    endpoint.type() == ClientEndPoint::TIPCClientInfo
-      ? endpoint.get_IPCClientInfo().principalInfo()
-      : endpoint.get_IPCServiceWorkerDescriptor().principalInfo();
+  ServiceWorkerDescriptor swd(aArgs.serviceWorker());
+  const PrincipalInfo& principalInfo = swd.PrincipalInfo();
 
   RefPtr<PromiseListHolder> promiseList = new PromiseListHolder();
 
   for (auto iter = mSourceTable.Iter(); !iter.Done(); iter.Next()) {
     ClientSourceParent* source = iter.UserData();
     MOZ_DIAGNOSTIC_ASSERT(source);
 
     if (source->IsFrozen() || !source->ExecutionReady()) {
@@ -459,31 +455,24 @@ ClientManagerService::MatchAll(const Cli
       continue;
     }
 
     if (!MatchPrincipalInfo(source->Info().PrincipalInfo(), principalInfo)) {
       continue;
     }
 
     if (!aArgs.includeUncontrolled()) {
-      if (endpoint.type() != ClientEndPoint::TIPCServiceWorkerDescriptor) {
-        continue;
-      }
-
       const Maybe<ServiceWorkerDescriptor>& controller =
         source->GetController();
       if (controller.isNothing()) {
         continue;
       }
 
-      const IPCServiceWorkerDescriptor& serviceWorker =
-        endpoint.get_IPCServiceWorkerDescriptor();
-
-      if(controller.ref().Id() != serviceWorker.id() ||
-         controller.ref().Scope() != serviceWorker.scope()) {
+      if(controller.ref().Id() != swd.Id() ||
+         controller.ref().Scope() != swd.Scope()) {
         continue;
       }
     }
 
     promiseList->AddPromise(
       source->StartOp(Move(ClientGetInfoAndStateArgs(source->Info().Id(),
                                                      source->Info().PrincipalInfo()))));
   }
