# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  63d28a614e4c532cb4a27a344c0d7572c93be7ef
Bug 1263469 P4 Update test_eventsource_intercept.html to validate FetchEvent.request.cache. r=ehsan

diff --git a/dom/workers/test/serviceworkers/eventsource/eventsource_cors_response_intercept_worker.js b/dom/workers/test/serviceworkers/eventsource/eventsource_cors_response_intercept_worker.js
--- a/dom/workers/test/serviceworkers/eventsource/eventsource_cors_response_intercept_worker.js
+++ b/dom/workers/test/serviceworkers/eventsource/eventsource_cors_response_intercept_worker.js
@@ -7,13 +7,14 @@ self.addEventListener('fetch', function 
   var request = event.request;
   var url = new URL(request.url);
 
   if (url.pathname !== '/tests/dom/workers/test/serviceworkers/eventsource/eventsource.resource') {
     return;
   }
 
   ok(request.mode === 'cors', 'EventSource should make a CORS request');
+  ok(request.cache === 'no-store', 'EventSource should make a no-store request');
   var fetchRequest = new Request(prefix + 'eventsource.resource', { mode: 'cors'});
   event.respondWith(fetch(fetchRequest).then((fetchResponse) => {
     return fetchResponse;
   }));
 });
diff --git a/dom/workers/test/serviceworkers/eventsource/eventsource_mixed_content_cors_response_intercept_worker.js b/dom/workers/test/serviceworkers/eventsource/eventsource_mixed_content_cors_response_intercept_worker.js
--- a/dom/workers/test/serviceworkers/eventsource/eventsource_mixed_content_cors_response_intercept_worker.js
+++ b/dom/workers/test/serviceworkers/eventsource/eventsource_mixed_content_cors_response_intercept_worker.js
@@ -6,13 +6,14 @@ self.addEventListener('fetch', function 
   var request = event.request;
   var url = new URL(request.url);
 
   if (url.pathname !== '/tests/dom/workers/test/serviceworkers/eventsource/eventsource.resource') {
     return;
   }
 
   ok(request.mode === 'cors', 'EventSource should make a CORS request');
+  ok(request.cache === 'no-store', 'EventSource should make a no-store request');
   var fetchRequest = new Request(prefix + 'eventsource.resource', { mode: 'cors'});
   event.respondWith(fetch(fetchRequest).then((fetchResponse) => {
     return fetchResponse;
   }));
 });
diff --git a/dom/workers/test/serviceworkers/eventsource/eventsource_opaque_response_intercept_worker.js b/dom/workers/test/serviceworkers/eventsource/eventsource_opaque_response_intercept_worker.js
--- a/dom/workers/test/serviceworkers/eventsource/eventsource_opaque_response_intercept_worker.js
+++ b/dom/workers/test/serviceworkers/eventsource/eventsource_opaque_response_intercept_worker.js
@@ -7,13 +7,14 @@ self.addEventListener('fetch', function 
   var request = event.request;
   var url = new URL(request.url);
 
   if (url.pathname !== '/tests/dom/workers/test/serviceworkers/eventsource/eventsource.resource') {
     return;
   }
 
   ok(request.mode === 'cors', 'EventSource should make a CORS request');
+  ok(request.cache === 'no-store', 'EventSource should make a no-store request');
   var fetchRequest = new Request(prefix + 'eventsource.resource', { mode: 'no-cors'});
   event.respondWith(fetch(fetchRequest).then((fetchResponse) => {
     return fetchResponse;
   }));
 });
