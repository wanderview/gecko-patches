# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  6698b66d7b43ee1a63a7a0173df51b4637b7e1ac
Bug 1438211 P1 Add nsIGlobalObject::GetOrCreateServiceWorkerRegistration() and assoicated virtual methods. r=asuth

diff --git a/dom/base/nsIGlobalObject.cpp b/dom/base/nsIGlobalObject.cpp
--- a/dom/base/nsIGlobalObject.cpp
+++ b/dom/base/nsIGlobalObject.cpp
@@ -2,24 +2,27 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsIGlobalObject.h"
 
 #include "mozilla/dom/ServiceWorker.h"
+#include "mozilla/dom/ServiceWorkerRegistration.h"
 #include "nsContentUtils.h"
 #include "nsThreadUtils.h"
 #include "nsHostObjectProtocolHandler.h"
 
 using mozilla::Maybe;
 using mozilla::dom::ClientInfo;
 using mozilla::dom::ServiceWorker;
 using mozilla::dom::ServiceWorkerDescriptor;
+using mozilla::dom::ServiceWorkerRegistration;
+using mozilla::dom::ServiceWorkerRegistrationDescriptor;
 
 nsIGlobalObject::~nsIGlobalObject()
 {
   UnlinkHostObjectURIs();
 }
 
 nsIPrincipal*
 nsIGlobalObject::PrincipalOrNull()
@@ -149,8 +152,27 @@ nsIGlobalObject::AddServiceWorker(Servic
   MOZ_DIAGNOSTIC_ASSERT(false, "this global should not have any service workers");
 }
 
 void
 nsIGlobalObject::RemoveServiceWorker(ServiceWorker* aServiceWorker)
 {
   MOZ_DIAGNOSTIC_ASSERT(false, "this global should not have any service workers");
 }
+
+RefPtr<ServiceWorkerRegistration>
+nsIGlobalObject::GetOrCreateServiceWorkerRegistration(const ServiceWorkerRegistrationDescriptor& aDescriptor)
+{
+  MOZ_DIAGNOSTIC_ASSERT(false, "this global should not have any service worker registrations");
+  return nullptr;
+}
+
+void
+nsIGlobalObject::AddServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration)
+{
+  MOZ_DIAGNOSTIC_ASSERT(false, "this global should not have any service worker registrations");
+}
+
+void
+nsIGlobalObject::RemoveServiceWorkerRegistration(ServiceWorkerRegistration* aRegistration)
+{
+  MOZ_DIAGNOSTIC_ASSERT(false, "this global should not have any service worker registrations");
+}
diff --git a/dom/base/nsIGlobalObject.h b/dom/base/nsIGlobalObject.h
--- a/dom/base/nsIGlobalObject.h
+++ b/dom/base/nsIGlobalObject.h
@@ -22,16 +22,18 @@
 { 0xa6, 0xa3, 0x6f, 0x87, 0x2e, 0xc3, 0xee, 0x7f } }
 
 class nsCycleCollectionTraversalCallback;
 class nsIPrincipal;
 
 namespace mozilla {
 namespace dom {
 class ServiceWorker;
+class ServiceWorkerRegistration;
+class ServiceWorkerRegistrationDescriptor;
 } // namespace dom
 } // namespace mozilla
 
 class nsIGlobalObject : public nsISupports,
                         public mozilla::dom::DispatcherTrait
 {
   nsTArray<nsCString> mHostObjectURIs;
   bool mIsDying;
@@ -102,16 +104,32 @@ public:
   // not hold a strong reference to the ServiceWorker.
   virtual void
   AddServiceWorker(mozilla::dom::ServiceWorker* aServiceWorker);
 
   // This method must be called by the ServiceWorker before it is destroyed.
   virtual void
   RemoveServiceWorker(mozilla::dom::ServiceWorker* aServiceWorker);
 
+  // Get the DOM object for the given descriptor or attempt to create one.
+  // Creation can still fail and return nullptr during shutdown, etc.
+  virtual RefPtr<mozilla::dom::ServiceWorkerRegistration>
+  GetOrCreateServiceWorkerRegistration(const mozilla::dom::ServiceWorkerRegistrationDescriptor& aDescriptor);
+
+  // These methods allow the ServiceWorkerRegistration instances to note their
+  // existence so that the global can use weak references to them.  The global
+  // should not hold a strong reference to the ServiceWorkerRegistration.
+  virtual void
+  AddServiceWorkerRegistration(mozilla::dom::ServiceWorkerRegistration* aRegistration);
+
+  // This method must be called by the ServiceWorkerRegistration before it is
+  // destroyed.
+  virtual void
+  RemoveServiceWorkerRegistration(mozilla::dom::ServiceWorkerRegistration* aRegistration);
+
 protected:
   virtual ~nsIGlobalObject();
 
   void
   StartDying()
   {
     mIsDying = true;
   }
