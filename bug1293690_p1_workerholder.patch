# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  cb420eb37f8df0b89466e677dcdcf419f0fbde86
Bug 1293690 P1 Allow WorkerHolder::HoldWorker() callers to specify the status value they consider to be a failure. r=baku

diff --git a/dom/workers/WorkerHolder.cpp b/dom/workers/WorkerHolder.cpp
--- a/dom/workers/WorkerHolder.cpp
+++ b/dom/workers/WorkerHolder.cpp
@@ -17,23 +17,23 @@ WorkerHolder::WorkerHolder()
 WorkerHolder::~WorkerHolder()
 {
   NS_ASSERT_OWNINGTHREAD(WorkerHolder);
   ReleaseWorkerInternal();
   MOZ_ASSERT(mWorkerPrivate == nullptr);
 }
 
 bool
-WorkerHolder::HoldWorker(WorkerPrivate* aWorkerPrivate)
+WorkerHolder::HoldWorker(WorkerPrivate* aWorkerPrivate, Status aFailStatus)
 {
   NS_ASSERT_OWNINGTHREAD(WorkerHolder);
   MOZ_ASSERT(aWorkerPrivate);
   aWorkerPrivate->AssertIsOnWorkerThread();
 
-  if (!aWorkerPrivate->AddHolder(this)) {
+  if (!aWorkerPrivate->AddHolder(this, aFailStatus)) {
     return false;
   }
 
   mWorkerPrivate = aWorkerPrivate;
   return true;
 }
 
 void
diff --git a/dom/workers/WorkerHolder.h b/dom/workers/WorkerHolder.h
--- a/dom/workers/WorkerHolder.h
+++ b/dom/workers/WorkerHolder.h
@@ -72,17 +72,18 @@ enum Status
 class WorkerHolder
 {
 public:
   NS_DECL_OWNINGTHREAD
 
   WorkerHolder();
   virtual ~WorkerHolder();
 
-  bool HoldWorker(WorkerPrivate* aWorkerPrivate);
+  bool HoldWorker(WorkerPrivate* aWorkerPrivate,
+                  Status aFailStatus = Canceling);
   void ReleaseWorker();
 
   virtual bool Notify(Status aStatus) = 0;
 
 protected:
   void ReleaseWorkerInternal();
 
   WorkerPrivate* MOZ_NON_OWNING_REF mWorkerPrivate;
diff --git a/dom/workers/WorkerPrivate.cpp b/dom/workers/WorkerPrivate.cpp
--- a/dom/workers/WorkerPrivate.cpp
+++ b/dom/workers/WorkerPrivate.cpp
@@ -5251,24 +5251,24 @@ WorkerPrivate::RemoveChildWorker(ParentT
   mChildWorkers.RemoveElement(aChildWorker);
 
   if (mChildWorkers.IsEmpty() && !ModifyBusyCountFromWorker(false)) {
     NS_WARNING("Failed to modify busy count!");
   }
 }
 
 bool
-WorkerPrivate::AddHolder(WorkerHolder* aHolder)
+WorkerPrivate::AddHolder(WorkerHolder* aHolder, Status aFailStatus)
 {
   AssertIsOnWorkerThread();
 
   {
     MutexAutoLock lock(mMutex);
 
-    if (mStatus >= Canceling) {
+    if (mStatus >= aFailStatus) {
       return false;
     }
   }
 
   MOZ_ASSERT(!mHolders.Contains(aHolder), "Already know about this one!");
 
   if (mHolders.IsEmpty() && !ModifyBusyCountFromWorker(true)) {
     return false;
diff --git a/dom/workers/WorkerPrivate.h b/dom/workers/WorkerPrivate.h
--- a/dom/workers/WorkerPrivate.h
+++ b/dom/workers/WorkerPrivate.h
@@ -1431,17 +1431,17 @@ private:
 
   void
   SetGCTimerMode(GCTimerMode aMode);
 
   void
   ShutdownGCTimers();
 
   bool
-  AddHolder(WorkerHolder* aHolder);
+  AddHolder(WorkerHolder* aHolder, Status aFailStatus);
 
   void
   RemoveHolder(WorkerHolder* aHolder);
 
   void
   NotifyHolders(JSContext* aCx, Status aStatus);
 
   bool
