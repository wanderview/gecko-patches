# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  57daa71aa7d4236efdd77159a9a80fc86d1462ea
Bug 1434701 P2 Don't expose internal IPC headers in ServiceWorkerRegistrationDescriptor.h and other minor fixes. r=asuth

diff --git a/dom/serviceworkers/ServiceWorkerDescriptor.h b/dom/serviceworkers/ServiceWorkerDescriptor.h
--- a/dom/serviceworkers/ServiceWorkerDescriptor.h
+++ b/dom/serviceworkers/ServiceWorkerDescriptor.h
@@ -1,16 +1,17 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #ifndef _mozilla_dom_ServiceWorkerDescriptor_h
 #define _mozilla_dom_ServiceWorkerDescriptor_h
 
+#include "mozilla/UniquePtr.h"
 #include "nsString.h"
 
 class nsIPrincipal;
 
 namespace mozilla {
 
 namespace ipc {
 class PrincipalInfo;
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.cpp
@@ -1,15 +1,17 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/ServiceWorkerRegistrationDescriptor.h"
+
+#include "mozilla/dom/IPCServiceWorkerRegistrationDescriptor.h"
 #include "mozilla/ipc/PBackgroundSharedTypes.h"
 #include "ServiceWorkerInfo.h"
 
 namespace mozilla {
 namespace dom {
 
 Maybe<IPCServiceWorkerDescriptor>
 ServiceWorkerRegistrationDescriptor::NewestInternal() const
@@ -87,16 +89,21 @@ ServiceWorkerRegistrationDescriptor&
 ServiceWorkerRegistrationDescriptor::operator=(ServiceWorkerRegistrationDescriptor&& aRight)
 {
   mData.reset();
   mData = Move(aRight.mData);
   MOZ_DIAGNOSTIC_ASSERT(IsValid());
   return *this;
 }
 
+ServiceWorkerRegistrationDescriptor::~ServiceWorkerRegistrationDescriptor()
+{
+  // Non-default destructor to avoid exposing the IPC type in the header.
+}
+
 bool
 ServiceWorkerRegistrationDescriptor::operator==(const ServiceWorkerRegistrationDescriptor& aRight) const
 {
   return *mData == *aRight.mData;
 }
 
 ServiceWorkerUpdateViaCache
 ServiceWorkerRegistrationDescriptor::UpdateViaCache() const
@@ -244,19 +251,19 @@ ServiceWorkerRegistrationDescriptor::Set
   } else {
     mData->active() = void_t();
   }
 
   MOZ_DIAGNOSTIC_ASSERT(IsValid());
 }
 
 void
-ServiceWorkerRegistrationDescriptor::SetWorkers(OptionalIPCServiceWorkerDescriptor& aInstalling,
-                                                OptionalIPCServiceWorkerDescriptor& aWaiting,
-                                                OptionalIPCServiceWorkerDescriptor& aActive)
+ServiceWorkerRegistrationDescriptor::SetWorkers(const OptionalIPCServiceWorkerDescriptor& aInstalling,
+                                                const OptionalIPCServiceWorkerDescriptor& aWaiting,
+                                                const OptionalIPCServiceWorkerDescriptor& aActive)
 {
   mData->installing() = aInstalling;
   mData->waiting() = aWaiting;
   mData->active() = aActive;
   MOZ_DIAGNOSTIC_ASSERT(IsValid());
 }
 
 const IPCServiceWorkerRegistrationDescriptor&
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationDescriptor.h
@@ -2,29 +2,29 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #ifndef _mozilla_dom_ServiceWorkerRegistrationDescriptor_h
 #define _mozilla_dom_ServiceWorkerRegistrationDescriptor_h
 
 #include "mozilla/Maybe.h"
-#include "mozilla/dom/IPCServiceWorkerRegistrationDescriptor.h"
 #include "mozilla/dom/ServiceWorkerDescriptor.h"
 #include "mozilla/UniquePtr.h"
 
 namespace mozilla {
 
 namespace ipc {
 class PrincipalInfo;
 } // namespace ipc
 
 namespace dom {
 
 class IPCServiceWorkerRegistrationDescriptor;
+class OptionalIPCServiceWorkerDescriptor;
 class ServiceWorkerInfo;
 enum class ServiceWorkerUpdateViaCache : uint8_t;
 
 // This class represents a snapshot of a particular
 // ServiceWorkerRegistrationInfo object. It is threadsafe and can be
 // transferred across processes.
 class ServiceWorkerRegistrationDescriptor final
 {
@@ -52,17 +52,17 @@ public:
   ServiceWorkerRegistrationDescriptor&
   operator=(const ServiceWorkerRegistrationDescriptor& aRight);
 
   ServiceWorkerRegistrationDescriptor(ServiceWorkerRegistrationDescriptor&& aRight);
 
   ServiceWorkerRegistrationDescriptor&
   operator=(ServiceWorkerRegistrationDescriptor&& aRight);
 
-  ~ServiceWorkerRegistrationDescriptor() = default;
+  ~ServiceWorkerRegistrationDescriptor();
 
   bool
   operator==(const ServiceWorkerRegistrationDescriptor& aRight) const;
 
   ServiceWorkerUpdateViaCache
   UpdateViaCache() const;
 
   const mozilla::ipc::PrincipalInfo&
@@ -90,19 +90,19 @@ public:
   SetUpdateViaCache(ServiceWorkerUpdateViaCache aUpdateViaCache);
 
   void
   SetWorkers(ServiceWorkerInfo* aInstalling,
              ServiceWorkerInfo* aWaiting,
              ServiceWorkerInfo* aActive);
 
   void
-  SetWorkers(OptionalIPCServiceWorkerDescriptor& aInstalling,
-             OptionalIPCServiceWorkerDescriptor& aWaiting,
-             OptionalIPCServiceWorkerDescriptor& aActive);
+  SetWorkers(const OptionalIPCServiceWorkerDescriptor& aInstalling,
+             const OptionalIPCServiceWorkerDescriptor& aWaiting,
+             const OptionalIPCServiceWorkerDescriptor& aActive);
 
   // Expose the underlying IPC type so that it can be passed via IPC.
   const IPCServiceWorkerRegistrationDescriptor&
   ToIPC() const;
 };
 
 } // namespace dom
 } // namespace mozilla
