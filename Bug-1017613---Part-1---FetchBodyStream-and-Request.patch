# HG changeset patch
# Parent a9b43778f0c25a56ac5ee65af4aa00c1bfa8db75
# User Nikhil Marathe <nsm.nikhil@gmail.com>

Bug 1017613 - Part 1 - FetchBodyStream and Request.

diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -1021,16 +1021,22 @@ DOMInterfaces = {
     }
 },
 
 'Rect': {
     'nativeType': 'nsDOMCSSRect',
     'resultNotAddRefed': [ 'top', 'right', 'bottom', 'left' ]
 },
 
+'Request': {
+    'binaryNames': {
+      'headers': 'headersValue'
+    }
+},
+
 'RGBColor': {
     'nativeType': 'nsDOMCSSRGBColor',
     'resultNotAddRefed': [ 'alpha', 'blue', 'green', 'red' ]
 },
 
 'RsaHashedKeyAlgorithm': {
     'resultNotAddRefed': ['hash']
 },
diff --git a/dom/fetch/FetchBodyStream.cpp b/dom/fetch/FetchBodyStream.cpp
new file mode 100644
--- /dev/null
+++ b/dom/fetch/FetchBodyStream.cpp
@@ -0,0 +1,113 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "FetchBodyStream.h"
+
+#include "nsPIDOMWindow.h"
+#include "nsISupportsImpl.h"
+
+#include "mozilla/dom/Promise.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(FetchBodyStream)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(FetchBodyStream)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(FetchBodyStream)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(FetchBodyStream)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+FetchBodyStream::FetchBodyStream(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+}
+
+FetchBodyStream::~FetchBodyStream()
+{
+}
+
+/* static */ already_AddRefed<FetchBodyStream>
+FetchBodyStream::Constructor(const GlobalObject& aGlobal, ErrorResult& aRv)
+{
+  nsRefPtr<FetchBodyStream> stream = new FetchBodyStream(aGlobal.GetAsSupports());
+  return stream.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsArrayBuffer()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  ErrorResult result;
+  nsRefPtr<Promise> promise = Promise::Create(global, result);
+  if (result.Failed()) {
+    return nullptr;
+  }
+
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsBlob()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  ErrorResult result;
+  nsRefPtr<Promise> promise = Promise::Create(global, result);
+  if (result.Failed()) {
+    return nullptr;
+  }
+
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsFormData()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  ErrorResult result;
+  nsRefPtr<Promise> promise = Promise::Create(global, result);
+  if (result.Failed()) {
+    return nullptr;
+  }
+
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsJSON()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  ErrorResult result;
+  nsRefPtr<Promise> promise = Promise::Create(global, result);
+  if (result.Failed()) {
+    return nullptr;
+  }
+
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
+
+already_AddRefed<Promise>
+FetchBodyStream::AsText()
+{
+  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(GetParentObject());
+  MOZ_ASSERT(global);
+  ErrorResult result;
+  nsRefPtr<Promise> promise = Promise::Create(global, result);
+  if (result.Failed()) {
+    return nullptr;
+  }
+
+  promise->MaybeReject(NS_ERROR_NOT_AVAILABLE);
+  return promise.forget();
+}
diff --git a/dom/fetch/FetchBodyStream.h b/dom/fetch/FetchBodyStream.h
new file mode 100644
--- /dev/null
+++ b/dom/fetch/FetchBodyStream.h
@@ -0,0 +1,71 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_FetchBodyStream_h
+#define mozilla_dom_FetchBodyStream_h
+
+#include "mozilla/dom/FetchBinding.h"
+
+#include "nsISupportsImpl.h"
+#include "nsWrapperCache.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class Promise;
+
+class FetchBodyStream : public nsISupports
+                      , public nsWrapperCache
+{
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(FetchBodyStream)
+
+public:
+  FetchBodyStream(nsISupports* aOwner);
+  FetchBodyStream(const FetchBodyStream& aOther)
+  {
+  }
+
+  already_AddRefed<Promise>
+  AsArrayBuffer();
+
+  already_AddRefed<Promise>
+  AsBlob();
+
+  already_AddRefed<Promise>
+  AsFormData();
+
+  already_AddRefed<Promise>
+  AsJSON();
+
+  already_AddRefed<Promise>
+  AsText();
+
+  static already_AddRefed<FetchBodyStream>
+  Constructor(const GlobalObject& aGlobal, ErrorResult& aRv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::FetchBodyStreamBinding::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  virtual ~FetchBodyStream();
+
+  nsISupports* mOwner;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_FetchBodyStream_h
diff --git a/dom/fetch/Request.cpp b/dom/fetch/Request.cpp
new file mode 100644
--- /dev/null
+++ b/dom/fetch/Request.cpp
@@ -0,0 +1,86 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Request.h"
+#include "nsDOMString.h"
+#include "nsPIDOMWindow.h"
+#include "nsIURI.h"
+#include "nsISupportsImpl.h"
+
+#include "mozilla/dom/FetchBodyStream.h"
+#include "mozilla/Preferences.h"
+#include "mozilla/dom/WorkerPrivate.h"
+
+using namespace mozilla::dom;
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(Request)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(Request)
+NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(Request)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Request)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+
+// static
+bool
+Request::PrefEnabled(JSContext* aCx, JSObject* aObj)
+{
+  using mozilla::dom::workers::WorkerPrivate;
+  using mozilla::dom::workers::GetWorkerPrivateFromContext;
+
+  if (NS_IsMainThread()) {
+    return Preferences::GetBool("dom.fetch.enabled");
+  }
+
+  WorkerPrivate* workerPrivate = GetWorkerPrivateFromContext(aCx);
+  if (!workerPrivate) {
+    return false;
+  }
+
+  return workerPrivate->DOMFetchEnabled();
+}
+
+Request::Request(nsISupports* aOwner)
+  : mOwner(aOwner)
+{
+  SetIsDOMBinding();
+}
+
+Request::~Request()
+{
+}
+
+void
+Request::GetHeader(const nsAString& header, DOMString& value) const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+already_AddRefed<Headers>
+Request::HeadersValue() const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+already_AddRefed<FetchBodyStream>
+Request::Body() const
+{
+  MOZ_CRASH("NOT IMPLEMENTED!");
+}
+
+/*static*/ already_AddRefed<Request>
+Request::Constructor(const GlobalObject& global, const RequestOrString& aInput,
+                     const RequestInit& aInit, ErrorResult& rv)
+{
+  nsRefPtr<Request> request = new Request(global.GetAsSupports());
+  request->mMethod = aInit.mMethod.WasPassed() ? aInit.mMethod.Value() : NS_LITERAL_CSTRING("GET");
+  // FIXME(nsm): Headers
+  // FIXME(nsm): Body setup from FetchBodyStreamInit.
+  request->mMode = aInit.mMode.WasPassed() ? aInit.mMode.Value() : RequestMode::Same_origin;
+  request->mCredentials = aInit.mCredentials.WasPassed() ? aInit.mCredentials.Value() : RequestCredentials::Omit;
+  return request.forget();
+}
diff --git a/dom/fetch/Request.h b/dom/fetch/Request.h
new file mode 100644
--- /dev/null
+++ b/dom/fetch/Request.h
@@ -0,0 +1,100 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_Request_h
+#define mozilla_dom_Request_h
+
+#include "mozilla/dom/RequestBinding.h"
+#include "mozilla/dom/UnionTypes.h"
+
+#include "nsWrapperCache.h"
+#include "nsISupportsImpl.h"
+
+class nsPIDOMWindow;
+
+namespace mozilla {
+namespace dom {
+
+class FetchBodyStream;
+class Headers;
+
+class Request MOZ_FINAL : public nsISupports
+                        , public nsWrapperCache
+{
+NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(Request)
+
+public:
+  static bool PrefEnabled(JSContext* cx, JSObject* obj);
+
+  Request(nsISupports* aOwner);
+
+  void
+  GetUrl(DOMString& aUrl) const
+  {
+    aUrl.AsAString() = mUrl;
+  }
+
+  void
+  GetMethod(nsCString& aMethod)
+  {
+    aMethod = mMethod;
+  }
+
+  RequestMode
+  Mode() const
+  {
+    return mMode;
+  }
+
+  RequestCredentials
+  Credentials() const
+  {
+    return mCredentials;
+  }
+
+  void
+  GetReferrer(DOMString& aReferrer) const
+  {
+    aReferrer.AsAString() = mReferrer;
+  }
+
+  void GetHeader(const nsAString& header, DOMString& value) const;
+  already_AddRefed<Headers> HeadersValue() const;
+  already_AddRefed<FetchBodyStream> Body() const;
+
+  static already_AddRefed<Request>
+  Constructor(const GlobalObject& global, const RequestOrString& aInput,
+              const RequestInit& aInit, ErrorResult& rv);
+
+  virtual JSObject*
+  WrapObject(JSContext* aCx)
+  {
+    return mozilla::dom::RequestBinding::Wrap(aCx, this);
+  }
+
+  nsISupports* GetParentObject() const
+  {
+    return mOwner;
+  }
+
+private:
+  ~Request();
+
+  nsISupports* mOwner;
+
+  nsCString mMethod;
+  nsString mUrl;
+  // FIXME(nsm): Headers? Or should they go in InternalRequest?
+  RequestMode mMode;
+  RequestCredentials mCredentials;
+  nsString mReferrer;
+  nsRefPtr<FetchBodyStream> mBody;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_Request_h
diff --git a/dom/fetch/moz.build b/dom/fetch/moz.build
--- a/dom/fetch/moz.build
+++ b/dom/fetch/moz.build
@@ -1,20 +1,24 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXPORTS.mozilla.dom += [
+    'FetchBodyStream.h',
     'Headers.h',
+    'Request.h',
 ]
 
 UNIFIED_SOURCES += [
+    'FetchBodyStream.cpp',
     'Headers.cpp',
+    'Request.cpp',
 ]
 
 LOCAL_INCLUDES += [
     '../workers',
 ]
 
 FAIL_ON_WARNINGS = True
 MSVC_ENABLE_PGO = True
diff --git a/dom/tests/mochitest/general/test_interfaces.html b/dom/tests/mochitest/general/test_interfaces.html
--- a/dom/tests/mochitest/general/test_interfaces.html
+++ b/dom/tests/mochitest/general/test_interfaces.html
@@ -365,16 +365,18 @@ var interfaceNamesInGlobalScope =
     "Event",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     "EventSource",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     "EventTarget",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     {name: "External", b2g: false},
 // IMPORTANT: Do not change this list without review from a DOM peer!
+    {name: "FetchBodyStream", pref: "dom.fetch.enabled"},
+// IMPORTANT: Do not change this list without review from a DOM peer!
     "File",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     "FileList",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     "FileReader",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     {name: "FMRadio", b2g: true},
 // IMPORTANT: Do not change this list without review from a DOM peer!
@@ -821,16 +823,18 @@ var interfaceNamesInGlobalScope =
     "RadioNodeList",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     "Range",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     "RecordErrorEvent",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     "Rect",
 // IMPORTANT: Do not change this list without review from a DOM peer!
+    {name: "Request", pref: "dom.fetch.enabled"},
+// IMPORTANT: Do not change this list without review from a DOM peer!
     "RGBColor",
 // IMPORTANT: Do not change this list without review from a DOM peer!
     {name: "RTCDataChannelEvent", pref: "media.peerconnection.enabled"},
 // IMPORTANT: Do not change this list without review from a DOM peer!
     {name: "RTCPeerConnectionIceEvent", pref: "media.peerconnection.enabled"},
 // IMPORTANT: Do not change this list without review from a DOM peer!
     {name: "RTCStatsReport", pref: "media.peerconnection.enabled"},
 // IMPORTANT: Do not change this list without review from a DOM peer!
diff --git a/dom/webidl/Fetch.webidl b/dom/webidl/Fetch.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Fetch.webidl
@@ -0,0 +1,25 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/
+ */
+
+typedef object JSON;
+// FIXME: Bug 1025183 ScalarValueString.
+typedef (ArrayBuffer or ArrayBufferView or Blob or DOMString) FetchBodyInit;
+// FIXME(nsm): JSON support
+typedef FetchBodyInit FetchBody;
+
+[NoInterfaceObject,
+ Exposed=(Window,Worker)]
+interface FetchBodyStream {
+  Promise<ArrayBuffer> asArrayBuffer();
+  Promise<Blob> asBlob();
+  //Promise<FormData> asFormData();
+  Promise<JSON> asJSON();
+  //Promise<ScalarValueString>
+  Promise<DOMString> asText();
+};
diff --git a/dom/webidl/Request.webidl b/dom/webidl/Request.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Request.webidl
@@ -0,0 +1,38 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://fetch.spec.whatwg.org/
+ */
+
+// FIXME: Bug 1025183 typedef (Request or ScalarValueString) RequestInfo;
+typedef (Request or DOMString) RequestInfo;
+
+[Constructor(RequestInfo input, optional RequestInit init),
+ Exposed=(Window,Worker),
+ Func="mozilla::dom::Request::PrefEnabled"]
+interface Request {
+  readonly attribute ByteString method;
+  // FIXME: Bug 1025183 attribute ScalarValueString url;
+  readonly attribute DOMString url;
+  readonly attribute Headers headers;
+
+  readonly attribute FetchBodyStream body;
+
+  readonly attribute DOMString referrer;
+  readonly attribute RequestMode mode;
+  readonly attribute RequestCredentials credentials;
+};
+
+dictionary RequestInit {
+  ByteString method;
+  HeadersInit headers;
+  FetchBodyInit body;
+  RequestMode mode;
+  RequestCredentials credentials;
+};
+
+enum RequestMode { "same-origin", "no-cors", "cors" };
+enum RequestCredentials { "omit", "same-origin", "include" };
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -114,16 +114,17 @@ WEBIDL_FILES = [
     'DummyBinding.webidl',
     'DynamicsCompressorNode.webidl',
     'Element.webidl',
     'Event.webidl',
     'EventHandler.webidl',
     'EventListener.webidl',
     'EventSource.webidl',
     'EventTarget.webidl',
+    'Fetch.webidl',
     'File.webidl',
     'FileList.webidl',
     'FileMode.webidl',
     'FileReader.webidl',
     'FileReaderSync.webidl',
     'FocusEvent.webidl',
     'FormData.webidl',
     'Function.webidl',
@@ -300,16 +301,17 @@ WEBIDL_FILES = [
     'PositionError.webidl',
     'ProcessingInstruction.webidl',
     'Promise.webidl',
     'PromiseDebugging.webidl',
     'PushManager.webidl',
     'RadioNodeList.webidl',
     'Range.webidl',
     'Rect.webidl',
+    'Request.webidl',
     'ResourceStats.webidl',
     'ResourceStatsManager.webidl',
     'RGBColor.webidl',
     'RTCConfiguration.webidl',
     'RTCIceCandidate.webidl',
     'RTCIdentityAssertion.webidl',
     'RTCPeerConnection.webidl',
     'RTCPeerConnectionStatic.webidl',
diff --git a/dom/workers/moz.build b/dom/workers/moz.build
--- a/dom/workers/moz.build
+++ b/dom/workers/moz.build
@@ -76,15 +76,16 @@ include('/ipc/chromium/chromium-config.m
 FINAL_LIBRARY = 'xul'
 
 TEST_DIRS += [
     'test/extensions/bootstrap',
     'test/extensions/traditional',
 ]
 
 MOCHITEST_MANIFESTS += [
+    'test/fetch/mochitest.ini',
     'test/mochitest.ini',
     'test/serviceworkers/mochitest.ini',
 ]
 
 MOCHITEST_CHROME_MANIFESTS += ['test/chrome.ini']
 
 XPCSHELL_TESTS_MANIFESTS += ['test/xpcshell/xpcshell.ini']
diff --git a/dom/workers/test/fetch/mochitest.ini b/dom/workers/test/fetch/mochitest.ini
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/mochitest.ini
@@ -0,0 +1,5 @@
+[DEFAULT]
+support-files =
+  worker_interfaces.js
+
+[test_interfaces.html]
diff --git a/dom/workers/test/fetch/test_interfaces.html b/dom/workers/test/fetch/test_interfaces.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/test_interfaces.html
@@ -0,0 +1,48 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug XXXXXX - Test fetch API interfaces</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<p id="display"></p>
+<div id="content" style="display: none"></div>
+<pre id="test"></pre>
+<script class="testbody" type="text/javascript">
+
+  function checkEnabled() {
+    var worker = new Worker("worker_interfaces.js");
+    worker.onmessage = function(event) {
+
+      if (event.data.type == 'finish') {
+        SimpleTest.finish();
+      } else if (event.data.type == 'status') {
+        ok(event.data.status, event.data.msg);
+      }
+    }
+
+    worker.onerror = function(event) {
+      ok(false, "Worker had an error: " + event.data);
+      SimpleTest.finish();
+    };
+
+    worker.postMessage(true);
+  }
+
+  SimpleTest.waitForExplicitFinish();
+
+  SpecialPowers.pushPrefEnv({"set": [
+    ["dom.fetch.enabled", true]
+  ]}, function() {
+    checkEnabled();
+  });
+</script>
+</pre>
+</body>
+</html>
+
diff --git a/dom/workers/test/fetch/worker_interfaces.js b/dom/workers/test/fetch/worker_interfaces.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/fetch/worker_interfaces.js
@@ -0,0 +1,19 @@
+function ok(a, msg) {
+  dump("OK: " + !!a + "  =>  " + a + " " + msg + "\n");
+  postMessage({type: 'status', status: !!a, msg: a + ": " + msg });
+}
+
+function is(a, b, msg) {
+  dump("IS: " + (a===b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a === b, msg: a + " === " + b + ": " + msg });
+}
+
+function isnot(a, b, msg) {
+  dump("ISNOT: " + (a!==b) + "  =>  " + a + " | " + b + " " + msg + "\n");
+  postMessage({type: 'status', status: a !== b, msg: a + " !== " + b + ": " + msg });
+}
+
+onmessage = function() {
+  ok(typeof Request === "function", "Request should be defined");
+  postMessage({ type: 'finish' });
+}
