# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  63c1952098994e38b9da13e97e864c2a4ce4171d

diff --git a/testing/web-platform/tests/service-workers/service-worker/activation.https.html b/testing/web-platform/tests/service-workers/service-worker/activation.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/activation.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/activation.https.html
@@ -8,93 +8,106 @@
 <script>
 // Returns {registration, iframe}, where |registration| has an active and
 // waiting worker. The active worker controls |iframe| and has an inflight
 // message event that can be finished by calling
 // |registration.active.postMessage('go')|.
 function setup_activation_test(t, scope, worker_url) {
   var registration;
   var iframe;
+  dump('### ### setup_activation_test() start\n');
   return navigator.serviceWorker.getRegistration(scope)
     .then(r => {
+        dump('### ### existing registration ' + r + '\n');
         if (r)
           return r.unregister();
       })
     .then(() => {
         // Create an in-scope iframe. Do this prior to registration to avoid
         // racing between an update triggered by navigation and the update()
         // call below.
         return with_iframe(scope);
       })
     .then(f => {
         iframe = f;
+        dump('### ### got iframe load\n');
         // Create an active worker.
         return navigator.serviceWorker.register(worker_url, { scope: scope });
       })
     .then(r => {
+        dump('### ### registered\n');
         registration = r;
         add_result_callback(() => registration.unregister());
         return wait_for_state(t, r.installing, 'activated');
       })
     .then(() => {
+        dump('### ### activated\n');
         // Check that the frame was claimed.
         assert_not_equals(
             iframe.contentWindow.navigator.serviceWorker.controller, null);
         // Create an in-flight request.
         registration.active.postMessage('wait');
         // Now there is both a controllee and an in-flight request.
         // Initiate an update.
         return registration.update();
       })
     .then(() => {
+        dump('### ### update resolved: ' + registration.installing + '\n');
         // Wait for a waiting worker.
         return wait_for_state(t, registration.installing, 'installed');
       })
     .then(() => {
+        dump('### ### update has installed\n');
         return wait_for_activation_on_dummy_scope(t, self);
       })
     .then(() => {
+        dump('### ### dummy activated\n');
         assert_not_equals(registration.waiting, null);
         assert_not_equals(registration.active, null);
         return Promise.resolve({registration: registration, iframe: iframe});
       });
 }
 promise_test(t => {
     var scope = 'resources/no-controllee';
     var worker_url = 'resources/mint-new-worker.py';
     var registration;
     var iframe;
     var new_worker;
+    dump('### ### start 1\n');
     return setup_activation_test(t, scope, worker_url)
       .then(result => {
+          dump('### ### setup complete\n');
           registration = result.registration;
           iframe = result.iframe;
           // Finish the in-flight request.
           registration.active.postMessage('go');
           return wait_for_activation_on_dummy_scope(t, self);
         })
       .then(() => {
+          dump('### ### dummy activated\n');
           // The new worker is still waiting. Remove the frame and it should
           // activate.
           new_worker = registration.waiting;
           assert_equals(new_worker.state, 'installed');
           var reached_active = wait_for_state(t, new_worker, 'activating');
           iframe.remove();
           return reached_active;
         })
       .then(() => {
+          dump('### ### waiting activated\n');
           assert_equals(new_worker, registration.active);
         });
   }, 'loss of controllees triggers activation');
 promise_test(t => {
     var scope = 'resources/no-request';
     var worker_url = 'resources/mint-new-worker.py';
     var registration;
     var iframe;
     var new_worker;
+    dump('### ### start 2\n');
     return setup_activation_test(t, scope, worker_url)
       .then(result => {
           registration = result.registration;
           iframe = result.iframe;
           // Remove the iframe.
           iframe.remove();
           return new Promise(resolve => setTimeout(resolve, 0));
         })
@@ -109,16 +122,17 @@ promise_test(t => {
           assert_equals(registration.active, new_worker);
         });
   }, 'finishing a request triggers activation');
 promise_test(t => {
     var scope = 'resources/skip-waiting';
     var worker_url = 'resources/mint-new-worker.py?skip-waiting';
     var registration;
     var new_worker;
+    dump('### ### start 3\n');
     return setup_activation_test(t, scope, worker_url)
       .then(result => {
           registration = result.registration;
           // Finish the request. The iframe does not need to be removed because
           // skipWaiting() was called.
           new_worker = registration.waiting;
           var reached_active = wait_for_state(t, new_worker, 'activating');
           registration.active.postMessage('go');
@@ -132,16 +146,17 @@ promise_test(t => {
 // This test is not really about activation, but otherwise is very
 // similar to the other tests here.
 promise_test(t => {
     var scope = 'resources/unregister';
     var worker_url = 'resources/mint-new-worker.py';
     var registration;
     var iframe;
     var new_worker;
+    dump('### ### start 4\n');
     return setup_activation_test(t, scope, worker_url)
       .then(result => {
           registration = result.registration;
           iframe = result.iframe;
           // Remove the iframe.
           iframe.remove();
           return registration.unregister();
         })
