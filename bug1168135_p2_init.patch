# HG changeset patch
# Parent 4b0f9a0aa10e4bf365c30752aaec71e144854942
# User Ben Kelly <ben@wanderview.com>
Bug 1168135 P2 Add Cache Context::Init() method. r=ehsan

diff --git a/dom/cache/Context.cpp b/dom/cache/Context.cpp
--- a/dom/cache/Context.cpp
+++ b/dom/cache/Context.cpp
@@ -795,28 +795,17 @@ Context::ThreadsafeHandle::ContextDestro
 }
 
 // static
 already_AddRefed<Context>
 Context::Create(Manager* aManager, nsIThread* aTarget,
                 Action* aInitAction, Context* aOldContext)
 {
   nsRefPtr<Context> context = new Context(aManager, aTarget);
-
-  // Do this here to avoid doing an AddRef() in the constructor
-  // TODO: pass context->mData to allow connetion sharing with init
-  context->mInitRunnable = new QuotaInitRunnable(context, aManager,
-                                                 aTarget, aInitAction);
-
-  if (aOldContext) {
-    aOldContext->SetNextContext(context);
-  } else {
-    context->Start();
-  }
-
+  context->Init(aInitAction, aOldContext);
   return context.forget();
 }
 
 Context::Context(Manager* aManager, nsIThread* aTarget)
   : mManager(aManager)
   , mTarget(aTarget)
   , mData(new Data(aTarget))
   , mState(STATE_CONTEXT_PREINIT)
@@ -930,16 +919,34 @@ Context::~Context()
   mManager->RemoveContext(this);
 
   if (mNextContext) {
     mNextContext->Start();
   }
 }
 
 void
+Context::Init(Action* aInitAction, Context* aOldContext)
+{
+  NS_ASSERT_OWNINGTHREAD(Context);
+  MOZ_ASSERT(!mInitRunnable);
+
+  // Do this here to avoid doing an AddRef() in the constructor
+  // TODO: pass context->mData to allow connetion sharing with init
+  mInitRunnable = new QuotaInitRunnable(this, mManager, mTarget, aInitAction);
+
+  if (aOldContext) {
+    aOldContext->SetNextContext(this);
+    return;
+  }
+
+  Start();
+}
+
+void
 Context::Start()
 {
   NS_ASSERT_OWNINGTHREAD(Context);
 
   // Previous context closing delayed our start, but then we were canceled.
   // In this case, just do nothing here.
   if (mState == STATE_CONTEXT_CANCELED) {
     MOZ_ASSERT(!mInitRunnable);
diff --git a/dom/cache/Context.h b/dom/cache/Context.h
--- a/dom/cache/Context.h
+++ b/dom/cache/Context.h
@@ -168,16 +168,17 @@ private:
   struct PendingAction
   {
     nsCOMPtr<nsIEventTarget> mTarget;
     nsRefPtr<Action> mAction;
   };
 
   Context(Manager* aManager, nsIThread* aTarget);
   ~Context();
+  void Init(Action* aInitAction, Context* aOldContext);
   void Start();
   void DispatchAction(Action* aAction, bool aDoomData = false);
   void OnQuotaInit(nsresult aRv, const QuotaInfo& aQuotaInfo,
                    nsMainThreadPtrHandle<OfflineStorage>& aOfflineStorage);
 
   already_AddRefed<ThreadsafeHandle>
   CreateThreadsafeHandle();
 
