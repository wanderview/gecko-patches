# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  564fe21dd5d0d03c937b66b375ece54487c37673

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -3475,53 +3475,53 @@ nsGlobalWindow::InnerSetNewDocument(JSCo
 }
 
 nsresult
 nsGlobalWindow::EnsureClientSource()
 {
   MOZ_DIAGNOSTIC_ASSERT(IsInnerWindow());
   MOZ_DIAGNOSTIC_ASSERT(mDoc);
 
-  if (mClientSource) {
-    return NS_OK;
-  }
+  bool newClientSource = false;
 
   nsCOMPtr<nsILoadInfo> loadInfo;
-
-  // Try to get the reserved client from the loading document
   nsCOMPtr<nsIChannel> channel = mDoc->GetChannel();
   if (channel) {
     loadInfo = channel->GetLoadInfo();
-    if (loadInfo) {
-      mClientSource = loadInfo->TakeReservedClient();
-    }
+  }
+
+  // Try to get the reserved client from the loading document
+  if (!mClientSource && loadInfo) {
+    mClientSource = loadInfo->TakeReservedClient();
+    newClientSource = true;
   }
 
   // If we don't have a reserved client we need to create one now
   if (!mClientSource) {
     mClientSource = ClientManager::CreateSource(ClientType::Window,
                                                 mDoc->NodePrincipal());
     if (NS_WARN_IF(!mClientSource)) {
       return NS_ERROR_FAILURE;
     }
-  }
-
-  // The load may have started controlled the Client as well.  If
+    newClientSource = true;
+  }
+
+  // The load may have started controlling the Client as well.  If
   // so mark it as controlled immediately here.  The actor may
   // or may not have been notified by the parent side about being
   // controlled yet.
   if (loadInfo) {
     const Maybe<ServiceWorkerDescriptor>& controller =
       loadInfo->GetController();
     if (controller.isSome()) {
       mClientSource->SetController(controller.ref());
     }
   }
 
-  if (IsFrozen()) {
+  if (newClientSource && IsFrozen()) {
     mClientSource->Freeze();
   }
 
   return NS_OK;
 }
 
 nsresult
 nsGlobalWindow::InnerExecutionReady()
diff --git a/dom/clients/manager/ClientSource.cpp b/dom/clients/manager/ClientSource.cpp
--- a/dom/clients/manager/ClientSource.cpp
+++ b/dom/clients/manager/ClientSource.cpp
@@ -14,16 +14,17 @@
 #include "mozilla/dom/MessageEvent.h"
 #include "mozilla/dom/MessageEventBinding.h"
 #include "mozilla/dom/Navigator.h"
 #include "mozilla/dom/WorkerPrivate.h"
 #include "mozilla/dom/WorkerScope.h"
 #include "mozilla/dom/ServiceWorkerContainer.h"
 #include "mozilla/dom/workers/ServiceWorkerManager.h"
 #include "mozilla/dom/workers/bindings/ServiceWorker.h"
+#include "nsContentUtils.h"
 #include "nsGlobalWindow.h"
 
 namespace mozilla {
 namespace dom {
 
 using mozilla::dom::ipc::StructuredCloneData;
 using mozilla::dom::workers::ServiceWorkerInfo;
 using mozilla::dom::workers::ServiceWorkerManager;
@@ -266,17 +267,17 @@ ClientSource::SetController(const Servic
       static_cast<Navigator*>(window->GetNavigator());
     if (navigator) {
       swc = navigator->ServiceWorker();
     }
   }
 
   // TODO: Also self.navigator.serviceWorker on workers when its exposed there
 
-  if (swc) {
+  if (swc && nsContentUtils::IsSafeToRunScript()) {
     IgnoredErrorResult ignored;
     swc->ControllerChanged(ignored);
   }
 }
 
 already_AddRefed<ClientOpPromise>
 ClientSource::Control(const ClientControlledArgs& aArgs)
 {
