# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  4ec7fb63362e761f8dbb96790b7a488af0425318
Bug 1184607 P2 Add a wpt test to verify service worker redirect logic. r=ehsan

diff --git a/dom/fetch/Request.cpp b/dom/fetch/Request.cpp
--- a/dom/fetch/Request.cpp
+++ b/dom/fetch/Request.cpp
@@ -233,16 +233,17 @@ Request::Constructor(const GlobalObject&
   RequestCache cache = aInit.mCache.WasPassed() ?
                        aInit.mCache.Value() : fallbackCache;
   if (cache != RequestCache::EndGuard_) {
     request->ClearCreatedByFetchEvent();
     request->SetCacheMode(cache);
   }
 
   if (aInit.mRedirect.WasPassed()) {
+    printf_stderr("### ### setting redirect value via init\n");
     request->SetRedirectMode(aInit.mRedirect.Value());
   }
 
   // Request constructor step 14.
   if (aInit.mMethod.WasPassed()) {
     nsAutoCString method(aInit.mMethod.Value());
     nsAutoCString upperCaseMethod = method;
     ToUpperCase(upperCaseMethod);
diff --git a/testing/web-platform/mozilla/meta/MANIFEST.json b/testing/web-platform/mozilla/meta/MANIFEST.json
--- a/testing/web-platform/mozilla/meta/MANIFEST.json
+++ b/testing/web-platform/mozilla/meta/MANIFEST.json
@@ -137,16 +137,22 @@
           }
         ],
         "service-workers/service-worker/fetch-event-network-error.https.html": [
           {
             "path": "service-workers/service-worker/fetch-event-network-error.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-event-network-error.https.html"
           }
         ],
+        "service-workers/service-worker/fetch-event-redirect.https.html": [
+          {
+            "path": "service-workers/service-worker/fetch-event-redirect.https.html",
+            "url": "/_mozilla/service-workers/service-worker/fetch-event-redirect.https.html"
+          }
+        ],
         "service-workers/service-worker/fetch-event-respond-with-stops-propagation.https.html": [
           {
             "path": "service-workers/service-worker/fetch-event-respond-with-stops-propagation.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-event-respond-with-stops-propagation.https.html"
           }
         ],
         "service-workers/service-worker/fetch-event.https.html": [
           {
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-event-redirect.https.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-event-redirect.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-event-redirect.https.html
@@ -0,0 +1,132 @@
+<!DOCTYPE html>
+<title>Service Worker: Fetch Event Redirect Handling</title>
+<script src="/resources/testharness.js"></script>
+<script src="resources/testharness-helpers.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<body>
+<script>
+
+// - Request navigation with manual redirect, SW fetches same-origin redirect
+// - Request navigation with manual redirect, SW fetches cross-origin redirect
+// - Request non-navigation with manual redirect, SW fetches same-origin redirect
+// - Request non-navigation with manual redirect, SW fetches cross-origin redirect
+// - Request non-navigation with follow redirect, SW fetches same-origin redirect
+// - Request non-navigation with follow redirect, SW fetches cross-origin redirect
+// - Request non-navigation with error redirect, SW fetches same-origin redirect
+// - Request non-navigation with error redirect, SW fetches cross-origin redirect
+
+// Test cases:
+//  Request(navigation-or-not, RequestRedirect, RequestMode), type of SW redirect
+
+// Request(Nav, manual, same-origin, no-creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception succeeds
+// Request(Nav, manual, same-origin, no-creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception succeeds
+// Request(Nav, manual, same-origin, creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception succeeds
+// Request(Nav, manual, same-origin, creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception succeeds
+// Request(Non-nav, manual, same-origin, no-creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, same-origin, no-creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, cors, no-creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, cors, no-creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, no-cors, no-creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, no-cors, no-creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, same-origin, creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, same-origin, creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, cors, creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, cors, creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, no-cors, creds), SW fetches same-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, no-cors, creds), SW fetches cross-origin redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, follow, same-origin, no-creds), SW fetches same-origin redirect
+//  - redirect succeeds, interception succeeds
+// Request(Non-nav, follow, same-origin, no-creds), SW fetches cross-origin redirect
+//  - redirect fails, error response, interception fails
+// Request(Non-nav, follow, cors, no-creds), SW fetches same-origin redirect
+//  - redirect succeeds, basic response, interception succeeds
+// Request(Non-nav, follow, cors, no-creds), SW fetches cross-origin redirect
+//  - ?
+// Request(Non-nav, follow, no-cors, no-creds), SW fetches same-origin redirect
+//  - redirect succeeds, interception succeeds
+// Request(Non-nav, follow, no-cors, no-creds), SW fetches cross-origin redirect
+//  - redirect succeeds, interception succeeds
+// Request(Non-nav, follow, same-origin, creds), SW fetches same-origin redirect
+// Request(Non-nav, follow, same-origin, creds), SW fetches cross-origin redirect
+// Request(Non-nav, follow, cors, creds), SW fetches same-origin redirect
+// Request(Non-nav, follow, cors, creds), SW fetches cross-origin redirect
+// Request(Non-nav, follow, no-cors, creds), SW fetches same-origin redirect
+// Request(Non-nav, follow, no-cors, creds), SW fetches cross-origin redirect
+// Request(Non-nav, error, same-origin, no-creds), SW fetches same-origin redirect
+// Request(Non-nav, error, same-origin, no-creds), SW fetches cross-origin redirect
+// Request(Non-nav, error, cors, no-creds), SW fetches same-origin redirect
+// Request(Non-nav, error, cors, no-creds), SW fetches cross-origin redirect
+// Request(Non-nav, error, no-cors, no-creds), SW fetches same-origin redirect
+// Request(Non-nav, error, no-cors, no-creds), SW fetches cross-origin redirect
+// Request(Non-nav, error, same-origin, creds), SW fetches same-origin redirect
+// Request(Non-nav, error, same-origin, creds), SW fetches cross-origin redirect
+// Request(Non-nav, error, cors, creds), SW fetches same-origin redirect
+// Request(Non-nav, error, cors, creds), SW fetches cross-origin redirect
+// Request(Non-nav, error, no-cors, creds), SW fetches same-origin redirect
+// Request(Non-nav, error, no-cors, creds), SW fetches cross-origin redirect
+
+var host_info = get_host_info();
+var worker = 'resources/fetch-rewrite-worker.js';
+var frameURL = 'resources/fetch-event-redirect-iframe.html';
+var redirect = 'resources/redirect.py';
+var empty = base_path() + 'resources/empty.js';
+
+function executeTest(frame, data) {
+  return new Promise(function(resolve, reject) {
+    var channel = new MessageChannel();
+    channel.port1.onmessage = function(e) {
+      if (e.data.results === 'finish') {
+        resolve();
+      } else {
+        reject(e.data.results);
+      }
+    };
+    frame.contentWindow.postMessage(data, host_info['HTTPS_ORIGIN'],
+                                    [channel.port2]);
+  });
+}
+
+async_test(function(t) {
+  var scope = frameURL;
+  service_worker_unregister_and_register(t, worker, scope).then(function(reg) {
+    return wait_for_state(t, reg.installing, 'activated');
+  }).then(function() {
+    return with_iframe(frameURL);
+  }).then(function(frame) {
+    return executeTest(frame, {
+      url: scope + '?url=' + encodeURIComponent(redirect + '?Redirect=' +
+                             encodeURIComponent(host_info['HTTPS_ORIGIN'] + empty)),
+      request_init: { redirect: 'manual' }
+    });
+  }).then(function() {
+    return service_worker_unregister_and_done(t, scope);
+  }).catch(unreached_rejection(t));
+}, 'Non-navigation request with manual redirect should fail opaqueredirect interception');
+
+    /*
+    var url = scope + '?url=' +
+              encodeURIComponent(host_info['HTTPS_ORIGIN'] + path);
+    var req = new Request(url);
+    return assert_promise_rejects(fetch(req));
+    */
+
+</script>
+</body>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-event-redirect-iframe.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-event-redirect-iframe.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-event-redirect-iframe.html
@@ -0,0 +1,18 @@
+<script>
+window.addEventListener('message', function(evt) {
+  var port = evt.ports[0];
+  executeFetch(evt.data).then(function() {
+    port.postMessage({results: 'finish'});
+  }).catch(function(e) {
+    port.postMessage({results: 'failure:' + e});
+  });
+});
+
+function executeFetch(data) {
+  return new Promise(function(resolve, reject) {
+    dump('### ### iframe ' + JSON.stringify(data.request_init) + '\n');
+    var request = new Request(data.url, data.request_init);
+    fetch(request).then(resolve, reject);
+  });
+}
+</script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
@@ -22,19 +22,21 @@ function get_request_init(params) {
   }
   if (params['credentials']) {
     init['credentials'] = params['credentials'];
   }
   return init;
 }
 
 self.addEventListener('fetch', function(event) {
+    dump('### ### fetch event ' + event.request.redirect + ', ' + event.request.url + '\n');
     var params = get_query_params(event.request.url);
     var init = get_request_init(params);
     var url = params['url'];
+    dump('### ### new url ' + url + '\n');
     if (params['ignore']) {
       return;
     }
     if (params['reject']) {
       event.respondWith(new Promise(function(resolve, reject) {
           reject();
         }));
       return;
@@ -57,11 +59,19 @@ self.addEventListener('fetch', function(
       event.respondWith(new Response(new Blob([array], {type: 'image/png'})));
       return;
     }
     event.respondWith(new Promise(function(resolve, reject) {
         var request = event.request;
         if (url) {
           request = new Request(url, init);
         }
-        fetch(request).then(resolve, reject);
+        fetch(request).then(function(response) {
+          dump('### ### response type ' + response.type + '\n');
+          var expectedType = params['expected-type'];
+          if (expectedType && response.type !== expectedType) {
+            reject('unexpected Response type');
+            return;
+          }
+          resolve(response);
+        }, reject)
       }));
   });
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/redirect.py b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/redirect.py
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/redirect.py
@@ -0,0 +1,27 @@
+def main(request, response):
+    print "### ### redirect.py"
+
+    if 'Status' in request.GET:
+        status = int(request.GET["status"])
+    else:
+        status = 302
+
+    headers = []
+
+    url = request.GET['Redirect']
+    headers.append(("Location", url))
+
+    if "ACAOrigin" in request.GET:
+        for item in request.GET["ACAOrigin"].split(","):
+            headers.append(("Access-Control-Allow-Origin", item))
+
+    for suffix in ["Headers", "Methods", "Credentials"]:
+        query = "ACA%s" % suffix
+        header = "Access-Control-Allow-%s" % suffix
+        if query in request.GET:
+            headers.append((header, request.GET[query]))
+
+    if "ACEHeaders" in request.GET:
+        headers.append(("Access-Control-Expose-Headers", request.GET[query]))
+
+    return status, headers, ""
