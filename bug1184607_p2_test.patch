# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  a8412d162c1f523483814a8613908618d0181319
Bug 1184607 P2 Add a wpt test to verify service worker redirect logic. r=ehsan

diff --git a/testing/web-platform/mozilla/meta/MANIFEST.json b/testing/web-platform/mozilla/meta/MANIFEST.json
--- a/testing/web-platform/mozilla/meta/MANIFEST.json
+++ b/testing/web-platform/mozilla/meta/MANIFEST.json
@@ -137,16 +137,22 @@
           }
         ],
         "service-workers/service-worker/fetch-event-network-error.https.html": [
           {
             "path": "service-workers/service-worker/fetch-event-network-error.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-event-network-error.https.html"
           }
         ],
+        "service-workers/service-worker/fetch-event-redirect.https.html": [
+          {
+            "path": "service-workers/service-worker/fetch-event-redirect.https.html",
+            "url": "/_mozilla/service-workers/service-worker/fetch-event-redirect.https.html"
+          }
+        ],
         "service-workers/service-worker/fetch-event-respond-with-stops-propagation.https.html": [
           {
             "path": "service-workers/service-worker/fetch-event-respond-with-stops-propagation.https.html",
             "url": "/_mozilla/service-workers/service-worker/fetch-event-respond-with-stops-propagation.https.html"
           }
         ],
         "service-workers/service-worker/fetch-event.https.html": [
           {
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-event-redirect.https.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-event-redirect.https.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/fetch-event-redirect.https.html
@@ -0,0 +1,213 @@
+<!DOCTYPE html>
+<title>Service Worker: Fetch Event Redirect Handling</title>
+<script src="/resources/testharness.js"></script>
+<script src="resources/testharness-helpers.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/get-host-info.sub.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<body>
+<script>
+
+// - Request navigation with manual redirect, SW fetches same-origin redirect
+// - Request navigation with manual redirect, SW fetches cross-origin redirect
+// - Request non-navigation with manual redirect, SW fetches same-origin redirect
+// - Request non-navigation with manual redirect, SW fetches cross-origin redirect
+// - Request non-navigation with follow redirect, SW fetches same-origin redirect
+// - Request non-navigation with follow redirect, SW fetches cross-origin redirect
+// - Request non-navigation with error redirect, SW fetches same-origin redirect
+// - Request non-navigation with error redirect, SW fetches cross-origin redirect
+
+// Test cases:
+//  Request(navigation-or-not, RequestRedirect, RequestMode), type of SW redirect
+
+// Request(Nav, manual, same-origin), SW fetches same-origin no-creds redirect
+//  - opaqueredirect, interception succeeds
+// Request(Nav, manual, same-origin), SW fetches cross-origin no-creds redirect
+//  - opaqueredirect, interception succeeds
+// Request(Nav, manual, same-origin), SW fetches same-origin creds redirect
+//  - opaqueredirect, interception succeeds
+// Request(Nav, manual, same-origin), SW fetches cross-origin creds redirect
+//  - opaqueredirect, interception succeeds
+
+// Request(Non-nav, manual, same-origin), SW fetches same-origin creds redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, same-origin), SW fetches cross-origin creds redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, cors), SW fetches same-origin creds redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, cors), SW fetches cross-origin creds redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, no-cors), SW fetches same-origin creds redirect
+//  - opaqueredirect, interception fails
+// Request(Non-nav, manual, no-cors), SW fetches cross-origin creds redirect
+//  - opaqueredirect, interception fails
+
+// Request(Non-nav, follow, same-origin), SW fetches same-origin no-creds redirect
+//  - redirect succeeds, interception succeeds
+// Request(Non-nav, follow, same-origin), SW fetches cross-origin no-creds redirect
+//  - redirect fails, error response, interception fails
+// Request(Non-nav, follow, cors), SW fetches same-origin no-creds redirect
+//  - redirect succeeds, basic response, interception succeeds
+// Request(Non-nav, follow, cors), SW fetches cross-origin no-creds redirect
+//  - ?
+// Request(Non-nav, follow, no-cors), SW fetches same-origin no-creds redirect
+//  - redirect succeeds, interception succeeds
+// Request(Non-nav, follow, no-cors), SW fetches cross-origin no-creds redirect
+//  - redirect succeeds, interception succeeds
+// Request(Non-nav, follow, same-origin), SW fetches same-origin creds redirect
+// Request(Non-nav, follow, same-origin), SW fetches cross-origin creds redirect
+// Request(Non-nav, follow, cors), SW fetches same-origin creds redirect
+// Request(Non-nav, follow, cors), SW fetches cross-origin creds redirect
+// Request(Non-nav, follow, no-cors), SW fetches same-origin creds redirect
+// Request(Non-nav, follow, no-cors), SW fetches cross-origin creds redirect
+// Request(Non-nav, error, same-origin), SW fetches same-origin no-creds redirect
+// Request(Non-nav, error, same-origin), SW fetches cross-origin no-creds redirect
+// Request(Non-nav, error, cors), SW fetches same-origin no-creds redirect
+// Request(Non-nav, error, cors), SW fetches cross-origin no-creds redirect
+// Request(Non-nav, error, no-cors), SW fetches same-origin no-creds redirect
+// Request(Non-nav, error, no-cors), SW fetches cross-origin no-creds redirect
+// Request(Non-nav, error, same-origin), SW fetches same-origin creds redirect
+// Request(Non-nav, error, same-origin), SW fetches cross-origin creds redirect
+// Request(Non-nav, error, cors), SW fetches same-origin creds redirect
+// Request(Non-nav, error, cors), SW fetches cross-origin creds redirect
+// Request(Non-nav, error, no-cors), SW fetches same-origin creds redirect
+// Request(Non-nav, error, no-cors), SW fetches cross-origin creds redirect
+
+// add redirect to data URI
+
+var host_info = get_host_info();
+var worker = 'resources/fetch-rewrite-worker.js';
+var frameURL = base_path() + 'resources/fetch-event-redirect-iframe.html';
+var baseScope = 'resources/';
+var redirect = 'redirect.py';
+var success = base_path() + 'resources/success.json';
+
+function redirect_fetch_test(t, test) {
+  var scope = baseScope + test.name;
+  service_worker_unregister_and_register(t, worker, scope).then(function(reg) {
+    return wait_for_state(t, reg.installing, 'activated');
+  }).then(function() {
+    return with_iframe(scope + '?url=' + encodeURIComponent(frameURL));
+  }).then(function(frame) {
+    var host = test['cross_origin'] ? host_info['HTTPS_REMOTE_ORIGIN']
+                                    : host_info['HTTPS_ORIGIN'];
+    var expectedTypeParam = test['expected_type'] ?
+                            '&expected_type=' + test['expected_type'] : '';
+    var url = scope +
+              '?url=' + encodeURIComponent(redirect + '?Redirect=' +
+                        encodeURIComponent(host + success)) +
+              expectedTypeParam
+
+    var p = new Promise(function(resolve, reject) {
+      var channel = new MessageChannel();
+      channel.port1.onmessage = function(e) {
+        if (e.data.results === 'finish') {
+          frame.remove();
+          resolve();
+        } else {
+          frame.remove();
+          reject(e.data.results);
+        }
+      };
+      test.frame.contentWindow.postMessage({
+        url: url,
+        request_init: test.request_init
+      }, '*', [channel.port2]);
+    });
+
+    if (test.should_reject) {
+      return assert_promise_rejects(p);
+    }
+
+    return p;
+  }).then(function() {
+    return service_worker_unregister_and_done(t, scope);
+  }).catch(unreached_rejection(t));
+}
+
+async_test(function(t) {
+  redirect_fetch_test(t, {
+    name: 'nonav-manual-cors-redirects-to-sameorigin',
+    cross_origin: false,
+    expected_type: 'opaqueredirect',
+    request_init: {
+      redirect: 'manual',
+      mode: 'cors'
+    },
+    should_reject: true
+  });
+}, 'Non-navigation, manual redirect, cors mode Request redirected to ' +
+   'same-origin without credentials should fail opaqueredirect interception');
+
+async_test(function(t) {
+  redirect_fetch_test(t, {
+    name: 'nonav-manual-cors-redirects-to-crossorigin',
+    cross_origin: true,
+    expected_type: 'opaqueredirect',
+    request_init: {
+      redirect: 'manual',
+      mode: 'cors'
+    },
+    should_reject: true
+  });
+}, 'Non-navigation, manual redirect, cors mode Request redirected to ' +
+   'cross-origin without credentials should fail opaqueredirect interception');
+
+async_test(function(t) {
+  redirect_fetch_test(t, {
+    name: 'nonav-manual-sameorigin-redirects-to-sameorigin',
+    cross_origin: false,
+    expected_type: 'opaqueredirect',
+    request_init: {
+      redirect: 'manual',
+      mode: 'same-origin'
+    },
+    should_reject: true
+  });
+}, 'Non-navigation, manual redirect, same-origin mode Request redirected to ' +
+   'same-origin without credentials should fail opaqueredirect interception');
+
+async_test(function(t) {
+  redirect_fetch_test(t, {
+    name: 'nonav-manual-sameorigin-redirects-to-crossorigin',
+    cross_origin: true,
+    expected_type: 'opaqueredirect',
+    request_init: {
+      redirect: 'manual',
+      mode: 'same-origin'
+    },
+    should_reject: true
+  });
+}, 'Non-navigation, manual redirect, same-origin mode Request redirected to ' +
+   'cross-origin without credentials should fail opaqueredirect interception');
+
+async_test(function(t) {
+  redirect_fetch_test(t, {
+    name: 'nonav-manual-nocors-redirects-to-sameorigin',
+    cross_origin: false,
+    expected_type: 'opaqueredirect',
+    request_init: {
+      redirect: 'manual',
+      mode: 'no-cors'
+    },
+    should_reject: true
+  });
+}, 'Non-navigation, manual redirect, no-cors mode Request redirected to ' +
+   'same-origin without credentials should fail opaqueredirect interception');
+
+async_test(function(t) {
+  redirect_fetch_test(t, {
+    name: 'nonav-manual-nocors-redirects-to-crossorigin',
+    cross_origin: true,
+    expected_type: 'opaqueredirect',
+    request_init: {
+      redirect: 'manual',
+      mode: 'no-cors'
+    },
+    should_reject: true
+  });
+}, 'Non-navigation, manual redirect, no-cors mode Request redirected to ' +
+   'cross-origin without credentials should fail opaqueredirect interception');
+
+</script>
+</body>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-event-redirect-iframe.html b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-event-redirect-iframe.html
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-event-redirect-iframe.html
@@ -0,0 +1,17 @@
+<script>
+window.addEventListener('message', function(evt) {
+  var port = evt.ports[0];
+  executeFetch(evt.data).then(function() {
+    port.postMessage({results: 'finish'});
+  }).catch(function(e) {
+    port.postMessage({results: 'failure:' + e});
+  });
+});
+
+function executeFetch(data) {
+  return new Promise(function(resolve, reject) {
+    var request = new Request(data.url, data.request_init);
+    fetch(request).then(resolve, reject);
+  });
+}
+</script>
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
--- a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/fetch-rewrite-worker.js
@@ -7,33 +7,28 @@ function get_query_params(url) {
   var params = search.substring(1).split('&');
   params.forEach(function(param) {
       var element = param.split('=');
       ret[decodeURIComponent(element[0])] = decodeURIComponent(element[1]);
     });
   return ret;
 }
 
-function get_request_init(params) {
+function get_request_init(base, params) {
   var init = {};
-  if (params['method']) {
-    init['method'] = params['method'];
-  }
-  if (params['mode']) {
-    init['mode'] = params['mode'];
-  }
-  if (params['credentials']) {
-    init['credentials'] = params['credentials'];
-  }
+  init['method'] = params['method'] || base['method'];
+  init['mode'] = params['mode'] || base['mode'];
+  init['credentials'] = params['credentials'] || base['credentials'];
+  init['redirect'] = params['redirect'] || base['redirect'];
   return init;
 }
 
 self.addEventListener('fetch', function(event) {
     var params = get_query_params(event.request.url);
-    var init = get_request_init(params);
+    var init = get_request_init(event.request, params);
     var url = params['url'];
     if (params['ignore']) {
       return;
     }
     if (params['reject']) {
       event.respondWith(new Promise(function(resolve, reject) {
           reject();
         }));
@@ -57,11 +52,20 @@ self.addEventListener('fetch', function(
       event.respondWith(new Response(new Blob([array], {type: 'image/png'})));
       return;
     }
     event.respondWith(new Promise(function(resolve, reject) {
         var request = event.request;
         if (url) {
           request = new Request(url, init);
         }
-        fetch(request).then(resolve, reject);
+        fetch(request).then(function(response) {
+          var expectedType = params['expected_type'];
+          if (expectedType && response.type !== expectedType) {
+            // Resolve a JSON object with a failure instead of rejecting
+            // in order to distinguish this from a NetworkError, which
+            // may be expected even if the type is correct.
+            resolve(new Response(JSON.stringify( { result: 'failure' } )));
+          }
+          resolve(response);
+        }, reject)
       }));
   });
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/redirect.py b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/redirect.py
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/redirect.py
@@ -0,0 +1,25 @@
+def main(request, response):
+    if 'Status' in request.GET:
+        status = int(request.GET["status"])
+    else:
+        status = 302
+
+    headers = []
+
+    url = request.GET['Redirect']
+    headers.append(("Location", url))
+
+    if "ACAOrigin" in request.GET:
+        for item in request.GET["ACAOrigin"].split(","):
+            headers.append(("Access-Control-Allow-Origin", item))
+
+    for suffix in ["Headers", "Methods", "Credentials"]:
+        query = "ACA%s" % suffix
+        header = "Access-Control-Allow-%s" % suffix
+        if query in request.GET:
+            headers.append((header, request.GET[query]))
+
+    if "ACEHeaders" in request.GET:
+        headers.append(("Access-Control-Expose-Headers", request.GET[query]))
+
+    return status, headers, ""
diff --git a/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/success.json b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/success.json
new file mode 100644
--- /dev/null
+++ b/testing/web-platform/mozilla/tests/service-workers/service-worker/resources/success.json
@@ -0,0 +1,1 @@
+{ "result": "success" }
