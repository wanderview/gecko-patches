# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  3e8ee3599a67edd971770af4982ad4b0fe77f073
Bug 1277892 Make SocialSidebar load its <browser> window lazily. r=mixedpuppy

diff --git a/browser/base/content/browser-social.js b/browser/base/content/browser-social.js
--- a/browser/base/content/browser-social.js
+++ b/browser/base/content/browser-social.js
@@ -429,17 +429,17 @@ SocialFlyout = {
 
     if (!SocialUI.enabled)
       return;
     let panel = this.panel;
     let iframe = this.iframe;
 
     this.load(aURL, function() {
       sizeSocialPanelToContent(panel, iframe);
-      let anchor = document.getElementById("social-sidebar-browser");
+      let anchor = SocialSidebar.browser;
       if (panel.state == "open") {
         panel.moveToAnchor(anchor, "start_before", 0, yOffset, false);
       } else {
         panel.openPopup(anchor, "start_before", 0, yOffset, false, false);
       }
       if (aCallback) {
         try {
           aCallback(iframe.contentWindow);
@@ -747,17 +747,48 @@ SocialShare = {
     Services.telemetry.getHistogramById("SOCIAL_TOOLBAR_BUTTONS").add(0);
   }
 };
 
 SocialSidebar = {
   _openStartTime: 0,
 
   get browser() {
-    return document.getElementById("social-sidebar-browser");
+    let sbrowser = document.getElementById("social-sidebar-browser");
+    if (!sbrowser) {
+      let vbox = document.getElementById("social-sidebar-box");
+      sbrowser = document.createElement("browser");
+      sbrowser.setAttribute("id", "social-sidebar-browser");
+      sbrowser.setAttribute("type", "content");
+      sbrowser.setAttribute("context", "contentAreaContextMenu");
+      sbrowser.setAttribute("message", "true");
+      sbrowser.setAttribute("messagemanagergroup", "social");
+      sbrowser.setAttribute("disableglobalhistory", "true");
+      sbrowser.setAttribute("tooltip", "aHTMLTooltip");
+      sbrowser.setAttribute("popupnotificationanchor", "social-sidebar-favico");
+      sbrowser.setAttribute("flex", "1");
+      sbrowser.setAttribute("style", "min-width: 14em; width: 18em; max-width: 36em;");
+      vbox.appendChild(sbrowser);
+    }
+    return sbrowser;
+    //return document.getElementById("social-sidebar-browser");
+  },
+
+  get messageManager() {
+    // The xbl bindings for the iframe may not exist yet, so we can't
+    // access iframe.messageManager directly - but can get at it with this dance.
+    let sbrowser = document.getElementById("social-sidebar-browser");
+    if (!sbrowser) {
+      return undefined;
+    }
+    let frameLoader = sbrowser.QueryInterface(Components.interfaces.nsIFrameLoaderOwner).frameLoader;
+    if (!frameLoader) {
+      return undefined;
+    }
+    return frameLoader.messageManager;
   },
 
   // Whether the sidebar can be shown for this window.
   get canShow() {
     if (!SocialUI.enabled || document.fullscreenElement)
       return false;
     return Social.providers.some(p => p.sidebarURL);
   },
@@ -817,17 +848,18 @@ SocialSidebar = {
     } else if (Services.prefs.prefHasUserValue("social.sidebar.provider")) {
       // no window state, use the global state if it is available
       this.show(Services.prefs.getCharPref("social.sidebar.provider"));
     }
   },
 
   saveWindowState: function() {
     let broadcaster = document.getElementById("socialSidebarBroadcaster");
-    let sidebarOrigin = this.browser.getAttribute("origin");
+    let sbrowser = document.getElementById("social-sidebar-browser");
+    let sidebarOrigin = sbrowser ? sbrowser.getAttribute("origin") : undefined;
     let data = {
       "hidden": broadcaster.hidden,
       "origin": sidebarOrigin
     };
     if (broadcaster.hidden) {
       Services.telemetry.getHistogramById("SOCIAL_SIDEBAR_OPEN_DURATION").add(Date.now()  / 1000 - this._openStartTime);
     } else {
       this._openStartTime = Date.now() / 1000;
@@ -842,17 +874,17 @@ SocialSidebar = {
     try {
       SessionStore.setWindowValue(window, "socialSidebar", JSON.stringify(data));
     } catch(e) {
       // window not tracked during uninit
     }
   },
 
   setSidebarVisibilityState: function(aEnabled) {
-    let sbrowser = document.getElementById("social-sidebar-browser");
+    let sbrowser = this.browser;
     // it's possible we'll be called twice with aEnabled=false so let's
     // just assume we may often be called with the same state.
     if (aEnabled == sbrowser.docShellIsActive)
       return;
     sbrowser.docShellIsActive = aEnabled;
   },
 
   updateToggleNotifications: function() {
@@ -878,17 +910,17 @@ SocialSidebar = {
     let hideSidebar = !this.canShow || !this.opened;
     let broadcaster = document.getElementById("socialSidebarBroadcaster");
     broadcaster.hidden = hideSidebar;
     command.setAttribute("checked", !hideSidebar);
 
     let sbrowser = this.browser;
 
     if (hideSidebar) {
-      sbrowser.messageManager.removeMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
+      this.messageManager.removeMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
       this.setSidebarVisibilityState(false);
       // If we've been disabled, unload the sidebar content immediately;
       // if the sidebar was just toggled to invisible, wait a timeout
       // before unloading.
       if (!this.canShow) {
         this.unloadSidebar();
       } else {
         this._unloadTimeoutId = setTimeout(
@@ -899,37 +931,39 @@ SocialSidebar = {
     } else {
       sbrowser.setAttribute("origin", this.provider.origin);
 
       // Make sure the right sidebar URL is loaded
       if (sbrowser.getAttribute("src") != this.provider.sidebarURL) {
         sbrowser.setAttribute("src", this.provider.sidebarURL);
         PopupNotifications.locationChange(sbrowser);
         document.getElementById("social-sidebar-button").setAttribute("loading", "true");
-        sbrowser.messageManager.addMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
+        this.messageManager.addMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
       } else {
         // if the document has not loaded, delay until it is
         if (sbrowser.contentDocument.readyState != "complete") {
           document.getElementById("social-sidebar-button").setAttribute("loading", "true");
-          sbrowser.messageManager.addMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
+          this.messageManager.addMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
         } else {
           this.setSidebarVisibilityState(true);
         }
       }
     }
     this._updateCheckedMenuItems(this.opened && this.provider ? this.provider.origin : null);
   },
 
   _onclick: function() {
     Services.telemetry.getHistogramById("SOCIAL_PANEL_CLICKS").add(3);
   },
 
   _loadListener: function SocialSidebar_loadListener() {
     let sbrowser = SocialSidebar.browser;
-    sbrowser.messageManager.removeMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
+    if (this.messageManager) {
+      this.messageManager.removeMessageListener("DOMContentLoaded", SocialSidebar._loadListener);
+    }
     document.getElementById("social-sidebar-button").removeAttribute("loading");
     SocialSidebar.setSidebarVisibilityState(true);
     sbrowser.addEventListener("click", SocialSidebar._onclick, true);
   },
 
   unloadSidebar: function SocialSidebar_unloadSidebar() {
     let sbrowser = SocialSidebar.browser;
     if (!sbrowser.hasAttribute("origin"))
@@ -937,17 +971,19 @@ SocialSidebar = {
 
     sbrowser.removeEventListener("click", SocialSidebar._onclick, true);
     sbrowser.stop();
     sbrowser.removeAttribute("origin");
     sbrowser.setAttribute("src", "about:blank");
     // We need to explicitly create a new content viewer because the old one
     // doesn't get destroyed until about:blank has loaded (which does not happen
     // as long as the element is hidden).
-    sbrowser.messageManager.sendAsyncMessage("Social:ClearFrame");
+    if (this.messageManager) {
+      this.messageManager.sendAsyncMessage("Social:ClearFrame");
+    }
     SocialFlyout.unload();
   },
 
   _unloadTimeoutId: 0,
 
   _provider: null,
   ensureProvider: function() {
     if (this._provider)
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -1140,26 +1140,18 @@
                         label="&social.addons.label;"/>
               <menuitem label="&social.learnMore.label;"
                         accesskey="&social.learnMore.accesskey;"
                         oncommand="SocialUI.showLearnMore();"/>
             </menupopup>
           </toolbarbutton>
         </sidebarheader>
 
-        <browser id="social-sidebar-browser"
-                 type="content"
-                 context="contentAreaContextMenu"
-                 message="true"
-                 messagemanagergroup="social"
-                 disableglobalhistory="true"
-                 tooltip="aHTMLTooltip"
-                 popupnotificationanchor="social-sidebar-favico"
-                 flex="1"
-                 style="min-width: 14em; width: 18em; max-width: 36em;"/>
+      <!-- social-sidebar-browser will be dynamically inserted here -->
+
       </vbox>
       <vbox id="browser-border-end" hidden="true" layer="true"/>
     </hbox>
 #include ../../components/customizableui/content/customizeMode.inc.xul
   </deck>
 
   <html:div id="fullscreen-warning" hidden="true">
     <html:div id="fullscreen-domain-text">
diff --git a/browser/base/content/test/social/browser_social_sidebar.js b/browser/base/content/test/social/browser_social_sidebar.js
--- a/browser/base/content/test/social/browser_social_sidebar.js
+++ b/browser/base/content/test/social/browser_social_sidebar.js
@@ -14,17 +14,17 @@ var manifest = { // normal provider
 function test() {
   waitForExplicitFinish();
 
   let frameScript = "data:,(" + function frame_script() {
     addEventListener("visibilitychange", function() {
       sendAsyncMessage("visibility", content.document.hidden ? "hidden" : "shown");
     });
   }.toString() + ")();";
-  let mm = getGroupMessageManager("social");
+  let mm = SocialSidebar.messageManager;
   mm.loadFrameScript(frameScript, true);
 
   registerCleanupFunction(function () {
     mm.removeDelayedFrameScript(frameScript);
   });
 
   SocialService.addProvider(manifest, function() {
     // the test will remove the provider
@@ -33,17 +33,17 @@ function test() {
 }
 
 function doTest() {
   ok(SocialSidebar.canShow, "social sidebar should be able to be shown");
   ok(!SocialSidebar.opened, "social sidebar should not be open by default");
 
   let command = document.getElementById("Social:ToggleSidebar");
   let sidebar = document.getElementById("social-sidebar-box");
-  let browser = sidebar.lastChild;
+  let browser = SocialSidebar.browser;
   ok(!browser.docShellIsActive, "sidebar is not active");
   is(sidebar.hidden, true, "sidebar should be hidden");
   is(command.getAttribute("checked"), "false", "toggle command should be unchecked");
 
   function checkShown(shouldBeShown) {
     is(command.getAttribute("checked"), shouldBeShown ? "true" : "false",
        "toggle command should be " + (shouldBeShown ? "checked" : "unchecked"));
     is(sidebar.hidden, !shouldBeShown,
@@ -66,17 +66,17 @@ function doTest() {
         // should have been an immediate unload.
         is(browser.getAttribute('src'), "about:blank", "sidebar url should be blank");
       }
     }
   }
   ensureEventFired(browser, "load").then(() => {
     // First check the the sidebar is initially visible, and loaded
     ok(!command.hidden, "toggle command should be visible");
-    let mm = getGroupMessageManager("social");
+    let mm = SocialSidebar.messageManager;
     mm.addMessageListener("visibility", function shown(msg) {
       if (msg.data == "shown") {
         mm.removeMessageListener("visibility", shown);
         checkShown(true);
         info("Toggling sidebar to closed");
         SocialSidebar.toggleSidebar();
       }
     });
diff --git a/testing/mochitest/browser-test.js b/testing/mochitest/browser-test.js
--- a/testing/mochitest/browser-test.js
+++ b/testing/mochitest/browser-test.js
@@ -611,19 +611,19 @@ Tester.prototype = {
             // a document.
             let sidebar = document.getElementById("sidebar");
             sidebar.setAttribute("src", "data:text/html;charset=utf-8,");
             sidebar.docShell.createAboutBlankContentViewer(null);
             sidebar.setAttribute("src", "about:blank");
 
             // Do the same for the social sidebar.
             let socialSidebar = document.getElementById("social-sidebar-browser");
-            socialSidebar.setAttribute("src", "data:text/html;charset=utf-8,");
-            socialSidebar.docShell.createAboutBlankContentViewer(null);
-            socialSidebar.setAttribute("src", "about:blank");
+            if (socialSidebar) {
+              socialSidebar.remove();
+            }
 
             SelfSupportBackend.uninit();
             SocialFlyout.unload();
             SocialShare.uninit();
           }
 
           // Destroy BackgroundPageThumbs resources.
           let {BackgroundPageThumbs} =
diff --git a/toolkit/components/social/MozSocialAPI.jsm b/toolkit/components/social/MozSocialAPI.jsm
--- a/toolkit/components/social/MozSocialAPI.jsm
+++ b/toolkit/components/social/MozSocialAPI.jsm
@@ -53,16 +53,19 @@ function injectController(doc, topic, da
     if (doc.documentURIObject.scheme == "about") {
       return;
     }
 
     let containingBrowser = window.QueryInterface(Ci.nsIInterfaceRequestor)
                                   .getInterface(Ci.nsIWebNavigation)
                                   .QueryInterface(Ci.nsIDocShell)
                                   .chromeEventHandler;
+    if (!containingBrowser) {
+      return;
+    }
     // limit injecting into social panels or same-origin browser tabs if
     // social.debug.injectIntoTabs is enabled
     let allowTabs = false;
     try {
       allowTabs = containingBrowser.contentWindow == window &&
                   Services.prefs.getBoolPref("social.debug.injectIntoTabs");
     } catch(e) {}
 
