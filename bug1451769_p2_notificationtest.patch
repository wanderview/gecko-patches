# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  110f32790d38a258cab722064aae40736478ef51
Bug 1451769 P2 Test that Notification does not leak via its event listeners. r=baku

diff --git a/dom/notification/test/mochitest/mochitest.ini b/dom/notification/test/mochitest/mochitest.ini
--- a/dom/notification/test/mochitest/mochitest.ini
+++ b/dom/notification/test/mochitest/mochitest.ini
@@ -1,12 +1,14 @@
 [DEFAULT]
 
 support-files =
   create_notification.html
   MockServices.js
   NotificationTest.js
+  !/dom/events/test/event_leak_utils.js
 
 [test_notification_basics.html]
 [test_notification_storage.html]
 [test_bug931307.html]
 skip-if = (os == 'android') # Bug 1258975 on android.
-[test_notification_tag.html]
\ No newline at end of file
+[test_notification_tag.html]
+[test_event_listener_leaks.html]
diff --git a/dom/notification/test/mochitest/test_event_listener_leaks.html b/dom/notification/test/mochitest/test_event_listener_leaks.html
new file mode 100644
--- /dev/null
+++ b/dom/notification/test/mochitest/test_event_listener_leaks.html
@@ -0,0 +1,66 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug 1451426 - Test Notification event listener leak conditions</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="/tests/dom/events/test/event_leak_utils.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<script class="testbody" type="text/javascript">
+// Manipulate Notification objects in the frame's context.
+// Its important here that we create a listener callback from
+// the DOM objects back to the frame's global in order to
+// exercise the leak condition.
+async function useNotification(contentWindow) {
+  let n = new contentWindow.Notification("foo");
+
+  n.onclose = _ => {
+    contentWindow.closeCount += 1;
+  };
+
+  n.onclick = _ => {
+    contentWindow.clickCount += 1;
+  };
+
+  contentWindow.showCount = 0;
+  await new Promise((resolve, reject) => {
+    n.onshow = e => {
+      contentWindow.showCount += 1;
+      resolve();
+    };
+
+    n.onerror = e => {
+      contentWindow.errorCount += 1;
+      reject("notification error");
+    };
+  });
+
+  is(contentWindow.showCount, 1, "notification should be shown");
+}
+
+async function runTest() {
+  await SpecialPowers.pushPrefEnv({"set": [
+    ["notification.prompt.testing", true],
+  ]});
+
+  try {
+    await checkForEventListenerLeaks("Notification", useNotification);
+  } catch (e) {
+    ok(false, e);
+  } finally {
+    SimpleTest.finish();
+  }
+}
+
+SimpleTest.waitForExplicitFinish();
+addEventListener("load", runTest, { once: true });
+</script>
+</pre>
+</body>
+</html>
+
