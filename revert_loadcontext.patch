diff --git a/docshell/base/LoadContext.h b/docshell/base/LoadContext.h
--- a/docshell/base/LoadContext.h
+++ b/docshell/base/LoadContext.h
@@ -100,30 +100,16 @@ public:
     , mUsePrivateBrowsing(false)
     , mUseRemoteTabs(false)
     , mIsInBrowserElement(false)
 #ifdef DEBUG
     , mIsNotNull(true)
 #endif
   {}
 
-  // Constructor taking appId/inBrowsingElement for use in fetch()
-  LoadContext(uint32_t aAppId, bool aIsInBrowserElement)
-    : mTopFrameElement(nullptr)
-    , mNestedFrameId(0)
-    , mAppId(aAppId)
-    , mIsContent(false)
-    , mUsePrivateBrowsing(false)
-    , mUseRemoteTabs(false)
-    , mIsInBrowserElement(aIsInBrowserElement)
-#ifdef DEBUG
-    , mIsNotNull(true)
-#endif
-  {}
-
 private:
   ~LoadContext() {}
 
   nsWeakPtr     mTopFrameElement;
   uint64_t      mNestedFrameId;
   uint32_t      mAppId;
   bool          mIsContent;
   bool          mUsePrivateBrowsing;
diff --git a/dom/workers/ScriptLoader.cpp b/dom/workers/ScriptLoader.cpp
--- a/dom/workers/ScriptLoader.cpp
+++ b/dom/workers/ScriptLoader.cpp
@@ -24,17 +24,16 @@
 #include "nsNetUtil.h"
 #include "nsScriptLoader.h"
 #include "nsString.h"
 #include "nsTArray.h"
 #include "nsThreadUtils.h"
 #include "nsXPCOM.h"
 #include "xpcpublic.h"
 
-#include "mozilla/LoadContext.h"
 #include "mozilla/dom/Exceptions.h"
 #include "Principal.h"
 #include "WorkerFeature.h"
 #include "WorkerPrivate.h"
 #include "WorkerRunnable.h"
 
 #define MAX_CONCURRENT_SCRIPTS 1000
 
@@ -113,34 +112,29 @@ ChannelFromScriptURL(nsIPrincipal* princ
                        parentDoc,
                        nsILoadInfo::SEC_NORMAL,
                        nsIContentPolicy::TYPE_SCRIPT,
                        loadGroup,
                        nullptr, // aCallbacks
                        flags,
                        ios);
   } else {
-    uint32_t appId;
-    rv = principal->GetAppId(&appId);
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    bool inBrowserElement;
-    rv = principal->GetIsInBrowserElement(&inBrowserElement);
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    nsRefPtr<LoadContext> loadContext = new LoadContext(appId,
-                                                        inBrowserElement);
-
+    // we should use 'principal' here; needs to be fixed before
+    // we move security checks to AsyncOpen. We use nullPrincipal
+    // for now, because the loadGroup is null and hence causes
+    // GetChannelUriPrincipal to return the wrong principal.
+    nsCOMPtr<nsIPrincipal> nullPrincipal =
+      do_CreateInstance("@mozilla.org/nullprincipal;1", &rv);
     rv = NS_NewChannel(getter_AddRefs(channel),
                        uri,
-                       principal,
+                       nullPrincipal,
                        nsILoadInfo::SEC_NORMAL,
                        nsIContentPolicy::TYPE_SCRIPT,
                        loadGroup,
-                       loadContext,
+                       nullptr, // aCallbacks
                        flags,
                        ios);
   }
 
   NS_ENSURE_SUCCESS(rv, rv);
 
   channel.forget(aChannel);
   return rv;
