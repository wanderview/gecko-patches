# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d224fc999cb6accb208af0a105f14433375e2e77
Bug 1287833 Make TelemetryStorage intern the type string when building _archivedPings map. r=gfritzsche

diff --git a/toolkit/components/telemetry/TelemetryStorage.jsm b/toolkit/components/telemetry/TelemetryStorage.jsm
--- a/toolkit/components/telemetry/TelemetryStorage.jsm
+++ b/toolkit/components/telemetry/TelemetryStorage.jsm
@@ -116,16 +116,25 @@ var Policy = {
  * always resolves its promise with undefined, and never rejects.
  */
 function waitForAll(it) {
   let dummy = () => {};
   let promises = Array.from(it, p => p.catch(dummy));
   return Promise.all(promises);
 }
 
+/**
+ * Permanently intern the given string.  This is mainly used for the ping.type
+ * strings we can be excessively duplicated in the _archivedPings map.  Do not
+ * pass large or temporary strings to this function.
+ */
+function internString(str) {
+  return Symbol.keyFor(Symbol.for(str));
+}
+
 this.TelemetryStorage = {
   get pingDirectoryPath() {
     return OS.Path.join(OS.Constants.Path.profileDir, "saved-telemetry-pings");
   },
 
   /**
    * The maximum size a ping can have, in bytes.
    */
@@ -663,17 +672,17 @@ var TelemetryStorageImpl = {
     // Get the archived ping path and append the lz4 suffix to it (so we have 'jsonlz4').
     const filePath = getArchivedPingPath(ping.id, creationDate, ping.type) + "lz4";
     yield OS.File.makeDir(OS.Path.dirname(filePath), { ignoreExisting: true,
                                                        from: OS.Constants.Path.profileDir });
     yield this.savePingToFile(ping, filePath, /*overwrite*/ true, /*compressed*/ true);
 
     this._archivedPings.set(ping.id, {
       timestampCreated: creationDate.getTime(),
-      type: ping.type,
+      type: internString(ping.type),
     });
 
     Telemetry.getHistogramById("TELEMETRY_ARCHIVE_SESSION_PING_COUNT").add();
     return undefined;
   }),
 
   /**
    * Load an archived ping from disk.
@@ -1217,17 +1226,17 @@ var TelemetryStorageImpl = {
           }
 
           yield this._removeArchivedPing(data.id, data.timestampCreated, data.type)
                     .catch((e) => this._log.warn("_scanArchive - failed to remove ping", e));
         }
 
         this._archivedPings.set(data.id, {
           timestampCreated: data.timestamp,
-          type: data.type,
+          type: internString(data.type),
         });
       }
     }
 
     // Mark the archive as scanned, so we no longer hit the disk.
     this._scannedArchiveDirectory = true;
     // Update the ping and directories count histograms.
     submitProbes(this._archivedPings.size, subdirs.length);
