# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d1e27b8066ca643c3ce12b78dc7fddd9584bfa66

diff --git a/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationImpl.cpp
@@ -637,17 +637,17 @@ ServiceWorkerRegistrationMainThread::Unr
 }
 
 ////////////////////////////////////////////////////
 // Worker Thread implementation
 
 class WorkerListener final : public ServiceWorkerRegistrationListener
 {
   ServiceWorkerRegistrationDescriptor mDescriptor;
-  RefPtr<ServiceWorkerRegistrationInfo> mInfo;
+  nsMainThreadPtrHandle<ServiceWorkerRegistrationInfo> mInfo;
   nsCOMPtr<nsISerialEventTarget> mEventTarget;
   bool mListeningForEvents;
 
   // Set and unset on worker thread, used on main-thread and protected by mutex.
   ServiceWorkerRegistrationWorkerThread* mRegistration;
 
   Mutex mMutex;
 
@@ -673,19 +673,22 @@ public:
   {
     MOZ_ASSERT(NS_IsMainThread());
     MOZ_DIAGNOSTIC_ASSERT(!mListeningForEvents);
     MOZ_DIAGNOSTIC_ASSERT(!mInfo);
 
     RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
     NS_ENSURE_TRUE_VOID(swm);
 
-    mInfo = swm->GetRegistration(mDescriptor.PrincipalInfo(),
-                                 mDescriptor.Scope());
-    NS_ENSURE_TRUE_VOID(mInfo);
+    RefPtr<ServiceWorkerRegistrationInfo> info =
+      swm->GetRegistration(mDescriptor.PrincipalInfo(), mDescriptor.Scope());
+    NS_ENSURE_TRUE_VOID(info);
+
+    mInfo = new nsMainThreadPtrHolder<ServiceWorkerRegistrationInfo>(
+      "WorkerListener::mInfo", info);
 
     mInfo->AddInstance(this, mDescriptor);
     mListeningForEvents = true;
   }
 
   void
   StopListeningForEvents()
   {
