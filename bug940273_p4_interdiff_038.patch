# HG changeset patch
# Parent efadf0de6b4bed70f6be5c7c13c54076d6f80f68
# User Ben Kelly <ben@wanderview.com>
Bug 940273 p4 interdiff 038 more implicit constructors

diff --git a/dom/cache/FetchPut.cpp b/dom/cache/FetchPut.cpp
--- a/dom/cache/FetchPut.cpp
+++ b/dom/cache/FetchPut.cpp
@@ -23,17 +23,17 @@
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class FetchPut::Runnable MOZ_FINAL : public nsRunnable
 {
 public:
-  Runnable(FetchPut* aFetchPut)
+  explicit Runnable(FetchPut* aFetchPut)
     : mFetchPut(aFetchPut)
   {
     MOZ_ASSERT(mFetchPut);
   }
 
   NS_IMETHOD Run() MOZ_OVERRIDE
   {
     if (NS_IsMainThread())
@@ -56,17 +56,17 @@ public:
 
 private:
   nsRefPtr<FetchPut> mFetchPut;
 };
 
 class FetchPut::FetchObserver MOZ_FINAL : public FetchDriverObserver
 {
 public:
-  FetchObserver(FetchPut* aFetchPut)
+  explicit FetchObserver(FetchPut* aFetchPut)
     : mFetchPut(aFetchPut)
   {
   }
 
   virtual void OnResponseAvailable(InternalResponse* aResponse) MOZ_OVERRIDE
   {
     MOZ_ASSERT(!mInternalResponse);
     mInternalResponse = aResponse;
diff --git a/dom/cache/ReadStream.cpp b/dom/cache/ReadStream.cpp
--- a/dom/cache/ReadStream.cpp
+++ b/dom/cache/ReadStream.cpp
@@ -223,17 +223,17 @@ using mozilla::ipc::PFileDescriptorSetCh
 
 // Runnable to notify actors that the ReadStream has closed.  This must
 // be done on the thread associated with the PBackground actor.  Must be
 // cancelable to execute on Worker threads (which can occur when the
 // ReadStream is constructed on a child process Worker thread).
 class ReadStream::NoteClosedRunnable MOZ_FINAL : public nsCancelableRunnable
 {
 public:
-  NoteClosedRunnable(ReadStream* aStream)
+  explicit NoteClosedRunnable(ReadStream* aStream)
     : mStream(aStream)
   { }
 
   NS_IMETHOD Run()
   {
     mStream->NoteClosedOnWorkerThread();
     return NS_OK;
   }
@@ -251,17 +251,17 @@ private:
 // Runnable to clear actors without reporting that the ReadStream has
 // closed.  Since this can trigger actor destruction, we need to do
 // it on the thread associated with the PBackground actor.  Must be
 // cancelable to execute on Worker threads (which can occur when the
 // ReadStream is constructed on a child process Worker thread).
 class ReadStream::ForgetRunnable MOZ_FINAL : public nsCancelableRunnable
 {
 public:
-  ForgetRunnable(ReadStream* aStream)
+  explicit ForgetRunnable(ReadStream* aStream)
     : mStream(aStream)
   { }
 
   NS_IMETHOD Run()
   {
     mStream->ForgetOnWorkerThread();
     return NS_OK;
   }
diff --git a/dom/cache/ShutdownObserver.cpp b/dom/cache/ShutdownObserver.cpp
--- a/dom/cache/ShutdownObserver.cpp
+++ b/dom/cache/ShutdownObserver.cpp
@@ -99,17 +99,19 @@ CacheShutdownObserver::Instance()
     // thread.  Of course, we are implementing a shutdown handler,
     // so its not a problem to clear it manually.  This is done in
     // FinishShutdownOnBgThread().
     gInstance = new CacheShutdownObserver();
 
     // We must initialize our new observer on the main thread.  Do this
     // outside the constructor because its fallible.
     nsCOMPtr<nsIRunnable> runnable =
-      NS_NewRunnableMethod(gInstance, &CacheShutdownObserver::InitOnMainThread);
+      NS_NewRunnableMethod<nsRefPtr<CacheShutdownObserver>>(
+                                      gInstance.get(),
+                                      &CacheShutdownObserver::InitOnMainThread);
     nsresult rv = NS_DispatchToMainThread(runnable, nsIThread::DISPATCH_NORMAL);
 
     // If we try to create an instance after shutdown somehow when no
     // Cache managers have ever been used, then we may fail to dispatch
     // to the main thread.  Treat this the same as calling Instance() with
     // gInstanceInit equal to true.
     if (NS_WARN_IF(NS_FAILED(rv))) {
       gInstance = nullptr;
@@ -233,34 +235,35 @@ CacheShutdownObserver::DoShutdown()
 
   nsCOMPtr<nsIObserverService> os = mozilla::services::GetObserverService();
   if (os) {
     os->RemoveObserver(this, "profile-before-change");
   }
 
   // Send shutdown notification to origin managers
   nsCOMPtr<nsIRunnable> runnable =
-    NS_NewRunnableMethod(this, &CacheShutdownObserver::StartShutdownOnBgThread);
+    NS_NewRunnableMethod<nsRefPtr<CacheShutdownObserver>>(this,
+                               &CacheShutdownObserver::StartShutdownOnBgThread);
   DebugOnly<nsresult> rv =
     mBackgroundThread->Dispatch(runnable, nsIThread::DISPATCH_NORMAL);
   MOZ_ASSERT(NS_SUCCEEDED(rv));
 
   runnable = nullptr;
 
   // Wait for managers to shutdown
   while (!mManagerIds.IsEmpty()) {
     if (!NS_ProcessNextEvent()) {
       NS_WARNING("Something bad happened!");
       break;
     }
   }
 
   // schedule runnable to clear singleton ref on background thread
-  runnable =
-    NS_NewRunnableMethod(this, &CacheShutdownObserver::FinishShutdownOnBgThread);
+  runnable = NS_NewRunnableMethod<nsRefPtr<CacheShutdownObserver>>(this,
+                              &CacheShutdownObserver::FinishShutdownOnBgThread);
   rv = mBackgroundThread->Dispatch(runnable, nsIThread::DISPATCH_NORMAL);
   MOZ_ASSERT(NS_SUCCEEDED(rv));
 }
 
 NS_IMETHODIMP
 CacheShutdownObserver::Observe(nsISupports* aSubject, const char* aTopic,
                                const char16_t* aData)
 {
