# HG changeset patch
# Parent df2618bd2b16c3d86a879c1d77a42dd361f4677b
# User Ben Kelly <ben@wanderview.com>
Cache Put/Add/AddAll should resolve to undefined per spec change.


diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -340,82 +340,61 @@ Cache::RecvMatchAllResponse(RequestId aR
     nsRefPtr<Response> response = TypeUtils::ToResponse(mGlobal, aResponses[i],
                                                         aStreamControl);
     responses.AppendElement(response.forget());
   }
   promise->MaybeResolve(responses);
 }
 
 void
-Cache::RecvAddResponse(RequestId aRequestId, nsresult aRv,
-                       const PCacheResponseOrVoid& aResponse,
-                       PCacheStreamControlChild* aStreamControl)
+Cache::RecvAddResponse(RequestId aRequestId, nsresult aRv)
 {
   nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
   if (NS_WARN_IF(!promise)) {
     return;
   }
 
   if (NS_FAILED(aRv)) {
     promise->MaybeReject(aRv);
     return;
   }
 
-  nsRefPtr<Response> response = TypeUtils::ToResponse(mGlobal, aResponse,
-                                                      aStreamControl);
-  promise->MaybeResolve(response);
+  promise->MaybeResolve(JS::UndefinedHandleValue);
 }
 
 void
-Cache::RecvAddAllResponse(RequestId aRequestId, nsresult aRv,
-                          const nsTArray<PCacheResponse>& aResponses,
-                          PCacheStreamControlChild* aStreamControl)
+Cache::RecvAddAllResponse(RequestId aRequestId, nsresult aRv)
 {
   nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
   if (NS_WARN_IF(!promise)) {
     return;
   }
 
   if (NS_FAILED(aRv)) {
     promise->MaybeReject(aRv);
     return;
   }
 
-  nsTArray<nsRefPtr<Response>> responses;
-  for (uint32_t i = 0; i < aResponses.Length(); ++i) {
-    nsRefPtr<Response> response = TypeUtils::ToResponse(mGlobal, aResponses[i],
-                                                        aStreamControl);
-    responses.AppendElement(response);
-  }
-  promise->MaybeResolve(responses);
+  promise->MaybeResolve(JS::UndefinedHandleValue);
 }
 
 void
-Cache::RecvPutResponse(RequestId aRequestId, nsresult aRv,
-                       const PCacheResponseOrVoid& aResponse,
-                       PCacheStreamControlChild* aStreamControl)
+Cache::RecvPutResponse(RequestId aRequestId, nsresult aRv)
 {
   nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
   if (NS_WARN_IF(!promise)) {
     return;
   }
 
   if (NS_FAILED(aRv)) {
     promise->MaybeReject(aRv);
     return;
   }
 
-  if (aResponse.type() == PCacheResponseOrVoid::Tvoid_t) {
-    promise->MaybeResolve(nullptr);
-    return;
-  }
-
-  nsRefPtr<Response> response = TypeUtils::ToResponse(mGlobal, aResponse,
-                                                      aStreamControl);
-  promise->MaybeResolve(response);
+  promise->MaybeResolve(JS::UndefinedHandleValue);
 }
 
 void
 Cache::RecvDeleteResponse(RequestId aRequestId, nsresult aRv, bool aSuccess)
 {
   nsRefPtr<Promise> promise = RemoveRequestPromise(aRequestId);
   if (NS_WARN_IF(!promise)) {
     return;
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -76,27 +76,22 @@ public:
   RecvMatchResponse(RequestId aRequestId, nsresult aRv,
                     const PCacheResponseOrVoid& aResponse,
                     PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
   virtual void
   RecvMatchAllResponse(RequestId aRequestId, nsresult aRv,
                        const nsTArray<PCacheResponse>& aResponses,
                        PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
   virtual void
-  RecvAddResponse(RequestId aRequestId, nsresult aRv,
-                  const PCacheResponseOrVoid& aResponse,
-                  PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
+  RecvAddResponse(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
   virtual void
-  RecvAddAllResponse(RequestId aRequestId, nsresult aRv,
-                     const nsTArray<PCacheResponse>& aResponses,
-                     PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
+  RecvAddAllResponse(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
   virtual void
-  RecvPutResponse(RequestId aRequestId, nsresult aRv,
-                  const PCacheResponseOrVoid& aResponse,
-                  PCacheStreamControlChild* aStreamControl);
+  RecvPutResponse(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
+
   virtual void
   RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
                      bool aSuccess) MOZ_OVERRIDE;
   virtual void
   RecvKeysResponse(RequestId aRequestId, nsresult aRv,
                    const nsTArray<PCacheRequest>& aRequests,
                    PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
 
diff --git a/dom/cache/CacheChild.cpp b/dom/cache/CacheChild.cpp
--- a/dom/cache/CacheChild.cpp
+++ b/dom/cache/CacheChild.cpp
@@ -62,42 +62,36 @@ CacheChild::RecvMatchAllResponse(const R
                                  PCacheStreamControlChild* aStreamControl)
 {
   MOZ_ASSERT(mListener);
   mListener->RecvMatchAllResponse(requestId, aRv, responses, aStreamControl);
   return true;
 }
 
 bool
-CacheChild::RecvAddResponse(const RequestId& requestId, const nsresult& aRv,
-                            const PCacheResponseOrVoid& response,
-                            PCacheStreamControlChild* aStreamControl)
+CacheChild::RecvAddResponse(const RequestId& requestId, const nsresult& aRv)
 {
   MOZ_ASSERT(mListener);
-  mListener->RecvAddResponse(requestId, aRv, response, aStreamControl);
+  mListener->RecvAddResponse(requestId, aRv);
   return true;
 }
 
 bool
-CacheChild::RecvAddAllResponse(const RequestId& requestId, const nsresult& aRv,
-                               const nsTArray<PCacheResponse>& responses,
-                               PCacheStreamControlChild* aStreamControl)
+CacheChild::RecvAddAllResponse(const RequestId& requestId, const nsresult& aRv)
 {
   MOZ_ASSERT(mListener);
-  mListener->RecvAddAllResponse(requestId, aRv, responses, aStreamControl);
+  mListener->RecvAddAllResponse(requestId, aRv);
   return true;
 }
 
 bool
-CacheChild::RecvPutResponse(const RequestId& aRequestId, const nsresult& aRv,
-                            const PCacheResponseOrVoid& aResponse,
-                            PCacheStreamControlChild* aStreamControl)
+CacheChild::RecvPutResponse(const RequestId& aRequestId, const nsresult& aRv)
 {
   MOZ_ASSERT(mListener);
-  mListener->RecvPutResponse(aRequestId, aRv, aResponse, aStreamControl);
+  mListener->RecvPutResponse(aRequestId, aRv);
   return true;
 }
 
 bool
 CacheChild::RecvDeleteResponse(const RequestId& requestId, const nsresult& aRv,
                                const bool& result)
 {
   MOZ_ASSERT(mListener);
diff --git a/dom/cache/CacheChild.h b/dom/cache/CacheChild.h
--- a/dom/cache/CacheChild.h
+++ b/dom/cache/CacheChild.h
@@ -33,27 +33,24 @@ public:
   RecvMatchResponse(const RequestId& requestId, const nsresult& aRv,
                     const PCacheResponseOrVoid& aResponse,
                     PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
   virtual bool
   RecvMatchAllResponse(const RequestId& requestId, const nsresult& aRv,
                        const nsTArray<PCacheResponse>& responses,
                        PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
   virtual bool
-  RecvAddResponse(const RequestId& requestId, const nsresult& aRv,
-                  const PCacheResponseOrVoid& response,
-                  PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
+  RecvAddResponse(const RequestId& requestId, const nsresult& aRv) MOZ_OVERRIDE;
+
   virtual bool
-  RecvAddAllResponse(const RequestId& requestId, const nsresult& aRv,
-                     const nsTArray<PCacheResponse>& responses,
-                     PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
+  RecvAddAllResponse(const RequestId& requestId,
+                     const nsresult& aRv) MOZ_OVERRIDE;
   virtual bool
-  RecvPutResponse(const RequestId& aRequestId, const nsresult& aRv,
-                  const PCacheResponseOrVoid& aResponse,
-                  PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
+  RecvPutResponse(const RequestId& aRequestId,
+                  const nsresult& aRv) MOZ_OVERRIDE;
   virtual bool
   RecvDeleteResponse(const RequestId& requestId, const nsresult& aRv,
                      const bool& result) MOZ_OVERRIDE;
   virtual bool
   RecvKeysResponse(const RequestId& requestId, const nsresult& aRv,
                    const nsTArray<PCacheRequest>& requests,
                    PCacheStreamControlChild* aStreamControl) MOZ_OVERRIDE;
 };
diff --git a/dom/cache/CacheChildListener.h b/dom/cache/CacheChildListener.h
--- a/dom/cache/CacheChildListener.h
+++ b/dom/cache/CacheChildListener.h
@@ -34,27 +34,24 @@ public:
   RecvMatchResponse(RequestId aRequestId, nsresult aRv,
                     const PCacheResponseOrVoid& aResponse,
                     PCacheStreamControlChild* aStreamControl)=0;
   virtual void
   RecvMatchAllResponse(RequestId aRequestId, nsresult aRv,
                        const nsTArray<PCacheResponse>& aResponses,
                        PCacheStreamControlChild* aStreamControl)=0;
   virtual void
-  RecvAddResponse(RequestId aRequestId, nsresult aRv,
-                  const PCacheResponseOrVoid& aResponse,
-                  PCacheStreamControlChild* aStreamControl)=0;
+  RecvAddResponse(RequestId aRequestId, nsresult aRv)=0;
+
   virtual void
-  RecvAddAllResponse(RequestId aRequestId, nsresult aRv,
-                     const nsTArray<PCacheResponse>& aResponses,
-                     PCacheStreamControlChild* aStreamControl)=0;
+  RecvAddAllResponse(RequestId aRequestId, nsresult aRv)=0;
+
   virtual void
-  RecvPutResponse(RequestId aRequestId, nsresult aRv,
-                  const PCacheResponseOrVoid& aResponse,
-                  PCacheStreamControlChild* aStreamControl)=0;
+  RecvPutResponse(RequestId aRequestId, nsresult aRv)=0;
+
   virtual void
   RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
                      bool aSuccess)=0;
   virtual void
   RecvKeysResponse(RequestId aRequestId, nsresult aRv,
                    const nsTArray<PCacheRequest>& aRequests,
                    PCacheStreamControlChild* aStreamControl)=0;
 };
diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -67,30 +67,26 @@ CacheParent::RecvMatchAll(const RequestI
   MOZ_ASSERT(mManager);
   mManager->CacheMatchAll(this, aRequestId, mCacheId, aRequest, aParams);
   return true;
 }
 
 bool
 CacheParent::RecvAdd(const RequestId& aRequestId, const PCacheRequest& aRequest)
 {
-  PCacheResponseOrVoid responseOrVoid;
-  responseOrVoid = void_t();
-  unused << SendAddResponse(aRequestId, NS_ERROR_NOT_IMPLEMENTED,
-                            responseOrVoid, nullptr);
+  unused << SendAddResponse(aRequestId, NS_ERROR_NOT_IMPLEMENTED);
   return true;
 }
 
 bool
 CacheParent::RecvAddAll(const RequestId& aRequestId,
                         const nsTArray<PCacheRequest>& aRequests)
 {
   nsTArray<PCacheResponse> responses;
-  unused << SendAddAllResponse(aRequestId, NS_ERROR_NOT_IMPLEMENTED, responses,
-                               nullptr);
+  unused << SendAddAllResponse(aRequestId, NS_ERROR_NOT_IMPLEMENTED);
   return true;
 }
 
 bool
 CacheParent::RecvPut(const RequestId& aRequestId, const PCacheRequest& aRequest,
                      const PCacheResponse& aResponse)
 {
   MOZ_ASSERT(mManager);
@@ -182,46 +178,20 @@ CacheParent::OnCacheMatchAll(RequestId a
                           aStreamList, &readStream);
     res->body() = readStream;
   }
 
   unused << SendMatchAllResponse(aRequestId, aRv, responses, streamControl);
 }
 
 void
-CacheParent::OnCachePut(RequestId aRequestId, nsresult aRv,
-                        const SavedResponse* aSavedResponse,
-                        Manager::StreamList* aStreamList)
+CacheParent::OnCachePut(RequestId aRequestId, nsresult aRv)
 {
-  PCacheResponseOrVoid responseOrVoid;
-
-  // no match
-  if (NS_FAILED(aRv) || !aSavedResponse) {
-    responseOrVoid = void_t();
-    unused << SendPutResponse(aRequestId, aRv, responseOrVoid, nullptr);
-    return;
-  }
-
-  // match without body data to stream
-  if (!aSavedResponse->mHasBodyId) {
-    responseOrVoid = aSavedResponse->mValue;
-    responseOrVoid.get_PCacheResponse().body() = void_t();
-    unused << SendPutResponse(aRequestId, aRv, responseOrVoid, nullptr);
-    return;
-  }
-
-  PCacheReadStream readStream;
-  Manager::StreamControl* streamControl =
-    SerializeReadStream(nullptr, aSavedResponse->mBodyId, aStreamList,
-                        &readStream);
-
-  responseOrVoid = aSavedResponse->mValue;
-  responseOrVoid.get_PCacheResponse().body() = readStream;
-
-  unused << SendPutResponse(aRequestId, aRv, responseOrVoid, streamControl);
+  unused << SendPutResponse(aRequestId, aRv);
+  return;
 }
 
 void
 CacheParent::OnCacheDelete(RequestId aRequestId, nsresult aRv, bool aSuccess)
 {
   unused << SendDeleteResponse(aRequestId, aRv, aSuccess);
 }
 
diff --git a/dom/cache/CacheParent.h b/dom/cache/CacheParent.h
--- a/dom/cache/CacheParent.h
+++ b/dom/cache/CacheParent.h
@@ -56,19 +56,17 @@ public:
 
   // Manager::Listener methods
   virtual void OnCacheMatch(RequestId aRequestId, nsresult aRv,
                             const SavedResponse* aSavedResponse,
                             Manager::StreamList* aStreamList) MOZ_OVERRIDE;
   virtual void OnCacheMatchAll(RequestId aRequestId, nsresult aRv,
                                const nsTArray<SavedResponse>& aSavedResponses,
                                Manager::StreamList* aStreamList) MOZ_OVERRIDE;
-  virtual void OnCachePut(RequestId aRequestId, nsresult aRv,
-                          const SavedResponse* aSavedResponse,
-                          Manager::StreamList* aStreamList) MOZ_OVERRIDE;
+  virtual void OnCachePut(RequestId aRequestId, nsresult aRv) MOZ_OVERRIDE;
   virtual void OnCacheDelete(RequestId aRequestId, nsresult aRv,
                              bool aSuccess) MOZ_OVERRIDE;
   virtual void OnCacheKeys(RequestId aRequestId, nsresult aRv,
                            const nsTArray<SavedRequest>& aSavedRequests,
                            Manager::StreamList* aStreamList) MOZ_OVERRIDE;
 
 private:
   Manager::StreamControl*
diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -292,33 +292,31 @@ DBSchema::CacheMatchAll(mozIStorageConne
 
 // static
 nsresult
 DBSchema::CachePut(mozIStorageConnection* aConn, CacheId aCacheId,
                    const PCacheRequest& aRequest,
                    const nsID* aRequestBodyId,
                    const PCacheResponse& aResponse,
                    const nsID* aResponseBodyId,
-                   nsTArray<nsID>& aDeletedBodyIdListOut,
-                   SavedResponse* aSavedResponseOut)
+                   nsTArray<nsID>& aDeletedBodyIdListOut)
 {
   MOZ_ASSERT(aConn);
-  MOZ_ASSERT(aSavedResponseOut);
 
   PCacheQueryParams params(false, false, false, false, false,
                            NS_LITERAL_STRING(""));
   nsTArray<EntryId> matches;
   nsresult rv = QueryCache(aConn, aCacheId, aRequest, params, matches);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = DeleteEntries(aConn, matches, aDeletedBodyIdListOut);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = InsertEntry(aConn, aCacheId, aRequest, aRequestBodyId, aResponse,
-                   aResponseBodyId, aSavedResponseOut);
+                   aResponseBodyId);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   return rv;
 }
 
 // static
 nsresult
 DBSchema::CacheDelete(mozIStorageConnection* aConn, CacheId aCacheId,
@@ -840,30 +838,28 @@ DBSchema::DeleteEntries(mozIStorageConne
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = BindListParamsToQuery(state, aEntryIdList, aPos, aLen);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->Execute();
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  return NS_OK;
+  return rv;
 }
 
 // static
 nsresult
 DBSchema::InsertEntry(mozIStorageConnection* aConn, CacheId aCacheId,
                       const PCacheRequest& aRequest,
                       const nsID* aRequestBodyId,
                       const PCacheResponse& aResponse,
-                      const nsID* aResponseBodyId,
-                      SavedResponse* aSavedResponseOut)
+                      const nsID* aResponseBodyId)
 {
   MOZ_ASSERT(aConn);
-  MOZ_ASSERT(aSavedResponseOut);
 
   nsCOMPtr<mozIStorageStatement> state;
   nsresult rv = aConn->CreateStatement(NS_LITERAL_CSTRING(
     "INSERT INTO entries ("
       "request_method, "
       "request_url, "
       "request_url_no_query, "
       "request_referrer, "
@@ -989,22 +985,17 @@ DBSchema::InsertEntry(mozIStorageConnect
 
     rv = state->BindInt32Parameter(2, entryId);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
     rv = state->Execute();
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
 
-  rv = ReadResponse(aConn, entryId, aSavedResponseOut);
-  if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
-
-  aSavedResponseOut->mCacheId = aCacheId;
-
-  return NS_OK;
+  return rv;
 }
 
 // static
 nsresult
 DBSchema::ReadResponse(mozIStorageConnection* aConn, EntryId aEntryId,
                        SavedResponse* aSavedResponseOut)
 {
   MOZ_ASSERT(aConn);
diff --git a/dom/cache/DBSchema.h b/dom/cache/DBSchema.h
--- a/dom/cache/DBSchema.h
+++ b/dom/cache/DBSchema.h
@@ -51,18 +51,17 @@ public:
                                 const PCacheRequestOrVoid& aRequestOrVoid,
                                 const PCacheQueryParams& aParams,
                                 nsTArray<SavedResponse>& aSavedResponsesOut);
   static nsresult CachePut(mozIStorageConnection* aConn, CacheId aCacheId,
                            const PCacheRequest& aRequest,
                            const nsID* aRequestBodyId,
                            const PCacheResponse& aResponse,
                            const nsID* aResponseBodyId,
-                           nsTArray<nsID>& aDeletedBodyIdListOut,
-                           SavedResponse* aSavedResponseOut);
+                           nsTArray<nsID>& aDeletedBodyIdListOut);
   static nsresult CacheDelete(mozIStorageConnection* aConn, CacheId aCacheId,
                               const PCacheRequest& aRequest,
                               const PCacheQueryParams& aParams,
                               nsTArray<nsID>& aDeletedBodyIdListOut,
                               bool* aSuccessOut);
   static nsresult CacheKeys(mozIStorageConnection* aConn, CacheId aCacheId,
                             const PCacheRequestOrVoid& aRequestOrVoid,
                             const PCacheQueryParams& aParams,
@@ -102,18 +101,17 @@ private:
   static nsresult DeleteEntries(mozIStorageConnection* aConn,
                                 const nsTArray<EntryId>& aEntryIdList,
                                 nsTArray<nsID>& aDeletedBodyIdListOut,
                                 uint32_t aPos=0, int32_t aLen=-1);
   static nsresult InsertEntry(mozIStorageConnection* aConn, CacheId aCacheId,
                               const PCacheRequest& aRequest,
                               const nsID* aRequestBodyId,
                               const PCacheResponse& aResponse,
-                              const nsID* aResponseBodyId,
-                              SavedResponse* aSavedResponseOut);
+                              const nsID* aResponseBodyId);
   static nsresult ReadResponse(mozIStorageConnection* aConn, EntryId aEntryId,
                                SavedResponse* aSavedResponseOut);
   static nsresult ReadRequest(mozIStorageConnection* aConn, EntryId aEntryId,
                               SavedRequest* aSavedRequestOut);
 
   static void AppendListParamsToQuery(nsACString& aQuery,
                                       const nsTArray<EntryId>& aEntryIdList,
                                       uint32_t aPos, int32_t aLen);
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -495,45 +495,28 @@ public:
     mozStorageTransaction trans(mConn, false,
                                 mozIStorageConnection::TRANSACTION_IMMEDIATE);
 
     nsTArray<nsID> deletedBodyIdList;
     rv = DBSchema::CachePut(mConn, mCacheId, mRequest,
                             mRequestBodyStream ? &mRequestBodyId : nullptr,
                             mResponse,
                             mResponseBodyStream ? &mResponseBodyId : nullptr,
-                            deletedBodyIdList, &mSavedResponse);
+                            deletedBodyIdList);
     if (NS_WARN_IF(NS_FAILED(rv))) {
       DoResolve(rv);
       return;
     }
 
     rv = FileUtils::BodyDeleteFiles(mDBDir, mCacheId, deletedBodyIdList);
     if (NS_WARN_IF(NS_FAILED(rv))) {
       DoResolve(rv);
       return;
     }
 
-    if (mSavedResponse.mHasBodyId) {
-      nsCOMPtr<nsIInputStream> stream;
-      rv = FileUtils::BodyOpen(mManager->Origin(), mManager->BaseDomain(),
-                               mDBDir, mCacheId, mSavedResponse.mBodyId,
-                               getter_AddRefs(stream));
-      if (NS_WARN_IF(NS_FAILED(rv))) {
-        DoResolve(rv);
-        return;
-      }
-      if (NS_WARN_IF(!stream)) {
-        DoResolve(NS_ERROR_FILE_NOT_FOUND);
-        return;
-      }
-
-      mStreamList->Add(mSavedResponse.mBodyId, stream);
-    }
-
     rv = trans.Commit();
     if (NS_WARN_IF(NS_FAILED(rv))) {
       DoResolve(rv);
       return;
     }
 
     DoResolve(rv);
   }
@@ -543,20 +526,20 @@ public:
   {
     NS_ASSERT_OWNINGTHREAD(Action);
     Listener* listener = mManager->GetListener(mListenerId);
     mManager = nullptr;
     if (!listener) {
       return;
     }
     if (NS_FAILED(aRv)) {
-      listener->OnCachePut(mRequestId, aRv, nullptr, nullptr);
+      listener->OnCachePut(mRequestId, aRv);
     } else {
       mStreamList->Activate(mCacheId);
-      listener->OnCachePut(mRequestId, aRv, &mSavedResponse, mStreamList);
+      listener->OnCachePut(mRequestId, aRv);
     }
     mStreamList = nullptr;
   }
 
   virtual void
   CancelOnTarget() MOZ_OVERRIDE
   {
     CancelStreamCopy(mRequestBodyStream, mRequestBodyCopyContext,
@@ -657,17 +640,16 @@ private:
   nsRefPtr<Resolver> mResolver;
   nsCOMPtr<nsIFile> mDBDir;
   nsCOMPtr<mozIStorageConnection> mConn;
   uint32_t mExpectedAsyncCopyCompletions;
   nsID mRequestBodyId;
   nsCOMPtr<nsISupports> mRequestBodyCopyContext;
   nsID mResponseBodyId;
   nsCOMPtr<nsISupports> mResponseBodyCopyContext;
-  SavedResponse mSavedResponse;
 };
 
 class Manager::CacheDeleteAction MOZ_FINAL : public Manager::BaseAction
 {
 public:
   CacheDeleteAction(Manager* aManager, ListenerId aListenerId,
                     RequestId aRequestId, CacheId aCacheId,
                     const PCacheRequest& aRequest,
@@ -1282,18 +1264,17 @@ Manager::CachePut(Listener* aListener, R
                   const PCacheRequest& aRequest,
                   nsIInputStream* aRequestBodyStream,
                   const PCacheResponse& aResponse,
                   nsIInputStream* aResponseBodyStream)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
   MOZ_ASSERT(aListener);
   if (mShuttingDown) {
-    aListener->OnCachePut(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN,
-                          nullptr, nullptr);
+    aListener->OnCachePut(aRequestId, NS_ERROR_ILLEGAL_DURING_SHUTDOWN);
     return;
   }
   nsRefPtr<StreamList> streamList = new StreamList(this, CurrentContext());
   ListenerId listenerId = SaveListener(aListener);
   nsRefPtr<Action> action = new CachePutAction(this, listenerId, aRequestId,
                                                aCacheId,
                                                aRequest, aRequestBodyStream,
                                                aResponse, aResponseBodyStream,
diff --git a/dom/cache/Manager.h b/dom/cache/Manager.h
--- a/dom/cache/Manager.h
+++ b/dom/cache/Manager.h
@@ -88,19 +88,17 @@ public:
     virtual ~Listener() { }
 
     virtual void OnCacheMatch(RequestId aRequestId, nsresult aRv,
                               const SavedResponse* aResponse,
                               StreamList* aStreamList) { }
     virtual void OnCacheMatchAll(RequestId aRequestId, nsresult aRv,
                                  const nsTArray<SavedResponse>& aSavedResponses,
                                  StreamList* aStreamList) { }
-    virtual void OnCachePut(RequestId aRequestId, nsresult aRv,
-                            const SavedResponse* aSavedResponse,
-                            StreamList* aStreamList) { }
+    virtual void OnCachePut(RequestId aRequestId, nsresult aRv) { }
     virtual void OnCacheDelete(RequestId aRequestId, nsresult aRv,
                                bool aSuccess) { }
     virtual void OnCacheKeys(RequestId aRequestId, nsresult aRv,
                              const nsTArray<SavedRequest>& aSavedRequests,
                              StreamList* aStreamList) { }
 
     virtual void OnStorageMatch(RequestId aRequestId, nsresult aRv,
                                 const SavedResponse* aResponse,
diff --git a/dom/cache/PCache.ipdl b/dom/cache/PCache.ipdl
--- a/dom/cache/PCache.ipdl
+++ b/dom/cache/PCache.ipdl
@@ -28,22 +28,19 @@ parent:
   Delete(RequestId requestId, PCacheRequest request, PCacheQueryParams params);
   Keys(RequestId requestId, PCacheRequestOrVoid request, PCacheQueryParams params);
 
 child:
   MatchResponse(RequestId requestId, nsresult aRv, PCacheResponseOrVoid aResponse,
                 nullable PCacheStreamControl aStreamControl);
   MatchAllResponse(RequestId requestId, nsresult aRv, PCacheResponse[] responses,
                    nullable PCacheStreamControl aStreamControl);
-  AddResponse(RequestId requestId, nsresult aRv, PCacheResponseOrVoid response,
-              nullable PCacheStreamControl aStreamControl);
-  AddAllResponse(RequestId requestId, nsresult aRv, PCacheResponse[] responses,
-                 nullable PCacheStreamControl aStreamControl);
-  PutResponse(RequestId requestId, nsresult aRv, PCacheResponseOrVoid response,
-              nullable PCacheStreamControl aStreamControl);
+  AddResponse(RequestId requestId, nsresult aRv);
+  AddAllResponse(RequestId requestId, nsresult aRv);
+  PutResponse(RequestId requestId, nsresult aRv);
   DeleteResponse(RequestId requestId, nsresult aRv, bool success);
   KeysResponse(RequestId requestId, nsresult aRv, PCacheRequest[] requests,
                nullable PCacheStreamControl aStreamControl);
 
 both:
   __delete__();
 };
 
diff --git a/dom/tests/mochitest/cache/test_cache_frame.html b/dom/tests/mochitest/cache/test_cache_frame.html
--- a/dom/tests/mochitest/cache/test_cache_frame.html
+++ b/dom/tests/mochitest/cache/test_cache_frame.html
@@ -17,17 +17,17 @@
     var request = new Request("http://example.com/hmm?q=foobar");
     var response = new Response();
     success = success && !!caches;
     caches.open("foobar").then(function(openCache) {
       success = success && !!openCache;
       c = openCache;
       return c.put(request, response);
     }).then(function(putResponse) {
-      success = success && !!putResponse;
+      success = success && putResponse === undefined;
       return c.keys(request);
     }).then(function(keys) {
       success = success && !!keys;
       success = success && keys.length === 1;
       return c.keys();
     }).then(function(keys) {
       success = success && !!keys;
       success = success && keys.length === 1;
