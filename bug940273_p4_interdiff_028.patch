# HG changeset patch
# Parent 91fff74feb2e81371581c1747333096afc816179
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 028 TypeUtils issues


diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -294,17 +294,17 @@ TypeUtils::ToPCacheRequest(const GlobalO
   if (aIn.IsRequest()) {
     ToPCacheRequest(aOut, aIn.GetAsRequest(), aBodyAction, aReferrerAction,
                     aSchemeAction, aRv);
     return;
   }
 
   RequestOrUSVString input;
   RequestInit init;
-  nsString str;
+  nsAutoString str;
   str.Assign(aIn.GetAsUSVString());
   input.SetAsUSVString().Rebind(str.Data(), str.Length());
 
   nsRefPtr<Request> request = Request::Constructor(aGlobal, input, init, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return;
   }
   ToPCacheRequest(aOut, *request, aBodyAction, aReferrerAction, aSchemeAction,
@@ -317,27 +317,22 @@ TypeUtils::ToPCacheResponseWithoutBody(P
 {
   aOut.type() = aIn.Type();
 
   nsAutoCString url;
   aIn.GetUrl(url);
   aOut.url() = NS_ConvertUTF8toUTF16(url);
 
   if (aOut.url() != EmptyString()) {
-    bool schemeValid;
-    ProcessURL(aOut.url(), &schemeValid, nullptr, aRv);
+    // Pass all Response URL schemes through... The spec only requires we take
+    // action on invalid schemes for Request objects.
+    ProcessURL(aOut.url(), nullptr, nullptr, aRv);
     if (aRv.Failed()) {
       return;
     }
-    // TODO: wrong scheme should trigger different behavior in Match vs Put, etc. (bug 1110462)
-    if (!schemeValid) {
-      NS_NAMED_LITERAL_STRING(label, "Response");
-      aRv.ThrowTypeError(MSG_INVALID_URL_SCHEME, &label, &aOut.url());
-      return;
-    }
   }
 
   aOut.status() = aIn.GetStatus();
   aOut.statusText() = aIn.GetStatusText();
   nsRefPtr<InternalHeaders> headers = aIn.Headers();
   MOZ_ASSERT(headers);
   headers->GetPHeaders(aOut.headers());
   aOut.headersGuard() = headers->Guard();
@@ -418,16 +413,17 @@ TypeUtils::ToResponse(const PCacheRespon
   MOZ_ASSERT(ir);
 
   ir->SetUrl(NS_ConvertUTF16toUTF8(aIn.url()));
 
   nsRefPtr<InternalHeaders> internalHeaders =
     new InternalHeaders(aIn.headers(), aIn.headersGuard());
   ErrorResult result;
   ir->Headers()->SetGuard(aIn.headersGuard(), result);
+  MOZ_ASSERT(!result.Failed());
   ir->Headers()->Fill(*internalHeaders, result);
   MOZ_ASSERT(!result.Failed());
 
   nsCOMPtr<nsIInputStream> stream = ReadStream::Create(aIn.body());
   ir->SetBody(stream);
 
   nsRefPtr<Response> ref = new Response(GetGlobalObject(), ir);
   return ref.forget();
@@ -447,16 +443,17 @@ TypeUtils::ToInternalRequest(const PCach
   internalRequest->SetMode(aIn.mode());
   internalRequest->SetCredentialsMode(aIn.credentials());
   internalRequest->SetContext(aIn.context());
 
   nsRefPtr<InternalHeaders> internalHeaders =
     new InternalHeaders(aIn.headers(), aIn.headersGuard());
   ErrorResult result;
   internalRequest->Headers()->SetGuard(aIn.headersGuard(), result);
+  MOZ_ASSERT(!result.Failed());
   internalRequest->Headers()->Fill(*internalHeaders, result);
   MOZ_ASSERT(!result.Failed());
 
   nsCOMPtr<nsIInputStream> stream = ReadStream::Create(aIn.body());
 
   internalRequest->SetBody(stream);
 
   return internalRequest.forget();
@@ -522,16 +519,19 @@ TypeUtils::SerializeCacheStream(nsIInput
 }
 
 nsIThread*
 TypeUtils::GetStreamThread()
 {
   AssertOwningThread();
 
   if (!mStreamThread) {
+    // Named threads only allow 16 bytes for their names.  Try to make
+    // it meaningful...
+    // TODO: use a thread pool or singleton thread here (bug 1119864)
     nsresult rv = NS_NewNamedThread("DOMCacheTypeU",
                                     getter_AddRefs(mStreamThread));
     if (NS_FAILED(rv) || !mStreamThread) {
       MOZ_CRASH("Failed to create DOM Cache serialization thread.");
     }
   }
 
   return mStreamThread;
diff --git a/dom/cache/TypeUtils.h b/dom/cache/TypeUtils.h
--- a/dom/cache/TypeUtils.h
+++ b/dom/cache/TypeUtils.h
@@ -54,17 +54,17 @@ public:
 
   enum SchemeAction
   {
     IgnoreInvalidScheme,
     TypeErrorOnInvalidScheme,
     NetworkErrorOnInvalidScheme
   };
 
-  virtual ~TypeUtils() { }
+  ~TypeUtils() { }
   virtual nsIGlobalObject* GetGlobalObject() const = 0;
   virtual const nsACString& Origin() const = 0;
 #ifdef DEBUG
   virtual void AssertOwningThread() const = 0;
 #else
   inline void AssertOwningThread() const { }
 #endif
 
