# HG changeset patch
# Parent 603c4584fc0494eea8834ebbefcbbb56f8bb7494
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 011 Convert to nsAutoTArray in all files

diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -157,17 +157,17 @@ Cache::Add(const RequestOrUSVString& aRe
   }
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
 
-  nsTArray<PCacheRequest> requests(1);
+  nsAutoTArray<PCacheRequest, 1> requests;
   PCacheRequest* request = requests.AppendElement();
   ToPCacheRequest(*request, aRequest, ReadBody, ExpandReferrer, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
@@ -187,17 +187,20 @@ Cache::AddAll(const Sequence<OwningReque
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   // Be careful not to early exist after this point to avoid leaking
   // file descriptor resources from stream serialization.
 
-  nsTArray<PCacheRequest> requests;
+  // allocates roughly ~5k on the stack
+  nsAutoTArray<PCacheRequest, 32> requests;
+  requests.SetCapacity(aRequests.Length());
+
   for(uint32_t i = 0; i < aRequests.Length(); ++i) {
     if (!IsValidPutRequestMethod(aRequests[i], aRv)) {
       break;
     }
 
     PCacheRequest* request = requests.AppendElement();
     ToPCacheRequest(*request, aRequests[i], ReadBody, ExpandReferrer, aRv);
     if (aRv.Failed()) {
@@ -400,17 +403,19 @@ Cache::RecvMatchAllResponse(RequestId aR
     return;
   }
 
   if (NS_FAILED(aRv)) {
     promise->MaybeReject(aRv);
     return;
   }
 
-  nsTArray<nsRefPtr<Response>> responses;
+  nsAutoTArray<nsRefPtr<Response>, 256> responses;
+  responses.SetCapacity(aResponses.Length());
+
   for (uint32_t i = 0; i < aResponses.Length(); ++i) {
     nsRefPtr<Response> response = ToResponse(aResponses[i]);
     responses.AppendElement(response.forget());
   }
   promise->MaybeResolve(responses);
 }
 
 void
@@ -470,17 +475,19 @@ Cache::RecvKeysResponse(RequestId aReque
     return;
   }
 
   if (NS_FAILED(aRv)) {
     promise->MaybeReject(aRv);
     return;
   }
 
-  nsTArray<nsRefPtr<Request>> requests;
+  nsAutoTArray<nsRefPtr<Request>, 256> requests;
+  requests.SetCapacity(aRequests.Length());
+
   for (uint32_t i = 0; i < aRequests.Length(); ++i) {
     nsRefPtr<Request> request = ToRequest(aRequests[i]);
     requests.AppendElement(request.forget());
   }
   promise->MaybeResolve(requests);
 }
 
 nsIGlobalObject*
diff --git a/dom/cache/CacheParent.cpp b/dom/cache/CacheParent.cpp
--- a/dom/cache/CacheParent.cpp
+++ b/dom/cache/CacheParent.cpp
@@ -73,17 +73,19 @@ CacheParent::RecvMatchAll(const RequestI
   mManager->CacheMatchAll(this, aRequestId, mCacheId, aRequest, aParams);
   return true;
 }
 
 bool
 CacheParent::RecvAddAll(const RequestId& aRequestId,
                         const nsTArray<PCacheRequest>& aRequests)
 {
-  nsTArray<nsCOMPtr<nsIInputStream>> requestStreams;
+  nsAutoTArray<nsCOMPtr<nsIInputStream>, 256> requestStreams;
+  requestStreams.SetCapacity(aRequests.Length());
+
   for (uint32_t i = 0; i < aRequests.Length(); ++i) {
     requestStreams.AppendElement(DeserializeCacheStream(aRequests[i].body()));
   }
 
   nsRefPtr<FetchPut> fetchPut;
   nsresult rv = FetchPut::Create(this, mManager, aRequestId, mCacheId,
                                  aRequests, requestStreams,
                                  getter_AddRefs(fetchPut));
@@ -98,21 +100,21 @@ CacheParent::RecvAddAll(const RequestId&
 }
 
 bool
 CacheParent::RecvPut(const RequestId& aRequestId,
                      const CacheRequestResponse& aPut)
 {
   MOZ_ASSERT(mManager);
 
-  nsTArray<CacheRequestResponse> putList(1);
+  nsAutoTArray<CacheRequestResponse, 1> putList;
   putList.AppendElement(aPut);
 
-  nsTArray<nsCOMPtr<nsIInputStream>> requestStreamList(1);
-  nsTArray<nsCOMPtr<nsIInputStream>> responseStreamList(1);
+  nsAutoTArray<nsCOMPtr<nsIInputStream>, 1> requestStreamList;
+  nsAutoTArray<nsCOMPtr<nsIInputStream>, 1> responseStreamList;
 
   requestStreamList.AppendElement(
     DeserializeCacheStream(aPut.request().body()));
   responseStreamList.AppendElement(
     DeserializeCacheStream(aPut.response().body()));
 
 
   mManager->CachePutAll(this, aRequestId, mCacheId, putList, requestStreamList,
@@ -174,17 +176,20 @@ CacheParent::OnCacheMatch(RequestId aReq
 }
 
 void
 CacheParent::OnCacheMatchAll(RequestId aRequestId, nsresult aRv,
                              const nsTArray<SavedResponse>& aSavedResponses,
                              StreamList* aStreamList)
 {
   CacheStreamControlParent* streamControl = nullptr;
-  nsTArray<PCacheResponse> responses;
+
+  // Allocates ~4k on the stack
+  nsAutoTArray<PCacheResponse, 32> responses;
+  responses.SetCapacity(aSavedResponses.Length());
 
   for (uint32_t i = 0; i < aSavedResponses.Length(); ++i) {
     PCacheResponse* res = responses.AppendElement();
     *res = aSavedResponses[i].mValue;
 
     if (!aSavedResponses[i].mHasBodyId) {
       res->body() = void_t();
       continue;
@@ -213,17 +218,20 @@ CacheParent::OnCacheDelete(RequestId aRe
 }
 
 void
 CacheParent::OnCacheKeys(RequestId aRequestId, nsresult aRv,
                          const nsTArray<SavedRequest>& aSavedRequests,
                          StreamList* aStreamList)
 {
   CacheStreamControlParent* streamControl = nullptr;
-  nsTArray<PCacheRequest> requests;
+
+  // Allocates ~5k on the stack
+  nsAutoTArray<PCacheRequest, 32> requests;
+  requests.SetCapacity(aSavedRequests.Length());
 
   for (uint32_t i = 0; i < aSavedRequests.Length(); ++i) {
     PCacheRequest* req = requests.AppendElement();
     *req = aSavedRequests[i].mValue;
 
     if (!aSavedRequests[i].mHasBodyId) {
       req->body() = void_t();
       continue;
@@ -284,17 +292,17 @@ CacheParent::DeserializeCacheStream(cons
 
   const PCacheReadStream& readStream = aStreamOrVoid.get_PCacheReadStream();
 
   nsCOMPtr<nsIInputStream> stream = ReadStream::Create(readStream);
   if (stream) {
     return stream.forget();
   }
 
-  nsTArray<FileDescriptor> fds;
+  nsAutoTArray<FileDescriptor, 4> fds;
   if (readStream.fds().type() ==
       OptionalFileDescriptorSet::TPFileDescriptorSetChild) {
 
     FileDescriptorSetParent* fdSetActor =
       static_cast<FileDescriptorSetParent*>(readStream.fds().get_PFileDescriptorSetParent());
     MOZ_ASSERT(fdSetActor);
 
     fdSetActor->ForgetFileDescriptors(fds);
diff --git a/dom/cache/CacheStreamControlChild.cpp b/dom/cache/CacheStreamControlChild.cpp
--- a/dom/cache/CacheStreamControlChild.cpp
+++ b/dom/cache/CacheStreamControlChild.cpp
@@ -60,17 +60,17 @@ CacheStreamControlChild::ActorDestroy(Ac
 }
 
 bool
 CacheStreamControlChild::RecvClose(const nsID& aId)
 {
   DebugOnly<uint32_t> closedCount = 0;
 
   // defensive copy of list since may be modified as we close streams
-  nsTArray<ReadStream*> listeners(mListeners);
+  nsAutoTArray<ReadStream*, 256> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     // note, multiple streams may exist for same ID
     if (listeners[i]->MatchId(aId)) {
       listeners[i]->CloseStream();
       closedCount += 1;
     }
   }
 
@@ -78,17 +78,17 @@ CacheStreamControlChild::RecvClose(const
 
   return true;
 }
 
 bool
 CacheStreamControlChild::RecvCloseAll()
 {
   // defensive copy of list since may be modified as we close streams
-  nsTArray<ReadStream*> listeners(mListeners);
+  nsAutoTArray<ReadStream*, 256> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     listeners[i]->CloseStream();
   }
   return true;
 }
 
 } // namespace cache
 } // namespace dom
diff --git a/dom/cache/CacheStreamControlParent.cpp b/dom/cache/CacheStreamControlParent.cpp
--- a/dom/cache/CacheStreamControlParent.cpp
+++ b/dom/cache/CacheStreamControlParent.cpp
@@ -88,31 +88,36 @@ void
 CacheStreamControlParent::Shutdown()
 {
   unused << Send__delete__(this);
 }
 
 void
 CacheStreamControlParent::NotifyClose(const nsID& aId)
 {
+  DebugOnly<uint32_t> closedCount = 0;
+
   // defensive copy of list since may be modified as we close streams
-  nsTArray<ReadStream*> listeners(mListeners);
+  nsAutoTArray<ReadStream*, 256> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     // note, multiple streams may exist for same ID
     if (listeners[i]->MatchId(aId)) {
       listeners[i]->CloseStream();
+      closedCount += 1;
     }
   }
+
+  MOZ_ASSERT(closedCount > 0);
 }
 
 void
 CacheStreamControlParent::NotifyCloseAll()
 {
   // defensive copy of list since may be modified as we close streams
-  nsTArray<ReadStream*> listeners(mListeners);
+  nsAutoTArray<ReadStream*, 256> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     listeners[i]->CloseStream();
   }
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/DBSchema.cpp b/dom/cache/DBSchema.cpp
--- a/dom/cache/DBSchema.cpp
+++ b/dom/cache/DBSchema.cpp
@@ -178,17 +178,17 @@ nsresult
 DBSchema::DeleteCache(mozIStorageConnection* aConn, CacheId aCacheId,
                       nsTArray<nsID>& aDeletedBodyIdListOut)
 {
   MOZ_ASSERT(aConn);
 
   // Delete the bodies explicitly as we need to read out the body IDs
   // anyway.  These body IDs must be deleted one-by-one as content may
   // still be referencing them invidivually.
-  nsTArray<EntryId> matches;
+  nsAutoTArray<EntryId, 256> matches;
   nsresult rv = QueryAll(aConn, aCacheId, matches);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = DeleteEntries(aConn, matches, aDeletedBodyIdListOut);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   // Delete the remainder of the cache using cascade semantics.
   nsCOMPtr<mozIStorageStatement> state;
@@ -247,18 +247,18 @@ DBSchema::CacheMatch(mozIStorageConnecti
                      const PCacheQueryParams& aParams,
                      bool* aFoundResponseOut,
                      SavedResponse* aSavedResponseOut)
 {
   MOZ_ASSERT(aConn);
   MOZ_ASSERT(aFoundResponseOut);
   MOZ_ASSERT(aSavedResponseOut);
 
-  nsTArray<EntryId> matches;
-  nsresult rv = QueryCache(aConn, aCacheId, aRequest, aParams, matches);
+  nsAutoTArray<EntryId, 1> matches;
+  nsresult rv = QueryCache(aConn, aCacheId, aRequest, aParams, matches, 1);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   if (matches.Length() < 1) {
     *aFoundResponseOut = false;
     return rv;
   }
 
   rv = ReadResponse(aConn, matches[0], aSavedResponseOut);
@@ -275,17 +275,17 @@ nsresult
 DBSchema::CacheMatchAll(mozIStorageConnection* aConn, CacheId aCacheId,
                         const PCacheRequestOrVoid& aRequestOrVoid,
                         const PCacheQueryParams& aParams,
                         nsTArray<SavedResponse>& aSavedResponsesOut)
 {
   MOZ_ASSERT(aConn);
   nsresult rv;
 
-  nsTArray<EntryId> matches;
+  nsAutoTArray<EntryId, 256> matches;
   if (aRequestOrVoid.type() == PCacheRequestOrVoid::Tvoid_t) {
     rv = QueryAll(aConn, aCacheId, matches);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   } else {
     rv = QueryCache(aConn, aCacheId, aRequestOrVoid, aParams, matches);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
 
@@ -308,17 +308,17 @@ DBSchema::CachePut(mozIStorageConnection
                    const PCacheResponse& aResponse,
                    const nsID* aResponseBodyId,
                    nsTArray<nsID>& aDeletedBodyIdListOut)
 {
   MOZ_ASSERT(aConn);
 
   PCacheQueryParams params(false, false, false, false, false,
                            NS_LITERAL_STRING(""));
-  nsTArray<EntryId> matches;
+  nsAutoTArray<EntryId, 256> matches;
   nsresult rv = QueryCache(aConn, aCacheId, aRequest, params, matches);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = DeleteEntries(aConn, matches, aDeletedBodyIdListOut);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = InsertEntry(aConn, aCacheId, aRequest, aRequestBodyId, aResponse,
                    aResponseBodyId);
@@ -332,17 +332,17 @@ nsresult
 DBSchema::CacheDelete(mozIStorageConnection* aConn, CacheId aCacheId,
                       const PCacheRequest& aRequest,
                       const PCacheQueryParams& aParams,
                       nsTArray<nsID>& aDeletedBodyIdListOut, bool* aSuccessOut)
 {
   MOZ_ASSERT(aConn);
   MOZ_ASSERT(aSuccessOut);
 
-  nsTArray<EntryId> matches;
+  nsAutoTArray<EntryId, 256> matches;
   nsresult rv = QueryCache(aConn, aCacheId, aRequest, aParams, matches);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   if (matches.Length() < 1) {
     *aSuccessOut = false;
     return rv;
   }
 
@@ -359,17 +359,17 @@ nsresult
 DBSchema::CacheKeys(mozIStorageConnection* aConn, CacheId aCacheId,
                     const PCacheRequestOrVoid& aRequestOrVoid,
                     const PCacheQueryParams& aParams,
                     nsTArray<SavedRequest>& aSavedRequestsOut)
 {
   MOZ_ASSERT(aConn);
   nsresult rv;
 
-  nsTArray<EntryId> matches;
+  nsAutoTArray<EntryId, 256> matches;
   if (aRequestOrVoid.type() == PCacheRequestOrVoid::Tvoid_t) {
     rv = QueryAll(aConn, aCacheId, matches);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   } else {
     rv = QueryCache(aConn, aCacheId, aRequestOrVoid, aParams, matches);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
 
@@ -422,17 +422,17 @@ DBSchema::StorageMatch(mozIStorageConnec
   rv = aConn->CreateStatement(NS_LITERAL_CSTRING(
     "SELECT cache_id FROM storage WHERE namespace=?1 ORDER BY rowid;"
   ), getter_AddRefs(state));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->BindInt32Parameter(0, aNamespace);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  nsTArray<CacheId> cacheIdList;
+  nsAutoTArray<CacheId, 32> cacheIdList;
 
   bool hasMoreData;
   while(NS_SUCCEEDED(state->ExecuteStep(&hasMoreData)) && hasMoreData) {
     CacheId* cacheId = cacheIdList.AppendElement();
     rv = state->GetInt32(0, cacheId);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
 
@@ -595,22 +595,21 @@ DBSchema::QueryAll(mozIStorageConnection
   return rv;
 }
 
 // static
 nsresult
 DBSchema::QueryCache(mozIStorageConnection* aConn, CacheId aCacheId,
                      const PCacheRequest& aRequest,
                      const PCacheQueryParams& aParams,
-                     nsTArray<EntryId>& aEntryIdListOut)
+                     nsTArray<EntryId>& aEntryIdListOut,
+                     uint32_t aMaxResults)
 {
   MOZ_ASSERT(aConn);
-
-  nsTArray<PCacheRequest> requestArray;
-  nsTArray<PCacheResponse> responseArray;
+  MOZ_ASSERT(aMaxResults > 0);
 
   if (!aParams.ignoreMethod() && !aRequest.method().LowerCaseEqualsLiteral("get")
                               && !aRequest.method().LowerCaseEqualsLiteral("head"))
   {
     return NS_OK;
   }
 
   nsAutoCString query(
@@ -672,16 +671,20 @@ DBSchema::QueryCache(mozIStorageConnecti
       rv = MatchByVaryHeader(aConn, aRequest, entryId, &matchedByVary);
       if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
       if (!matchedByVary) {
         continue;
       }
     }
 
     aEntryIdListOut.AppendElement(entryId);
+
+    if (aEntryIdListOut.Length() == aMaxResults) {
+      return NS_OK;
+    }
   }
 
   return rv;
 }
 
 // static
 nsresult
 DBSchema::MatchByVaryHeader(mozIStorageConnection* aConn,
@@ -695,17 +698,17 @@ DBSchema::MatchByVaryHeader(mozIStorageC
     "SELECT value FROM response_headers "
     "WHERE name='vary' AND entry_id=?1;"
   ), getter_AddRefs(state));
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
   rv = state->BindInt32Parameter(0, entryId);
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
 
-  nsTArray<nsCString> varyValues;
+  nsAutoTArray<nsCString, 8> varyValues;
 
   bool hasMoreData;
   while(NS_SUCCEEDED(state->ExecuteStep(&hasMoreData)) && hasMoreData) {
     nsCString* value = varyValues.AppendElement();
     rv = state->GetUTF8String(0, *value);
     if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
   }
   if (NS_WARN_IF(NS_FAILED(rv))) { return rv; }
diff --git a/dom/cache/DBSchema.h b/dom/cache/DBSchema.h
--- a/dom/cache/DBSchema.h
+++ b/dom/cache/DBSchema.h
@@ -91,17 +91,18 @@ public:
 private:
   typedef int32_t EntryId;
 
   static nsresult QueryAll(mozIStorageConnection* aConn, CacheId aCacheId,
                            nsTArray<EntryId>& aEntryIdListOut);
   static nsresult QueryCache(mozIStorageConnection* aConn, CacheId aCacheId,
                              const PCacheRequest& aRequest,
                              const PCacheQueryParams& aParams,
-                             nsTArray<EntryId>& aEntryIdListOut);
+                             nsTArray<EntryId>& aEntryIdListOut,
+                             uint32_t aMaxResults = UINT32_MAX);
   static nsresult MatchByVaryHeader(mozIStorageConnection* aConn,
                                     const PCacheRequest& aRequest,
                                     EntryId entryId, bool* aSuccessOut);
   static nsresult DeleteEntries(mozIStorageConnection* aConn,
                                 const nsTArray<EntryId>& aEntryIdList,
                                 nsTArray<nsID>& aDeletedBodyIdListOut,
                                 uint32_t aPos=0, int32_t aLen=-1);
   static nsresult InsertEntry(mozIStorageConnection* aConn, CacheId aCacheId,
diff --git a/dom/cache/FetchPut.cpp b/dom/cache/FetchPut.cpp
--- a/dom/cache/FetchPut.cpp
+++ b/dom/cache/FetchPut.cpp
@@ -280,19 +280,25 @@ FetchPut::DoPutOnWorkerThread()
 {
   MOZ_ASSERT(mInitiatingThread == NS_GetCurrentThread());
 
   if (NS_FAILED(mResult)) {
     MaybeNotifyListener();
     return;
   }
 
-  nsTArray<CacheRequestResponse> putList(mStateList.Length());
-  nsTArray<nsCOMPtr<nsIInputStream>> requestStreamList(mStateList.Length());
-  nsTArray<nsCOMPtr<nsIInputStream>> responseStreamList(mStateList.Length());
+  // These allocate ~4.5k combined on the stack
+  nsAutoTArray<CacheRequestResponse, 16> putList;
+  nsAutoTArray<nsCOMPtr<nsIInputStream>, 16> requestStreamList;
+  nsAutoTArray<nsCOMPtr<nsIInputStream>, 16> responseStreamList;
+
+  putList.SetCapacity(mStateList.Length());
+  requestStreamList.SetCapacity(mStateList.Length());
+  responseStreamList.SetCapacity(mStateList.Length());
+
   for (uint32_t i = 0; i < mStateList.Length(); ++i) {
     // The spec requires us to catch if content tries to insert a set of
     // requests that would overwrite each other.
     if (MatchInPutList(mStateList[i].mPCacheRequest, putList)) {
       MaybeSetError(NS_ERROR_DOM_INVALID_STATE_ERR);
       MaybeNotifyListener();
       return;
     }
@@ -338,17 +344,17 @@ FetchPut::MatchInPutList(const PCacheReq
     }
 
     nsRefPtr<InternalHeaders> cachedRequestHeaders =
       new InternalHeaders(cachedRequest.headers());
 
     nsRefPtr<InternalHeaders> cachedResponseHeaders =
       new InternalHeaders(cachedResponse.headers());
 
-    nsTArray<nsCString> varyHeaders;
+    nsAutoTArray<nsCString, 16> varyHeaders;
     ErrorResult rv;
     cachedResponseHeaders->GetAll(NS_LITERAL_CSTRING("vary"), varyHeaders, rv);
     MOZ_ALWAYS_TRUE(!rv.Failed());
 
     // Assume the vary headers match until we find a conflict
     bool varyHeadersMatch = true;
 
     for (uint32_t j = 0; j < varyHeaders.Length(); ++j) {
diff --git a/dom/cache/Manager.cpp b/dom/cache/Manager.cpp
--- a/dom/cache/Manager.cpp
+++ b/dom/cache/Manager.cpp
@@ -1471,17 +1471,20 @@ Manager::SetBodyIdOrphanedIfRefed(const 
   }
   return false;
 }
 
 void
 Manager::NoteOrphanedBodyIdList(const nsTArray<nsID>& aDeletedBodyIdList)
 {
   NS_ASSERT_OWNINGTHREAD(Manager);
-  nsTArray<nsID> deleteNowList;
+
+  nsAutoTArray<nsID, 64> deleteNowList;
+  deleteNowList.SetCapacity(aDeletedBodyIdList.Length());
+
   for (uint32_t i = 0; i < aDeletedBodyIdList.Length(); ++i) {
     if (!SetBodyIdOrphanedIfRefed(aDeletedBodyIdList[i])) {
       deleteNowList.AppendElement(aDeletedBodyIdList[i]);
     }
   }
 
   if (!deleteNowList.IsEmpty()) {
     nsRefPtr<Action> action = new DeleteOrphanedBodyAction(deleteNowList);
diff --git a/dom/cache/ReadStream.cpp b/dom/cache/ReadStream.cpp
--- a/dom/cache/ReadStream.cpp
+++ b/dom/cache/ReadStream.cpp
@@ -250,17 +250,17 @@ ReadStream::Create(const PCacheReadStrea
 // static
 already_AddRefed<ReadStream>
 ReadStream::Create(const PCacheReadStream& aReadStream)
 {
   if (!aReadStream.controlChild() && !aReadStream.controlParent()) {
     return nullptr;
   }
 
-  nsTArray<FileDescriptor> fds;
+  nsAutoTArray<FileDescriptor, 4> fds;
   if (aReadStream.fds().type() ==
       OptionalFileDescriptorSet::TPFileDescriptorSetChild) {
 
     FileDescriptorSetChild* fdSetActor =
       static_cast<FileDescriptorSetChild*>(aReadStream.fds().get_PFileDescriptorSetChild());
     MOZ_ASSERT(fdSetActor);
 
     fdSetActor->ForgetFileDescriptors(fds);
@@ -328,17 +328,17 @@ void
 ReadStream::Serialize(PCacheReadStream* aReadStreamOut)
 {
   MOZ_ASSERT(aReadStreamOut);
   MOZ_ASSERT(!mClosed);
 
   aReadStreamOut->id() = mId;
   SerializeControl(aReadStreamOut);
 
-  nsTArray<FileDescriptor> fds;
+  nsAutoTArray<FileDescriptor, 4> fds;
   SerializeInputStream(mStream, aReadStreamOut->params(), fds);
 
   SerializeFds(aReadStreamOut, fds);
 
   // We're passing ownership across the IPC barrier with the control, so
   // do not signal that the stream is closed here.
   Forget();
 }
diff --git a/dom/cache/TypeUtils.cpp b/dom/cache/TypeUtils.cpp
--- a/dom/cache/TypeUtils.cpp
+++ b/dom/cache/TypeUtils.cpp
@@ -468,17 +468,17 @@ TypeUtils::CleanupChildFds(PCacheReadStr
 void
 TypeUtils::CleanupChildFds(PCacheReadStream& aReadStream)
 {
   if (aReadStream.fds().type() !=
       OptionalFileDescriptorSet::TPFileDescriptorSetChild) {
     return;
   }
 
-  nsTArray<FileDescriptor> fds;
+  nsAutoTArray<FileDescriptor, 4> fds;
 
   FileDescriptorSetChild* fdSetActor =
     static_cast<FileDescriptorSetChild*>(aReadStream.fds().get_PFileDescriptorSetChild());
   MOZ_ASSERT(fdSetActor);
 
   fdSetActor->ForgetFileDescriptors(fds);
 }
 
@@ -504,17 +504,17 @@ TypeUtils::SerializeCacheStream(nsIInput
     aRv.Throw(NS_ERROR_FAILURE);
     return;
   }
 
   PCacheReadStream readStream;
   readStream.controlChild() = nullptr;
   readStream.controlParent() = nullptr;
 
-  nsTArray<FileDescriptor> fds;
+  nsAutoTArray<FileDescriptor, 4> fds;
   SerializeInputStream(aStream, readStream.params(), fds);
 
   PFileDescriptorSetChild* fdSet = nullptr;
   if (!fds.IsEmpty()) {
     // We should not be serializing until we have an actor ready
     PBackgroundChild* manager = BackgroundChild::GetForCurrentThread();
     MOZ_ASSERT(manager);
 
