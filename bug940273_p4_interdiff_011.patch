# HG changeset patch
# Parent 686d16b3c82c6f846cdbaca3debf20087bb8f495
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 011 Convert to nsAutoTArray in all files


diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -157,17 +157,17 @@ Cache::Add(const RequestOrUSVString& aRe
   }
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
 
-  nsTArray<PCacheRequest> requests(1);
+  nsAutoTArray<PCacheRequest, 1> requests;
   PCacheRequest* request = requests.AppendElement();
   ToPCacheRequest(*request, aRequest, ReadBody, ExpandReferrer, aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
@@ -187,17 +187,20 @@ Cache::AddAll(const Sequence<OwningReque
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
   // Be careful not to early exist after this point to avoid leaking
   // file descriptor resources from stream serialization.
 
-  nsTArray<PCacheRequest> requests;
+  // allocates roughly ~4k on the stack
+  nsAutoTArray<PCacheRequest, 32> requests;
+  requests.SetCapacity(aRequests.Length());
+
   for(uint32_t i = 0; i < aRequests.Length(); ++i) {
     if (!IsValidPutRequestMethod(aRequests[i], aRv)) {
       break;
     }
 
     PCacheRequest* request = requests.AppendElement();
     ToPCacheRequest(*request, aRequests[i], ReadBody, ExpandReferrer, aRv);
     if (aRv.Failed()) {
@@ -400,17 +403,19 @@ Cache::RecvMatchAllResponse(RequestId aR
     return;
   }
 
   if (NS_FAILED(aRv)) {
     promise->MaybeReject(aRv);
     return;
   }
 
-  nsTArray<nsRefPtr<Response>> responses;
+  nsAutoTArray<nsRefPtr<Response>, 128> responses;
+  responses.SetCapacity(aResponses.Length());
+
   for (uint32_t i = 0; i < aResponses.Length(); ++i) {
     nsRefPtr<Response> response = ToResponse(aResponses[i]);
     responses.AppendElement(response.forget());
   }
   promise->MaybeResolve(responses);
 }
 
 void
@@ -470,17 +475,19 @@ Cache::RecvKeysResponse(RequestId aReque
     return;
   }
 
   if (NS_FAILED(aRv)) {
     promise->MaybeReject(aRv);
     return;
   }
 
-  nsTArray<nsRefPtr<Request>> requests;
+  nsAutoTArray<nsRefPtr<Request>, 128> requests;
+  requests.SetCapacity(aRequests.Length());
+
   for (uint32_t i = 0; i < aRequests.Length(); ++i) {
     nsRefPtr<Request> request = ToRequest(aRequests[i]);
     requests.AppendElement(request.forget());
   }
   promise->MaybeResolve(requests);
 }
 
 nsIGlobalObject*
