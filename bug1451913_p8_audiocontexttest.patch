# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  11712c3fdeb3286f3f1886627d5ec01355e5598a
Bug 1451913 P8 Add an AudioContext event target leak test. r=smaug

diff --git a/dom/media/webaudio/test/mochitest.ini b/dom/media/webaudio/test/mochitest.ini
--- a/dom/media/webaudio/test/mochitest.ini
+++ b/dom/media/webaudio/test/mochitest.ini
@@ -6,16 +6,17 @@ support-files =
   audio-expected.wav
   audio-mono-expected-2.wav
   audio-mono-expected.wav
   audio-quad.wav
   audio.ogv
   audiovideo.mp4
   audioBufferSourceNodeDetached_worker.js
   corsServer.sjs
+  !/dom/events/test/event_leak_utils.js
   file_nodeCreationDocumentGone.html
   invalid.txt
   layouttest-glue.js
   noaudio.webm
   small-shot-expected.wav
   small-shot-mono-expected.wav
   small-shot.ogg
   small-shot.mp3
@@ -148,16 +149,17 @@ skip-if = toolkit == 'android' # bug 105
 [test_disconnectFromAudioNode.html]
 [test_disconnectFromAudioNodeAndOutput.html]
 [test_disconnectFromAudioNodeAndOutputAndInput.html]
 [test_disconnectFromAudioNodeMultipleConnection.html]
 [test_disconnectFromOutput.html]
 [test_dynamicsCompressorNode.html]
 [test_dynamicsCompressorNodePassThrough.html]
 [test_dynamicsCompressorNodeWithGain.html]
+[test_event_listener_leaks.html]
 [test_gainNode.html]
 [test_gainNodeInLoop.html]
 [test_gainNodePassThrough.html]
 [test_iirFilterNodePassThrough.html]
 [test_maxChannelCount.html]
 [test_mediaDecoding.html]
 [test_mediaElementAudioSourceNode.html]
 tags=capturestream
diff --git a/dom/media/webaudio/test/test_event_listener_leaks.html b/dom/media/webaudio/test/test_event_listener_leaks.html
new file mode 100644
--- /dev/null
+++ b/dom/media/webaudio/test/test_event_listener_leaks.html
@@ -0,0 +1,47 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug 1450358 - Test AudioContext event listener leak conditions</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="/tests/dom/events/test/event_leak_utils.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<script class="testbody" type="text/javascript">
+// Manipulate AudioContext objects in the frame's context.
+// Its important here that we create a listener callback from
+// the DOM objects back to the frame's global in order to
+// exercise the leak condition.
+async function useAudioContext(contentWindow) {
+  let ctx = new contentWindow.AudioContext();
+  ctx.onstatechange = e => {
+    contentWindow.stateChangeCount += 1;
+  };
+
+  let osc = ctx.createOscillator();
+  osc.type = "sine";
+  osc.frequency.value = 440;
+  osc.start();
+}
+
+async function runTest() {
+  try {
+    await checkForEventListenerLeaks("AudioContext", useAudioContext);
+  } catch (e) {
+    ok(false, e);
+  } finally {
+    SimpleTest.finish();
+  }
+}
+
+SimpleTest.waitForExplicitFinish();
+addEventListener("load", runTest, { once: true });
+</script>
+</pre>
+</body>
+</html>
+
