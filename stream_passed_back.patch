# HG changeset patch
# Parent 868f902f4616400507eda78760c0c171db33bb74
# User Ben Kelly <ben@wanderview.com>
Pass stream control and ID back to parent when given our own streams.


diff --git a/dom/cache/CacheStreamControlChild.cpp b/dom/cache/CacheStreamControlChild.cpp
--- a/dom/cache/CacheStreamControlChild.cpp
+++ b/dom/cache/CacheStreamControlChild.cpp
@@ -9,16 +9,25 @@
 #include "mozilla/unused.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::unused;
 
+CacheStreamControlChild::CacheStreamControlChild()
+{
+  printf_stderr("### ### CacheStreamControlChild()\n");
+}
+
+CacheStreamControlChild::~CacheStreamControlChild()
+{
+}
+
 void
 CacheStreamControlChild::AddListener(Listener* aListener)
 {
   MOZ_ASSERT(aListener);
   mListeners.AppendElement(aListener);
 }
 
 void
diff --git a/dom/cache/CacheStreamControlChild.h b/dom/cache/CacheStreamControlChild.h
--- a/dom/cache/CacheStreamControlChild.h
+++ b/dom/cache/CacheStreamControlChild.h
@@ -19,16 +19,19 @@ class CacheStreamControlChild : public P
 public:
   class Listener
   {
   public:
     virtual void CloseStream()=0;
     virtual bool MatchId(const nsID& aId)=0;
   };
 
+  CacheStreamControlChild();
+  virtual ~CacheStreamControlChild();
+
   void AddListener(Listener* aListener);
   void RemoveListener(Listener* aListener);
 
   void NoteClosed(const nsID& aId);
 
   // PCacheStreamControlChild methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvClose(const nsID& aId) MOZ_OVERRIDE;
diff --git a/dom/cache/CacheStreamControlParent.cpp b/dom/cache/CacheStreamControlParent.cpp
--- a/dom/cache/CacheStreamControlParent.cpp
+++ b/dom/cache/CacheStreamControlParent.cpp
@@ -11,16 +11,17 @@
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::unused;
 
 CacheStreamControlParent::CacheStreamControlParent()
 {
+  printf_stderr("### ### CacheStreamControlParent()\n");
 }
 
 CacheStreamControlParent::~CacheStreamControlParent()
 {
   MOZ_ASSERT(!mStreamList);
 }
 
 void
diff --git a/dom/cache/PCacheTypes.ipdlh b/dom/cache/PCacheTypes.ipdlh
--- a/dom/cache/PCacheTypes.ipdlh
+++ b/dom/cache/PCacheTypes.ipdlh
@@ -1,12 +1,13 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+include protocol PCacheStreamControl;
 include PHeaders;
 include InputStreamParams;
 
 using HeadersGuardEnum from "mozilla/dom/FetchIPCUtils.h";
 using RequestCredentials from "mozilla/dom/FetchIPCUtils.h";
 using RequestMode from "mozilla/dom/FetchIPCUtils.h";
 using mozilla::dom::ResponseType from "mozilla/dom/FetchIPCUtils.h";
 using mozilla::void_t from "ipc/IPCMessageUtils.h";
@@ -26,16 +27,17 @@ struct PCacheQueryParams
   nsString cacheName;
 };
 
 struct PCacheReadStream
 {
   nsID id;
   OptionalInputStreamParams params;
   OptionalFileDescriptorSet fds;
+  nullable PCacheStreamControl control;
 };
 
 union PCacheReadStreamOrVoid
 {
   void_t;
   PCacheReadStream;
 };
 
diff --git a/dom/cache/ReadStream.cpp b/dom/cache/ReadStream.cpp
--- a/dom/cache/ReadStream.cpp
+++ b/dom/cache/ReadStream.cpp
@@ -21,17 +21,18 @@ namespace cache {
 
 using mozilla::unused;
 using mozilla::ipc::FileDescriptor;
 using mozilla::ipc::FileDescriptorSetChild;
 using mozilla::ipc::InputStreamParams;
 using mozilla::ipc::OptionalFileDescriptorSet;
 
 NS_IMPL_ISUPPORTS(mozilla::dom::cache::ReadStream, nsIInputStream,
-                                                   nsIIPCSerializableInputStream);
+                                                   nsIIPCSerializableInputStream,
+                                                   ReadStream);
 
 // static
 already_AddRefed<ReadStream>
 ReadStream::Create(PCacheStreamControlChild* aControl,
                    const PCacheReadStreamOrVoid& aReadStreamOrVoid)
 {
   if (!aControl || aReadStreamOrVoid.type() == PCacheReadStreamOrVoid::Tvoid_t) {
     return nullptr;
@@ -73,16 +74,28 @@ ReadStream::Create(PCacheStreamControlCh
   nsCOMPtr<nsIAsyncInputStream> asyncStream = do_QueryInterface(stream);
   MOZ_ASSERT(!asyncStream);
 #endif
 
   nsRefPtr<ReadStream> ref = new ReadStream(aControl, aReadStream.id(), stream);
   return ref.forget();
 }
 
+const nsID&
+ReadStream::BodyId() const
+{
+  return mId;
+}
+
+PCacheStreamControlChild*
+ReadStream::Control() const
+{
+  return mControl;
+}
+
 void
 ReadStream::CloseStream()
 {
   Close();
 }
 
 bool
 ReadStream::MatchId(const nsID& aId)
diff --git a/dom/cache/ReadStream.h b/dom/cache/ReadStream.h
--- a/dom/cache/ReadStream.h
+++ b/dom/cache/ReadStream.h
@@ -18,29 +18,37 @@ template<class T> class nsTArray;
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class PCacheReadStream;
 class PCacheReadStreamOrVoid;
 
+// IID for the dom::cache::ReadStream interface
+#define NS_DOM_CACHE_IID \
+{0x8e5da7c9, 0x0940, 0x4f1d, \
+  {0x97, 0x25, 0x5c, 0x59, 0x38, 0xdd, 0xb9, 0x9f}}
+
 class ReadStream : public nsIInputStream
                  , public nsIIPCSerializableInputStream
                  , public CacheStreamControlChild::Listener
 {
 public:
   static already_AddRefed<ReadStream>
   Create(PCacheStreamControlChild* aControl,
          const PCacheReadStreamOrVoid& aReadStreamOrVoid);
 
   static already_AddRefed<ReadStream>
   Create(PCacheStreamControlChild* aControl,
          const PCacheReadStream& aReadStream);
 
+  const nsID& BodyId() const;
+  PCacheStreamControlChild* Control() const;
+
   // CacheStreamControlChild::Listener methods
   virtual void CloseStream() MOZ_OVERRIDE;
   virtual bool MatchId(const nsID& aId) MOZ_OVERRIDE;
 
 private:
   ReadStream(PCacheStreamControlChild* aControl, const nsID& aId,
              nsIInputStream* aStream);
   virtual ~ReadStream();
@@ -49,18 +57,22 @@ private:
 
   CacheStreamControlChild* mControl;
   const nsID mId;
   nsCOMPtr<nsIInputStream> mStream;
   nsCOMPtr<nsIIPCSerializableInputStream> mSerializable;
   bool mClosed;
 
 public:
+  NS_DECLARE_STATIC_IID_ACCESSOR(NS_DOM_CACHE_IID);
+
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_NSIINPUTSTREAM
   NS_DECL_NSIIPCSERIALIZABLEINPUTSTREAM
 };
 
+NS_DEFINE_STATIC_IID_ACCESSOR(ReadStream, NS_DOM_CACHE_IID);
+
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_ReadStream_h
