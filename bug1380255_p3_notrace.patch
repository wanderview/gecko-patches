# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  9f34ead7ff201cf392b1c332ad8dba45c2bedbc5
Bug 1380255 P3 Disable OMT retargeting of fetch() requests while being traced until webrequest can be fixed. r=kmag

diff --git a/dom/fetch/FetchDriver.cpp b/dom/fetch/FetchDriver.cpp
--- a/dom/fetch/FetchDriver.cpp
+++ b/dom/fetch/FetchDriver.cpp
@@ -658,16 +658,31 @@ FetchDriver::OnStartRequest(nsIRequest* 
 
   nsCOMPtr<nsIEventTarget> sts = do_GetService(NS_STREAMTRANSPORTSERVICE_CONTRACTID, &rv);
   if (NS_WARN_IF(NS_FAILED(rv))) {
     FailWithNetworkError();
     // Cancel request.
     return rv;
   }
 
+  // Attempt to determine if the channel is being traced.  The webrequest code
+  // has a bug which causes it to break when its tracing a channel that is
+  // retargeted to a new thread.  If we detect tracing going on, then skip
+  // retargeting the channel.
+  nsCOMPtr<nsITraceableChannel> traceable = do_QueryInterface(aRequest);
+  if (traceable) {
+    bool tracing = false;
+    rv = traceable->GetTracing(&tracing);
+    if (NS_SUCCEEDED(rv) && tracing) {
+      NS_WARNING("Channel cannot be retargeted off-main-thread because it is "
+                 "being traced.");
+      return NS_OK;
+    }
+  }
+
   // Try to retarget off main thread.
   if (nsCOMPtr<nsIThreadRetargetableRequest> rr = do_QueryInterface(aRequest)) {
     Unused << NS_WARN_IF(NS_FAILED(rr->RetargetDeliveryTo(sts)));
   }
   return NS_OK;
 }
 
 namespace {
diff --git a/netwerk/base/nsITraceableChannel.idl b/netwerk/base/nsITraceableChannel.idl
--- a/netwerk/base/nsITraceableChannel.idl
+++ b/netwerk/base/nsITraceableChannel.idl
@@ -26,9 +26,15 @@ interface nsITraceableChannel : nsISuppo
      * Note: The caller of setNewListener must not delay passing 
      * OnStartRequest to the original listener.
      *
      * Note2: A channel may restrict when the listener can be replaced.
      * It is not recommended to allow listener replacement after OnStartRequest
      * has been called.
      */
     nsIStreamListener setNewListener(in nsIStreamListener aListener);
+
+    /*
+     * Returns true if SetNewListener() has been called successfully on
+     * this channel.  False otherwise.
+     */
+    readonly attribute boolean tracing;
 };
diff --git a/netwerk/protocol/http/HttpBaseChannel.cpp b/netwerk/protocol/http/HttpBaseChannel.cpp
--- a/netwerk/protocol/http/HttpBaseChannel.cpp
+++ b/netwerk/protocol/http/HttpBaseChannel.cpp
@@ -197,16 +197,17 @@ HttpBaseChannel::HttpBaseChannel()
   , mForcePending(false)
   , mCorsIncludeCredentials(false)
   , mCorsMode(nsIHttpChannelInternal::CORS_MODE_NO_CORS)
   , mRedirectMode(nsIHttpChannelInternal::REDIRECT_MODE_FOLLOW)
   , mFetchCacheMode(nsIHttpChannelInternal::FETCH_CACHE_MODE_DEFAULT)
   , mOnStartRequestCalled(false)
   , mOnStopRequestCalled(false)
   , mAfterOnStartRequestBegun(false)
+  , mTracing(false)
   , mTransferSize(0)
   , mDecodedBodySize(0)
   , mEncodedBodySize(0)
   , mRequestContextID(0)
   , mContentWindowId(0)
   , mTopLevelOuterContentWindowId(0)
   , mRequireCORSPreflight(false)
   , mReportCollector(new ConsoleReportCollector())
@@ -3204,16 +3205,25 @@ HttpBaseChannel::SetNewListener(nsIStrea
 
   NS_ENSURE_STATE(mListener);
   NS_ENSURE_ARG_POINTER(aListener);
 
   nsCOMPtr<nsIStreamListener> wrapper = new nsStreamListenerWrapper(mListener);
 
   wrapper.forget(_retval);
   mListener = aListener;
+  mTracing = true;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+HttpBaseChannel::GetTracing(bool *aResult)
+{
+  NS_ENSURE_ARG_POINTER(aResult);
+  *aResult = mTracing;
   return NS_OK;
 }
 
 //-----------------------------------------------------------------------------
 // HttpBaseChannel helpers
 //-----------------------------------------------------------------------------
 
 void
diff --git a/netwerk/protocol/http/HttpBaseChannel.h b/netwerk/protocol/http/HttpBaseChannel.h
--- a/netwerk/protocol/http/HttpBaseChannel.h
+++ b/netwerk/protocol/http/HttpBaseChannel.h
@@ -637,16 +637,19 @@ protected:
   // OnStopRequest more than once.
   bool mOnStartRequestCalled;
   bool mOnStopRequestCalled;
 
   // Defaults to false. Is set to true at the begining of OnStartRequest.
   // Used to ensure methods can't be called before OnStartRequest.
   bool mAfterOnStartRequestBegun;
 
+  // True if SetNewListener() has been called successfully.
+  bool mTracing;
+
   uint64_t mTransferSize;
   uint64_t mDecodedBodySize;
   uint64_t mEncodedBodySize;
 
   // The network interface id that's associated with this channel.
   nsCString mNetworkInterfaceId;
 
   uint64_t mRequestContextID;
