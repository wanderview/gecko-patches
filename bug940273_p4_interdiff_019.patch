# HG changeset patch
# Parent fcdee5e6b692631bc5a967df2d9907b9e61710a1
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 019 Use RAII objects for all PCacheRequests to handle rare case where request with stream FDs.

diff --git a/dom/cache/AutoUtils.cpp b/dom/cache/AutoUtils.cpp
--- a/dom/cache/AutoUtils.cpp
+++ b/dom/cache/AutoUtils.cpp
@@ -101,22 +101,88 @@ CleanupParentFds(PCacheReadStreamOrVoid&
 } // anonymous namespace
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 using mozilla::ipc::PBackgroundParent;
 
-AutoChildRequestList::AutoChildRequestList(TypeUtils* aTypeUtils,
-                                           uint32_t aCapacity)
+AutoChildBase::AutoChildBase(TypeUtils* aTypeUtils)
   : mTypeUtils(aTypeUtils)
   , mSent(false)
 {
   MOZ_ASSERT(mTypeUtils);
+}
+
+AutoChildBase::~AutoChildBase()
+{
+}
+
+// --------------------------------------------
+
+AutoChildRequest::AutoChildRequest(TypeUtils* aTypeUtils)
+  : AutoChildBase(aTypeUtils)
+{
+  mRequestOrVoid = void_t();
+}
+
+AutoChildRequest::~AutoChildRequest()
+{
+  if (mRequestOrVoid.type() != PCacheRequestOrVoid::TPCacheRequest) {
+    return;
+  }
+
+  CleanupAction action = mSent ? ForgetFds : DeleteFds;
+  CleanupChildFds(mRequestOrVoid.get_PCacheRequest().body(), action);
+}
+
+void
+AutoChildRequest::Add(const RequestOrUSVString& aRequest,
+                      BodyAction aBodyAction, ReferrerAction aReferrerAction,
+                      SchemeAction aSchemeAction, ErrorResult& aRv)
+{
+  MOZ_ASSERT(!mSent);
+  MOZ_ASSERT(mRequestOrVoid.type() == PCacheRequestOrVoid::Tvoid_t);
+  mRequestOrVoid = PCacheRequest();
+  mTypeUtils->ToPCacheRequest(mRequestOrVoid.get_PCacheRequest(), aRequest,
+                              aBodyAction, aReferrerAction, aSchemeAction, aRv);
+}
+
+void
+AutoChildRequest::Add(const Optional<RequestOrUSVString>& aRequest,
+                      BodyAction aBodyAction, ReferrerAction aReferrerAction,
+                      SchemeAction aSchemeAction, ErrorResult& aRv)
+{
+  MOZ_ASSERT(!mSent);
+  MOZ_ASSERT(mRequestOrVoid.type() == PCacheRequestOrVoid::Tvoid_t);
+  mTypeUtils->ToPCacheRequestOrVoid(mRequestOrVoid, aRequest,
+                                    aBodyAction, aReferrerAction, aSchemeAction,
+                                    aRv);
+}
+
+const PCacheRequest&
+AutoChildRequest::SendAsRequest()
+{
+  MOZ_ASSERT(mRequestOrVoid.type() == PCacheRequestOrVoid::TPCacheRequest);
+  return mRequestOrVoid.get_PCacheRequest();
+}
+
+const PCacheRequestOrVoid&
+AutoChildRequest::SendAsRequestOrVoid()
+{
+  return mRequestOrVoid;
+}
+
+// --------------------------------------------
+
+AutoChildRequestList::AutoChildRequestList(TypeUtils* aTypeUtils,
+                                           uint32_t aCapacity)
+  : AutoChildBase(aTypeUtils)
+{
   mRequestList.SetCapacity(aCapacity);
 }
 
 AutoChildRequestList::~AutoChildRequestList()
 {
   CleanupAction action = mSent ? ForgetFds : DeleteFds;
   for (uint32_t i = 0; i < mRequestList.Length(); ++i) {
     CleanupChildFds(mRequestList[i].body(), action);
@@ -172,18 +238,17 @@ AutoChildRequestList::SendAsRequestList(
   MOZ_ASSERT(!mSent);
   mSent = true;
   return mRequestList;
 }
 
 // --------------------------------------------
 
 AutoChildRequestResponse::AutoChildRequestResponse(TypeUtils* aTypeUtils)
-  : mTypeUtils(aTypeUtils)
-  , mSent(false)
+  : AutoChildBase(aTypeUtils)
 {
   // Default IPC-generated constructor does not initialize these correctly
   // and we check them later when cleaning up.
   mRequestResponse.request().body() = void_t();
   mRequestResponse.response().body() = void_t();
 }
 
 AutoChildRequestResponse::~AutoChildRequestResponse()
diff --git a/dom/cache/AutoUtils.h b/dom/cache/AutoUtils.h
--- a/dom/cache/AutoUtils.h
+++ b/dom/cache/AutoUtils.h
@@ -21,79 +21,101 @@ class ErrorResult;
 namespace ipc {
 class PBackgroundParent;
 }
 
 namespace dom {
 
 class OwningRequestOrUSVString;
 class RequestOrUSVString;
+template<typename T> class Optional;
 
 namespace cache {
 
 class CacheStreamControlParent;
 class SavedRequest;
 class SavedResponse;
 class StreamList;
 
 // A collection of RAII-style helper classes to ensure that IPC
 // FileDescriptorSet actors are properly cleaned up.  The user of these actors
 // must manually either Forget() the Fds or Send__delete__() the actor
 // depending on if the descriptors were actually sent.
 //
 // Note, these should only be used when *sending* streams across IPC.  The
 // deserialization case is handled by creating a ReadStream object.
 
-class AutoChildRequestList MOZ_STACK_CLASS MOZ_FINAL
+class AutoChildBase MOZ_STACK_CLASS
 {
-public:
+protected:
   typedef TypeUtils::BodyAction BodyAction;
   typedef TypeUtils::ReferrerAction ReferrerAction;
   typedef TypeUtils::SchemeAction SchemeAction;
 
+  AutoChildBase(TypeUtils* aTypeUtils);
+  virtual ~AutoChildBase() = 0;
+
+  TypeUtils* mTypeUtils;
+  bool mSent;
+};
+
+class AutoChildRequest MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
+{
+public:
+  explicit AutoChildRequest(TypeUtils* aTypeUtils);
+  ~AutoChildRequest();
+
+  void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
+           ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+           ErrorResult& aRv);
+  void Add(const Optional<RequestOrUSVString>& aRequest, BodyAction aBodyAction,
+           ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
+           ErrorResult& aRv);
+
+  const PCacheRequest& SendAsRequest();
+  const PCacheRequestOrVoid& SendAsRequestOrVoid();
+
+private:
+  PCacheRequestOrVoid mRequestOrVoid;
+};
+
+class AutoChildRequestList MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
+{
+public:
   AutoChildRequestList(TypeUtils* aTypeUtils, uint32_t aCapacity);
   ~AutoChildRequestList();
 
   void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
   void Add(const OwningRequestOrUSVString& aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
 
   const nsTArray<PCacheRequest>& SendAsRequestList();
 
 private:
-  TypeUtils* mTypeUtils;
-  bool mSent;
-
   // Allocates ~5k inline in the stack-only class
   nsAutoTArray<PCacheRequest, 32> mRequestList;
 };
 
-class AutoChildRequestResponse MOZ_STACK_CLASS MOZ_FINAL
+class AutoChildRequestResponse MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
 {
 public:
-  typedef TypeUtils::BodyAction BodyAction;
-  typedef TypeUtils::ReferrerAction ReferrerAction;
-  typedef TypeUtils::SchemeAction SchemeAction;
-
   explicit AutoChildRequestResponse(TypeUtils* aTypeUtils);
   ~AutoChildRequestResponse();
 
   void Add(const RequestOrUSVString& aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
   void Add(Response& aResponse, ErrorResult& aRv);
 
   const CacheRequestResponse& SendAsRequestResponse();
 
 private:
-  TypeUtils* mTypeUtils;
-  bool mSent;
   CacheRequestResponse mRequestResponse;
 };
 
 class AutoParentBase MOZ_STACK_CLASS
 {
 protected:
   explicit AutoParentBase(mozilla::ipc::PBackgroundParent* aManager);
   virtual ~AutoParentBase() = 0;
diff --git a/dom/cache/Cache.cpp b/dom/cache/Cache.cpp
--- a/dom/cache/Cache.cpp
+++ b/dom/cache/Cache.cpp
@@ -98,57 +98,58 @@ Cache::Match(const RequestOrUSVString& a
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
-  PCacheRequest request;
-  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer,
-                  IgnoreInvalidScheme, aRv);
+  AutoChildRequest request(this);
+  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
+              aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
-  unused << mActor->SendMatch(requestId, request, params);
+  unused << mActor->SendMatch(requestId, request.SendAsRequest(), params);
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::MatchAll(const Optional<RequestOrUSVString>& aRequest,
                 const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
-  PCacheRequestOrVoid request;
-  ToPCacheRequestOrVoid(request, aRequest, IgnoreBody, PassThroughReferrer,
-                        IgnoreInvalidScheme, aRv);
+  AutoChildRequest request(this);
+  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
+              aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
-  unused << mActor->SendMatchAll(requestId, request, params);
+  unused << mActor->SendMatchAll(requestId, request.SendAsRequestOrVoid(),
+                                 params);
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::Add(const RequestOrUSVString& aRequest, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
@@ -255,57 +256,57 @@ Cache::Delete(const RequestOrUSVString& 
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
-  PCacheRequest request;
-  ToPCacheRequest(request, aRequest, IgnoreBody, PassThroughReferrer,
-                  IgnoreInvalidScheme, aRv);
+  AutoChildRequest request(this);
+  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
+              aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
-  unused << mActor->SendDelete(requestId, request, params);
+  unused << mActor->SendDelete(requestId, request.SendAsRequest(), params);
 
   return promise.forget();
 }
 
 already_AddRefed<Promise>
 Cache::Keys(const Optional<RequestOrUSVString>& aRequest,
             const CacheQueryOptions& aOptions, ErrorResult& aRv)
 {
   MOZ_ASSERT(mActor);
 
   nsRefPtr<Promise> promise = Promise::Create(mGlobal, aRv);
   if (!promise) {
     return nullptr;
   }
 
-  PCacheRequestOrVoid request;
-  ToPCacheRequestOrVoid(request, aRequest, IgnoreBody, PassThroughReferrer,
-                        IgnoreInvalidScheme, aRv);
+  AutoChildRequest request(this);
+  request.Add(aRequest, IgnoreBody, PassThroughReferrer, IgnoreInvalidScheme,
+              aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
   PCacheQueryParams params;
   ToPCacheQueryParams(params, aOptions);
 
   RequestId requestId = AddRequestPromise(promise, aRv);
 
-  unused << mActor->SendKeys(requestId, request, params);
+  unused << mActor->SendKeys(requestId, request.SendAsRequestOrVoid(), params);
 
   return promise.forget();
 }
 
 // static
 bool
 Cache::PrefEnabled(JSContext* aCx, JSObject* aObj)
 {
diff --git a/dom/cache/Cache.h b/dom/cache/Cache.h
--- a/dom/cache/Cache.h
+++ b/dom/cache/Cache.h
@@ -72,17 +72,17 @@ public:
          ErrorResult& aRv);
   already_AddRefed<Promise>
   Keys(const Optional<RequestOrUSVString>& aRequest,
        const CacheQueryOptions& aParams, ErrorResult& aRv);
 
   // binding methods
   static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
 
-  virtual nsISupports* GetParentObject() const;
+  nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
 
   // methods forwarded from CacheChild
   void ActorDestroy(mozilla::ipc::IProtocol* aActor);
   void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
                          const PCacheResponseOrVoid& aResponse);
   void RecvMatchAllResponse(RequestId aRequestId, nsresult aRv,
                             const nsTArray<PCacheResponse>& aResponses);
diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -5,16 +5,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStorage.h"
 
 #include "mozilla/unused.h"
 #include "mozilla/dom/CacheStorageBinding.h"
 #include "mozilla/dom/Promise.h"
 #include "mozilla/dom/Response.h"
+#include "mozilla/dom/cache/AutoUtils.h"
 #include "mozilla/dom/cache/Cache.h"
 #include "mozilla/dom/cache/CacheStorageChild.h"
 #include "mozilla/dom/cache/PCacheChild.h"
 #include "mozilla/dom/cache/ReadStream.h"
 #include "mozilla/dom/cache/TypeUtils.h"
 #include "mozilla/ipc/BackgroundChild.h"
 #include "mozilla/ipc/BackgroundUtils.h"
 #include "mozilla/ipc/PBackgroundChild.h"
@@ -527,30 +528,30 @@ CacheStorage::MaybeRunPendingRequests()
   for (uint32_t i = 0; i < mPendingRequests.Length(); ++i) {
     // Note, the entry can be modified below due to Request/Response body
     // being marked used.
     Entry& entry = mPendingRequests[i];
     RequestId requestId = entry.mRequestId;
     switch(entry.mOp) {
       case OP_MATCH:
       {
-        PCacheRequest request;
+        AutoChildRequest request(this);
         ErrorResult rv;
-        ToPCacheRequest(request, entry.mRequest, IgnoreBody,
-                        PassThroughReferrer, IgnoreInvalidScheme, rv);
+        request.Add(entry.mRequest, IgnoreBody, PassThroughReferrer,
+                    IgnoreInvalidScheme, rv);
         if (NS_WARN_IF(rv.Failed())) {
           nsRefPtr<Promise> promise = RemoveRequestPromise(requestId);
           promise->MaybeReject(rv);
           return;
         }
 
         PCacheQueryParams params;
         ToPCacheQueryParams(params, entry.mOptions);
 
-        unused << mActor->SendMatch(requestId, request, params);
+        unused << mActor->SendMatch(requestId, request.SendAsRequest(), params);
         break;
       }
       case OP_HAS:
         unused << mActor->SendHas(requestId, entry.mKey);
         break;
       case OP_OPEN:
         unused << mActor->SendOpen(requestId, entry.mKey);
         break;
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -65,17 +65,17 @@ public:
   already_AddRefed<Promise> Has(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Open(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Delete(const nsAString& aKey, ErrorResult& aRv);
   already_AddRefed<Promise> Keys(ErrorResult& aRv);
 
   // binding methods
   static bool PrefEnabled(JSContext* aCx, JSObject* aObj);
 
-  virtual nsISupports* GetParentObject() const;
+  nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
 
   // nsIIPCbackgroundChildCreateCallback methods
   virtual void ActorCreated(PBackgroundChild* aActor) MOZ_OVERRIDE;
   virtual void ActorFailed() MOZ_OVERRIDE;
 
   // Methods forwarded from CacheStorageChild
   void ActorDestroy(mozilla::ipc::IProtocol* aActor);
