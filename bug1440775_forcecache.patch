# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  eb3e08654dba4369cebf341c9c248e06c7ad46a1
Bug 1440775 Make fetch API force-cache and only-if-cached use VALIDATE_NEVER instead of LOAD_FROM_CACHE. r=mayhemer

diff --git a/netwerk/protocol/http/HttpBaseChannel.cpp b/netwerk/protocol/http/HttpBaseChannel.cpp
--- a/netwerk/protocol/http/HttpBaseChannel.cpp
+++ b/netwerk/protocol/http/HttpBaseChannel.cpp
@@ -2850,20 +2850,20 @@ HttpBaseChannel::GetFetchCacheMode(uint3
 
   // Otherwise try to guess an appropriate cache mode from the load flags.
   if (ContainsAllFlags(mLoadFlags, INHIBIT_CACHING | LOAD_BYPASS_CACHE)) {
     *aFetchCacheMode = nsIHttpChannelInternal::FETCH_CACHE_MODE_NO_STORE;
   } else if (ContainsAllFlags(mLoadFlags, LOAD_BYPASS_CACHE)) {
     *aFetchCacheMode = nsIHttpChannelInternal::FETCH_CACHE_MODE_RELOAD;
   } else if (ContainsAllFlags(mLoadFlags, VALIDATE_ALWAYS)) {
     *aFetchCacheMode = nsIHttpChannelInternal::FETCH_CACHE_MODE_NO_CACHE;
-  } else if (ContainsAllFlags(mLoadFlags, LOAD_FROM_CACHE |
+  } else if (ContainsAllFlags(mLoadFlags, VALIDATE_NEVER |
                                           nsICachingChannel::LOAD_ONLY_FROM_CACHE)) {
     *aFetchCacheMode = nsIHttpChannelInternal::FETCH_CACHE_MODE_ONLY_IF_CACHED;
-  } else if (ContainsAllFlags(mLoadFlags, LOAD_FROM_CACHE)) {
+  } else if (ContainsAllFlags(mLoadFlags, VALIDATE_NEVER)) {
     *aFetchCacheMode = nsIHttpChannelInternal::FETCH_CACHE_MODE_FORCE_CACHE;
   } else {
     *aFetchCacheMode = nsIHttpChannelInternal::FETCH_CACHE_MODE_DEFAULT;
   }
 
   return NS_OK;
 }
 
@@ -2904,26 +2904,26 @@ HttpBaseChannel::SetFetchCacheMode(uint3
     SetCacheFlags(mLoadFlags, LOAD_BYPASS_CACHE);
     break;
   case nsIHttpChannelInternal::FETCH_CACHE_MODE_NO_CACHE:
     // no-cache means always validate what's in the cache.
     SetCacheFlags(mLoadFlags, VALIDATE_ALWAYS);
     break;
   case nsIHttpChannelInternal::FETCH_CACHE_MODE_FORCE_CACHE:
     // force-cache means don't validate unless if the response would vary.
-    SetCacheFlags(mLoadFlags, LOAD_FROM_CACHE);
+    SetCacheFlags(mLoadFlags, VALIDATE_NEVER);
     break;
   case nsIHttpChannelInternal::FETCH_CACHE_MODE_ONLY_IF_CACHED:
     // only-if-cached means only from cache, no network, no validation, generate
     // a network error if the document was't in the cache.
     // The privacy implications of these flags (making it fast/easy to check if
     // the user has things in their cache without any network traffic side
     // effects) are addressed in the Request constructor which enforces/requires
     // same-origin request mode.
-    SetCacheFlags(mLoadFlags, LOAD_FROM_CACHE |
+    SetCacheFlags(mLoadFlags, VALIDATE_NEVER |
                               nsICachingChannel::LOAD_ONLY_FROM_CACHE);
     break;
   }
 
 #ifdef MOZ_DIAGNOSTIC_ASSERT_ENABLED
   uint32_t finalMode = 0;
   MOZ_ALWAYS_SUCCEEDS(GetFetchCacheMode(&finalMode));
   MOZ_DIAGNOSTIC_ASSERT(finalMode == aFetchCacheMode);
