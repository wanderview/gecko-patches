# HG changeset patch
# Parent 91845eda5e66814bd37300ab9e04a5893f56a1df
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 007 CacheStreamControl(Child|Parent) issues and remove CacheStreamControlListener

diff --git a/dom/cache/CacheStreamControlChild.cpp b/dom/cache/CacheStreamControlChild.cpp
--- a/dom/cache/CacheStreamControlChild.cpp
+++ b/dom/cache/CacheStreamControlChild.cpp
@@ -1,80 +1,94 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStreamControlChild.h"
 
+#include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
-#include "mozilla/dom/cache/CacheStreamControlListener.h"
+#include "mozilla/dom/cache/ReadStream.h"
+#include "nsISupportsImpl.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-using mozilla::unused;
-
 CacheStreamControlChild::CacheStreamControlChild()
 {
+  MOZ_COUNT_CTOR(cache::CacheStreamControlChild);
 }
 
 CacheStreamControlChild::~CacheStreamControlChild()
 {
+  MOZ_COUNT_DTOR(cache::CacheStreamControlChild);
 }
 
 void
-CacheStreamControlChild::AddListener(CacheStreamControlListener* aListener)
+CacheStreamControlChild::AddListener(ReadStream* aListener)
 {
   MOZ_ASSERT(aListener);
+  MOZ_ASSERT(!mListeners.Contains(aListener));
   mListeners.AppendElement(aListener);
 }
 
 void
-CacheStreamControlChild::RemoveListener(CacheStreamControlListener* aListener)
+CacheStreamControlChild::RemoveListener(ReadStream* aListener)
 {
   MOZ_ASSERT(aListener);
-  mListeners.RemoveElement(aListener);
+  DebugOnly<bool> removed = mListeners.RemoveElement(aListener);
+  MOZ_ASSERT(removed);
 }
 
 void
 CacheStreamControlChild::NoteClosed(const nsID& aId)
 {
   unused << SendNoteClosed(aId);
 }
 
 void
 CacheStreamControlChild::ActorDestroy(ActorDestroyReason aReason)
 {
+  // Note, we cannot trigger IPC traffic here.  So use
+  // CloseStreamWithoutReporting().  This also means we don't need a defensive
+  // copy.
   for (uint32_t i = 0; i < mListeners.Length(); ++i) {
     mListeners[i]->CloseStreamWithoutReporting();
   }
+  mListeners.Clear();
 }
 
 bool
 CacheStreamControlChild::RecvClose(const nsID& aId)
 {
+  DebugOnly<uint32_t> closedCount = 0;
+
   // defensive copy of list since may be modified as we close streams
-  nsTArray<CacheStreamControlListener*> listeners(mListeners);
+  nsTArray<ReadStream*> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     // note, multiple streams may exist for same ID
     if (listeners[i]->MatchId(aId)) {
       listeners[i]->CloseStream();
+      closedCount += 1;
     }
   }
+
+  MOZ_ASSERT(closedCount > 0);
+
   return true;
 }
 
 bool
 CacheStreamControlChild::RecvCloseAll()
 {
   // defensive copy of list since may be modified as we close streams
-  nsTArray<CacheStreamControlListener*> listeners(mListeners);
+  nsTArray<ReadStream*> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     listeners[i]->CloseStream();
   }
   return true;
 }
 
 } // namespace cache
 } // namespace dom
diff --git a/dom/cache/CacheStreamControlChild.h b/dom/cache/CacheStreamControlChild.h
--- a/dom/cache/CacheStreamControlChild.h
+++ b/dom/cache/CacheStreamControlChild.h
@@ -9,35 +9,35 @@
 
 #include "mozilla/dom/cache/PCacheStreamControlChild.h"
 #include "nsTArray.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-class CacheStreamControlListener;
+class ReadStream;
 
-class CacheStreamControlChild : public PCacheStreamControlChild
+class CacheStreamControlChild MOZ_FINAL : public PCacheStreamControlChild
 {
 public:
   CacheStreamControlChild();
-  virtual ~CacheStreamControlChild();
+  ~CacheStreamControlChild();
 
-  void AddListener(CacheStreamControlListener* aListener);
-  void RemoveListener(CacheStreamControlListener* aListener);
+  void AddListener(ReadStream* aListener);
+  void RemoveListener(ReadStream* aListener);
 
   void NoteClosed(const nsID& aId);
 
   // PCacheStreamControlChild methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvClose(const nsID& aId) MOZ_OVERRIDE;
   virtual bool RecvCloseAll() MOZ_OVERRIDE;
 
 private:
-  nsTArray<CacheStreamControlListener*> mListeners;
+  nsTArray<ReadStream*> mListeners;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_CacheStreamControlChild_h
diff --git a/dom/cache/CacheStreamControlListener.h b/dom/cache/CacheStreamControlListener.h
deleted file mode 100644
--- a/dom/cache/CacheStreamControlListener.h
+++ /dev/null
@@ -1,29 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=8 sts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#ifndef mozilla_dom_cache_CacheStreamControlListener_h
-#define mozilla_dom_cache_CacheStreamControlListener_h
-
-struct nsID;
-
-namespace mozilla {
-namespace dom {
-namespace cache {
-
-class CacheStreamControlListener
-{
-public:
-  virtual ~CacheStreamControlListener() { }
-  virtual void CloseStream()=0;
-  virtual void CloseStreamWithoutReporting()=0;
-  virtual bool MatchId(const nsID& aId)=0;
-};
-
-} // namespace cache
-} // namespace dom
-} // namespace mozilla
-
-#endif // mozilla_dom_cache_CacheStreamControlListener_h
diff --git a/dom/cache/CacheStreamControlParent.cpp b/dom/cache/CacheStreamControlParent.cpp
--- a/dom/cache/CacheStreamControlParent.cpp
+++ b/dom/cache/CacheStreamControlParent.cpp
@@ -1,46 +1,50 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStreamControlParent.h"
 
+#include "mozilla/DebugOnly.h"
 #include "mozilla/unused.h"
-#include "mozilla/dom/cache/CacheStreamControlListener.h"
+#include "mozilla/dom/cache/ReadStream.h"
+#include "nsISupportsImpl.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-using mozilla::unused;
-
 CacheStreamControlParent::CacheStreamControlParent()
 {
+  MOZ_COUNT_CTOR(cache::CacheStreamControlParent);
 }
 
 CacheStreamControlParent::~CacheStreamControlParent()
 {
   MOZ_ASSERT(!mStreamList);
+  MOZ_COUNT_DTOR(cache::CacheStreamControlParent);
 }
 
 void
-CacheStreamControlParent::AddListener(CacheStreamControlListener* aListener)
+CacheStreamControlParent::AddListener(ReadStream* aListener)
 {
   MOZ_ASSERT(aListener);
+  MOZ_ASSERT(!mListeners.Contains(aListener));
   mListeners.AppendElement(aListener);
 }
 
 void
-CacheStreamControlParent::RemoveListener(CacheStreamControlListener* aListener)
+CacheStreamControlParent::RemoveListener(ReadStream* aListener)
 {
   MOZ_ASSERT(aListener);
-  mListeners.RemoveElement(aListener);
+  DebugOnly<bool> removed = mListeners.RemoveElement(aListener);
+  MOZ_ASSERT(removed);
 }
 
 void
 CacheStreamControlParent::ActorDestroy(ActorDestroyReason aReason)
 {
   MOZ_ASSERT(mStreamList);
   for (uint32_t i = 0; i < mListeners.Length(); ++i) {
     mListeners[i]->CloseStreamWithoutReporting();
@@ -84,30 +88,30 @@ CacheStreamControlParent::Shutdown()
 {
   unused << Send__delete__(this);
 }
 
 void
 CacheStreamControlParent::NotifyClose(const nsID& aId)
 {
   // defensive copy of list since may be modified as we close streams
-  nsTArray<CacheStreamControlListener*> listeners(mListeners);
+  nsTArray<ReadStream*> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     // note, multiple streams may exist for same ID
     if (listeners[i]->MatchId(aId)) {
       listeners[i]->CloseStream();
     }
   }
 }
 
 void
 CacheStreamControlParent::NotifyCloseAll()
 {
   // defensive copy of list since may be modified as we close streams
-  nsTArray<CacheStreamControlListener*> listeners(mListeners);
+  nsTArray<ReadStream*> listeners(mListeners);
   for (uint32_t i = 0; i < listeners.Length(); ++i) {
     listeners[i]->CloseStream();
   }
 }
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/CacheStreamControlParent.h b/dom/cache/CacheStreamControlParent.h
--- a/dom/cache/CacheStreamControlParent.h
+++ b/dom/cache/CacheStreamControlParent.h
@@ -8,42 +8,46 @@
 #define mozilla_dom_cache_CacheStreamControlParent_h
 
 #include "mozilla/dom/cache/Manager.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-class CacheStreamControlListener;
+class ReadStream;
 
 class CacheStreamControlParent : public Manager::StreamControl
 {
 public:
   CacheStreamControlParent();
   ~CacheStreamControlParent();
 
-  void AddListener(CacheStreamControlListener* aListener);
-  void RemoveListener(CacheStreamControlListener* aListener);
+  void AddListener(ReadStream* aListener);
+  void RemoveListener(ReadStream* aListener);
 
   // PCacheStreamControlParent methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvNoteClosed(const nsID& aId) MOZ_OVERRIDE;
 
   // Manager::StreamControl methods
   virtual void SetStreamList(Manager::StreamList* aStreamList) MOZ_OVERRIDE;
   virtual void Close(const nsID& aId) MOZ_OVERRIDE;
   virtual void CloseAll() MOZ_OVERRIDE;
   virtual void Shutdown() MOZ_OVERRIDE;
 
 private:
   void NotifyClose(const nsID& aId);
   void NotifyCloseAll();
 
+  // Cycle with StreamList via a weak-ref to us.  Cleanup occurs when the actor
+  // is deleted by the PBackground manager.  ActorDestroy() then calls
+  // StreamList::RemoveStreamControl() to clear the weak ref.
   nsRefPtr<Manager::StreamList> mStreamList;
-  nsTArray<CacheStreamControlListener*> mListeners;
+
+  nsTArray<ReadStream*> mListeners;
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_CacheStreamControlParent_h
diff --git a/dom/cache/ReadStream.cpp b/dom/cache/ReadStream.cpp
--- a/dom/cache/ReadStream.cpp
+++ b/dom/cache/ReadStream.cpp
@@ -351,17 +351,17 @@ ReadStream::CloseStream()
 
 void
 ReadStream::CloseStreamWithoutReporting()
 {
   Forget();
 }
 
 bool
-ReadStream::MatchId(const nsID& aId)
+ReadStream::MatchId(const nsID& aId) const
 {
   return mId.Equals(aId);
 }
 
 ReadStream::ReadStream(const nsID& aId, nsIInputStream* aStream)
   : mId(aId)
   , mStream(aStream)
   , mSnappyStream(new SnappyUncompressInputStream(aStream))
diff --git a/dom/cache/ReadStream.h b/dom/cache/ReadStream.h
--- a/dom/cache/ReadStream.h
+++ b/dom/cache/ReadStream.h
@@ -2,17 +2,16 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_cache_ReadStream_h
 #define mozilla_dom_cache_ReadStream_h
 
-#include "mozilla/dom/cache/CacheStreamControlListener.h"
 #include "mozilla/ipc/FileDescriptor.h"
 #include "nsCOMPtr.h"
 #include "nsID.h"
 #include "nsIInputStream.h"
 #include "nsISupportsImpl.h"
 
 class nsIThread;
 template<class T> class nsTArray;
@@ -26,36 +25,35 @@ class PCacheReadStreamOrVoid;
 class PCacheStreamControlParent;
 
 // IID for the dom::cache::ReadStream interface
 #define NS_DOM_CACHE_IID \
 {0x8e5da7c9, 0x0940, 0x4f1d, \
   {0x97, 0x25, 0x5c, 0x59, 0x38, 0xdd, 0xb9, 0x9f}}
 
 class ReadStream : public nsIInputStream
-                 , public CacheStreamControlListener
 {
 public:
   static already_AddRefed<ReadStream>
   Create(const PCacheReadStreamOrVoid& aReadStreamOrVoid);
 
   static already_AddRefed<ReadStream>
   Create(const PCacheReadStream& aReadStream);
 
   static already_AddRefed<ReadStream>
   Create(PCacheStreamControlParent* aControl, const nsID& aId,
          nsIInputStream* aStream);
 
   void Serialize(PCacheReadStreamOrVoid* aReadStreamOut);
   void Serialize(PCacheReadStream* aReadStreamOut);
 
-  // CacheStreamControlListener methods
-  virtual void CloseStream() MOZ_OVERRIDE;
-  virtual void CloseStreamWithoutReporting() MOZ_OVERRIDE;
-  virtual bool MatchId(const nsID& aId) MOZ_OVERRIDE;
+  // methods called from the child and parent CacheStreamControl actors
+  virtual void CloseStream();
+  virtual void CloseStreamWithoutReporting();
+  virtual bool MatchId(const nsID& aId) const;
 
 protected:
   ReadStream(const nsID& aId, nsIInputStream* aStream);
   virtual ~ReadStream();
 
   void NoteClosed();
   void Forget();
 
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -8,17 +8,16 @@ EXPORTS.mozilla.dom.cache += [
     'Action.h',
     'Cache.h',
     'CacheChild.h',
     'CacheParent.h',
     'CacheStorage.h',
     'CacheStorageChild.h',
     'CacheStorageParent.h',
     'CacheStreamControlChild.h',
-    'CacheStreamControlListener.h',
     'CacheStreamControlParent.h',
     'Context.h',
     'DBAction.h',
     'DBSchema.h',
     'FetchPut.h',
     'FileUtils.h',
     'IPCUtils.h',
     'Manager.h',
