# HG changeset patch
# Parent 9da193279d12cdfd1b870ea69c696d7e95f7f19c
# User Ben Kelly <ben@wanderview.com>
Bug 1027256 P1 Fix SetStringData() to exclude ByteString and otherwise use real type name. r=bz

diff --git a/dom/bindings/Codegen.py b/dom/bindings/Codegen.py
--- a/dom/bindings/Codegen.py
+++ b/dom/bindings/Codegen.py
@@ -8193,23 +8193,26 @@ class CGUnionStruct(CGThing):
                 methods.append(ClassMethod(
                     "SetAs" + vars["name"],
                     vars["structType"] + "&",
                     vars["ctorArgList"],
                     bodyInHeader=not self.ownsMembers,
                     body=body % uninit))
                 if self.ownsMembers:
                     methods.append(vars["setter"])
-                    if t.isString():
+                    # Provide a SetStringData() method to support string defaults.
+                    # Exclude ByteString here because it does not support defaults
+                    # and only supports narrow nsCString.
+                    if t.isString() and not t.isByteString():
                         methods.append(
                             ClassMethod("SetStringData", "void",
                                         [Argument("const nsString::char_type*", "aData"),
                                          Argument("nsString::size_type", "aLength")],
                                         inline=True, bodyInHeader=True,
-                                        body="RawSetAsString().Assign(aData, aLength);\n"))
+                                        body="RawSetAs%s().Assign(aData, aLength);\n" % t.name))
 
             body = fill(
                 """
                 MOZ_ASSERT(Is${name}(), "Wrong type!");
                 mValue.m${name}.Destroy();
                 mType = eUninitialized;
                 """,
                 **vars)
@@ -8429,23 +8432,26 @@ class CGUnionConversionStruct(CGThing):
                     """,
                     **vars)
                 methods.append(ClassMethod("RawSetAs" + vars["name"],
                                            vars["structType"] + "&",
                                            vars["ctorArgList"],
                                            bodyInHeader=True,
                                            body=body,
                                            visibility="private"))
-                if t.isString():
+                # Provide a SetStringData() method to support string defaults.
+                # Exclude ByteString here because it does not support defaults
+                # and only supports narrow nsCString.
+                if t.isString() and not t.isByteString():
                     methods.append(
                         ClassMethod("SetStringData", "void",
                                     [Argument("const nsDependentString::char_type*", "aData"),
                                      Argument("nsDependentString::size_type", "aLength")],
                                     inline=True, bodyInHeader=True,
-                                    body="RawSetAsString().SetData(aData, aLength);\n"))
+                                    body="RawSetAs%s().SetData(aData, aLength);\n" % t.name))
 
             if vars["holderType"] is not None:
                 members.append(ClassMember("m%sHolder" % vars["name"],
                                            vars["holderType"]))
 
         return CGClass(structName + "Argument",
                        members=members,
                        constructors=[ctor],
