# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  52495fb9322fe053207ba3c84a7fd17242eedfbe
Bug 1204254 P14 Make test_devtools_serviceworker_interception.html expect synthesized responseStart/End times. r=bgrins

diff --git a/dom/workers/test/serviceworkers/test_devtools_serviceworker_interception.html b/dom/workers/test/serviceworkers/test_devtools_serviceworker_interception.html
--- a/dom/workers/test/serviceworkers/test_devtools_serviceworker_interception.html
+++ b/dom/workers/test/serviceworkers/test_devtools_serviceworker_interception.html
@@ -104,41 +104,48 @@ function fetchAndCheckTimedChannel(aWind
     // Check service worker related timings.
     var serviceWorkerTimings = [{start: tc.launchServiceWorkerStartTime,
                                  end:   tc.launchServiceWorkerEndTime},
                                 {start: tc.dispatchFetchEventStartTime,
                                  end:   tc.dispatchFetchEventEndTime},
                                 {start: tc.handleFetchEventStartTime,
                                  end:   tc.handleFetchEventEndTime}];
     if (aIntercepted) {
+      // These are synthesized network timings in order
+      // to reflect the time it took to synthesize
+      // the response body.
+      serviceWorkerTimings.push({start: tc.responseStartTime,
+                                 end:   tc.responseEndTime});
+
       serviceWorkerTimings.reduce((aPreviousTimings, aCurrentTimings) => {
         ok(aPreviousTimings.start <= aCurrentTimings.start,
            "Start time order check.");
         ok(aPreviousTimings.end <= aCurrentTimings.end,
            "End time order check.");
         ok(aCurrentTimings.start <= aCurrentTimings.end,
            "Start time should be smaller than end time.");
         return aCurrentTimings;
       });
     } else {
       serviceWorkerTimings.forEach(aTimings => {
         is(aTimings.start, 0, "SW timings should be 0.");
         is(aTimings.end, 0, "SW timings should be 0.");
       });
     }
 
-    // Check network related timings.
+    // Check other network related timings.  These are not explicitly synthesized
+    // by the service worker.
     var networkTimings = [tc.domainLookupStartTime,
-                          tc.domainLookupEndTime,
-                          tc.connectStartTime,
-                          tc.connectEndTime,
-                          tc.requestStartTime,
-                          tc.responseStartTime,
-                          tc.responseEndTime];
+                                 tc.domainLookupEndTime,
+                                 tc.connectStartTime,
+                                 tc.connectEndTime,
+                                 tc.requestStartTime];
     if (aFetch) {
+      networkTimings.push(tc.responseStartTime);
+      networkTimings.push(tc.responseEndTime);
       networkTimings.reduce((aPreviousTiming, aCurrentTiming) => {
         ok(aPreviousTiming <= aCurrentTiming, "Checking network timings");
         return aCurrentTiming;
       });
     } else {
       networkTimings.forEach(aTiming => is(aTiming, 0,
                                            "Network timings should be 0."));
     }
