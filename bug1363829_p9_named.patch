# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  c2b89d6bf15979cd6fde31f846dbd0da00c3b570
Bug 1363829 P9 Make TimeoutExecutor implement nsINamed. r=ehsan

diff --git a/dom/base/TimeoutExecutor.cpp b/dom/base/TimeoutExecutor.cpp
--- a/dom/base/TimeoutExecutor.cpp
+++ b/dom/base/TimeoutExecutor.cpp
@@ -4,17 +4,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "TimeoutExecutor.h"
 
 namespace mozilla {
 namespace dom {
 
-NS_IMPL_ISUPPORTS(TimeoutExecutor, nsIRunnable, nsITimerCallback)
+NS_IMPL_ISUPPORTS(TimeoutExecutor, nsIRunnable, nsITimerCallback, nsINamed)
 
 TimeoutExecutor::~TimeoutExecutor()
 {
   // The TimeoutManager should keep the Executor alive until its destroyed,
   // and then call Shutdown() explicitly.
   MOZ_DIAGNOSTIC_ASSERT(mMode == Mode::Shutdown);
   MOZ_DIAGNOSTIC_ASSERT(!mOwner);
   MOZ_DIAGNOSTIC_ASSERT(!mTimer);
@@ -184,10 +184,23 @@ TimeoutExecutor::Run()
 
 NS_IMETHODIMP
 TimeoutExecutor::Notify(nsITimer* aTimer)
 {
   MaybeExecute();
   return NS_OK;
 }
 
+NS_IMETHODIMP
+TimeoutExecutor::GetName(nsACString& aNameOut)
+{
+  aNameOut.AssignLiteral("TimeoutExecutor Runnable");
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+TimeoutExecutor::SetName(const char* aName)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/base/TimeoutExecutor.h b/dom/base/TimeoutExecutor.h
--- a/dom/base/TimeoutExecutor.h
+++ b/dom/base/TimeoutExecutor.h
@@ -4,22 +4,24 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_timeoutexecutor_h
 #define mozilla_dom_timeoutexecutor_h
 
 #include "nsIRunnable.h"
 #include "nsITimer.h"
+#include "nsINamed.h"
 
 namespace mozilla {
 namespace dom {
 
 class TimeoutExecutor final : public nsIRunnable
                             , public nsITimerCallback
+                            , public nsINamed
 {
   TimeoutManager* mOwner;
   nsCOMPtr<nsITimer> mTimer;
   TimeStamp mDeadline;
   const TimeDuration mFlexTime;
 
   enum class Mode
   {
@@ -58,14 +60,15 @@ public:
   MaybeSchedule(const TimeStamp& aDeadline);
 
   void
   Cancel();
 
   NS_DECL_ISUPPORTS
   NS_DECL_NSIRUNNABLE
   NS_DECL_NSITIMERCALLBACK
+  NS_DECL_NSINAMED
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_timeoutexecutor_h
