# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  f3deaa13e9aef26243e6fa9a833752419fc42015
Bug 1459209 P14 Propogate registration state changes back from the parent to the child. r=baku

diff --git a/dom/serviceworkers/PServiceWorkerRegistration.ipdl b/dom/serviceworkers/PServiceWorkerRegistration.ipdl
--- a/dom/serviceworkers/PServiceWorkerRegistration.ipdl
+++ b/dom/serviceworkers/PServiceWorkerRegistration.ipdl
@@ -18,12 +18,13 @@ parent:
 
   async Unregister() returns (bool aSuccess, CopyableErrorResult aRv);
   async Update() returns (IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult aResult);
 
 child:
   async __delete__();
 
   async UpdateFound();
+  async UpdateState(IPCServiceWorkerRegistrationDescriptor aDescriptor);
 };
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
--- a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.cpp
@@ -164,10 +164,18 @@ RemoteServiceWorkerRegistrationImpl::Rev
 void
 RemoteServiceWorkerRegistrationImpl::UpdateFound()
 {
   if (mOuter) {
     mOuter->DispatchTrustedEvent(NS_LITERAL_STRING("updatefound"));
   }
 }
 
+void
+RemoteServiceWorkerRegistrationImpl::UpdateState(const ServiceWorkerRegistrationDescriptor& aDescriptor)
+{
+  if (mOuter) {
+    mOuter->UpdateState(aDescriptor);
+  }
+}
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
--- a/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
+++ b/dom/serviceworkers/RemoteServiceWorkerRegistrationImpl.h
@@ -42,15 +42,18 @@ public:
   explicit RemoteServiceWorkerRegistrationImpl(const ServiceWorkerRegistrationDescriptor& aDescriptor);
 
   void
   RevokeActor(ServiceWorkerRegistrationChild* aActor);
 
   void
   UpdateFound();
 
+  void
+  UpdateState(const ServiceWorkerRegistrationDescriptor& aDescriptor);
+
   NS_INLINE_DECL_REFCOUNTING(RemoteServiceWorkerRegistrationImpl, override)
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_remoteserviceworkerregistrationimpl_h__
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp b/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationChild.cpp
@@ -6,16 +6,18 @@
 
 #include "ServiceWorkerRegistrationChild.h"
 
 #include "RemoteServiceWorkerRegistrationImpl.h"
 
 namespace mozilla {
 namespace dom {
 
+using mozilla::ipc::IPCResult;
+
 void
 ServiceWorkerRegistrationChild::ActorDestroy(ActorDestroyReason aReason)
 {
   if (mWorkerHolderToken) {
     mWorkerHolderToken->RemoveListener(this);
     mWorkerHolderToken = nullptr;
   }
 
@@ -29,16 +31,25 @@ IPCResult
 ServiceWorkerRegistrationChild::RecvUpdateFound()
 {
   if (mOwner) {
     mOwner->UpdateFound();
   }
   return IPC_OK();
 }
 
+IPCResult
+ServiceWorkerRegistrationChild::RecvUpdateState(const IPCServiceWorkerRegistrationDescriptor& aDescriptor)
+{
+  if (mOwner) {
+    mOwner->UpdateState(ServiceWorkerRegistrationDescriptor(aDescriptor));
+  }
+  return IPC_OK();
+}
+
 void
 ServiceWorkerRegistrationChild::WorkerShuttingDown()
 {
   MaybeStartTeardown();
 }
 
 ServiceWorkerRegistrationChild::ServiceWorkerRegistrationChild(WorkerHolderToken* aWorkerHolderToken)
   : mWorkerHolderToken(aWorkerHolderToken)
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationChild.h b/dom/serviceworkers/ServiceWorkerRegistrationChild.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationChild.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationChild.h
@@ -24,16 +24,19 @@ class ServiceWorkerRegistrationChild fin
 
   // PServiceWorkerRegistrationChild
   void
   ActorDestroy(ActorDestroyReason aReason) override;
 
   mozilla::ipc::IPCResult
   RecvUpdateFound() override;
 
+  mozilla::ipc::IPCResult
+  RecvUpdateState(const IPCServiceWorkerRegistrationDescriptor& aDescriptor) override;
+
   // WorkerHolderToken::Listener
   void
   WorkerShuttingDown() override;
 
 public:
   explicit ServiceWorkerRegistrationChild(WorkerHolderToken* aWorkerHolderToken);
   ~ServiceWorkerRegistrationChild() = default;
 
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp b/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationProxy.cpp
@@ -44,17 +44,17 @@ ServiceWorkerRegistrationProxy::UpdateFo
 
 void
 ServiceWorkerRegistrationProxy::UpdateStateOnBGThread(const ServiceWorkerRegistrationDescriptor& aDescriptor)
 {
   AssertIsOnBackgroundThread();
   if (!mActor) {
     return;
   }
-  // TODO: send update
+  Unused << mActor->SendUpdateState(aDescriptor.ToIPC());
 }
 
 void
 ServiceWorkerRegistrationProxy::InitOnMainThread()
 {
   AssertIsOnMainThread();
 
   auto scopeExit = MakeScopeExit([&] {
