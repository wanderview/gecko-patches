# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  6cd9ae54235ae64415bf4fa9a7042cbbf9248e9a
try debug

diff --git a/dom/workers/test/serviceworkers/redirect_post.sjs b/dom/workers/test/serviceworkers/redirect_post.sjs
--- a/dom/workers/test/serviceworkers/redirect_post.sjs
+++ b/dom/workers/test/serviceworkers/redirect_post.sjs
@@ -18,16 +18,19 @@ function handleRequest(request, response
 
   var body = decodeURIComponent(
     escape(String.fromCharCode.apply(null, bodyBytes)));
 
   // coerce to a number
   var currentHop = ~~query.hop;
 
   var obj = JSON.parse(body);
+  dump('### ### redirect_post.sjs - currentHop: ' + currentHop +
+       ', hops: ' + obj.hops +
+       ', message length: ' + obj.message.length + '\n');
   if (currentHop < obj.hops) {
     var newURL = '/tests/dom/workers/test/serviceworkers/redirect_post.sjs?hop=' +
                  (1 + currentHop);
     response.setStatusLine(null, 307, 'redirect');
     response.setHeader('Location', newURL);
   }
 
   response.setHeader('Content-Type', 'application/json');
diff --git a/netwerk/protocol/http/HttpBaseChannel.cpp b/netwerk/protocol/http/HttpBaseChannel.cpp
--- a/netwerk/protocol/http/HttpBaseChannel.cpp
+++ b/netwerk/protocol/http/HttpBaseChannel.cpp
@@ -623,16 +623,17 @@ HttpBaseChannel::CloneUploadStream(nsIIn
 
 NS_IMETHODIMP
 HttpBaseChannel::ExplicitSetUploadStream(nsIInputStream *aStream,
                                        const nsACString &aContentType,
                                        int64_t aContentLength,
                                        const nsACString &aMethod,
                                        bool aStreamHasHeaders)
 {
+  printf_stderr("### ### ExplicitSetUploadStream() enter with %p\n", aStream);
   // Ensure stream is set and method is valid
   NS_ENSURE_TRUE(aStream, NS_ERROR_FAILURE);
 
   if (aContentLength < 0 && !aStreamHasHeaders) {
     nsresult rv = aStream->Available(reinterpret_cast<uint64_t*>(&aContentLength));
     if (NS_FAILED(rv) || aContentLength < 0) {
       NS_ERROR("unable to determine content length");
       return NS_ERROR_FAILURE;
@@ -649,16 +650,17 @@ HttpBaseChannel::ExplicitSetUploadStream
     SetRequestHeader(NS_LITERAL_CSTRING("Content-Length"), contentLengthStr,
                      false);
     SetRequestHeader(NS_LITERAL_CSTRING("Content-Type"), aContentType,
                      false);
   }
 
   mUploadStreamHasHeaders = aStreamHasHeaders;
   mUploadStream = aStream;
+  printf_stderr("### ### ExplicitSetUploadStream() succeeded for %p\n", mUploadStream.get());
   return NS_OK;
 }
 
 NS_IMETHODIMP
 HttpBaseChannel::GetUploadStreamHasHeaders(bool *hasHeaders)
 {
   NS_ENSURE_ARG(hasHeaders);
 
diff --git a/netwerk/protocol/http/HttpChannelChild.cpp b/netwerk/protocol/http/HttpChannelChild.cpp
--- a/netwerk/protocol/http/HttpChannelChild.cpp
+++ b/netwerk/protocol/http/HttpChannelChild.cpp
@@ -1630,16 +1630,21 @@ HttpChannelChild::ContinueAsyncOpen()
   SerializeURI(mDocumentURI, openArgs.doc());
   SerializeURI(mReferrer, openArgs.referrer());
   openArgs.referrerPolicy() = mReferrerPolicy;
   SerializeURI(mAPIRedirectToURI, openArgs.apiRedirectTo());
   openArgs.loadFlags() = mLoadFlags;
   openArgs.requestHeaders() = mClientSetRequestHeaders;
   openArgs.requestMethod() = mRequestHead.Method();
 
+  if (mUploadStream) {
+    printf_stderr("### ### HttpChannelChild::ContinueAsyncOpen() mUploadStream:%p\n",
+                  mUploadStream.get());
+  }
+
   // Clone the upload stream before passing across IPC and consuming it.
   // This is necessary to allow the upload stream to be set properly in
   // redirect callbacks in the child when stream rewinding is not supported.
   nsCOMPtr<nsIInputStream> uploadStream;
   if (NS_FAILED(NS_CloneInputStream(mUploadStream,
                                     getter_AddRefs(uploadStream)))) {
     uploadStream = mUploadStream;
   }
diff --git a/netwerk/protocol/http/nsHttpChannel.cpp b/netwerk/protocol/http/nsHttpChannel.cpp
--- a/netwerk/protocol/http/nsHttpChannel.cpp
+++ b/netwerk/protocol/http/nsHttpChannel.cpp
@@ -901,16 +901,21 @@ nsHttpChannel::SetupTransaction()
     NS_QueryNotificationCallbacks(mCallbacks,
                                   mLoadGroup,
                                   NS_GET_IID(nsIHttpPushListener),
                                   getter_AddRefs(pushListener));
     if (pushListener) {
         mCaps |= NS_HTTP_ONPUSH_LISTENER;
     }
 
+    if (mUploadStream) {
+      printf_stderr("### ### nsHttpChannel::SetupTransaction() mUploadStream:%p\n",
+                    mUploadStream.get());
+    }
+
     // If the upload stream supports cheap clones, then favor that approach
     // to reusing the stream instead of rewinding when a redirect is
     // encountered.  If cloning is not directly supported then just pass
     // the current upload stream and fallback to rewinding.
     nsCOMPtr<nsIInputStream> uploadStream;
     if (NS_FAILED(NS_CloneInputStream(mUploadStream,
                                       getter_AddRefs(uploadStream)))) {
       uploadStream = mUploadStream;
