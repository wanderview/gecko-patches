# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  d163f82127a3ff511e88bdd09fdd2ff511ed8f57

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -3436,16 +3436,25 @@ nsGlobalWindow::DispatchDOMWindowCreated
 
   // The event dispatching could possibly cause docshell destory, and
   // consequently cause mDoc to be set to nullptr by DropOuterWindowDocs(),
   // so check it again here.
   if (observerService && mDoc) {
     nsAutoString origin;
     nsIPrincipal* principal = mDoc->NodePrincipal();
     nsContentUtils::GetUTFOrigin(principal, origin);
+    {
+      nsAutoCString spec;
+      nsIURI* uri = mDoc->GetDocumentURI();
+      if (uri) {
+        uri->GetSpec(spec);
+      }
+      printf_stderr("### ### [%p] NotifyObservers() content-document-global-created for %s\n",
+                    this, spec.get());
+    }
     observerService->
       NotifyObservers(static_cast<nsIDOMWindow*>(this),
                       nsContentUtils::IsSystemPrincipal(principal) ?
                         "chrome-document-global-created" :
                         "content-document-global-created",
                       origin.get());
   }
 }
diff --git a/toolkit/components/extensions/ExtensionPolicyService.cpp b/toolkit/components/extensions/ExtensionPolicyService.cpp
--- a/toolkit/components/extensions/ExtensionPolicyService.cpp
+++ b/toolkit/components/extensions/ExtensionPolicyService.cpp
@@ -265,29 +265,34 @@ ExtensionPolicyService::CheckDocument(ns
 // way.
 void
 ExtensionPolicyService::CheckWindow(nsPIDOMWindowOuter* aWindow)
 {
   // We only care about non-initial document loads here. The initial
   // about:blank document will usually be re-used to load another document.
   nsCOMPtr<nsIDocument> doc = aWindow->GetExtantDoc();
   if (!doc || doc->IsInitialDocument()) {
+    if (doc && doc->IsInitialDocument()) {
+      printf_stderr("### ### ExtensionPolicyService::CheckWindow() skipping initial document\n");
+    }
     return;
   }
 
   nsCOMPtr<nsIURI> aboutBlank;
   NS_ENSURE_SUCCESS_VOID(NS_NewURI(getter_AddRefs(aboutBlank),
                                    "about:blank"));
 
   nsCOMPtr<nsIURI> uri = doc->GetDocumentURI();
   bool equal;
   if (NS_FAILED(uri->EqualsExceptRef(aboutBlank, &equal)) || !equal) {
     return;
   }
 
+  printf_stderr("### ### ExtensionPolicyService::CheckWindow() got about:blank\n");
+
   CheckContentScripts(aWindow, false);
 }
 
 void
 ExtensionPolicyService::CheckContentScripts(const DocInfo& aDocInfo, bool aIsPreload)
 {
   for (auto iter = mExtensions.Iter(); !iter.Done(); iter.Next()) {
     RefPtr<WebExtensionPolicy> policy = iter.Data();
