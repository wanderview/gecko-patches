# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  1cccadaf09be28a5eca7ba7f2c884d998deb5a5e

diff --git a/dom/workers/test/serviceworkers/openWindow_worker.js b/dom/workers/test/serviceworkers/openWindow_worker.js
--- a/dom/workers/test/serviceworkers/openWindow_worker.js
+++ b/dom/workers/test/serviceworkers/openWindow_worker.js
@@ -1,13 +1,13 @@
 // the worker won't shut down between events because we increased
 // the timeout values.
 var client;
 var window_count = 0;
-var expected_window_count = 7;
+var expected_window_count = 1;
 var resolve_got_all_windows = null;
 var got_all_windows = new Promise(function(res, rej) {
   resolve_got_all_windows = res;
 });
 
 // |expected_window_count| needs to be updated for every new call that's
 // expected to actually open a new window regardless of what |clients.openWindow|
 // returns.
@@ -52,36 +52,40 @@ function testForUrl(url, throwType, clie
 }
 
 onmessage = function(event) {
   if (event.data == "testNoPopup") {
     client = event.source;
 
     var results = [];
     var promises = [];
+    /*
     promises.push(testForUrl("about:blank", "TypeError", null, results));
     promises.push(testForUrl("http://example.com", "InvalidAccessError", null, results));
     promises.push(testForUrl("_._*`InvalidURL", "InvalidAccessError", null, results));
+    */
     event.waitUntil(Promise.all(promises).then(function(e) {
       client.postMessage(results);
     }));
   }
   if (event.data == "NEW_WINDOW") {
     window_count += 1;
     if (window_count == expected_window_count) {
       resolve_got_all_windows();
     }
   }
 
   if (event.data == "CHECK_NUMBER_OF_WINDOWS") {
     event.waitUntil(got_all_windows.then(function() {
       return clients.matchAll();
     }).then(function(cl) {
       event.source.postMessage({result: cl.length == expected_window_count,
-                                message: "The number of windows is correct."});
+                                message: "The number of windows is correct. " +
+                                         "expected " + expected_window_count +
+                                         ", got " + cl.length});
       for (i = 0; i < cl.length; i++) {
         cl[i].postMessage("CLOSE");
       }
     }));
   }
 }
 
 onnotificationclick = function(e) {
@@ -89,28 +93,30 @@ onnotificationclick = function(e) {
   var promises = [];
 
   var redirect = "http://mochi.test:8888/tests/dom/workers/test/serviceworkers/redirect.sjs?"
   var redirect_xorigin = "http://example.com/tests/dom/workers/test/serviceworkers/redirect.sjs?"
   var same_origin = "http://mochi.test:8888/tests/dom/workers/test/serviceworkers/open_window/client.html"
   var different_origin = "http://example.com/tests/dom/workers/test/serviceworkers/open_window/client.html"
 
 
-  promises.push(testForUrl("about:blank", "TypeError", null, results));
-  promises.push(testForUrl(different_origin, null, null, results));
+  //promises.push(testForUrl("about:blank", "TypeError", null, results));
+  //promises.push(testForUrl(different_origin, null, null, results));
   promises.push(testForUrl(same_origin, null, {url: same_origin}, results));
-  promises.push(testForUrl("open_window/client.html", null, {url: same_origin}, results));
+  //promises.push(testForUrl("open_window/client.html", null, {url: same_origin}, results));
 
   // redirect tests
+  /*
   promises.push(testForUrl(redirect + "open_window/client.html", null,
 			   {url: same_origin}, results));
   promises.push(testForUrl(redirect + different_origin, null, null, results));
 
   promises.push(testForUrl(redirect_xorigin + "open_window/client.html", null,
 			   null, results));
   promises.push(testForUrl(redirect_xorigin + same_origin, null,
 			   {url: same_origin}, results));
+  */
 
   e.waitUntil(Promise.all(promises).then(function(e) {
     client.postMessage(results);
   }));
 }
 
