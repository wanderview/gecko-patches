# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  e82f69d2e59e7813562d4952ce71f5e645c238f2

diff --git a/testing/mozbase/mozdebug/mozdebug/__init__.py b/testing/mozbase/mozdebug/mozdebug/__init__.py
--- a/testing/mozbase/mozdebug/mozdebug/__init__.py
+++ b/testing/mozbase/mozdebug/mozdebug/__init__.py
@@ -24,9 +24,9 @@ debugger-specific arguments:
   processArgs = [self.debuggerInfo.path] + self.debuggerInfo.args
   processArgs.append(debuggeePath)
 
   run_process(args, ...)
 
 """
 from __future__ import absolute_import
 
-from mozdebug import *
+from .mozdebug import *
diff --git a/testing/web-platform/meta/service-workers/service-worker/redirected-response.https.html.ini b/testing/web-platform/meta/service-workers/service-worker/redirected-response.https.html.ini
--- a/testing/web-platform/meta/service-workers/service-worker/redirected-response.https.html.ini
+++ b/testing/web-platform/meta/service-workers/service-worker/redirected-response.https.html.ini
@@ -1,17 +1,8 @@
 [redirected-response.https.html]
   type: testharness
   disabled:
     if debug and os == "win": https://bugzilla.mozilla.org/show_bug.cgi?id=1411528
-  expected:
-    if debug and not stylo and e10s and (os == "linux") and (version == "Ubuntu 16.04") and (processor == "x86") and (bits == 32): CRASH
-    if debug and not stylo and e10s and (os == "linux") and (version == "Ubuntu 16.04") and (processor == "x86_64") and (bits == 64): CRASH
-    if debug and stylo and e10s and (os == "win") and (version == "10.0.15063") and (processor == "x86_64") and (bits == 64): CRASH
-    if debug and stylo and e10s and (os == "linux") and (version == "Ubuntu 16.04") and (processor == "x86_64") and (bits == 64): CRASH
-    if debug and stylo and e10s and (os == "linux") and (version == "Ubuntu 16.04") and (processor == "x86") and (bits == 32): CRASH
-    if debug and not stylo and e10s and (os == "win") and (version == "10.0.15063") and (processor == "x86_64") and (bits == 64): CRASH
-    if debug and stylo and e10s and (os == "mac") and (version == "OS X 10.10.5") and (processor == "x86_64") and (bits == 64): CRASH
-    if debug and not stylo and e10s and (os == "mac") and (version == "OS X 10.10.5") and (processor == "x86_64") and (bits == 64): CRASH
   [mode: "follow", no mode change]
     expected: FAIL
 
 
diff --git a/testing/web-platform/tests/service-workers/service-worker/redirected-response.https.html b/testing/web-platform/tests/service-workers/service-worker/redirected-response.https.html
--- a/testing/web-platform/tests/service-workers/service-worker/redirected-response.https.html
+++ b/testing/web-platform/tests/service-workers/service-worker/redirected-response.https.html
@@ -105,16 +105,17 @@ promise_test(t => {
           frame = f;
           add_completion_callback(() => f.remove());
           return check_intercepted_urls(
               [host_info['HTTPS_ORIGIN'] + base_path() + SCOPE]);
         });
       return setup;
   }, 'initialize global state (service worker registration and caches)');
 
+/*
 // ===============================================================
 // Tests for requests that are out-of-scope of the service worker.
 // ===============================================================
 promise_test(t => setup_and_clean()
   .then(() => redirected_test({url: TARGET_URL,
                                fetch_option: {},
                                fetch_method: self.fetch,
                                expected_type: 'basic',
@@ -264,32 +265,34 @@ promise_test(t => setup_and_clean()
       return redirected_test({url: url,
                               fetch_option: {redirect: 'follow'},
                               fetch_method: frame.contentWindow.fetch,
                               expected_type: 'basic',
                               expected_redirected: true,
                               expected_intercepted_urls: [url, TARGET_URL]})
     }),
   'mode: "follow", generated redirect response');
+  */
 
 promise_test(t => setup_and_clean()
     .then(() => {
       const url = host_info['HTTPS_ORIGIN'] + base_path() +
                   'dummy?url=' + encodeURIComponent(TARGET_URL) +
                   '&original-redirect-mode=error&sw=gen';
       return promise_rejects(
           t, new TypeError(),
           frame.contentWindow.fetch(url, {redirect: 'error'}),
           'The generated redirect response from the service worker should ' +
           'be treated as an error when the redirect flag of request was' +
           ' \'error\'.')
         .then(() => check_intercepted_urls([url]));
     }),
   'mode: "error", generated redirect response');
 
+/*
 promise_test(t => setup_and_clean()
     .then(() => {
       const url = host_info['HTTPS_ORIGIN'] + base_path() +
                   'dummy?url=' + encodeURIComponent(TARGET_URL) +
                   '&original-redirect-mode=follow&sw=gen';
       return redirected_test({url: url,
                               fetch_option: {redirect: 'manual'},
                               fetch_method: frame.contentWindow.fetch,
@@ -340,9 +343,10 @@ promise_test(t => setup_and_clean()
           frame.contentWindow.fetch(urls[0], {redirect: 'follow'}),
           'Fetch should not follow the redirect response 21 times.')
         .then(() => {
           urls.pop();
           return check_intercepted_urls(urls)
         });
     }),
   'Fetch should not follow the redirect response 21 times.');
+  */
 </script>
diff --git a/testing/web-platform/tests/tools/wptrunner/wptrunner/wptcommandline.py b/testing/web-platform/tests/tools/wptrunner/wptrunner/wptcommandline.py
--- a/testing/web-platform/tests/tools/wptrunner/wptrunner/wptcommandline.py
+++ b/testing/web-platform/tests/tools/wptrunner/wptrunner/wptcommandline.py
@@ -1,12 +1,13 @@
 import argparse
 import ast
 import os
 import sys
+import mozdebug
 from collections import OrderedDict
 from distutils.spawn import find_executable
 
 import config
 import wpttest
 import formatters
 
 
