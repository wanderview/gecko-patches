# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  0100c16ba6172bf48204f353e87597c69482b34c

diff --git a/dom/cache/ReadStream.cpp b/dom/cache/ReadStream.cpp
--- a/dom/cache/ReadStream.cpp
+++ b/dom/cache/ReadStream.cpp
@@ -220,16 +220,17 @@ ReadStream::Inner::Inner(StreamControl* 
   , mAsyncOpenStarted(false)
   , mMutex("dom::cache::ReadStream")
   , mCondVar(mMutex, "dom::cache::ReadStream")
   , mStream(aStream)
   , mSnappyStream(aStream ? new SnappyUncompressInputStream(aStream) : nullptr)
 {
   MOZ_DIAGNOSTIC_ASSERT(mControl);
   mControl->AddReadStream(this);
+  printf_stderr("### ### [%p] ReadStream::Inner::%s opened with file stream %p\n", this, __func__, mStream.get());
 }
 
 void
 ReadStream::Inner::Serialize(CacheReadStreamOrVoid* aReadStreamOut,
                              nsTArray<UniquePtr<AutoIPCStream>>& aStreamCleanupList,
                              ErrorResult& aRv)
 {
   MOZ_ASSERT(mOwningEventTarget->IsOnCurrentThread());
@@ -301,16 +302,17 @@ ReadStream::Inner::HasEverBeenRead() con
 nsresult
 ReadStream::Inner::Close()
 {
   // stream ops can happen on any thread
   nsresult rv = NS_OK;
   {
     MutexAutoLock lock(mMutex);
     if (mSnappyStream) {
+      printf_stderr("### ### [%p] ReadStream::Inner::%s calling Close() on base stream\n", this, __func__);
       rv = mSnappyStream->Close();
     }
   }
   NoteClosed();
   return rv;
 }
 
 nsresult
@@ -398,16 +400,17 @@ ReadStream::Inner::IsNonBlocking(bool* a
   return NS_OK;
 }
 
 ReadStream::Inner::~Inner()
 {
   // Any thread
   MOZ_DIAGNOSTIC_ASSERT(mState == Closed);
   MOZ_DIAGNOSTIC_ASSERT(!mControl);
+  printf_stderr("### ### [%p] ReadStream::Inner::%s\n", this, __func__);
 }
 
 void
 ReadStream::Inner::NoteClosed()
 {
   // Any thread
   if (mState == Closed) {
     return;
