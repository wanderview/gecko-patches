# HG changeset patch
# Parent 95ab39269baf5785f583c2acadcf7a815f38f528
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 037 Fix MOZ_STACK_CLASS usage


diff --git a/dom/cache/AutoUtils.h b/dom/cache/AutoUtils.h
--- a/dom/cache/AutoUtils.h
+++ b/dom/cache/AutoUtils.h
@@ -39,128 +39,128 @@ class StreamList;
 // A collection of RAII-style helper classes to ensure that IPC
 // FileDescriptorSet actors are properly cleaned up.  The user of these actors
 // must manually either Forget() the Fds or Send__delete__() the actor
 // depending on if the descriptors were actually sent.
 //
 // Note, these should only be used when *sending* streams across IPC.  The
 // deserialization case is handled by creating a ReadStream object.
 
-class AutoChildBase MOZ_STACK_CLASS
+class MOZ_STACK_CLASS AutoChildBase
 {
 protected:
   typedef TypeUtils::BodyAction BodyAction;
   typedef TypeUtils::ReferrerAction ReferrerAction;
   typedef TypeUtils::SchemeAction SchemeAction;
 
   AutoChildBase(TypeUtils* aTypeUtils);
   virtual ~AutoChildBase() = 0;
 
   TypeUtils* mTypeUtils;
   bool mSent;
 };
 
-class AutoChildRequest MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
+class MOZ_STACK_CLASS AutoChildRequest MOZ_FINAL : public AutoChildBase
 {
 public:
   explicit AutoChildRequest(TypeUtils* aTypeUtils);
   ~AutoChildRequest();
 
   void Add(InternalRequest* aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
 
   const PCacheRequest& SendAsRequest();
   const PCacheRequestOrVoid& SendAsRequestOrVoid();
 
 private:
   PCacheRequestOrVoid mRequestOrVoid;
 };
 
-class AutoChildRequestList MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
+class MOZ_STACK_CLASS AutoChildRequestList MOZ_FINAL : public AutoChildBase
 {
 public:
   AutoChildRequestList(TypeUtils* aTypeUtils, uint32_t aCapacity);
   ~AutoChildRequestList();
 
   void Add(InternalRequest* aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
 
   const nsTArray<PCacheRequest>& SendAsRequestList();
 
 private:
   // Allocates ~5k inline in the stack-only class
   nsAutoTArray<PCacheRequest, 32> mRequestList;
 };
 
-class AutoChildRequestResponse MOZ_STACK_CLASS MOZ_FINAL : public AutoChildBase
+class MOZ_STACK_CLASS AutoChildRequestResponse MOZ_FINAL : public AutoChildBase
 {
 public:
   explicit AutoChildRequestResponse(TypeUtils* aTypeUtils);
   ~AutoChildRequestResponse();
 
   void Add(InternalRequest* aRequest, BodyAction aBodyAction,
            ReferrerAction aReferrerAction, SchemeAction aSchemeAction,
            ErrorResult& aRv);
   void Add(Response& aResponse, ErrorResult& aRv);
 
   const CacheRequestResponse& SendAsRequestResponse();
 
 private:
   CacheRequestResponse mRequestResponse;
 };
 
-class AutoParentBase MOZ_STACK_CLASS
+class MOZ_STACK_CLASS AutoParentBase
 {
 protected:
   explicit AutoParentBase(mozilla::ipc::PBackgroundParent* aManager);
   virtual ~AutoParentBase() = 0;
 
   void SerializeReadStream(const nsID& aId, StreamList* aStreamList,
                            PCacheReadStream* aReadStreamOut);
 
   mozilla::ipc::PBackgroundParent* mManager;
   CacheStreamControlParent* mStreamControl;
   bool mSent;
 };
 
-class AutoParentRequestList MOZ_STACK_CLASS MOZ_FINAL : public AutoParentBase
+class MOZ_STACK_CLASS AutoParentRequestList MOZ_FINAL : public AutoParentBase
 {
 public:
   AutoParentRequestList(mozilla::ipc::PBackgroundParent* aManager,
                         uint32_t aCapacity);
   ~AutoParentRequestList();
 
   void Add(const SavedRequest& aSavedRequest, StreamList* aStreamList);
 
   const nsTArray<PCacheRequest>& SendAsRequestList();
 
 private:
   // Allocates ~5k inline in the stack-only class
   nsAutoTArray<PCacheRequest, 32> mRequestList;
 };
 
-class AutoParentResponseList MOZ_STACK_CLASS MOZ_FINAL : public AutoParentBase
+class MOZ_STACK_CLASS AutoParentResponseList MOZ_FINAL : public AutoParentBase
 {
 public:
   AutoParentResponseList(mozilla::ipc::PBackgroundParent* aManager,
                          uint32_t aCapacity);
   ~AutoParentResponseList();
 
   void Add(const SavedResponse& aSavedResponse, StreamList* aStreamList);
 
   const nsTArray<PCacheResponse>& SendAsResponseList();
 
 private:
   // Allocates ~4k inline in the stack-only class
   nsAutoTArray<PCacheResponse, 32> mResponseList;
 };
 
-class AutoParentResponseOrVoid MOZ_STACK_CLASS MOZ_FINAL : public AutoParentBase
+class MOZ_STACK_CLASS AutoParentResponseOrVoid MOZ_FINAL : public AutoParentBase
 {
 public:
   explicit AutoParentResponseOrVoid(mozilla::ipc::PBackgroundParent* aManager);
   ~AutoParentResponseOrVoid();
 
   void Add(const SavedResponse& aSavedResponse, StreamList* aStreamList);
 
   const PCacheResponseOrVoid& SendAsResponseOrVoid();
diff --git a/dom/cache/ManagerId.h b/dom/cache/ManagerId.h
--- a/dom/cache/ManagerId.h
+++ b/dom/cache/ManagerId.h
@@ -19,17 +19,17 @@ class nsIPrincipal;
 namespace mozilla {
 namespace dom {
 namespace cache {
 
 class ManagerId MOZ_FINAL
 {
 public:
   // nsTArray comparator that compares by value instead of pointer values.
-  class Comparator MOZ_STACK_CLASS MOZ_FINAL
+  class MOZ_STACK_CLASS Comparator MOZ_FINAL
   {
   public:
     bool Equals(ManagerId *aA, ManagerId* aB) const { return *aA == *aB; }
     bool LessThan(ManagerId *aA, ManagerId* aB) const { return *aA < *aB; }
   };
 
   // Main thread only
   static nsresult Create(nsIPrincipal* aPrincipal, ManagerId** aManagerIdOut);
