# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  87c745019518b1d6cd782534f2553721e5735657
Bug 1370025 P1 Better optimize the single mFiringIdStack case in IsInvalidFiringId(). r=ehsan

diff --git a/dom/base/TimeoutManager.cpp b/dom/base/TimeoutManager.cpp
--- a/dom/base/TimeoutManager.cpp
+++ b/dom/base/TimeoutManager.cpp
@@ -172,21 +172,24 @@ TimeoutManager::DestroyFiringId(uint32_t
 }
 
 bool
 TimeoutManager::IsInvalidFiringId(uint32_t aFiringId) const
 {
   // Check the most common ways to invalidate a firing id first.
   // These should be quite fast.
   if (aFiringId == InvalidFiringId ||
-      mFiringIdStack.IsEmpty() ||
-      (mFiringIdStack.Length() == 1 && mFiringIdStack[0] != aFiringId)) {
+      mFiringIdStack.IsEmpty()) {
     return true;
   }
 
+  if (mFiringIdStack.Length() == 1) {
+    return mFiringIdStack[0] != aFiringId;
+  }
+
   // Next do a range check on the first and last items in the stack
   // of active firing ids.  This is a bit slower.
   uint32_t low = mFiringIdStack[0];
   uint32_t high = mFiringIdStack.LastElement();
   MOZ_DIAGNOSTIC_ASSERT(low != high);
   if (low > high) {
     // If the first element is bigger than the last element in the
     // stack, that means mNextFiringId wrapped around to zero at
