# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  b7708d9cbc7e0426b5ccf21ee9957d0448c9bc9e

diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -227,37 +227,39 @@ ServiceWorkerRegistration::Update(ErrorR
     });
 
   return outer.forget();
 }
 
 already_AddRefed<Promise>
 ServiceWorkerRegistration::Unregister(ErrorResult& aRv)
 {
-  if (!mInner) {
-    aRv.Throw(NS_ERROR_DOM_INVALID_STATE_ERR);
-    return nullptr;
-  }
-
   nsIGlobalObject* global = GetParentObject();
-  if (!global) {
+  if (NS_WARN_IF(!global)) {
     aRv.Throw(NS_ERROR_DOM_INVALID_STATE_ERR);
     return nullptr;
   }
 
   RefPtr<Promise> outer = Promise::Create(global, aRv);
   if (NS_WARN_IF(aRv.Failed())) {
     return nullptr;
   }
 
+  if (!mInner) {
+    outer->MaybeResolve(false);
+    return outer.forget();
+  }
+
   mInner->Unregister(
     [outer] (bool aSuccess) {
       outer->MaybeResolve(aSuccess);
     }, [outer] (ErrorResult& aRv) {
-      outer->MaybeReject(aRv);
+      // register() should be resilient and resolve false instead
+      // of rejecting in most cases.
+      outer->MaybeResolve(false);
     });
 
   return outer.forget();
 }
 
 already_AddRefed<PushManager>
 ServiceWorkerRegistration::GetPushManager(JSContext* aCx, ErrorResult& aRv)
 {
