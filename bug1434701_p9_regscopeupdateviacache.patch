# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  c1ec9bf35eb577e1e0171e82138dd042ea380071
Bug 1434701 P9 move UpdateViaCache() into ServiceWorkerRegistration. r=catalinb

diff --git a/dom/serviceworkers/ServiceWorkerRegistration.cpp b/dom/serviceworkers/ServiceWorkerRegistration.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistration.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistration.cpp
@@ -125,10 +125,22 @@ ServiceWorkerRegistration::UpdateState(c
 
 bool
 ServiceWorkerRegistration::MatchesDescriptor(const ServiceWorkerRegistrationDescriptor& aDescriptor) const
 {
   return aDescriptor.PrincipalInfo() == mDescriptor.PrincipalInfo() &&
          aDescriptor.Scope() == mDescriptor.Scope();
 }
 
+void
+ServiceWorkerRegistration::GetScope(nsAString& aScope) const
+{
+  CopyUTF8toUTF16(mDescriptor.Scope(), aScope);
+}
+
+ServiceWorkerUpdateViaCache
+ServiceWorkerRegistration::GetUpdateViaCache(ErrorResult& aRv) const
+{
+  return mDescriptor.UpdateViaCache();
+}
+
 } // dom namespace
 } // mozilla namespace
diff --git a/dom/serviceworkers/ServiceWorkerRegistration.h b/dom/serviceworkers/ServiceWorkerRegistration.h
--- a/dom/serviceworkers/ServiceWorkerRegistration.h
+++ b/dom/serviceworkers/ServiceWorkerRegistration.h
@@ -54,21 +54,21 @@ public:
   GetActive() const;
 
   void
   UpdateState(const ServiceWorkerRegistrationDescriptor& aDescriptor);
 
   bool
   MatchesDescriptor(const ServiceWorkerRegistrationDescriptor& aDescriptor) const;
 
-  virtual void
-  GetScope(nsAString& aScope) const = 0;
+  void
+  GetScope(nsAString& aScope) const;
 
-  virtual ServiceWorkerUpdateViaCache
-  GetUpdateViaCache(ErrorResult& aRv) const = 0;
+  ServiceWorkerUpdateViaCache
+  GetUpdateViaCache(ErrorResult& aRv) const;
 
   virtual already_AddRefed<Promise>
   Update(ErrorResult& aRv) = 0;
 
   virtual already_AddRefed<Promise>
   Unregister(ErrorResult& aRv) = 0;
 
   virtual already_AddRefed<PushManager>
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationImpl.h b/dom/serviceworkers/ServiceWorkerRegistrationImpl.h
--- a/dom/serviceworkers/ServiceWorkerRegistrationImpl.h
+++ b/dom/serviceworkers/ServiceWorkerRegistrationImpl.h
@@ -73,55 +73,16 @@ public:
   RegistrationRemoved() override;
 
   void
   GetScope(nsAString& aScope) const override
   {
     aScope = mScope;
   }
 
-  ServiceWorkerUpdateViaCache
-  GetUpdateViaCache(ErrorResult& aRv) const override
-  {
-    RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
-    MOZ_ASSERT(swm);
-
-    nsCOMPtr<nsPIDOMWindowInner> window = GetOwner();
-    MOZ_ASSERT(window);
-
-    nsCOMPtr<nsIDocument> doc = window->GetExtantDoc();
-    MOZ_ASSERT(doc);
-
-    nsCOMPtr<nsIServiceWorkerRegistrationInfo> registration;
-    NS_ConvertUTF8toUTF16 scope(mDescriptor.Scope());
-    nsresult rv = swm->GetRegistrationByPrincipal(doc->NodePrincipal(), scope,
-                                                  getter_AddRefs(registration));
-
-    /*
-     *  xxx: We should probably store the `updateViaCache` value on the
-     *  ServiceWorkerRegistration object and update it when necessary.
-     *  We don't have a good way to reach all ServiceWorkerRegistration objects
-     *  from the ServiceWorkerRegistratinInfo right now, though.
-     *  This is a short term fix to avoid crashing.
-     */
-    if (NS_FAILED(rv) || !registration) {
-      aRv = NS_ERROR_DOM_INVALID_STATE_ERR;
-      return ServiceWorkerUpdateViaCache::None;
-    }
-
-    uint16_t updateViaCache;
-    rv = registration->GetUpdateViaCache(&updateViaCache);
-    MOZ_ASSERT(NS_SUCCEEDED(rv));
-
-    // Silence possible compiler warnings.
-    Unused << rv;
-
-    return static_cast<ServiceWorkerUpdateViaCache>(updateViaCache);
-  }
-
   bool
   MatchesDescriptor(const ServiceWorkerRegistrationDescriptor& aDescriptor) override;
 
 private:
   ~ServiceWorkerRegistrationMainThread();
 
   void
   StartListeningForEvents();
@@ -163,29 +124,16 @@ public:
                    const nsAString& aTitle,
                    const NotificationOptions& aOptions,
                    ErrorResult& aRv) override;
 
   already_AddRefed<Promise>
   GetNotifications(const GetNotificationOptions& aOptions,
                    ErrorResult& aRv) override;
 
-  void
-  GetScope(nsAString& aScope) const override
-  {
-    aScope = mScope;
-  }
-
-  ServiceWorkerUpdateViaCache
-  GetUpdateViaCache(ErrorResult& aRv) const override
-  {
-    // FIXME(hopang): Will be implemented after Bug 1113522.
-    return ServiceWorkerUpdateViaCache::Imports;
-  }
-
   bool
   Notify(WorkerStatus aStatus) override;
 
   already_AddRefed<PushManager>
   GetPushManager(JSContext* aCx, ErrorResult& aRv) override;
 
 private:
   ~ServiceWorkerRegistrationWorkerThread();
diff --git a/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp b/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
--- a/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
+++ b/dom/serviceworkers/ServiceWorkerRegistrationInfo.cpp
@@ -679,16 +679,17 @@ ServiceWorkerRegistrationInfo::GetUpdate
   return mDescriptor.UpdateViaCache();
 }
 
 void
 ServiceWorkerRegistrationInfo::SetUpdateViaCache(
     ServiceWorkerUpdateViaCache aUpdateViaCache)
 {
   mDescriptor.SetUpdateViaCache(aUpdateViaCache);
+  UpdateRegistrationState();
 }
 
 int64_t
 ServiceWorkerRegistrationInfo::GetLastUpdateTime() const
 {
   return mLastUpdateTime;
 }
 
diff --git a/dom/serviceworkers/test/test_bug1408734.html b/dom/serviceworkers/test/test_bug1408734.html
--- a/dom/serviceworkers/test/test_bug1408734.html
+++ b/dom/serviceworkers/test/test_bug1408734.html
@@ -43,23 +43,16 @@ add_task(async () => {
   registration = await navigator.serviceWorker.getRegistration("./");
   ok(registration, "should get the registration under scope './'");
 
   // call unregister()
   await registration.unregister();
 
   // access registration.updateViaCache to trigger the bug
   // we really care that we don't crash. In the future we will fix
-  // updateViaCache to be accessible after unregister().
-  try {
-    if (registration.updateViaCache) {
-      ok(false,
-         "Expected InvalidStateError when accessing registration.updateViaCache after unregister()");
-    }
-  } catch (err) {
-    is(err.name, "InvalidStateError", "Expected InvalidStateError.");
-  }
+  is(registration.updateViaCache, "imports",
+     "registration.updateViaCache should work after unregister()");
 });
 
 </script>
 </pre>
 </body>
 </html>
