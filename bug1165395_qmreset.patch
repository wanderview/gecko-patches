# HG changeset patch
# Parent b6a80954b74eb37be1ced414b0a78cca329aade1
# User Ben Kelly <ben@wanderview.com>
Bug 1165395 Test Cache API after QuotaManager reset. r=janv


diff --git a/dom/cache/test/mochitest/mochitest.ini b/dom/cache/test/mochitest/mochitest.ini
--- a/dom/cache/test/mochitest/mochitest.ini
+++ b/dom/cache/test/mochitest/mochitest.ini
@@ -28,8 +28,9 @@ support-files =
 [test_cache_overwrite.html]
 [test_cache_match_vary.html]
 [test_caches.html]
 [test_cache_keys.html]
 [test_cache_put.html]
 [test_cache_requestCache.html]
 [test_cache_delete.html]
 [test_cache_put_reorder.html]
+[test_cache_restart.html]
diff --git a/dom/cache/test/mochitest/test_cache_restart.html b/dom/cache/test/mochitest/test_cache_restart.html
new file mode 100644
--- /dev/null
+++ b/dom/cache/test/mochitest/test_cache_restart.html
@@ -0,0 +1,61 @@
+<!-- Any copyright is dedicated to the Public Domain.
+   - http://creativecommons.org/publicdomain/zero/1.0/ -->
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Test Cache with QuotaManager Restart</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body>
+<script class="testbody" type="text/javascript">
+function resetStorage() {
+  return new Promise(function(resolve, reject) {
+    var principal = SpecialPowers.wrap(document).nodePrincipal;
+    var appId, inBrowser;
+    var nsIPrincipal = SpecialPowers.Components.interfaces.nsIPrincipal;
+    if (principal.appId != nsIPrincipal.UNKNOWN_APP_ID &&
+        principal.appId != nsIPrincipal.NO_APP_ID) {
+      appId = principal.appId;
+      inBrowser = principal.isInBrowserElement;
+    }
+    SpecialPowers.resetStorageForURI(document.documentURI, resolve, appId,
+                                     inBrowser);
+  });
+}
+
+SimpleTest.waitForExplicitFinish();
+SpecialPowers.pushPrefEnv({
+  "set": [["dom.caches.enabled", true],
+          ["dom.quotaManager.testing", true]],
+}, function() {
+  var name = 'foo';
+  var url = './test_cache_add.js';
+  var cache;
+  caches.open(name).then(function(c) {
+    cache = c;
+    return cache.add(url);
+  }).then(function() {
+    return resetStorage();
+  }).then(function() {
+    return cache.match(url).then(function(resp) {
+      ok(false, 'old cache reference should not work after reset');
+    }).catch(function(err) {
+      ok(true, 'old cache reference should not work after reset');
+    });
+  }).then(function() {
+    return caches.open(name);
+  }).then(function(c) {
+    cache = c;
+    return cache.match(url);
+  }).then(function(resp) {
+    ok(!!resp, 'cache should work after QM reset');
+    return caches.delete(name);
+  }).then(function(success) {
+    ok(success, 'cache should be deleted');
+    SimpleTest.finish();
+  });
+});
+</script>
+</body>
+</html>
diff --git a/testing/specialpowers/content/SpecialPowersObserverAPI.js b/testing/specialpowers/content/SpecialPowersObserverAPI.js
--- a/testing/specialpowers/content/SpecialPowersObserverAPI.js
+++ b/testing/specialpowers/content/SpecialPowersObserverAPI.js
@@ -492,30 +492,32 @@ SpecialPowersObserverAPI.prototype = {
                    .getService(Ci.nsIQuotaManager);
         let mm = aMessage.target
                          .QueryInterface(Ci.nsIFrameLoaderOwner)
                          .frameLoader
                          .messageManager;
         let msg = aMessage.data;
         let op = msg.op;
 
-        if (op != 'clear' && op != 'getUsage') {
+        if (op != 'clear' && op != 'getUsage' && op != 'reset') {
           throw new SpecialPowersError('Invalid operation for SPQuotaManager');
         }
 
         let uri = this._getURI(msg.uri);
 
         if (op == 'clear') {
           if (('inBrowser' in msg) && msg.inBrowser !== undefined) {
             qm.clearStoragesForURI(uri, msg.appId, msg.inBrowser);
           } else if (('appId' in msg) && msg.appId !== undefined) {
             qm.clearStoragesForURI(uri, msg.appId);
           } else {
             qm.clearStoragesForURI(uri);
           }
+        } else if (op == 'reset') {
+          qm.reset();
         }
 
         // We always use the getUsageForURI callback even if we're clearing
         // since we know that clear and getUsageForURI are synchronized by the
         // QuotaManager.
         let callback = function(uri, usage, fileUsage) {
           let reply = { id: msg.id };
           if (op == 'getUsage') {
diff --git a/testing/specialpowers/content/specialpowersAPI.js b/testing/specialpowers/content/specialpowersAPI.js
--- a/testing/specialpowers/content/specialpowersAPI.js
+++ b/testing/specialpowers/content/specialpowersAPI.js
@@ -1884,16 +1884,23 @@ SpecialPowersAPI.prototype = {
   clearStorageForURI: function(uri, callback, appId, inBrowser) {
     this._quotaManagerRequest('clear', uri, appId, inBrowser, callback);
   },
 
   getStorageUsageForURI: function(uri, callback, appId, inBrowser) {
     this._quotaManagerRequest('getUsage', uri, appId, inBrowser, callback);
   },
 
+  // Technically this restarts the QuotaManager for all URIs, but we need
+  // a specific one to perform the synchronized callback when the reset is
+  // complete.
+  resetStorageForURI: function(uri, callback, appId, inBrowser) {
+    this._quotaManagerRequest('reset', uri, appId, inBrowser, callback);
+  },
+
   _quotaManagerRequest: function(op, uri, appId, inBrowser, callback) {
     const messageTopic = "SPQuotaManager";
 
     if (uri instanceof Ci.nsIURI) {
       uri = uri.spec;
     }
 
     const id = Cc["@mozilla.org/uuid-generator;1"]
