# HG changeset patch
# User Ben Kelly <ben@wanderview.com>
# Parent  16f152841d11cc938216319780c451bb026f61f5
Bug 1465670 P1 Make importScripts() called in a service worker script after install throw NetworkError. r=asuth

diff --git a/dom/workers/ScriptLoader.cpp b/dom/workers/ScriptLoader.cpp
--- a/dom/workers/ScriptLoader.cpp
+++ b/dom/workers/ScriptLoader.cpp
@@ -404,17 +404,16 @@ class CacheCreator final : public Promis
 public:
   NS_DECL_ISUPPORTS
 
   explicit CacheCreator(WorkerPrivate* aWorkerPrivate)
     : mCacheName(aWorkerPrivate->ServiceWorkerCacheName())
     , mOriginAttributes(aWorkerPrivate->GetOriginAttributes())
   {
     MOZ_ASSERT(aWorkerPrivate->IsServiceWorker());
-    MOZ_ASSERT(aWorkerPrivate->LoadScriptAsPartOfLoadingServiceWorkerScript());
     AssertIsOnMainThread();
   }
 
   void
   AddLoader(CacheScriptLoader* aLoader)
   {
     AssertIsOnMainThread();
     MOZ_ASSERT(!mCacheStorage);
@@ -832,16 +831,22 @@ private:
   }
 
   bool
   IsMainWorkerScript() const
   {
     return mIsMainScript && mWorkerScriptType == WorkerScript;
   }
 
+  bool
+  IsDebuggerScript() const
+  {
+    return mWorkerScriptType == DebuggerScript;
+  }
+
   void
   CancelMainThreadWithBindingAborted()
   {
     CancelMainThread(NS_BINDING_ABORTED);
   }
 
   void
   CancelMainThread(nsresult aCancelResult)
@@ -907,18 +912,17 @@ private:
   RunInternal()
   {
     AssertIsOnMainThread();
 
     if (IsMainWorkerScript() && mWorkerPrivate->IsServiceWorker()) {
       mWorkerPrivate->SetLoadingWorkerScript(true);
     }
 
-    if (!mWorkerPrivate->IsServiceWorker() ||
-        !mWorkerPrivate->LoadScriptAsPartOfLoadingServiceWorkerScript()) {
+    if (!mWorkerPrivate->IsServiceWorker() || IsDebuggerScript()) {
       for (uint32_t index = 0, len = mLoadInfos.Length(); index < len;
            ++index) {
         nsresult rv = LoadScript(index);
         if (NS_WARN_IF(NS_FAILED(rv))) {
           LoadingFinished(index, rv);
           return rv;
         }
       }
@@ -1784,19 +1788,22 @@ CacheScriptLoader::ResolvedCallback(JSCo
 
   // The ServiceWorkerScriptCache will store data for any scripts it
   // it knows about.  This is always at least the top level script.
   // Depending on if a previous version of the service worker has
   // been installed or not it may also know about importScripts().  We
   // must handle loading and offlining new importScripts() here, however.
   if (aValue.isUndefined()) {
     // If this is the main script or we're not loading a new service worker
-    // then this is an error.  The storage was probably wiped without
-    // removing the service worker registration.
-    if (NS_WARN_IF(mIsWorkerScript || mState != ServiceWorkerState::Parsed)) {
+    // then this is an error.  This can happen for internal reasons, like
+    // storage was probably wiped without removing the service worker
+    // registration.  It can also happen for exposed reasons like the
+    // service worker script calling importScripts() after install.
+    if (NS_WARN_IF(mIsWorkerScript || (mState != ServiceWorkerState::Parsed &&
+                                       mState != ServiceWorkerState::Installing))) {
       Fail(NS_ERROR_DOM_INVALID_STATE_ERR);
       return;
     }
 
     mLoadInfo.mCacheStatus = ScriptLoadInfo::ToBeCached;
     rv = mRunnable->LoadScript(mIndex);
     if (NS_WARN_IF(NS_FAILED(rv))) {
       Fail(rv);
