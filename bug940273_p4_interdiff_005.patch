# HG changeset patch
# Parent 46aa2f2b64c0aff1800969f0c158cd10be0a4f4c
# User Ben Kelly <ben@wanderview.com>
Bug 940273 P4 interdiff 005 CacheStorageChild.(h|cpp) issues and remove CacheStorageChildListener.h

diff --git a/dom/cache/CacheStorage.cpp b/dom/cache/CacheStorage.cpp
--- a/dom/cache/CacheStorage.cpp
+++ b/dom/cache/CacheStorage.cpp
@@ -353,17 +353,17 @@ CacheStorage::WrapObject(JSContext* aCon
 }
 
 void
 CacheStorage::ActorCreated(PBackgroundChild* aActor)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
   MOZ_ASSERT(aActor);
 
-  CacheStorageChild* newActor = new CacheStorageChild(*this);
+  CacheStorageChild* newActor = new CacheStorageChild(this);
   if (NS_WARN_IF(!newActor)) {
     ActorFailed();
     return;
   }
 
   PCacheStorageChild* constructedActor =
     aActor->SendPCacheStorageConstructor(newActor, mNamespace, *mPrincipalInfo);
 
@@ -431,21 +431,21 @@ CacheStorage::ActorFailed()
       continue;
     }
     promise->MaybeReject(NS_ERROR_UNEXPECTED);
   }
   mPendingRequests.Clear();
 }
 
 void
-CacheStorage::ActorDestroy(IProtocol& aActor)
+CacheStorage::ActorDestroy(IProtocol* aActor)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
   MOZ_ASSERT(mActor);
-  MOZ_ASSERT(mActor == &aActor);
+  MOZ_ASSERT(mActor == aActor);
   mActor->ClearListener();
   mActor = nullptr;
 
   // Note that we will never get an actor again in case another request is
   // made before this object is destructed.
   ActorFailed();
 }
 
@@ -579,20 +579,20 @@ CacheStorage::AssertOwningThread() const
 }
 #endif
 
 CacheStorage::~CacheStorage()
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
 
   if (mActor) {
-    mActor->ClearListener();
     PCacheStorageChild::Send__delete__(mActor);
-    // The actor will be deleted by the IPC manager
-    mActor = nullptr;
+    // ActorDestroy() is called synchronously by Send__delete__().  So we
+    // should have already cleared the mActor.
+    MOZ_ASSERT(!mActor);
   }
 }
 
 RequestId
 CacheStorage::AddRequestPromise(Promise* aPromise, ErrorResult& aRv)
 {
   NS_ASSERT_OWNINGTHREAD(CacheStorage);
   MOZ_ASSERT(aPromise);
diff --git a/dom/cache/CacheStorage.h b/dom/cache/CacheStorage.h
--- a/dom/cache/CacheStorage.h
+++ b/dom/cache/CacheStorage.h
@@ -3,17 +3,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_cache_CacheStorage_h
 #define mozilla_dom_cache_CacheStorage_h
 
 #include "mozilla/dom/CacheBinding.h"
-#include "mozilla/dom/cache/CacheStorageChildListener.h"
 #include "mozilla/dom/cache/Types.h"
 #include "mozilla/dom/cache/TypeUtils.h"
 #include "nsAutoPtr.h"
 #include "nsCOMPtr.h"
 #include "nsISupportsImpl.h"
 #include "nsTArray.h"
 #include "nsWrapperCache.h"
 #include "nsIIPCBackgroundChildCreateCallback.h"
@@ -35,21 +34,22 @@ class Promise;
 
 namespace workers {
   class WorkerPrivate;
 }
 
 namespace cache {
 
 class CacheStorageChild;
+class PCacheChild;
 class PCacheRequest;
+class PCacheResponseOrVoid;
 
 class CacheStorage MOZ_FINAL : public nsIIPCBackgroundChildCreateCallback
                              , public nsWrapperCache
-                             , public CacheStorageChildListener
                              , public TypeUtils
 {
   typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
 
 public:
   static already_AddRefed<CacheStorage>
   CreateOnMainThread(Namespace aNamespace, nsIGlobalObject* aGlobal,
                      nsIPrincipal* aPrincipal, ErrorResult& aRv);
@@ -72,28 +72,28 @@ public:
 
   virtual nsISupports* GetParentObject() const;
   virtual JSObject* WrapObject(JSContext* aContext) MOZ_OVERRIDE;
 
   // nsIIPCbackgroundChildCreateCallback methods
   virtual void ActorCreated(PBackgroundChild* aActor) MOZ_OVERRIDE;
   virtual void ActorFailed() MOZ_OVERRIDE;
 
-  // CacheStorageChildListener methods
-  virtual void ActorDestroy(mozilla::ipc::IProtocol& aActor) MOZ_OVERRIDE;
+  // Methods forwarded from CacheStorageChild
+  virtual void ActorDestroy(mozilla::ipc::IProtocol* aActor);
   virtual void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
-                           const PCacheResponseOrVoid& aResponse) MOZ_OVERRIDE;
+                           const PCacheResponseOrVoid& aResponse);
   virtual void RecvHasResponse(RequestId aRequestId, nsresult aRv,
-                               bool aSuccess) MOZ_OVERRIDE;
+                               bool aSuccess);
   virtual void RecvOpenResponse(RequestId aRequestId, nsresult aRv,
-                                PCacheChild* aActor) MOZ_OVERRIDE;
+                                PCacheChild* aActor);
   virtual void RecvDeleteResponse(RequestId aRequestId, nsresult aRv,
-                                  bool aSuccess) MOZ_OVERRIDE;
+                                  bool aSuccess);
   virtual void RecvKeysResponse(RequestId aRequestId, nsresult aRv,
-                                const nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
+                                const nsTArray<nsString>& aKeys);
 
   // TypeUtils method
   virtual nsIGlobalObject* GetGlobalObject() const MOZ_OVERRIDE;
   virtual const nsACString& Origin() const MOZ_OVERRIDE;
 #ifdef DEBUG
   virtual void AssertOwningThread() const MOZ_OVERRIDE;
 #endif
 
diff --git a/dom/cache/CacheStorageChild.cpp b/dom/cache/CacheStorageChild.cpp
--- a/dom/cache/CacheStorageChild.cpp
+++ b/dom/cache/CacheStorageChild.cpp
@@ -1,94 +1,104 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/dom/cache/CacheStorageChild.h"
 
-#include "mozilla/dom/cache/CacheStorageChildListener.h"
+#include "mozilla/dom/cache/CacheStorage.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-CacheStorageChild::CacheStorageChild(CacheStorageChildListener& aListener)
-  : mListener(&aListener)
+CacheStorageChild::CacheStorageChild(CacheStorage* aListener)
+  : mListener(aListener)
 {
+  MOZ_ASSERT(mListener);
 }
 
 CacheStorageChild::~CacheStorageChild()
 {
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(!mListener);
 }
 
 void
+CacheStorageChild::ClearListener()
+{
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
+  MOZ_ASSERT(mListener);
+  mListener = nullptr;
+}
+
+void
 CacheStorageChild::ActorDestroy(ActorDestroyReason aReason)
 {
-  // If the listener is destroyed before we are, then they will clear
-  // their registration.
-  if (mListener) {
-    mListener->ActorDestroy(*this);
-  }
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
+  MOZ_ASSERT(mListener);
+
+  mListener->ActorDestroy(this);
+
+  // CacheStorage listener should call ClearListener() in ActorDestroy()
+  MOZ_ASSERT(!mListener);
 }
 
 bool
 CacheStorageChild::RecvMatchResponse(const RequestId& aRequestId,
                                      const nsresult& aRv,
                                      const PCacheResponseOrVoid& aResponseOrVoid)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(mListener);
   mListener->RecvMatchResponse(aRequestId, aRv, aResponseOrVoid);
   return true;
 }
 
 bool
 CacheStorageChild::RecvHasResponse(const RequestId& aRequestId,
                                    const nsresult& aRv,
                                    const bool& aSuccess)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(mListener);
   mListener->RecvHasResponse(aRequestId, aRv, aSuccess);
   return true;
 }
 
 bool
 CacheStorageChild::RecvOpenResponse(const RequestId& aRequestId,
                                     const nsresult& aRv,
                                     PCacheChild* aActor)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(mListener);
   mListener->RecvOpenResponse(aRequestId, aRv, aActor);
   return true;
 }
 
 bool
 CacheStorageChild::RecvDeleteResponse(const RequestId& aRequestId,
                                       const nsresult& aRv,
                                       const bool& aResult)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(mListener);
   mListener->RecvDeleteResponse(aRequestId, aRv, aResult);
   return true;
 }
 
 bool
 CacheStorageChild::RecvKeysResponse(const RequestId& aRequestId,
                                     const nsresult& aRv,
                                     const nsTArray<nsString>& aKeys)
 {
+  NS_ASSERT_OWNINGTHREAD(CacheStorageChild);
   MOZ_ASSERT(mListener);
   mListener->RecvKeysResponse(aRequestId, aRv, aKeys);
   return true;
 }
 
-void
-CacheStorageChild::ClearListener()
-{
-  MOZ_ASSERT(mListener);
-  mListener = nullptr;
-}
-
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/cache/CacheStorageChild.h b/dom/cache/CacheStorageChild.h
--- a/dom/cache/CacheStorageChild.h
+++ b/dom/cache/CacheStorageChild.h
@@ -9,24 +9,32 @@
 
 #include "mozilla/dom/cache/Types.h"
 #include "mozilla/dom/cache/PCacheStorageChild.h"
 
 namespace mozilla {
 namespace dom {
 namespace cache {
 
-class CacheStorageChildListener;
+class CacheStorage;
 class PCacheChild;
 
 class CacheStorageChild MOZ_FINAL : public PCacheStorageChild
 {
 public:
-  CacheStorageChild(CacheStorageChildListener& aListener);
-  virtual ~CacheStorageChild();
+  explicit CacheStorageChild(CacheStorage* aListener);
+  ~CacheStorageChild();
+
+  // Must be called by the associated CacheStorage listener in its
+  // ActorDestroy() method.  Also, CacheStorage must Send__delete__() the
+  // actor in its destructor to trigger ActorDestroy() if it has not been
+  // called yet.
+  void ClearListener();
+
+  // PCacheStorageChild methods
   virtual void ActorDestroy(ActorDestroyReason aReason) MOZ_OVERRIDE;
   virtual bool RecvMatchResponse(const RequestId& requestId,
                              const nsresult& aRv,
                              const PCacheResponseOrVoid& response) MOZ_OVERRIDE;
   virtual bool RecvHasResponse(const cache::RequestId& aRequestId,
                                const nsresult& aRv,
                                const bool& aSuccess) MOZ_OVERRIDE;
   virtual bool RecvOpenResponse(const cache::RequestId& aRequestId,
@@ -34,18 +42,22 @@ public:
                                 PCacheChild* aActor) MOZ_OVERRIDE;
   virtual bool RecvDeleteResponse(const cache::RequestId& aRequestId,
                                   const nsresult& aRv,
                                   const bool& aResult) MOZ_OVERRIDE;
   virtual bool RecvKeysResponse(const cache::RequestId& aRequestId,
                                 const nsresult& aRv,
                                 const nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
 
-  void ClearListener();
 private:
-  CacheStorageChildListener* mListener;
+  // Use a weak ref so actor does not hold DOM object alive past content use.
+  // The CacheStorage object must call ClearListener() to null this before its
+  // destroyed.
+  CacheStorage* mListener;
+
+  NS_DECL_OWNINGTHREAD
 };
 
 } // namespace cache
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_cache_CacheStorageChild_h
diff --git a/dom/cache/CacheStorageChildListener.h b/dom/cache/CacheStorageChildListener.h
deleted file mode 100644
--- a/dom/cache/CacheStorageChildListener.h
+++ /dev/null
@@ -1,49 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=8 sts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#ifndef mozilla_dom_cache_CacheStorageChildListener_h
-#define mozilla_dom_cache_CacheStorageChildListener_h
-
-#include "mozilla/dom/cache/Types.h"
-#include "nsError.h"
-#include "nsString.h"
-
-template<class T> class nsTArray;
-
-namespace mozilla {
-
-namespace ipc {
-  class IProtocol;
-}
-
-namespace dom {
-namespace cache {
-
-class PCacheChild;
-class PCacheResponseOrVoid;
-
-class CacheStorageChildListener
-{
-public:
-  virtual ~CacheStorageChildListener() { }
-  virtual void ActorDestroy(mozilla::ipc::IProtocol& aActor)=0;
-  virtual void RecvMatchResponse(RequestId aRequestId, nsresult aRv,
-                                 const PCacheResponseOrVoid& aResponse)=0;
-  virtual void RecvHasResponse(cache::RequestId aRequestId, nsresult aRv,
-                               bool aSuccess)=0;
-  virtual void RecvOpenResponse(cache::RequestId aRequestId, nsresult aRv,
-                                PCacheChild* aActor)=0;
-  virtual void RecvDeleteResponse(cache::RequestId aRequestId, nsresult aRv,
-                                  bool aSuccess)=0;
-  virtual void RecvKeysResponse(cache::RequestId aRequestId, nsresult aRv,
-                                const nsTArray<nsString>& aKeys)=0;
-};
-
-} // namespace cache
-} // namespace dom
-} // namespace mozilla
-
-#endif // mozilla_dom_cache_CacheStorageChildListener_h
diff --git a/dom/cache/moz.build b/dom/cache/moz.build
--- a/dom/cache/moz.build
+++ b/dom/cache/moz.build
@@ -7,17 +7,16 @@
 EXPORTS.mozilla.dom.cache += [
     'Action.h',
     'Cache.h',
     'CacheChild.h',
     'CacheChildListener.h',
     'CacheParent.h',
     'CacheStorage.h',
     'CacheStorageChild.h',
-    'CacheStorageChildListener.h',
     'CacheStorageParent.h',
     'CacheStreamControlChild.h',
     'CacheStreamControlListener.h',
     'CacheStreamControlParent.h',
     'Context.h',
     'DBAction.h',
     'DBSchema.h',
     'FetchPut.h',
